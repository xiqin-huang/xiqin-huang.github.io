{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"mysql\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0/",
            "url": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0/",
            "title": "数据库练习",
            "date_published": "2023-10-12T10:49:32.916Z",
            "content_html": "<h2 id=\"牛客\"><a class=\"markdownIt-Anchor\" href=\"#牛客\">#</a> 牛客</h2>\n<p><strong>like 表示模糊查找</strong></p>\n<p>浮点数的平均值可能小数点位数很多，按照示例保存一位小数，用 round 函数</p>\n<p>多个条件进行分组： <code>group by university,gender;</code></p>\n<p>where 在 group by 前执行，所以需要用 having，而 order by 在 group by 后，所以可以不用 having。</p>\n<p>每张表都需要有别名</p>\n<p>多个条件判断： <code>case when then</code></p>\n<p>日期函数 day () 取日，month () 取月份，datediff 求两个日期之间的差</p>\n<h3 id=\"常见例题\"><a class=\"markdownIt-Anchor\" href=\"#常见例题\">#</a> 常见例题</h3>\n<p>年龄在 20 到 23 之间： <code>SELECT device_id,gender,age from user_profile where age between 20 and 23</code></p>\n<p>用 where 过滤空值练习： <code>select device_id,gender,age,university from user_profile where age is not null;</code></p>\n<p>查看学校名称中含北京的用户： <code>select device_id,age,university from user_profile where university like '%北京%';</code></p>\n<p>统计每个学校的答过题的用户的平均答题数：首先构造出一张以 device_id 为分组的表，然后以该表为主表，进行链接，然后根据学校进行分组，使用 sum 和 count（1）即可，或者  <code>(count(question_id)/count(distinct(qpd.device_id)))</code>  直接使用 count<br>\nSELECT DISTINCT Company FROM Orders： distinct 关键字表示只取一次，去重<br>\n结果不去重只需 union all 将两张表连接在一起。</p>\n<p>选取文本中的最右的元素： <code>substring_index(profile,',',-1)</code></p>\n<p>查找倒数第二个元素需要两层： <code>SUBSTRING_INDEX(SUBSTRING_INDEX(profile,',',-2),',',1)AS age;</code></p>\n<h2 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\">#</a> day1</h2>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<p>verchar 和 char 的区别：verchar 存储时变长，最多容纳 65535 个字节；char 固定长度，最多容纳 255 个字符。</p>\n<p>在配置文件（my.cnf）中加入如下配置： <code>sql-mode=&quot;NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</code>  保存并重启即可进入非严格模式</p>\n<p>长的文本：text</p>\n<p>创建表： <code>create table L3(id int not null primary key auto_increment,name varchar(5),depart char(3))default charset=utf8;</code></p>\n<p>插入元素： <code>insert into L3(name,depart) values(&quot;alex&quot;,&quot;sb&quot;);</code></p>\n<h3 id=\"增删改查\"><a class=\"markdownIt-Anchor\" href=\"#增删改查\">#</a> 增删改查</h3>\n<p>新增数据： <code>insert into L2(salary) values(5.289);</code></p>\n<p>删除数据： <code>delete from L3 where name=&quot;alex&quot; and id=1;</code>  。删除 name=alex 的数据，and 链接多个条件</p>\n<p>更新数据： <code>update L2 set salary=1.99 where id=1;</code> 。 <code>update L3 set name=concat(name,&quot;3&quot;) where id=2；</code>  。PS：concat 函数用于拼接字符串</p>\n<p>查找数据： <code>select id,name from L3 where id=2;</code></p>\n<p>显示一列标题为 age 的 111： <code>select id,name,111 as age from L3;</code></p>\n<h3 id=\"小数\"><a class=\"markdownIt-Anchor\" href=\"#小数\">#</a> 小数</h3>\n<p>decimal (8,2) 表示数字位有 8 位（不包含负号），小数位保留 2 位。</p>\n<p>小数位数过多会自动四舍五入，整数部分超过会报错</p>\n<p>插入元素： <code>insert into L2(salary) values(5.289);</code></p>\n<p>新建表： <code>create table L2(id int not null primary key auto_increment,salary decimal(8,2))default charset=utf8;</code></p>\n<h3 id=\"时间\"><a class=\"markdownIt-Anchor\" href=\"#时间\">#</a> 时间</h3>\n<p>timestamp 和 datetime 相比：除了表示的范围更小外，所存储的方式也不同，是根据当前时区再进行转换，而 datetime 是直接存储。</p>\n<p>此外还有 date 和 time</p>\n<p>创建表： <code>create table L5(id int not null primary key auto_increment,dt datetime,tt timestamp)default charset=utf8;</code></p>\n<p>插入表： <code>insert into L5(dt,tt) values(&quot;2025-11-11 11:11:14&quot;,&quot;2025-11-11 11:11:14&quot;);</code></p>\n<h3 id=\"今日总结\"><a class=\"markdownIt-Anchor\" href=\"#今日总结\">#</a> 今日总结</h3>\n<p>修改表： <code>alter table L6 add amount decimal(10,2) default 0 not null;</code></p>\n<p>删除表： <code>alter table L6 drop aaa;</code></p>\n<p>插入记录： <code>insert into L6(name,password,gender,email,crime,amount) values(&quot;xiqin4&quot;,&quot;dsasa&quot;,0,&quot;7444545@qq.com&quot;,&quot;2020-7-1 11:11:14&quot;,100);</code></p>\n<p>更新记录： <code>update L6 set gender=1 where id&gt;3;</code></p>\n<p>查看： <code>select * from L6 where amount&gt;1000;</code></p>\n<p>更新： <code>update L6 set amount=amount+1000;</code></p>\n<p>删除： <code>delete from L6 where gender=1;</code></p>\n<p>创建表：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table L6(</span><br><span class=\"line\">    id int not null primary key auto_increment,</span><br><span class=\"line\">    name varchar(32) not null,</span><br><span class=\"line\">    password varchar(64) not null,</span><br><span class=\"line\">    gender char(2) check(gender in (0,1)),</span><br><span class=\"line\">    email varchar(64),</span><br><span class=\"line\">    crime datetime</span><br><span class=\"line\">)default charset=utf8;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\">#</a> day2</h2>\n<h3 id=\"左右连表\"><a class=\"markdownIt-Anchor\" href=\"#左右连表\">#</a> 左右连表</h3>\n<p>以 info 作为主表，将 depart 进行左链接，根据 depart.id 进行： <code>select * from info left outer join depart on info.depart_id = depart.id;</code></p>\n<p>指定选中的数据进行展示： <code>select info.id,info.name,info.email,depart.title from info left outer join depart on info.depart_id = depart.id;</code></p>\n<p>将 left 改成 right 就是右链接： <code>select info.id,info.name,info.email,depart.title from info right outer join depart on info.depart_id = depart.id;</code></p>\n<p>从表 right outer join 主表 on <a class=\"link\"   href=\"http://xn--tiq313l.x=%E4%BB%8E%E8%A1%A8.id\" >主表.x = 从表.id <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>当主表中存在从表中没有的信息，则会产生区别；</p>\n<p>简写 outer 可以省略</p>\n<p>内链接：两张表进行链接，没有分主从，根据条件进行匹配：select * from info inner join depart on info.depart_id = <a class=\"link\"   href=\"http://depart.id\" >depart.id <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>;</p>\n<h3 id=\"指定列映射\"><a class=\"markdownIt-Anchor\" href=\"#指定列映射\">#</a> 指定列（映射）</h3>\n<p>帮 name 写别名 NM，并新增一列 123： <code>select id,name as NM,123 from info ;</code></p>\n<p>条件语句： <code>select id,name,case when age&lt;18 then &quot;少年&quot; when age&lt;30 then &quot;青年&quot; else &quot;老年&quot; end v6 from info;</code></p>\n<h3 id=\"用户授权管理\"><a class=\"markdownIt-Anchor\" href=\"#用户授权管理\">#</a> 用户授权管理</h3>\n<p><strong>用户</strong></p>\n<ul>\n<li>查看用户信息： <code>select user,authentication_string,host from mysql.user;</code></li>\n<li>查看用户和权限信息： <code>desc mysql.user;</code></li>\n<li>新建用户： <code>create user '用户名'@'连接者的IP地址' identified by '密码'</code>  。PS：'' 号可加可不加</li>\n<li><code>create user xiqin@127.0.0.1 identified by '159123zxc'</code>  。解析：127.0.0.%：% 意味可以匹配任何值；地址为 % 意味所有地址都可以</li>\n<li>删除用户： <code>drop user xiqin@127.0.0.1;</code></li>\n<li>修改用户： <code>rename user 'xiqin'@'127.0.0.1' to 'huangyuqin'@'localhost';</code></li>\n<li>修改密码： <code>set password for 'huangyuqin'@'localhost'=Password('123123');</code></li>\n</ul>\n<p><strong>授权</strong></p>\n<ul>\n<li>grant 权限 on 数据库。表 to ‘用户’@‘IP 地址’;</li>\n<li>给用户 huangyuqin 用有数据库 day26db 中 info 表的查找和插入权限： <code>grant select,insert on day26db.info to 'huangyuqin'@'localhost';</code></li>\n<li>给用户 huangyuqin 拥有数据库的所有权限： <code>grant all privileges on *.* to 'huangyuqin'@'localhost';</code></li>\n<li>此时还没有真正生效，输入： <code>flush privileges;</code>  。将数据读入内存，从而立即生效。</li>\n<li>选择不同的用户进行登录： <code>&quot;C:\\Program Files\\mysql-5.7.31-winx64\\bin\\mysql.exe&quot; -h 127.0.0.1 -P 3306 -u huangyuqin -p</code></li>\n<li>查看授权： <code>show grants for 'huangyuqin'@'localhost';</code></li>\n<li>取消授权： <code>revoke INSERT on day26db.info from 'huangyuqin'@'localhost';</code></li>\n<li>需要在管理员权限下使用</li>\n</ul>\n<h3 id=\"通配符\"><a class=\"markdownIt-Anchor\" href=\"#通配符\">#</a> 通配符</h3>\n<p>通配符主要用于模糊查找：</p>\n<p>% 号表示 n 个字符，可以为 0 个： <code>select * from info where name like &quot;%明%&quot;;</code> _号表示一个字符： <code>select * from info where name like &quot;_明%&quot;;</code></p>\n<p>注意：数据少时可以使用，数据量大时不要使用，因为效率很低。</p>\n<h3 id=\"上下连表和取部分\"><a class=\"markdownIt-Anchor\" href=\"#上下连表和取部分\">#</a> 上下连表和取部分</h3>\n<p><code>select id,title from depart union select id,name from info;</code></p>\n<p>列数需相同，会自动去重。union all 则不去重</p>\n<p>获取前五条数据：select * from info limit 5;</p>\n<p>从位置 2 开始，向后获取前 5 条数据： <code>select * from info limit 3 offset 2;</code></p>\n<p>可以用于分页显示</p>\n<h3 id=\"排序和分组\"><a class=\"markdownIt-Anchor\" href=\"#排序和分组\">#</a> 排序和分组</h3>\n<p>desc 倒序排列，顺序排列，通常是得到结果再进行排序</p>\n<p>优先按照 age 从小到大，age 相等则 id 从大到小： <code>select * from info order by age asc,id desc;</code></p>\n<p>将 age 相同的进行分组，遇到需要取舍的时候，选择 ID 更大的，同理还可以替换成 max (id),min (id),count (id),sum (id),avg (id)：select age,count (1) from info group by age;</p>\n<p>对已经分组的数组，取其中 2 个以上的分组： <code>select depart_id,count(id) from info group by depart_id having count(id)&gt;2;</code></p>\n<h3 id=\"表关系\"><a class=\"markdownIt-Anchor\" href=\"#表关系\">#</a> 表关系</h3>\n<p>约束 depart_id 和 depart 中的 id，用于初始化的时候： <code>constraint fk_info_depart foreign key (depart_id) reference depart(id);</code></p>\n<p>表结构已创建，额外增加外键： <code>alter table info add constraint fk_info_depart foreign key info(depart_id) references depart(id);</code></p>\n<p>删除外键： <code>alter table info drop foreign key fk_info_depart;</code></p>\n<h3 id=\"sql语句优先级\"><a class=\"markdownIt-Anchor\" href=\"#sql语句优先级\">#</a> SQL 语句优先级</h3>\n<p>优先级从高到低：join-&gt;on-&gt;where-&gt;group by-&gt;having-&gt;order by-&gt;limit</p>\n<p>例子： <code>select age,count(id) from info where id&gt;2 group by age having count(id)&gt;1 order by age desc limit 1;</code></p>\n<h2 id=\"day3\"><a class=\"markdownIt-Anchor\" href=\"#day3\">#</a> day3</h2>\n<h3 id=\"表的数据的导入和导出\"><a class=\"markdownIt-Anchor\" href=\"#表的数据的导入和导出\">#</a> 表的数据的导入和导出</h3>\n<p>先判断是否存在，再进行删除： <code>drop database if exist day27db;</code></p>\n<p>导入文件：注意斜杠： <code>source /Users/86136/Desktop/数据库/第三天/day27db.sql;</code></p>\n<p>只能导入数据表，不能插入数据，不知道是什么问题，可能是主键导致的问题，暂时先不处理</p>\n<p>查询姓李的老师个数： <code>select * from teacher where tname like '李%';</code></p>\n<p>查询男生和女生的人数： <code>select gender,count(1) from student group by gender;</code></p>\n<p>查询 “三年二班” 的所有学生： <code>select * from student left join class on student.class_id = class.cid where class.caption='三年二班';</code></p>\n<p>查询每个班级的班级名称、班级人数： <code>select class.caption,count(1) from student left join class on student.class_id=class.cid group by class.caption;</code></p>\n<p>查询平均成绩大于 60 的所有学生的学号、平均成绩、姓名： <code>select student_id,avg(num) from score group by student_id having avg(num)&gt;60;</code></p>\n<p>查询成绩小于 60 分的同学学号、姓名、成绩、课程名称：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname,score.num,course.cname from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">where num&lt;60;</span><br></pre></td></tr></table></figure></div>\n<p>查询各科成绩的总分、最高分、最低分、平均分，显示课程 ID、课程名称、总分、最高分、最低分：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select course_id,course.cname,sum(num),max(num),min(num),avg(num) from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">group by course_id </span><br><span class=\"line\">order by avg(num) desc;</span><br></pre></td></tr></table></figure></div>\n<p>查询各科成绩的平均分和及格率，显示：课程 ID、课程名称、平均分、及格率：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select course_id,course.cname,avg(num),count(1) as total,</span><br><span class=\"line\">sum(case when score.num &gt; 60 then 1 else 0 end) as jige from score </span><br><span class=\"line\">left join course on score.course_id =course.cid </span><br><span class=\"line\">group by course_id;</span><br><span class=\"line\"></span><br><span class=\"line\">select course_id,course.cname,avg(num),</span><br><span class=\"line\">sum(case when score.num &gt; 60 then 1 else 0 end)/count(1)*100 as prescent from score </span><br><span class=\"line\">left join course on score.course_id =course.cid </span><br><span class=\"line\">group by course_id;</span><br></pre></td></tr></table></figure></div>\n<p>三个表依次连在一起：查询 “三年二班” 每个学生的学号、姓名、总成绩、平均成绩：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student_id,sname,sum(num),avg(num) from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">left join class on class.cid=student.class_id </span><br><span class=\"line\">where class.caption=&#x27;三年二班&#x27; </span><br><span class=\"line\">group by student_id;</span><br></pre></td></tr></table></figure></div>\n<p>查询学过 “波多” 老师课的同学的学号，姓名：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join teacher on course.teacher_id=teacher.tid </span><br><span class=\"line\">where teacher.tname=&#x27;波多&#x27;;</span><br></pre></td></tr></table></figure></div>\n<p>查询没学过’波多’老师课的同学的学号，姓名（应该是选择先查询选过的同学的 ID，再进行排除，而不是直接使用！=）：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from student </span><br><span class=\"line\">where sid not in(select student.sid from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join teacher on course.teacher_id=teacher.tid </span><br><span class=\"line\">where teacher.tname=&#x27;波多&#x27;);</span><br></pre></td></tr></table></figure></div>\n<p>查询选修‘苍空’老师所授课程的学生中，成绩最高的学生姓名及其成绩（考虑并列）不考虑并列只需使用到 order by 和 limit：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join student on score.student_id =student.sid </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join teacher on course.teacher_id=teacher.tid </span><br><span class=\"line\">where teacher.tname=&#x27;苍空&#x27; </span><br><span class=\"line\">and score.num=(select max(num) from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join teacher on course.teacher_id=teacher.tid </span><br><span class=\"line\">where teacher.tname=&#x27;苍空&#x27;);</span><br></pre></td></tr></table></figure></div>\n<p>查询选修了所有课程的学生的学号，姓名：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">group by student_id having count(1)=(select count(1) from course);</span><br></pre></td></tr></table></figure></div>\n<p>查询选修了 “生物” 和 “物理” 课程的所有学生学号，姓名：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">where course.cname in (&#x27;生物&#x27;,&#x27;物理&#x27;) </span><br><span class=\"line\">group by student_id having count(1)=2;</span><br></pre></td></tr></table></figure></div>\n<p>查询至少有一门课与学号为 1 的学生所选的课程相同的其他学生学号和姓名：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">where score.course_id in (select course_id from score where student_id=1) and score.student_id!=1 </span><br><span class=\"line\">group by student_id having count(1)&gt;1;</span><br></pre></td></tr></table></figure></div>\n<p>查询 “生物” 比 “物理” 成绩高的所有学生的学号：PS：这里好像有点问题，存在没有该课成绩的情况，应该先选出同时有生物和物理成绩的同学</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student_id,max(case cname when &quot;生物&quot; then num else -1 end) as sw,</span><br><span class=\"line\">max(case cname when &quot;物理&quot; then num else -1 end) as wl from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">where cname in (&quot;生物&quot;,&quot;物理&quot;) </span><br><span class=\"line\">group by student_id having sw&gt;wl;</span><br></pre></td></tr></table></figure></div>\n<p>将一张表中的数据插入到另一张表中：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into sc select * from score;</span><br><span class=\"line\">insert into sc (student_id,course_id,num) </span><br><span class=\"line\">select sid,2,80 from student </span><br><span class=\"line\">where sid not in (select student_id from score where course_id=2);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"day4\"><a class=\"markdownIt-Anchor\" href=\"#day4\">#</a> day4</h2>\n<h3 id=\"执行计划\"><a class=\"markdownIt-Anchor\" href=\"#执行计划\">#</a> 执行计划</h3>\n<p>MySQL 中提供了执行计划，让你能够预判 SQL 的执行（只能给到一定的参考，不一定完全能预判准确）。</p>\n<p>explain 关键字</p>\n<p>主要看输出结果中的 type,all 表示进行了全表扫描，而 ref 则是通过索引进行查找</p>\n<p>性能从低到高排序：all &lt; index &lt; range &lt; index_merge &lt; ref_or_null &lt; ref &lt; eq_ref &lt; system/const</p>\n<h3 id=\"无法命中索引的情况\"><a class=\"markdownIt-Anchor\" href=\"#无法命中索引的情况\">#</a> 无法命中索引的情况</h3>\n<p>类型不一致：例如数据库中是字符串类型，却传入数字进行查找；主键比较特殊，即使类型不一致也不影响</p>\n<p>使用了不等于，特殊的主键 or，当 or 条件要未建立的列时失效，但当后面有 and 有建立索引的列时比较生效</p>\n<p>排序，当根据索引排序时候，选择的映射如果不是索引，则不走索引。特殊的主键 like 进行模糊匹配，只有在通配符在最后面才有效</p>\n<p>联合索引要满足最左前缀</p>\n<p>使用函数，例如 reverse（）, 放在后面才可以，例如</p>\n<ul>\n<li>未命中： <code>select * from big where reverse(name) = &quot;wupeiqi&quot;;</code></li>\n<li>命中： <code>select * from big where name = reverse(&quot;wupeiqi&quot;);</code></li>\n</ul>\n<h3 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h3>\n<p>使用索引是为了加速查找，为什么可以加速查找是因为索引是按照 B + 树的方式进行存储的</p>\n<p>引擎的不同会对索引的产生区别：myisam 是数据和索引结构分开存储；innodb 是数据和主键索引结构存储在一起</p>\n<p>建表时可以进行指定 engine=myisam</p>\n<p>查看数据表引擎类型： <code>show create table class;</code></p>\n<p>innodb 是默认索引，使用更为方便</p>\n<p>常见索引</p>\n<ol>\n<li>主键索引：加速查找、不能为空不能重复。</li>\n<li>唯一索引：加速查找，不能重复，可以为空，但只能一个为空，不然会视为重复。</li>\n<li>普通索引：加速查找。都可以进行联合索引</li>\n<li>联合索引的意思是多列连接起来作为一个键</li>\n</ol>\n<p>主键索引</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">primary key关键字</span><br><span class=\"line\">create table 表名(</span><br><span class=\"line\">    id int not null auto_increment,</span><br><span class=\"line\">    name varchar(32) not null,</span><br><span class=\"line\">    primary key(列1,列2)          -- 如果有多列，称为联合主键（不常用且myisam引擎支持）</span><br><span class=\"line\">);</span><br><span class=\"line\">新增主键索引：alter table 表名 add primary key(列名);</span><br><span class=\"line\">删除主键索引：alter table 表名 drop primary key;</span><br><span class=\"line\">自增列一定要是键，即索引，索引删除时可能会报错，此时改为使用alter table 表 change id id int not null;</span><br></pre></td></tr></table></figure></div>\n<p>唯一索引：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unique关键字</span><br><span class=\"line\">create table 表名(</span><br><span class=\"line\">    id int not null auto_increment,</span><br><span class=\"line\">    name varchar(32) not null,</span><br><span class=\"line\">    unique (列1,列2)               -- 如果有多列，称为联合唯一索引。</span><br><span class=\"line\">);</span><br><span class=\"line\">新建create unique index 索引名 on 表名(列名);</span><br><span class=\"line\">删除drop unique index 索引名 on 表名;</span><br></pre></td></tr></table></figure></div>\n<p>普通索引：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index</span><br><span class=\"line\">create table 表名(</span><br><span class=\"line\">    id int not null auto_increment primary key,</span><br><span class=\"line\">    name varchar(32) not null,</span><br><span class=\"line\">    email varchar(64) not null,</span><br><span class=\"line\">    index ix_email (name,email)     -- 如果有多列，称为联合索引。</span><br><span class=\"line\">);</span><br><span class=\"line\">新增create index 索引名 on 表名(列名);</span><br><span class=\"line\">删除drop index 索引名 on 表名;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"视图\"><a class=\"markdownIt-Anchor\" href=\"#视图\">#</a> 视图</h3>\n<p>视图其实是一个虚拟表（非真实存在），其本质是【根据 SQL 语句获取动态的数据集，并为其命名】，用户使用时只需使用【名称】即可获取结果集，并可以将其当作表来使用，类似使用一个 temp 变量方便使用。</p>\n<p>创建视图： <code>create view v1 as select id,name from d1 where id&gt;1;</code>  。然后可以当作一张表进行使用</p>\n<p>修改视图： <code>alter view v1 as SQL语句</code></p>\n<p>基于视图只能查询，针对视图不能执行 增加、修改、删除。 如果源表发生变化，视图表也会发生变化。</p>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h3>\n<p>字符串拼接： <code>select concat('alex','sb');</code></p>\n<p>休眠 1 秒： <code>select sleep(1);</code></p>\n<p>自定义函数：先将‘;’转换为美元符号，放在遇到；就自动结束了</p>\n<p>执行函数： <code>select f1(11,22);</code>  。 <code>select f1(11,id),name from d1;</code></p>\n<p>删除函数： <code>drop function f1;</code></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $$</span><br><span class=\"line\">create function f1(</span><br><span class=\"line\">    i1 int,</span><br><span class=\"line\">    i2 int)</span><br><span class=\"line\">returns int</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    declare num int;</span><br><span class=\"line\">    declare maxId int;</span><br><span class=\"line\">    select max(id) from big into maxId;</span><br><span class=\"line\">    set num = i1 + i2 + maxId;</span><br><span class=\"line\">    return(num);</span><br><span class=\"line\">END $$</span><br><span class=\"line\">delimiter ;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"存储过程\"><a class=\"markdownIt-Anchor\" href=\"#存储过程\">#</a> 存储过程</h3>\n<p>事务，成功都成功，失败都失败。</p>\n<p>存储过程，是一个存储在 MySQL 中的 SQL 语句集合，当主动去调用存储过程时，其中内部的 SQL 语句会按照逻辑执行。</p>\n<p>rollback 进行回滚</p>\n<p>创建存储过程</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $$</span><br><span class=\"line\">create procedure p1()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    select * from d1;</span><br><span class=\"line\">END $$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\">执行存储过程：call p1();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"触发器\"><a class=\"markdownIt-Anchor\" href=\"#触发器\">#</a> 触发器</h3>\n<p>对某个表进行【增 / 删 / 改】操作的前后如果希望触发某个特定的行为时，可以使用触发器。</p>\n<p>NEW 表示新数据，可以在里面直接进行使用。同理，old 表示原来的数据。</p>\n<p>创建触发器</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create trigger</span><br><span class=\"line\">例句：</span><br><span class=\"line\">CREATE TRIGGER tri_before_insert_tb1 BEFORE INSERT ON tb1 FOR EACH ROW</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    ...</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"day5\"><a class=\"markdownIt-Anchor\" href=\"#day5\">#</a> day5</h2>\n<h3 id=\"锁\"><a class=\"markdownIt-Anchor\" href=\"#锁\">#</a> 锁</h3>\n<p>MySQL 中自带了锁的功能，可以帮助我们实现开发过程中遇到的同时处理数据的情况。</p>\n<p>MYISAM 支持表锁，不支持行锁；InnoDB 引擎支持行锁和表锁。</p>\n<p>在 innodb 引擎中，update、insert、delete 的行为内部都会先申请锁（排它锁），申请到之后才执行相关操作，最后再释放锁。</p>\n<p>select 默认不加锁，需要配合事务 + 特殊语法进行加锁</p>\n<p>对于数据库中的锁，从锁的范围来讲有：</p>\n<ul>\n<li>表级锁，即 A 操作表时，其他人对整个表都不能操作，等待 A 操作完之后，才能继续。</li>\n<li>行级锁，即 A 操作表时，其他人对指定的行数据不能操作，其他行可以操作，等待 A 操作完之后，才能继续。</li>\n<li>for update 排他锁：<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin; </span><br><span class=\"line\">    select * from L1 where name=&quot;武沛齐&quot; for update;    -- name列不是索引（表锁）</span><br><span class=\"line\">commit;</span><br><span class=\"line\">select * from L1 where id=1 for update;              -- id列是索引（行锁）</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>lock in share mode 共享锁，其他可读但不可写<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin; </span><br><span class=\"line\">    select * from L1 where name=&quot;武沛齐&quot; lock in share mode;    -- 假设name列不是索引（表锁）</span><br><span class=\"line\">commit;</span><br><span class=\"line\">使数据按字典格式cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<p>四大特性：原子性、一致性、隔离性、持久性。</p>\n<p>开启事务：begin; 或者 start transaction;</p>\n<p>提交事务：commit;</p>\n<p>回滚：rollback;</p>\n",
            "tags": [
                "数据库",
                "MySQL"
            ]
        }
    ]
}