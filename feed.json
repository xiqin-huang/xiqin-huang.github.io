{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E9%BD%90%E6%9C%A8%E6%A5%A0%E9%9B%84%E7%9A%84%E7%81%BE%E9%9A%BE_86/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E9%BD%90%E6%9C%A8%E6%A5%A0%E9%9B%84%E7%9A%84%E7%81%BE%E9%9A%BE_86/",
            "title": "齐木楠雄的灾难_86",
            "date_published": "2023-10-12T10:49:33.074Z",
            "content_html": "<h1 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h1>\n<ol>\n<li>个性突出的配角。本剧最大的特点就是塑造多个个性突出的配角，从而合理化了故事的进行，也使得故事更加搞笑。每个人物都代表着一种属性：燃堂是运动天才加傻，海腾是中二，心美是美貌，梦原是花心，灰吕是热血，鸟束是好色… 还有齐神父母一直发狗粮。</li>\n<li>强悍的造梗能力。照桥心美的 “哦呼” 一开始没什么搞笑效果，但是多次不同情境下的使用使得 “哦呼” 深入人心。还有心美一直想让齐神 “哦呼”，最后齐神真的 “哦呼” 了也给大家发了一手好糖。还会经常与其他作品进行联动。</li>\n<li>使得情节进行的小细节。本来齐神作为一个想要低调的超能力者，没什么事情能打动他。为了故事的进行，作者给他加了两个动力 —— 咖啡果冻和妈妈的敦促。</li>\n<li>慢慢成长的各位角色。看完全剧就会发现剧中的角色相对于开始和结束时发生了很大的变化。齐神慢慢的开始接受自己的超能力，开始接受新的朋友；海藤开始慢慢的走出中二，也越来越温柔；心美从一开始的想让齐神屈服变成喜欢上齐神… 但这些变化不是短暂的，甚至可能你都没有注意到。我是看完了完结篇，再从新看第一季的时候发现的。由于记忆的问题，角色的缓慢成长使得我们慢慢接受了这样的人设。</li>\n<li>合理的超能力体系和完整的逻辑结构。有超能力的设定之后，最容易的产生的问题是超能力体系的崩溃或者遗漏超能力的细节，幸好本剧没有产生这些问题，没有存在明显的逻辑硬伤。还有就是为什么齐神不想超能力暴露这个核心设定，虽然开头有进行说明，但是说服力不够，后面加上了校园欺凌的故事后就显得合理，而且也为故事增加了深度。还有每年都重读高二的故事，是因为火山爆发。</li>\n<li>在搞笑之余也有一些思考。本剧总会在不经意间说出一些有意思的话语，这使得故事不单纯是为了搞笑而搞笑，他还蕴含了一些作者想要告诉我们的道理。</li>\n<li>声优的吐槽。本剧一部分的笑点就在于齐神的吐槽，声优很好的完成了这个任务，语速足够快和清晰，而且冷漠的语调搭配搞笑的话语更有搞笑的效果。</li>\n<li>小短片的形式。由于故事不是连贯的，出于转场的需要，需要分成不同的小部分。一个个小短片的形式就很适合，不用过渡，直接开始下一个故事。而且这个故事不好笑不会影响的下一个故事。</li>\n</ol>\n<h1 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h1>\n<ol>\n<li>制作贫穷应该是本剧最大的缺点了。长期使用定格画面，运动时候使用画面平移来表现，动作不够流畅等等都是客观存在的问题。但是制作组可以说比较好的解决了这个问题，起码没有把角色画崩，人物基本正常，而且把表现美丽的心美画的足够漂亮（还加了光芒）。</li>\n<li>有一些故事中的梗领会不到，比如说超级平凡的井口工。</li>\n<li>有个别角色的塑造比较讨人厌，比如目良同学，为了夸张效果使得这个人物比较讨人厌，而且不同于其他角色有的闪光点，目良同学仿佛只有缺点。</li>\n</ol>\n",
            "tags": [
                "动漫"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E8%8E%AB%E6%96%AF%E7%A7%91%E4%B8%8D%E7%9B%B8%E4%BF%A1%E7%9C%BC%E6%B3%AA_86/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E8%8E%AB%E6%96%AF%E7%A7%91%E4%B8%8D%E7%9B%B8%E4%BF%A1%E7%9C%BC%E6%B3%AA_86/",
            "title": "莫斯科不相信眼泪_86",
            "date_published": "2023-10-12T10:49:33.072Z",
            "content_html": "<h1 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h1>\n<ol>\n<li>点题，女主的三次哭泣都是情节关键处，还有闹钟的隐喻。而女主最后一次落泪的时候，她终于收获了她真正的爱情。</li>\n<li>展现了命运的无常。第一幕结束的时候，看着女主哭泣的样子，谁能想到女主会获得最幸福的结局。而最要强的女二却最落魄。一个开始时最抗拒喝酒的人最后却成了一个酒鬼，并毁掉自己原本幸福的生活。<br>\n3. 直接或间接的表现出了俄罗斯存在的问题。男性酗酒，男多女少，离婚率高，出轨，男性大男子主义。</li>\n<li>角色塑造的成功，三名女主各有特色：诚实知性的女主（我的理想型），大胆好强的女二，老实淳朴的女三。大男子主义严重的男主，这些鲜明的人物形象都留在了我脑海中。而且这些都是通过一些小细节反映出来的，女二叫宿管不要叫这里宿舍，女主不敢吃鱼，怕暴露自己的餐桌礼仪之类的小细节。</li>\n<li>平淡的叙述，正如最后一个镜头，其实这就是我们的生活，这就是我们这片大地上的喜怒哀乐。</li>\n<li>真香操作，女主经常会说一些狠话，但是很快就会被打脸，这也为这个故事增添了一些趣味。</li>\n</ol>\n<h1 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h1>\n<ol>\n<li>中苏之间的文化差异。我对人物中的行为有一些不能理解。最为明显的就是结局男主对女主瞒着自己收入比他高而直接离开了家，而女主也知道他会一走了之，仿佛这是理所当然的。而女主连男主家在哪里都不知道就和他生活在一起也让我觉得很迷惑。</li>\n<li>剧中人物经常一起说话，给耳朵的感觉太不好，太嘈杂了，也很乱。可能是导演想营造热闹的氛围，但是观感实在不好。</li>\n<li>情节发展有些突兀，比如女主成功的一段，还有男主最后回心转意也没有铺垫，突然就回来了，好像就是为了结尾而回来一样，起码给一下男二说服男主的片段也好。</li>\n</ol>\n",
            "tags": [
                "电影"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E6%AD%BB%E4%BA%A1%E7%AC%94%E8%AE%B0_90/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E6%AD%BB%E4%BA%A1%E7%AC%94%E8%AE%B0_90/",
            "title": "死亡笔记_90",
            "date_published": "2023-10-12T10:49:33.070Z",
            "content_html": "<h1 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h1>\n<ol>\n<li>精彩的智斗。作为一部智斗漫画，智斗当然是故事的主要卖点，本剧在这个方面做得非常好，其中最重要和最精彩的当然是 L 与夜神月的对决，L 在巨大的劣势下还是差点将月逼入绝境，虽然 L 被杀，但是他的成果为月的失败埋下了伏笔。M 和 N 与月的对决也同样精彩，但是还是差了那么一点。</li>\n<li>一些小细节做得很好。比如说月用于藏死亡笔记的抽屉设计，还有月为了检查是否有人进入自己房间的所放的小字条和有所偏移的门把手，等等的这些都为这个智斗游戏增加了代入感。</li>\n<li>塑造了个性十足的配角。在剧中我最喜欢的角色不是 L ，也不是月，而是月的父亲 —— 夜神总一郎。依我看，他才是剧中的正义的代表，他充满了正义感，但不同于他的儿子极端的正义。虽然他一直被儿子欺骗，但是他还是愿意去相信他，最终含着微笑离开人世，这也许是对他最大的宽慰吧。还有就是最后出现的魅上照，我其实挺喜欢这个充满正义感的角色，但是也许是校园暴力的压迫吧，他还是走向了极端的正义，最终导致了悲剧。</li>\n<li>别出心裁的设计和神学意味。在剧的开头会有吃苹果的音效，在结尾会有‘奇乐’的声音，这些都很有心思。吃苹果是一方面是对应硫克喜欢吃苹果，另一方面也是对应亚当和夏娃偷吃禁果，也许夜神月利用死亡笔记就如同偷吃禁果一样，带着人类走向一个悲剧。在剧中这样的神学隐喻还有不少，比如 OP 中就借用了多部名画，像圣母怜子图，米开朗琪罗的壁画，夜神月对应基督等等，给作品增加了更深一层的意味。</li>\n<li>常用两个人物对比一起表示。这样做，使得对决的氛围更加的浓厚，而且两者说的话特意写的一样，这样表达形式使得紧张感瞬间营造了起来。</li>\n<li>精彩的第一 OP 和完美的配乐。与第二 OP 相比，我更加喜欢第一 OP，节奏强烈但不会让人感到不适，反而将紧张的基调定了下来。而且歌词与故事高度契合。值得一提的是配乐，真正做到与故事配合，很好的调动了观众的情绪。</li>\n<li>环境。剧中经常会利用环境来表现人物的情绪，还有不少给观众留下想象空间的环境描绘。比如说月死后，死神硫克看着下面灰沉沉的尘世，镜头慢慢上移，随后看到一轮弯月发出淡淡的光芒照射着大地。还有 L 死前，在大雨中，轻轻地对月说：“我听到了钟声。” 瓢泼的大雨和像是在燃烧的闪电映衬着 L 的死亡。</li>\n<li>富有魅力的月和他的配音。作为少有的反派主角（也许说是反派不太合适，但是一直找不到很恰当的形容，但是我觉得真的可以算是反派），很容易引发观众对于故事的反感，但是显然制作组对这个问题的解决是比较好的。淡化了对正邪的讨论，而是将故事的重心放在的智斗方面，而且月身上的个人魅力和目的也很好的抵挡了一部分的反感，甚至现在还是不少的人是认同月的做法的。而且月的声优充满磁性的声音和随意变化声调也为月平添了不少魅力。</li>\n<li>后面登场的角色通常前面会进行铺垫。比如说夜神总一郎死后就有一个人加入了搜查奇乐的队伍，细心看的观众可能会发现，其实这个人在第五话就已经出现，是愿意继续追查奇乐的人，只是因为不接受 L 的要求而没有参加。还有就是高田清美在大学期间就和月是情侣关系，所以和月产生感情也顺理成章。这样就使得故事更为合理，而且看的时候也像是发现了彩蛋一样。</li>\n<li>心理斗争。作为 L 和月斗争中的重点部分，L 和月的心理战也是剧中的一大看点，也让我觉得原来一句话原来有这么多的含义。幸好这些心理战会有月进行解释，好让我们都可以看懂。</li>\n<li>写实，偏黑暗的画风。作为一个题材较黑暗的番剧，写实和偏黑暗的画风显然让人更容易入戏，而且画风真的很合的我的口味，灰黑的城市，阴暗的天空，磅礴的大雨，飞翔的乌鸦… 为故事定下了一个黑暗的基调。</li>\n<li>淡化杀人情景。通常只会用一段音乐明快加上罪犯的死亡，使用死亡笔记的人奋笔疾书来表现杀人的情形。最大程度上淡化杀人的情形。</li>\n</ol>\n<h1 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h1>\n<ol>\n<li>弥海砂的人物绘画。按照人设，弥海砂在剧中应该是长得很可爱，很受人喜爱的偶像，理应画的比较好看，但是不知道为什么弥海砂的样子经常会画崩。在有名字的角色里面，除了夜月神的妈妈之外，都画得比弥海砂要好看。我也不明白是为什么，按照剧中其他女角色的样子来看，制作组应该是很有实力的，比如南空直美，画得就很好看。</li>\n<li>过于重金属的第二 OP。作为情节过渡，表达夜月神进入了疯狂状态而改变的第二 OP，但是真的太过于重金属了，每次我都是跳过的，OP 本来是用于帮助观众进入氛围的，显然这个 OP 没有起到这个作用。但是这个只是我的个人观点，有些人还是很喜欢这个 OP。</li>\n<li>有些搞笑的情节处理的不太好。有时候出于轻松氛围的目的，会有一些小幽默的情节，但是有些处理的不太好，会有一些出戏的感觉。比如松田在夜神总一郎死后的反应，作为松田的恩师，松田的反应显然不太自然。</li>\n<li>有点小漏洞。我觉得剧中最不合理的地方就是月和高田清美在酒店里用酒店的便签相互交流，这不是明摆着来怀疑你吗？我觉得以月的智慧应该不会犯这么低级的错误。</li>\n</ol>\n<h1 id=\"一些常见问题\"><a class=\"markdownIt-Anchor\" href=\"#一些常见问题\">#</a> 一些常见问题</h1>\n<ol>\n<li>月在 L 死之后是不是被强行降智？<br>\n这个我认为不是的。很多人认为月之前可以和 L 打个平手，但是到了和 N 和 M 对决的时候经常会出差错，所以认为月被强行降智。但是我觉得不是的，从一开始 L 和月就不是同一水平的，之所以月能够取得均势，是因为有死亡笔记这个外挂的帮助的，所以 L 的推理的时候就容易被限制着。但是 L 还是可以将月逼入绝境，还查出来死亡笔记，这就足以证明 L 是在月之上的。而月也不是那么厉害，在 L 的对决中也经常考虑不周而引发危机，比如被 L 激怒而杀死替身 L 从而暴露位置，在杀 FBI 的时候也没有掩饰好自己，幸亏运气好，不然早以暴露，最后用于脱身的假规则也被 L 看穿。若不是利用雷姆对弥海砂的关爱，杀掉了 L，月也难以脱身。而与 L 调查的难度相比，N 和 M 的环境就好的多了，首先最难的死亡笔记的问题已经被 L 解决了，然后奇乐基本已经确定为月。这样月在本方的调查人员已经不信任自己，又同时面对 N 和 M 的威胁，若不是魅上照的犯错，月已经胜利，这样我觉得很难说是强行降智。而且虽然对决不如 L 时精彩，但是同样很不错，因为死亡笔记已经暴露了，所以智斗有所减弱也是正常情况。</li>\n<li>智力排名和综合能力排名？<br>\n智力排名：L &gt; 夜神月 &gt; N&gt;M<br>\n 综合能力排名：L &gt; 夜神月 &gt; M&gt;N</li>\n<li>关于夜神月的行为是否正义？<br>\n首先我不认为这是正义的行为。我认为的正义的行为，是包括两点的：程序正义和结果正义。只有同时满足两点这才是正义的行为。月的行为明显违反了程序正义，他杀的嫌犯，未经法律审判，或者罪不至死。月只是靠着自己的正邪观来杀人，这和独裁者有何区别。让我试想一下这样一个情景：一个人拿着刀肆意地杀害他认为有罪的人，你会认为这是正义的行为吗？哪怕他真的杀的人是你认为的坏人。那你能保证他每次都能杀掉你认为的坏人，不会因为和你价值观不同而杀掉你所认为的好人。一个人真的有权力去制裁另一个人吗？这是我们值得思考的问题。所以我们才需要法律，去制裁对整个社会不利的人，而不是根据个人喜好而采取定夺。像那些 FBI 警官，像 L，他们是坏人吗？可月还是把他们杀掉了。你可以说是因为他们想捉住月，所以月才杀他们的。所以这样还是正义吗？不就是根据自身喜欢来定夺一个人的生死了吗？在剧中淡化了杀人的残酷，这是艺术手法，但是在真正的生活中，杀死一个人是需要严肃考虑的问题。而且最后月已经变了，他也不是那个一心为了正义的男孩了，他是一个利用爱自己的人的感情，在父亲死前还想利用父亲的混蛋。他只是一个被权力侵蚀，一心想成神的普通人罢了。也许，从他捡到死亡笔记的时候，他的悲剧已经写好。</li>\n<li>死亡笔记是不是需要被禁？<br>\n我认为在低龄人士可以观看的大型网站确实不应该存在死亡笔记，但是可以通过一些小网站和种子这些不应该禁。在没有分级制度的情况下，这是折中的办法。在没有形成自己的三观和没有看过较多观点的情况下，很容易被月的行为洗脑。因为月的个人魅力确实大，而且通过诡辩和目的是为了正义的借口，很容易让孩子们像月学习，时至今日还是有不少的人是认同月的行为的。但是作为一部优秀的作品，其重点是在于智斗，很应该给那些可以正确看待月的行为的人看。</li>\n</ol>\n",
            "tags": [
                "动漫"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E6%96%B9%E8%88%9F%E5%A4%A9%E4%BD%BF_87/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E6%96%B9%E8%88%9F%E5%A4%A9%E4%BD%BF_87/",
            "title": "方舟天使_87",
            "date_published": "2023-10-12T10:49:33.067Z",
            "content_html": "<p>故事并不复杂，讲述的是一个溺爱女儿的妈妈给女儿安装了方舟天使，用于监控女儿的故事。从母亲的行为我认识到不加约束的爱和无微不至的关怀对孩子的成长未必有好处，爱一个人不是不批评，不是只赞美。女主只有十五岁，当她第一次发生性关系，第一次吸毒的时候，就应该光明正大地批评她，教育她，而不是躲在背后使用方舟天使监控她，这样只能让事情变得更糟。还有过度的保护反而是害了孩子，如果不是年幼的时候，被满屏的 “马赛克” 阻挡，女儿未必会对这些东西有过分的好奇。刻意的隐瞒他们在这个年龄应该要懂得的东西，只会让他们的好奇心达到一个病态的程度，而且这个事情并不会因为你隐瞒而不存在，总有一天，他们会接触到这个东西。而且没有一个从小到大慢慢接受，慢慢成长的过程，到他们一旦接触的时候，很可能控制不了自己。话说美国那边的孩子真的想影片那样早熟吗？我觉得这样反而过早了。再说说女主最后用方舟天使的控制器殴打母亲的情节，看起来导演似乎是认可女主的做法的。但是我不是很认同女主的做法，因为我觉得女主犯下的错要大于母亲，女主的做法以及处于犯罪的边缘了，母亲虽然违背诺言，重新监控女儿，但是我觉得罪不至此，不应该做到这个地步。但是这也是我站在第三方的角度去看待这个问题，若是自己也遇到这种情况，我也不知道自己能不能控制住自己，想想都觉得毛骨悚然。这也让我想到了一个问题：我们眼中的世界是不是真正的世界？网络上也有很多这种利用错觉的游戏，我们的大脑会不会为了保护我们而给与我们一些错误的信息？或者以后会不会出现像影片一样的可以修改视觉的科技，甚至不像是影片中的马赛克，而是替换成其他东西，那么到时我们还能判断得出真假吗？</p>\n",
            "tags": [
                "短剧"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E5%BF%83%E7%90%86%E6%B5%8B%E9%87%8F%E8%80%85_93/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E5%BF%83%E7%90%86%E6%B5%8B%E9%87%8F%E8%80%85_93/",
            "title": "心理测量者",
            "date_published": "2023-10-12T10:49:33.065Z",
            "content_html": "<ol>\n<li>精美的画风，充满着未来感的画面，不仅酷，而且给故事增添了真实感。</li>\n<li>充满魅力的人设，剧中的主要人物都有着自己独特的个性，猎犬一般的男主，心中永远积极乐观的女主，让人又爱又恨的反派男二，内心矛盾的男三，成熟大叔的男四，外表慵懒，内心刚强的男五，睿智的教授，冰美人女二，活泼的女三。每个主要角色都有着其丰满的角色塑造。你会感觉到他们行事有着其自身内在的逻辑，有一种人物推动故事行进的感觉，而不是编剧推着人物前行的感受。虽然一开始的时候觉得男三宜野座伸元有点烦人，但是后面揭示早年因父亲是潜在犯而饱受歧视，自己并肩作战的朋友变成潜在犯，人物的逻辑逻辑就理顺了。到最后父亲征陆舍命救他的时候，虽然这个故事情节有点老套，但是制作组的用心和前期的铺垫，还是感动到我了。后面宜野座摘下眼镜的时候跟是帅到我了，这时候，宜野座伸元的角色就完全丰满起来了。</li>\n<li>一点感悟，其实比较有意思的一点是主角们的行动与自己许下的愿望相违背了。女主希望男二不要成为 “猎犬”，成为一个真正的 “警察”，男主也希望自己能够做到。但是最终男主还是没能做到。男三执念不能成为潜在犯，但是最终还是成为了潜在犯。但是我正是因为这里喜欢上这部剧的，说实话，我真的担心制作组弄出一个捉住慎岛圣护后不杀死，而是交给西比拉 “制裁” 的剧情。当狡啮慎也在慎岛圣护的头上开枪的那一刻，“爽”，这就是我唯一的感受。如同慎岛圣护所说 “被你以外的人杀死的情景，我无论如何都无法想象”。男二用他的死亡为这个故事画上了一个完美的句号。</li>\n<li>复杂的 “反派”—— 慎岛圣护，这是一个很有意思的 “反派”，从感性的角度上说，我恨不得冲进去给他一拳，但是从理性的角度上说，我其实挺认可他的思想 ——“人的行为应由自己做出，并为此承担责任。” 同时，我也不认可西比拉这种假借公正，实际上是由一群特权者掌握话语权的系统。只要他们认为你是潜在犯，即使你没有犯罪，而有些人却可以依靠免罪体质，犯罪而不用接受制裁，反而可以进入权力中心。说实话，我对西比拉系统的厌恶更甚于慎岛圣护。慎岛圣护并不是一个单薄的角色，而是一个充满着魅力，独特的角色。声优的卖力表演更是为该角色平添了不少魅力。特别是拒绝西比拉系统，坠机逃脱的情节，即使是我这个讨厌他的人也被他的魅力吸引到了，那种优雅，从容不迫，充满自信塑造了这个富有生命力，让人又爱又恨的角色。</li>\n<li>恰到好处的名言引用，心理测量者应该是我见过最喜欢引用名言的动画。而且他优秀就在于引用的恰到好处，他并不是那种生搬硬套，让人觉得强行装逼的，而是把名言融入到情节与对话之中，十分自然，为故事平添了不少韵味。而且引用名言并不如我们想象中简单的事情，事实上，这是一件非常困难的事情。因为引用的名言需要通俗易懂，不能影响到观众的观看，其次就是自然，要避免生搬硬套。在我比较中二的时期，就喜欢说话的时候引用名言，就别提有多尴尬了。所以想体验一下难度的话，不妨可以自己尝试一下。</li>\n<li>故事的核心才是最优秀的地方 ——“要正义，还是要秩序”。从正义的角度上来说，西比拉无疑是最邪恶的犯罪者，由最穷凶极恶的犯罪者的头脑构成。然而却是由这些犯罪者来判断着人们的善恶。而且假借系统之名，实际上是极少数人压迫绝大多数人的极权社会。但是从社会稳定的角度上看，西比拉系统确实很好的维护了治安，极大的降低了犯罪，人们生活在一个无比安全的环境下，享受着社会上极度丰富的生活，把自己的生活大部分都交给了机器人。这究竟如何抉择 ——“是危险的自由，还是稳定的封闭”。这是一个永恒的问题，有人会认为 “不自由毋宁死”；自然也有人会认为 “稳定胜于一切”，安稳的生活是普通人最大的幸福。本剧也讨论了这个问题，是将全部抉择都交给西比拉系统判定，自己不用做出艰难的决定。连警察是否能开枪都是由西比拉系统判断，警官不需要承担任何责任，只要扣下扳机即可。还是自己做出自己的判断，并承担对应的责任。对于上面的问题，老实说，我并没有找到自己满意的答案，可能一直都找到答案，但是思考本身就是有意义的。</li>\n<li>本剧最令我印象深刻的是慎岛圣护在女主面前杀死她朋友的剧情，本以为危机已经被解决了，结果还是被这样残忍的杀害。而且最令我难受的是那种无力感，面对这样的情况，我能拿起那杆枪，扣下扳机吗？尤其是在故事的那种背景下。</li>\n<li>脑域这个设定还挺有意思的，可惜我之前看过类似的设定。</li>\n<li>本剧从各方面看都是一部优秀的动画。可能有些人不喜欢比较致郁，血腥的情节，但其实还好。我觉得比较大的问题反而是西比拉系统的令人反感，与充满魅力的 “反派” 相比，西比拉对观众实在没有什么吸引力。让人觉得为什么主角团要维护这个腐朽的制度，对主角团行为的正当性产生一定的削弱。如果你试着代入慎岛圣护的视角，可能这就是个不一样的故事了。</li>\n</ol>\n",
            "tags": [
                "动漫"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E5%A4%A7%E6%98%8E%E7%8E%8B%E6%9C%9D_95/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E5%A4%A7%E6%98%8E%E7%8E%8B%E6%9C%9D_95/",
            "title": "大明王朝_95",
            "date_published": "2023-10-12T10:49:33.063Z",
            "content_html": "<p>在前期，我一直会想：为什么皇上不管严党，明明他们这么贪污腐败，是因为严党的势力太大吗？看到后面我明白了，其实皇室才是最贪污腐败的一群人，严党只是皇室用于敛财的棋子。皇上需要那么一个人，当他的看门狗，压制群臣，搜刮民财。比如在严党倒台之后，皇上马上撤换了吕芳，换上了陈洪，因为他就需要一个这样的人物，去顶住群臣的压力。给群臣一个靶子打，转移群臣的目标，推卸自己的责任。“有时候贤与不贤也由不得他们。” 说的就是这样，当你担任这个职务的时候，你就需要去做皇上想让你做的事情。我也慢慢开始明白了为什么身为清流领袖的徐阶不仅没有和严嵩水火不容，反而会有不少的交谈。严嵩作为首辅，权势滔天的缘故。但我想徐阶可能也看到倒了严党之后，自己也将担任如同严嵩一般的角色，他也不想斗，但是群臣要你斗，你不得不斗。虽然这样内斗不利于国家发展，但这样皇上的权力才得以巩固，当大臣们不内斗，团结在一起的话，国家是会变好，但是皇上的行为就会被限制，劝谏皇上的奏折将会数不胜数，这显然不是皇上想要看到的局面，只有两派不断的斗，皇上才可以坐收渔利。即使没有矛盾，皇上也会制造矛盾让大家斗起来。严党一倒，吕芳很快被皇上调走，选了一个恶狗一样的陈洪来掌管司礼监，让司礼监和内阁斗，总之一定要有斗争。所以为什么当吕芳试图整合严党、清流和司礼监三股势力的时候，受到皇上的严厉惩罚，因为皇上最不喜欢的就是看到群臣团结起来。后来严党倒台之后果然如此，徐阶的家人也开始兼并土地，皇上需要最接近自己的人有把柄捉在自己手上。最后严党倒台也不是因为贪污，而是因为严世蕃没有用对人，派去干活的人都是些 “废物”，根本没有推进改稻为桑的国策；也没有给皇上足够的钱，皇上为什么给这个位置你坐，就是让你帮他干活，帮他搜刮民财。严世蕃你们自己心里没有一点数的吗？居然自己拿大头，皇上拿剩下的，你不死谁死。</p>\n<p>皇上是怎么压制群臣对自己的批评的呢？不是直接惩罚你，这样没什么效果，因为总会有人不怕死。他是利用举荐、师生关系、同乡关系将大臣们捆绑在一起，让他们形成派系。利用连坐，让你考虑以大局为重，不要牵连到旁人。而且由于派系的存在，你说的每句话，人们都会立场先行，先考虑你是想要斗倒谁，目标是为了什么，而这句话正确与否反而没显得这么重要。所以为什么皇上对海瑞这么生气又无可奈何，因为通过他对群臣的试探，发现大家都是站在海瑞这一边，证明海瑞的话，群臣是看进去了。群臣没有先考虑海瑞的立场，而是看他先说的对不对。群臣愿意团结在一起维护海瑞，这使得皇上生气万分。当然皇上对海瑞可以一杀了之，但他不会这样做，因为他的尊严不允许他这样做，他一直认为自己将群臣玩弄于鼓掌之中，这样做只会显示出他已经没有办法了，只能通过杀人来解决问题。而且这样还会客观上促进群臣们的团结。这也证明了有理走边天下都不怕，海瑞基本就是靠着自己的名声和《大明律》扛下了所有的压力。他很清楚自己最大的优势是自己没有黑历史，而他的对手们浑身都是黑历史。“有些事不上秤没有四两重，上了秤一千斤都打不住。” 说的就是这个，黑历史相当于是一个隐形炸弹，没有事的时候还好，出了事没有人能救得了。</p>\n<p>剧中的演员都很不错，我比较喜欢的是严嵩、吕芳、皇上、徐阶、海瑞、胡宗宪、王用汲、杨金水。其他的都不错，只是没有这几个这么出彩。还有布景、金属器皿、纸张等都很考究，给故事增添了不少代入感。</p>\n",
            "tags": [
                "电视剧"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E5%86%B0%E6%B5%B7%E6%88%98%E8%AE%B0_94/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E5%86%B0%E6%B5%B7%E6%88%98%E8%AE%B0_94/",
            "title": "冰海战记_94",
            "date_published": "2023-10-12T10:49:33.061Z",
            "content_html": "<h1 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h1>\n<ol>\n<li>塑造了拉谢拉特这个复杂的人物。让人又爱又恨，爱的是他坚持自己的最初的理想，忍着恶心去干坏事来达到自己的目的；恨的是他亲手破坏了无数个家庭的幸福，烧杀抢掠，无恶不作。24 话时，面对国王给出的两个选择 —— 牺牲威尔士还是王子，习惯于牺牲他人的拉谢拉特做出了第三个选择 —— 牺牲自己。他砍下了国王的头颅，自己也毅然决然的去往死亡，这一刻他达到了他人生的顶点，让观众为他惋惜。</li>\n<li>合理的人物行为。故事中的人物行为在当时的那个时代显得很合理，不会有一种很突然的感觉，每个主要人物的行为方式都有其内在的逻辑结构。而且人物的性格也不是一成不变的，随着事情的发生，人物的性格会有不同的变化，而且前面会留下伏笔。情节推进合理，没有什么逻辑上的硬伤。</li>\n<li>考证严密和细致的背景刻画。制作组为故事的背景制作了很多符合当时背景的资料，使得这个架空历史的故事更具有真实感。而且精美而又细致的作画使得观众更容易接受，剧中我最喜欢的就是雪景和秋天的树林，非常精美。</li>\n<li>不删改暴力场景，而是直观的呈现给观众。其实最美的故事就在于真实，故事给观众呈现了当时真实的暴力，真实的罪恶情景。搭配着动感十足的打斗场景，使故事增色不少。</li>\n<li>透过细节去体现战争的残忍。本剧主人公托尔芬从一个爱笑的温暖男孩变成一个被仇恨蒙蔽双眼，杀人如麻的冷血杀手，好心收留托尔芬却导致全村被杀光的老太太，残暴成性的维京人… 等等的这些都体现着战争的残忍。</li>\n<li>充满哲理的话语。托尔兹的：“真正的英雄不需要剑。”，王子在关于爱所表述的话语。本剧的核心就在于对于爱的理解。托尔兹的理解是出世的，他希望可以远离杀戮，到达神应许之地 —— 文兰。王子和拉谢拉特的理解是入世的，他们要靠自己的努力在人世间创造一个没有杀戮，宜居的地方，为此他们不惜进行残忍的杀戮。</li>\n<li>会在恰当的地方加入一些小幽默。由于本剧的题材比较沉重，长期在这种阴暗环境下，观众容易产生退番的情绪，因为低潮太多了。而恰当的加入一些小幽默使得观众可以在沉重的氛围下轻松一下，从而更好的观看。</li>\n<li>完美的 OP 和 ED，还有良好的配合气氛的配乐。第一期的 OP 是我最喜欢的，OP 的变化随故事的进行而进行变化，而且 OP 对故事起到了一个解释的效果。让人很快的进入故事的节奏。配乐更是好，和情节高度的契合，对情感抒发起到了重要的作用。</li>\n</ol>\n<h1 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h1>\n<ol>\n<li>普通军队和主要人物的打斗太单一，基本都是主要人物在割草式杀戮。</li>\n<li>托尔芬的武力提升稍微有点快。</li>\n</ol>\n",
            "tags": [
                "动漫"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E5%85%89%E8%8D%A3%E7%9A%84%E6%84%A4%E6%80%92_87/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E5%85%89%E8%8D%A3%E7%9A%84%E6%84%A4%E6%80%92_87/",
            "title": "光荣的愤怒_87",
            "date_published": "2023-10-12T10:49:33.058Z",
            "content_html": "<h1 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h1>\n<ol>\n<li>优秀的开头。短短的开头就将故事的背景，主要人物的性格，以及产生矛盾的原因都讲述给了观众，使得故事的逻辑得以自洽。而且开头狗卵的那一段很精彩，完全捉住了观众的情绪，想要知道到底发生了什么。还有中间插入的文字也很不错，方便了观众了解故事背景。</li>\n<li>方言特色，在一个讲述农村故事的电影里，方言的运用增添了真实感，而且就个人而言，我很喜欢方言，因为我觉得方言的喜剧效果特别好，而且很有味道。而且剧中充满农村特色的绰号也很不错，例如：狗卵，大旺，麻面，水根。</li>\n<li>讽刺手法与黑色幽默。剧中的水根言必称 “党员的操守”，但是却是唯一一个叛徒，到最后还是投奔了反派。这也让我明白了容易倒向你的人也容易倒向别人，因为他们往往没有经过独立思考。</li>\n<li>反映了农民的劣根性，人人都恨熊家，但又畏惧熊家，但是一旦有了 “上面” 的指示，大家便愿意投入到革命里面了。狗卵是里面表现的最突出的，胜利时只管享乐，敌人反扑时只能投降。</li>\n<li>你妈的，你狗日的太会演戏了。剧中王砚辉和吴刚的演绎十分出色，王砚辉将村霸的感觉完全表现出来了，那种粗中有细，狠毒的感觉以及结尾的那一句 “你没有机会了” 贼有感觉。要是电影在这里结尾就完美了。</li>\n</ol>\n<h1 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h1>\n<ol>\n<li>中国特色社会主义结尾。可以说这个结尾完全是为了过审而加的，而这段结尾可以说是毁了这部片，太牵强了，完全是为了战胜反派而战胜反派，铺垫不足，给的理由也是扯得不行。</li>\n<li>中后段节奏有点混乱，没有了主次之分，信息不断的传递个观众，给人一种很慌乱的感觉，观众不太清楚故事到底在说什么，尤其是兵分四路的那一段，给人的观感不太好。</li>\n</ol>\n",
            "tags": [
                "电影"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94_87/",
            "url": "http://example.com/2023/10/12/%E5%BD%B1%E8%AF%84/%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94_87/",
            "title": "了不起的盖茨比_87",
            "date_published": "2023-10-12T10:49:33.057Z",
            "content_html": "<h1 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h1>\n<ol>\n<li>环境还原的很好，盖茨比宫殿般的房子，奢华的宴会，还有那一条泥泞的煤炭路都满足了我对于书中的想象。</li>\n<li>对原书的还原，最重要的绿光，书中的名言，剧中呈现出的文字都令我感到满足。</li>\n<li>弱化的女主的恶，剧中对女主的行为做了一些修正，将女主变得没那么坏，使得更加容易被观众接受。（虽然我还是很讨厌女主，但至少减轻了厌恶程度）</li>\n<li>男主和女主重逢的那一段拍的很好，很好的表现了男主对于自己心中的那盏绿光的那种渴望而又害怕的心境，相处时的慌张和原先的冷酷也构成了一种反差萌。（不过这也使得本剧进一步变成感情剧）</li>\n<li>男二演得很好，将那种花心，粗野但又有小聪明的感觉演绎出来了，完全就是我心目中男二应该有的样子。</li>\n</ol>\n<h1 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h1>\n<ol>\n<li>对于有钱人的生活描写的太夸张，感觉就是拼命的让你相信他们的奢华生活，而且还伴随着很多故弄玄虚，给人一种很刻意的感觉。</li>\n<li>没有书中 “垮掉的一代” 的历史感，在一个大时代的背景下讲述一个烂俗的三角恋爱情故事就很诡异，缺失了回味，只剩下了无尽的吵闹。</li>\n<li>节奏把握太糟糕了，太拖沓了，花了很多篇幅去讲述盖茨比的牛逼，但是效果不好，而且浪费了很多时间，这些时间本应讲述的其他更重要的事情。</li>\n<li>选角问题。为什么剧中就没有一个好看一点，有气质一点的女性角色？女主卡看起来就是个婊子，女二看上去就像个神经病，这些都严重影响观看体验。</li>\n<li>人物的逻辑成迷，尤其是女主，都愿意和男主私奔了，那为什么不愿意跟男二坦白后和男主在一起呢？为什么事故发生后，宁愿相信男二也不愿意相信男主呢？这些书中本身存在的问题不但没有被解决，反而被放大了。</li>\n<li>角色塑造糟糕，剧中最重要的人物 —— 盖茨比，本应塑造成优秀，深情而又有能力的人，总之是一个 great 的人物，但是我看完之后之觉得这是一个双手沾满血腥的装逼暴发户。剧中塑造男主光辉形象就靠男三不断的尬夸男主，强行优秀，这样的刻画不得不说是很失败的。这也导致本书的主旨 ——great 的人物在时代毁灭的冲击感消失。本应是本书最高潮的盖茨比的葬礼也变得没有力量了。</li>\n</ol>\n",
            "tags": [
                "电影"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E5%8D%81%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "url": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E5%8D%81%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "title": "研一十月月报",
            "date_published": "2023-10-12T10:49:33.052Z",
            "content_html": "<h1 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\">#</a> 视频</h1>\n<ol>\n<li><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1vy4y1s7k6/?vd_source=636bdfc4ce8c201bed8740cf77c11dda\" >尚硅谷 GIT <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：非常不错的视频，推荐观看。我认为学习 Git 还是非常有用的，而且基础操作还是比较简单的，初学者也不必担心。<a class=\"link\"   href=\"https://xiqin-huang.github.io/2022/10/14/bian-cheng/shang-huo-gu-git/#toc-heading-3\" >视频笔记 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1ER4y157uA\" >哈佛大学 CS50X <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：计算机先导课，个人感觉很适合新手和想要了解计算机的同学学习，讲的很不错。目前看到第 5 集，争取这个学期看完</li>\n<li><a class=\"link\"   href=\"https://www.bilibili.com/video/BV13J411J7Vu\" >数据库系统概论 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：目前学习到 45 集，争取下个月完成。</li>\n</ol>\n<h1 id=\"书籍\"><a class=\"markdownIt-Anchor\" href=\"#书籍\">#</a> 书籍</h1>\n<ol>\n<li>HeadFirst Java：比较通俗易懂的一本书，个人感觉还行，但是有些地方挺无厘头的，而且有些地方挺啰嗦的。如果时间比较充裕，可以阅读一下，时间不充裕的话，不读也不可惜。<a class=\"link\"   href=\"https://xiqin-huang.github.io/2022/10/22/java/headfirst-java/\" >读书笔记 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>稀缺：今年读过的最好的一本书，对自己的认识加深了，也尝试运用书中的建议来规划自己的未来。<a class=\"link\"   href=\"https://xiqin-huang.github.io/2022/10/06/shu-ji/xi-que-mei-mu-lai-na-sen-97/\" >读书笔记 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>置身事内：中国政府与经济发展：一本科普型的经济读物，对了解中国经济发展非常有利。<a class=\"link\"   href=\"https://xiqin-huang.github.io/2022/10/31/shu-ji/zhi-shen-shi-nei-zhong-guo-zheng-fu-yu-jing-ji-fa-zhan-lan-xiao-huan-93/\" >读书笔记 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ol>\n<h1 id=\"本月总结\"><a class=\"markdownIt-Anchor\" href=\"#本月总结\">#</a> 本月总结</h1>\n<p>这个月看了比较多的计算机外书籍，虽然花了额外的时间，但是从书中收获了很多，也提高了学习的效率。CS50X 这门课虽然没有讲很多的具体技术，但是让我对计算机的了解加深了不少。但随着下半学期的到来，各种大作业和考试，课外书籍的阅读和技术学习会先暂停一下，专心完成老师要求的任务。下个月就要完成老师布置的各项大作业和开始准备考试，感觉还是挺大压力的，学习强度也高，幸好导师还不错，学就完事了。这个月最让人心烦的是计算机网络老师布置的作业，上课拧螺丝，下课造飞机，布置的作业远超我们的水平，不知道怎么糊弄过去。顺便问一下有人知道 HTTP1.1 的 host 怎么指定吗，访问网络的时候出现 400 错误码。比较开心的是这个月也算效率不错，学到了很多东西，然后自己的博客也用了鱼皮的图床，能够显示图片了，美观了不少。</p>\n<h1 id=\"未来计划\"><a class=\"markdownIt-Anchor\" href=\"#未来计划\">#</a> 未来计划</h1>\n<ol>\n<li>完成数据库系统概论</li>\n<li>完成吴恩达深度学习</li>\n<li>阅读数据库源码，<em>阅读过的人能分享一下经验吗</em></li>\n<li>完成分布式汇报</li>\n<li>准备深度学习的考试</li>\n</ol>\n",
            "tags": [
                "月报"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "url": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "title": "研一十二月月报",
            "date_published": "2023-10-12T10:49:33.050Z",
            "content_html": "<h1 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\">#</a> 视频</h1>\n<ol>\n<li>深入浅出计算机网络，目前看完了概述和网络层部分，现在正在看数据链路层。</li>\n</ol>\n<h1 id=\"书籍\"><a class=\"markdownIt-Anchor\" href=\"#书籍\">#</a> 书籍</h1>\n<ol>\n<li>三体第一部</li>\n<li>目前正在看三体第二部和南明史</li>\n</ol>\n<h1 id=\"本月总结\"><a class=\"markdownIt-Anchor\" href=\"#本月总结\">#</a> 本月总结</h1>\n<p>这个月基本没有做自己的事情，都是在完成课程设计和复习期末考试。课程设计主要是计算机网络、算法设计、学术论文写作和自然辩证法等课程，这里面大多数只要愿意花时间都能够完成的，除了计算机网络，这个真的难搞而且还和期末成绩挂钩，真的担心挂科。计算机网络还是靠别人指导才顺利完成，希望能过。然后就是在复习期末考试了，虽然是线上考试，但是也不轻松。这个月还面临疫情的重要转向，突然的放开多少影响了我的心态，而且父母也阳了，我就负责做家务了，也因此少了很多时间学习，而且因为担心父母的情况，也很难专心的学习。这个月轮到我汇报，还挺水的，老师的要求好像挺高的，读研也不轻松，好像做自己的事情。这个月应该是效率较低的一个月了，心理内耗严重，陷入了稀缺的状态。这是 2022 年的最后一个月，也是研究生的第一学期，算是合格的度过了，希望下一年有更好的未来。</p>\n<h1 id=\"未来计划\"><a class=\"markdownIt-Anchor\" href=\"#未来计划\">#</a> 未来计划</h1>\n<ol>\n<li>完成深入浅出计算机网络</li>\n<li>看完小林的图解网络</li>\n<li>阅读三体和南明史</li>\n<li>考驾照，这件事真的拖了很久了</li>\n</ol>\n",
            "tags": [
                "月报"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E5%8D%81%E4%B8%80%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "url": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E5%8D%81%E4%B8%80%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "title": "研一十一月月报",
            "date_published": "2023-10-12T10:49:33.049Z",
            "content_html": "<h1 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\">#</a> 视频</h1>\n<ol>\n<li><a class=\"link\"   href=\"https://www.bilibili.com/video/BV15x411j7k6/\" >latex <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：因为要写课程论文和为以后写论文做准备，就去学了 latex，个人感觉 latex 的学习曲线还是挺陡峭的。而且 latex 教程的水平也参差不齐，这个视频是我看到的最适合我的，没有很多理论上的讲解，都是直接演示。我觉得 latex 还是很值得学习，学的时候不追求学的很精通，先学会基本操作，然后逐渐提高即可。</li>\n<li><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1ER4y157uA/\" >CS50X <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：之前一直看的哈佛大学 CS50X 计算机先导课，个人感觉还是很棒的，个人感觉很适合新手和想要了解计算机的同学学习，如果水平较高的看可能会觉得讲的太简单了一点。这个月也把这系列课程看完了，个人比较推荐。</li>\n<li><a class=\"link\"   href=\"https://www.bilibili.com/video/BV13J411J7Vu\" >数据库系统概述 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：终于把数据库系统概述看完了，感觉还是有不少收获的。</li>\n</ol>\n<h1 id=\"书籍\"><a class=\"markdownIt-Anchor\" href=\"#书籍\">#</a> 书籍</h1>\n<ol>\n<li><a class=\"link\"   href=\"https://xiqin-huang.github.io/2022/11/04/bian-cheng/bian-cheng-zhu-ji-qiao-en.ben-te-li-85/\" >编程珠玑 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：看完有点失望的书，但是这本书赞誉不少，但是看完觉得要不都是算法课已经学过的东西，要不就是完全看不懂的问题。然后课后的习题答案也很简陋，每次做完看答案核对就很心累。</li>\n<li><a class=\"link\"   href=\"https://xiqin-huang.github.io/2022/11/30/shu-ji/ming-mo-nong-min-zhan-zheng-shi-gu-cheng-93/\" >明末农民战争史 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：一本让我感慨万千的书，书中短短的几行字，背后就是水深火热的农民生活，看着他们一步步走向成功，眼看着可以迎来光明的未来，却快速掉入深渊，遭受更大的苦难。</li>\n</ol>\n<h1 id=\"本月总结\"><a class=\"markdownIt-Anchor\" href=\"#本月总结\">#</a> 本月总结</h1>\n<p>这个月应该是效率最低的一个月了，由于广州疫情的原因，在学校线下上课可能就几天，不是番禺区封控，就是学校封控，自己的节奏都被打乱了，很难受。在宿舍也很难集中精神去学些什么，只能尽量先把老师布置的作业去完成，感觉精神内耗挺严重的。尝试自己去搭建深度学习网络来口罩识别，也去读了 MySQL 数据库源码，感觉也没有想象中的难。十月份定下的任务也完成了一部分，也不算什么都没干，但是效率确实不行。</p>\n<h1 id=\"未来计划\"><a class=\"markdownIt-Anchor\" href=\"#未来计划\">#</a> 未来计划</h1>\n<ol>\n<li>准备期末考试，全面复习</li>\n<li>完成老师布置的课程论文</li>\n</ol>\n",
            "tags": [
                "月报"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E4%BA%8C%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "url": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E4%BA%8C%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "title": "研一二月月报",
            "date_published": "2023-10-12T10:49:33.047Z",
            "content_html": "<h1 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\">#</a> 视频</h1>\n<ol>\n<li>学完了韩顺平 Linux 的基础篇。</li>\n</ol>\n<h1 id=\"书籍\"><a class=\"markdownIt-Anchor\" href=\"#书籍\">#</a> 书籍</h1>\n<ol>\n<li>小林的图解计算机网络。</li>\n<li>南明史上册。</li>\n<li>鲁迅杂文精选。</li>\n</ol>\n<h1 id=\"本月总结\"><a class=\"markdownIt-Anchor\" href=\"#本月总结\">#</a> 本月总结</h1>\n<p>和上一个月类似，主要精力都花费在处理家里的事务了，这段时间确实成长了很多。学会了和社会上的人去打交道，去办业务，还是很充实的。然后也开学一周了，感觉也是逐渐进入学习模式了，现在就是全力完成 Linux 的学习任务，争取在这宝贵的时间里面多学点东西。这个月也和以前的朋友一起出来聊天，感觉大学毕业快一年了，大家的心态都发生了很大的转变，有人想继续考研，有人想回到家乡，还是挺感慨的。除了开学以后学了一点 Linux，这个月就没学什么其他东西了，希望下个月能够提高学习效率，毕竟这学期课程不多。</p>\n<h1 id=\"未来计划\"><a class=\"markdownIt-Anchor\" href=\"#未来计划\">#</a> 未来计划</h1>\n<ol>\n<li>完成韩顺平的 Linux。</li>\n<li>刷完代码随想录。</li>\n<li>看完随机漫步的傻瓜。</li>\n</ol>\n",
            "tags": [
                "月报"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E4%B9%9D%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "url": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E4%B9%9D%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "title": "研一九月月报",
            "date_published": "2023-10-12T10:49:33.045Z",
            "content_html": "<h1 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\">#</a> 视频</h1>\n<ol>\n<li>韩顺平零基础 30 天学完 java 的第三阶段，主要学习了网络编程和数据库操作。<a class=\"link\"   href=\"https://xiqin-huang.gitee.io/2022/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/\" >视频笔记 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>宋红康 - 全网最全 Java 零基础入门教程 java8 部分，学习了 lambda 表达式和 Stream API。</li>\n</ol>\n<h1 id=\"书籍\"><a class=\"markdownIt-Anchor\" href=\"#书籍\">#</a> 书籍</h1>\n<ol>\n<li>《半小时漫画计算机》和《码农翻身》，科普式的计算机书，很有意思。</li>\n<li>《淘宝技术这十年》，老师推荐看的，还不错。</li>\n<li>《网络是怎么链接的》，计算机网络相关书籍。</li>\n<li>《浪潮之巅》，了解了众多科技公司兴衰。<a class=\"link\"   href=\"https://xiqin-huang.gitee.io/2022/09/10/shu-ji/lang-chao-zhi-dian-wu-jun-93/\" >读书笔记 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ol>\n<h1 id=\"本月总结\"><a class=\"markdownIt-Anchor\" href=\"#本月总结\">#</a> 本月总结</h1>\n<p>本月最大的工作应该是把韩老师的 java 零基础课程看完，说实话这个视频真的干货满满，我从中学到了很多。然后 java8 则是掌握了更多 java8 编程的技巧。然后看了一些计算机的书籍，加深了对计算机的理解。本来是想着每周写一次周报的，但是课业压力挺大的，老师布置的作用挺有挑战性的，然后平时也得给实验室干活，所以感觉月报会更适合，可以更宏观的进行规划。未来的模式应该也是每月月报，然后按照鱼皮的 java 学习路线继续往下学。</p>\n<h1 id=\"未来计划\"><a class=\"markdownIt-Anchor\" href=\"#未来计划\">#</a> 未来计划</h1>\n<h2 id=\"必须完成\"><a class=\"markdownIt-Anchor\" href=\"#必须完成\">#</a> 必须完成</h2>\n<ol>\n<li>阅读《HeadFrist Java》。</li>\n<li>阅读《稀缺 - 我们是怎么陷入贫穷与忙碌的》，《置身事内》。</li>\n<li>阅读《图解 HTTP》，《程序是怎么运行的》，《MySQL 必知必会》。</li>\n</ol>\n<h2 id=\"尽量学习\"><a class=\"markdownIt-Anchor\" href=\"#尽量学习\">#</a> 尽量学习</h2>\n<ol>\n<li>观看尚硅谷 Java 数据结构与算法，并配合 LeetCode 刷题。</li>\n<li>学习计算机网络，观看计算机网络微课堂，并阅读对应书籍《深入浅出计算机网络》。</li>\n<li>阅读小林的《图解计算机网络》。</li>\n<li>学习数据库，阅读《MySQL 是怎样运行的》。</li>\n</ol>\n",
            "tags": [
                "月报"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E4%B8%89%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "url": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E4%B8%89%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "title": "",
            "date_published": "2023-10-12T10:49:33.043Z",
            "content_html": "<h1 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\">#</a> 视频</h1>\n<ol>\n<li>完成韩顺平 Linux 视频的学习。<a class=\"link\"   href=\"https://xiqin.xyz/linux/\" >Linux - 韩顺平 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>学习的三分之二的 Javaweb，由于之前有学过 Python 的 Django 框架，所以感觉还挺轻松的，就是配置环境的部分比较难，因为和老师使用的版本不太一致。争取蓝桥杯比赛完之后把这套教程解决，开启 Java 开发框架的学习。</li>\n</ol>\n<h1 id=\"书籍\"><a class=\"markdownIt-Anchor\" href=\"#书籍\">#</a> 书籍</h1>\n<ol>\n<li>完成绝大部分的代码随想录，还剩下动态规划的一部分尚未完成。不得不说，刷题还是按照路线来比较效率高，既节省了时间，也加深了对同一类型题目的理解。</li>\n<li>看完了随机漫步的傻瓜，感觉对自己和对社会的理解都改变了，一本非常值得一看的书，学点数学对生活还是很有好处的。<a class=\"link\"   href=\"https://xiqin.xyz/suijimanbudshagua/\" >随机漫步的傻瓜 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>看完了程序是怎么跑起来的，看了一个上午就看完了，算是一本还不错的科普书籍。</li>\n</ol>\n<h1 id=\"本月总结\"><a class=\"markdownIt-Anchor\" href=\"#本月总结\">#</a> 本月总结</h1>\n<p>这个月算是完整上学的一个月，家里的琐事也完成的七七八八了，所以这个月效率高了不少。首先是完成上个月剩下的 Linux 教程，花了几天时间把这个教程收尾了，讲的很好，对 Linux 的基础操作熟练了不少，也学了一些进阶知识。然后就开始刷代码随想录，这个是拖了很久的任务了，考完研就买了这本书，终于这个月把它给完成了七七八八，还剩下最难的动态规划部分需要攻克。至于 Javaweb 教程算是开启 Java 的开发框架的第一课，了解基础知识，为了下个月的蓝桥杯，只能暂时搁置，已经推进了三分之二了，剩下部分就等蓝桥杯结束后再完成。还有就是看完了随机漫步的傻瓜和程序是怎么跑起来的，看书的时间还是太少了一点，下个月要增加看书的时间。总的来说，这个月还是效率很高的，上个月的计划都完成的不错。然后家里的事情也处理的不错，拿到车并且练了一段时间的车，感觉车技是有所进步的，希望能够兼顾学业和家庭上事务。今天还是一个特殊的日子，不仅是愚人节，而且是我知道自己被暨大录取的一周年时间，这一年我的生活改变了很多，遇到了很多此前没有遇到的问题和挫折，逐渐学会去适应变化和不确定。而且这一年间改变了我的很多想法，之前我对社会有很多不切实际的想法，现在也被逐渐的修正。希望能够继续努力吧，争取下学期能够去实习一下，体验一下工作是一种什么样的体验。之前还去听了华为的宣讲会，感觉学好 Java 还是能找到不错的工作的，争取减轻父母的负担。</p>\n<h1 id=\"未来计划\"><a class=\"markdownIt-Anchor\" href=\"#未来计划\">#</a> 未来计划</h1>\n<ol>\n<li>完成代码随想录，并参加蓝桥杯。</li>\n<li>完成 Javaweb 的学习。</li>\n<li>完成组会汇报。</li>\n<li>看完编码：隐匿在计算机软硬件背后的语言。</li>\n<li>看完计算机是怎样跑起来的。</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E4%B8%80%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "url": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E7%A0%94%E4%B8%80%E4%B8%80%E6%9C%88%E6%9C%88%E6%8A%A5/",
            "title": "研一一月月报",
            "date_published": "2023-10-12T10:49:33.041Z",
            "content_html": "<h1 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\">#</a> 视频</h1>\n<ol>\n<li>完成深入浅出计算机网络的学习。</li>\n</ol>\n<h1 id=\"书籍\"><a class=\"markdownIt-Anchor\" href=\"#书籍\">#</a> 书籍</h1>\n<ol>\n<li><a class=\"link\"   href=\"https://xiqin-huang.github.io/2023/01/06/shu-ji/san-ti-liu-ci-xin-95/\" >三体 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>：虽然高中的时候就已经看过一遍了，但是再看一遍还是觉得很棒，大刘不愧为中国科幻第一人。</li>\n<li>目前正在看南明史的上册。</li>\n</ol>\n<h1 id=\"本月总结\"><a class=\"markdownIt-Anchor\" href=\"#本月总结\">#</a> 本月总结</h1>\n<p>要说学习的话，实际上只是把深入浅出计算机网络给解决了。这个月并没有做太多学习上的事情，都在忙一下生活上的事情，拖了很长时间的驾照问题终于接近解决了，没想到考驾照也并不是这么简单，还是有点难度的，接下来把科四考了就可以试着上路驾驶了。然后也解决了家里的事情，还有过年探亲的事情，这个月其实也算是很充实了。没办法毕竟自己身份已经不是高中生了，也要帮助家里解决生活上的问题，只能先把问题延后到下个月开学以后再解决吧。</p>\n<h1 id=\"未来计划\"><a class=\"markdownIt-Anchor\" href=\"#未来计划\">#</a> 未来计划</h1>\n<ol>\n<li>看完小林的图解网络</li>\n<li>阅读南明史</li>\n<li>能够上路驾驶汽车</li>\n<li>学习 Linux</li>\n</ol>\n",
            "tags": [
                "月报"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E6%95%B0%E5%AD%A6%E8%B7%A8%E8%80%83%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF%E7%BB%8F%E9%AA%8C%E8%B4%B4/",
            "url": "http://example.com/2023/10/12/%E7%A0%94%E7%A9%B6%E7%94%9F/%E6%95%B0%E5%AD%A6%E8%B7%A8%E8%80%83%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF%E7%BB%8F%E9%AA%8C%E8%B4%B4/",
            "title": "暨大计算机|数学跨考计算机技术经验贴",
            "date_published": "2023-10-12T10:49:33.040Z",
            "content_html": "<h1 id=\"如何选择学校和专业\"><a class=\"markdownIt-Anchor\" href=\"#如何选择学校和专业\">#</a> 如何选择学校和专业</h1>\n<p>在备考过程中，选择学校和专业是一件非常让人头疼的事情，我当时在这个问题上也花费了不少的时间。我当时是考虑了下面的几个问题，最终找到了自己的选择。</p>\n<blockquote>\n<p>考研中，选择大于努力。</p>\n</blockquote>\n<ol>\n<li>\n<p>未来想从事的行业？</p>\n<p>我未来想要从事后端开发，所以我会选择计算机相关的专业，而且会优先选择专硕，比较偏向应用层面。然后可选的专业有软件工程、计算机技术、网络安全和人工智能等。</p>\n</li>\n<li>\n<p>理想的工作地点？</p>\n<p>由于我家在广州，所以优先选择的工作地点是广州。第二选择是深圳，因为深圳大厂比较多，而且离广州也很近，非常方便。除非有特殊情况，<s>比如去杭州阿里</s>。否则应该会选择留在广东，例如佛山和东莞。</p>\n</li>\n<li>\n<p>是否能接受考英一？</p>\n<p>因为我的英语水平是比较差的，属于英语四级考了 3 次，勉强过线的水平，入学英语分班也是属于最末尾的班。由于担心过不了英语单科线，所以我是不能接受考英一的，会选择考英二的学校。</p>\n</li>\n<li>\n<p>是否能接受专业课为 408？（计算机专属）</p>\n<p>408 是计算机统考的专业课，包含计算机组成原理、数据结构、操作系统和计算机网络四门专业课，属于是计算机考研中难度最大的专业课，除了清华的 912，那个应该算是加强版的 408。由于我是数学跨考计算机，如果选择 408，要自学的内容比较多，而且我还要恶补英语，所以我不能接受 408，比较倾向于选考两门及以下的学校，最好是考数据结构，因为这个我比较擅长。</p>\n</li>\n<li>\n<p>能不能接受二战？</p>\n<p>我是不打算二战的，如果没考上，也不会再考一次了。所以我是倾向于求稳的，因此我选择的院校范围是 211 和一些计算机领域比较优秀的双非，争取能够一次上岸。</p>\n</li>\n<li>\n<p>学校的风评好不好？</p>\n<p>考研和高考不同，有复试环节，不是说分高就能够被录取，复试环节的操作空间很大。因此学校的风评很重要，谁都不想自己一年的努力被不公正的学校毁了。有些学校会歧视双非，优先选择 211 及以上的学校；有的学校还会恶意刷一志愿，来收调剂生，确实会有些学校比较恶心，我们不能回避这个现实，因此我们要关注学校的风评。</p>\n</li>\n<li>\n<p>复试分数占比？</p>\n<p>我希望选择复试占比较少的学校，因为这样学校操作空间比较小，只需要专心考好初试即可。而且我属于跨考，也没有项目经验，也不是出身名校，我是感觉自己复试可能不会有太大的优势。我原本的目标是初试 400 分，然后复试守住排名，不要掉太多名次。<s>不过现实恰好相反了，初试考的不怎么好，反而复试逆袭了。</s></p>\n</li>\n<li>\n<p>学校的专业实力如何？</p>\n<p>大家考研都是想提升自己的学历，提高自己的水平。所以学校的实力很重要，因为好的学校可以为你提供更好的学习资源，毕业之后也不会被卡简历关，可以为就业提供加成。对于想做研究的同学来说，在好学校获得更好的资源也有利于产出成果。我当时是以教育部的学科评估为主，然后网上收集相关的信息来判断的。</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>当时我的备选名单中有暨南大学、深圳大学、杭州电子科技大学和南方科技大学。在考虑完这 8 个问题后，我就选择报考暨南大学的计算机技术专硕。因为暨大地处广州，然后在华南地区的名声也很不错，也是 211，然后我高中的时候就想考暨大，也算是弥补了一点高考时的遗憾。然后暨大是考英二数二，专业课是自命题，考操作系统和数据结构，符合我的要求。暨大的计算机科学与技术在最新一轮的评估中是 B，还算可以。广东地区中大华工是 B+，暨大深大是 B，然后华农广工是 C，其余高校没有上榜。然后暨大是不接受校外调剂的，比较保护一志愿，然后网上的风评还不错。最后我自身体验也很不错，确实做到了公平对待学生，这部分我留在复试部分再展开讲。</p>\n<p>讲了不少暨大的优点，现在讲一下不符合我要求的部分。首先是专业问题，我最想去的其实是软件工程专业，但是暨大是没有开设这个专业的，所以我选择了比较热门的计算机技术。然后是复试占比问题，暨大复试原比例是 5:5，有机试部分，由于疫情的原因，取消了机试，比例也降为了 6:4。然后复试总分是 200，暨大会先将初试成绩除以初试总分，复试成绩除以复试总分，再 6:4 计算，化简后的计算公式为总成绩 = 初试分数 * 0.6 + 复试分数，复试占比还是挺高的。然后上一年的复试比例是 1:1.8，复试线是 361，压力还是挺大的。最后我想说其实不太可能有完全满足自己需求的学校，需要我们根据自身需求进行取舍。</p>\n<h1 id=\"备考过程\"><a class=\"markdownIt-Anchor\" href=\"#备考过程\">#</a> 备考过程</h1>\n<h2 id=\"作息时间\"><a class=\"markdownIt-Anchor\" href=\"#作息时间\">#</a> 作息时间</h2>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8 点</td>\n<td>起床</td>\n</tr>\n<tr>\n<td>8 点半 - 11 点半</td>\n<td>阅览室学习</td>\n</tr>\n<tr>\n<td>11 点半 - 下午 2 点半</td>\n<td>吃饭、休息和睡午觉</td>\n</tr>\n<tr>\n<td>下午 2 点半到 6 点</td>\n<td>阅览室学习</td>\n</tr>\n<tr>\n<td>下午 6 点 - 8 点</td>\n<td>跑步和吃饭</td>\n</tr>\n<tr>\n<td>晚上 8 点 - 10 点</td>\n<td>背诵知识点和总结</td>\n</tr>\n<tr>\n<td>晚上 11 点</td>\n<td>睡觉</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"各科目标\"><a class=\"markdownIt-Anchor\" href=\"#各科目标\">#</a> 各科目标</h2>\n<p>在开始备考之前，我们需要根据所选的学校和专业，估算自己初试所需要的分数，然后分配到每个科目上。有了对每个科目的目标分数，有利于我们确定对该学科的学习计划。我当时反思了自己高考的问题，就是对自己优势学科数学和物理期待太高，然后发挥不理想。对于弱势学科英语，出于畏难情绪，直接摆烂不学。所以这次我的目标是均衡发展，英语和政治目标是 75，然后数学和专业课目标是 125，总分目标是 400。决定好目标分数，我就开始制订学习计划。</p>\n<h2 id=\"政治\"><a class=\"markdownIt-Anchor\" href=\"#政治\">#</a> 政治</h2>\n<p><strong>书籍：徐涛《核心教案》+《背诵笔记》；肖秀荣《1000 题》+《八套卷》+《四套卷》+《时政》</strong></p>\n<p><strong>视频：徐涛强化班</strong></p>\n<p><strong>公众号：考研政治徐涛、苏一说了</strong></p>\n<p>我是在暑假才开始政治复习，主要就是晚上看徐涛的强化班，然后使用配套书籍《核心教案》，看完一个专题就做肖秀荣的《1000 题》对应的章节。我认为政治可以较晚的开始复习，不过我建议大四开学应该要开始了，因为到后面时间比较紧张。我个人认为可以暑假开始，然后利用晚上或者零散的时间听一下。** 主要听马原部分，思修部分时间紧张可以跳过。** 网上建议《1000 题》要刷 3 遍才可以，因为我目标不是很高，所以我只刷了一遍，第二遍只做了马原的错题。然后我每天都会在闲余时间都会看一下徐涛的公众号，积累一些素材和了解考研资讯，<s> 顺便看看评论区吐槽考研</s>。我个人觉得徐涛的内容挺有意思的，我考上了之后也没有取关。</p>\n<p>然后等《背诵笔记》和《时政》出版后就开始背内容，虽然也只背了马原部分。然后按部就班的做《八套卷》和《四套卷》，只背了《四套卷》的论述题。这里推荐一下苏一说了这个公众号，B 站上也有带背视频，提供肖四和肖八的带背，会将论述题答案进行精简和画思维导图，选择题会有答案解析，还会进行拓展，我个人觉得还蛮不错的。</p>\n<p>总而言之，我认为政治是不太容易拉开差距的科目，把我上述的书籍和视频都过一遍，应该 70 分左右是没有问题的。</p>\n<h2 id=\"英语\"><a class=\"markdownIt-Anchor\" href=\"#英语\">#</a> 英语</h2>\n<p><strong>书籍：田静《句句真研》；《考研真相》；王江涛《考研英语高分写作》</strong></p>\n<p><strong>视频：英语真题解析、田静句句真研、英语分级阅读</strong></p>\n<p><strong>B 站 up 主：英语兔、罗肖尼 Shawney、YouTube 口语精选</strong></p>\n<p><strong>我建议英语较差的同学可以去看一下 B 站罗肖尼 Shawney 的视频</strong>，我看完之后收获很大。除了少数人外，大家的智力水平其实相差无几，那为什么大家的英语水平可以相差那么多。我以前认为是自己没有语言天赋，现在我觉得只是我的学习方法和老师讲授的方法不适合我。长久以来，我都在用一种错误的方式学习英语，用学数学的方法学习英语，试图搞清楚每个选项的原因，做到知其然，也知其所以然。然后死磕语法，死记硬背语法规则，很讨厌别人跟我说 “这题我是靠语感选的”。然后在一次次的失败中丧失对英语的兴趣。其实不应该是这样的，回想我们是如何学中文的，我们是经历了孩童时期的耳濡目染，听了很多中文，阅读了很多中文才学会的，我们讲话也不是先想一想有没有语法错误，而是自然而然的表达。所以为什么我们学英语就不能这样呢？</p>\n<p>所以我建议英语较差的同学从背单词开始做起，单词是基础中的基础，我当时用的是不背单词这个 APP，还挺好用的。在积累了一定量之后，可以开始看田静的《句句真研》，学习基本的语法。B 站的<strong>英语兔</strong>也非常推荐，讲的非常基础，真正做到了深入浅出，解答了很多我之前积累的问题。等打好基础后，可以开始背王江涛的《考研英语高分写作》，背作文不是为了到时在考场上默写的，毕竟遇到相同题材的几率不大。<strong>背作文是为了有好的英文输入</strong>，所以不能死记硬背，而是在背诵中了解到优秀的文章是怎么组织的。我当时是先背中文，分析文章的框架，然后背诵英文，先在纸上默写一遍，再给同学背一遍，然后从中选择好用的例句进行重点记忆。背作文是一个提高语感的方法，背作文之前我做真题阅读错误率很高，随着背作文，我对文章的理解能力提高的很快，后期我做阅读能够保持错 3 个以内，这对我来说真的很不容易了。有时真的是靠语感选出来的，感觉文章就想表达这个意思，<s>终于我也成为了自己最 “讨厌” 的人</s>。然后时间充裕的同学，可以去 B 站 YouTube 口语精选内找英语分级阅读，一共有 5 个等级，可以挑选自己能力范围的内容。在阅读的时候，不需要查语法和单词，就开开心心的听就完事了，里面选的内容都挺有趣的，现在我也一直在听。也可以找自己喜欢的英语内容，兴趣是最好的老师。然后做考研真题我选的是《考研真相》，答案解析做的很不错，非常推荐。</p>\n<p>英语是需要我们细水长流的积累的，贵在坚持，尤其是英语较差的同学，应该尽早开始。以我这样基础差的也能够拿到 70 分，我相信大家也能做到，之前做不到可能只是方法不适合而言。** 关键在于英语输入，可以阅读也可以听，选择自己喜欢的方式学英语。** 然后不要恐惧学英语，其实也没那么难，我觉得这期间最难的是决定去学好英语。</p>\n<h2 id=\"数学\"><a class=\"markdownIt-Anchor\" href=\"#数学\">#</a> 数学</h2>\n<p><strong>书籍：汤家凤《高等数学辅导讲义》；李永乐《线性代数辅导讲义》+《历年真题》+《660》+《复习全书基础篇》；李林《四套卷》；《定理速查笔记》</strong></p>\n<p><strong>视频：汤家凤高数基础班 + 强化班；李永乐线代基础班 + 强化班</strong></p>\n<p>由于前期的精力都在学英语和专业课上，期间又考虑是读研，还是找工作的问题上纠结，浪费了很多时间。~~ 加上当时比较自信，觉得自己数学比较好，而且又是数学系的，数学应该问题不大。~~ 所以我是暑期才开始系统的学考研数学，也算是一大失误，大家不要学我，导致后面时间很紧张，影响了其他科目的复习。当时看汤家凤的高数基础班和对应的书，看完就做李永乐的《复习全书基础篇》，我感觉我们学的数学和考研数学还是有一定差距的，我们学的比较偏向证明，而考研数学更侧重于计算，运算技巧很重要。然后听李永乐的课和做辅导讲义，做完后就开始做《660》。顺便说一句，李永乐的书经常有基础篇和提高篇之分，不要买错了。《660》还是很不错的，推荐使用，题量适中，不过感觉线代部分过于简单。建议再做《330》，我当时因为时间不够，直接跳过了，选择做真题。《660》完成后就继续听强化课，尤其是<strong>李永乐的线代强化课</strong>，真的质量超级高，当时听完有种醍醐灌顶的感觉。</p>\n<p>强化课听得差不多了，我就开始做历年真题，我把数二历年真题全部做了一遍，可以用作模拟，在规定时间内做完一套真题。<strong>做真题价值很高</strong>，可以感受到出题人的思路和练习高质量的题目，时间紧迫的话，可以像我一样，放弃一些模拟题，去做真题。做完真题后去做李林的《六套卷》和《四套卷》，质量很不错，我当时是只做了《四套卷》。还有就是要注重基础，建议买一本速查笔记，多看看，记牢基础概念。我就是时间紧张，基础没打好，导致做错了一些基础题，没拿到应拿的分数。同时注重计算，计算的正确率很重要，会做但是经常算错也是没有用的。我觉得计算正确率与做草稿的方式关系很大，要养成<strong>好的草稿习惯</strong>，可以将草稿纸折成多个小格，然后分区域书写，标好题号方便检验。</p>\n<p>学数学需要理解，做题不要太死板，要知道每一步是怎么做的，也要知道每一步为什么要这样做。和英语学习不同，学数学要做到知其然，也要知其所以然，这样在题目变化的时候也能够适应。<strong>数学 = 基础 + 理解</strong>。</p>\n<h2 id=\"专业课\"><a class=\"markdownIt-Anchor\" href=\"#专业课\">#</a> 专业课</h2>\n<p><strong>书籍：王道《操作系统》+《数据结构》；汤小丹《操作系统》</strong></p>\n<p><strong>视频：王道操作系统 + 数据结构</strong></p>\n<p><strong>公众号：灰灰考研、计算机考研助手</strong></p>\n<p>由于我有学数据结构这门课，之前自己在 LeetCode 上面做题的时候也积累了很多对数据结构的知识。所以我简单过了王道的视频，就开始刷王道的练习题。因为基础比较好，所以难度不大。操作系统是我完全没有了解过的领域，幸好暨大提供了参考书目，然后我先把汤小丹的《操作系统》看了一遍，然后看王道视频，最后刷练习题。由于对操作系统没有把握，因此我刷了两遍，第一遍全部做，用红笔圈住错误的题目，蓝笔圈住对选项不确定的题目。第二遍就做之前圈住的题目，如果再错一遍就用黑笔圈住，方便之后复习。</p>\n<p>刷完题就开始做暨大往年的真题，这个暨大还是蛮好的，会公布每年的题目。暨大自命题还是和 408 命题方向有些区别，王道是面向 408 的，所以复习的也不算很到位，数据结构是靠基础能搞定，操作系统有点吃力。毕竟是跨考，没学过这门课，感觉暨大操作系统命题怪怪的，不是很明白他想考察什么知识，知识点都挺偏的。然后想考计算机的可以关注上面两个公众号，都是专门做计算机考研资讯的，可以查各个学校的复试线，复试比例等信息。</p>\n<p>我认为计算机专业课与数学类似，要理清基础概念和原理，然后技术的革新是为了解决之前的问题的，所以我们可以以这个算法解决了之前的哪个问题作为线索来串联知识点。</p>\n<h1 id=\"考试期间\"><a class=\"markdownIt-Anchor\" href=\"#考试期间\">#</a> 考试期间</h1>\n<ol>\n<li>要在考试前调整好作息，提前适应情况。比如我有睡午觉的习惯，我当时想着考完回酒店睡，但是时间太短了，而且上午刚考完，整个人属于比较亢奋的状态，根本睡不好。这也导致了我下午的英语和专业课不太理想，尤其是专业课，起码少拿了 10 分。</li>\n<li>做好突发情况的预案，多设想一下可能出现的意外情况，想想应对方案。比如多准备几张准考证，放多几个地方。带好耳塞和眼罩，利于适应各种情况。</li>\n<li>最好带个手表看时间，方便规划时间。吃清淡点的食物，准备好自己要吃的东西。调整好心态，不要给太大的压力给自己。</li>\n</ol>\n<h1 id=\"初试结束\"><a class=\"markdownIt-Anchor\" href=\"#初试结束\">#</a> 初试结束</h1>\n<p>考完初试，可以先放松几天，然后预估自己的分数区间来做下一步的打算。如果比较理想的话，可以开始准备复试的内容和把自己毕业论文做一下，不然到时会比较被动。我当时就是考完感觉很差，可能要压线进复试了，因为今年计算机技术的名额少了 16 个，上一年是 55 个，今年只剩 39 个了。当时心情不是很好，就看了一下复试可能会考到的内容，也没有心情做毕业论文。导致我毕业论文进度太慢了，前几天才刚写完，当时设想的要实现的功能就实现了 40% 左右，所以还是要早点开始做毕业设计。然后考的不理想，觉得自己进不了复试的同学，赶紧去写毕业论文，不要浪费剩余的时间了，不然到时毕业论文和找工作一起来，压力就太大了。其实考完觉得考差是常态，因为压力之下出错是很正常的事情，而且考研的题目质量高，一紧张就很容易卡住了，所以抗压能力也很重要，我们能做到的就是多模拟，提高自己的水平，如果能在初试中发挥 90% 的水平就算是可以接受的范围了。</p>\n<p>当时出成绩的时候还挺开心的，比我预想中的要高，但是只给了大类的排名，我排电子信息的八十多名，然后电子信息有 3 个方向，招生人数差不多，然后我估计自己在计算机技术应该能在名额以内。然后就开始准备复试和写毕业论文，打算到时讲一下自己的毕业论文。</p>\n<p>没想到出复试名单的时候，看到自己排 47 名，而且是和其他 3 个同学并列。我们当时复录比为 1:2，复试分数线为 370。而且没有扩招，只有 39 个名额。但是我和前面的同学差距并不大，第 39 名同学是 384 分，只相差 3 分，而且有很多同分数的，我想还是有机会的。不过后面的同学和我相差也不大，这意味着需要逆袭前面的同学，而且还要保证不被后面的同学超过，因为我们之间的分差其实很小。当时还有一个让我比较在意的点是我英语分数居然是复试名单里面的倒数第二，倒数第一是 69 分。<s>我还想着我英语有进步了，70 分至少能排中下吧，没想到还是熟悉的倒数位置。</s></p>\n<h1 id=\"复试\"><a class=\"markdownIt-Anchor\" href=\"#复试\">#</a> 复试</h1>\n<h2 id=\"复试准备\"><a class=\"markdownIt-Anchor\" href=\"#复试准备\">#</a> 复试准备</h2>\n<p>我当时是买了复试视频和书本，也很简单的，会将计算机本科所学的课程基础过一遍。我当时是先把视频看一遍，然后再把书看一遍，算是打好计算机基础。因为我的毕业设计跟计算机相关，所以我还抽时间做了我的毕业设计，实现了一部分的功能。做完这些基础部分后，我就开始写中英文的自我介绍和问答，过了一遍自己的项目和竞赛经历，想一想老师可能会问的一些问题。然后多背诵自己的自我介绍和问答，可以找同学陪你进行模拟。</p>\n<h2 id=\"复试期间\"><a class=\"markdownIt-Anchor\" href=\"#复试期间\">#</a> 复试期间</h2>\n<p>出于学校复试要求，复试内容是不能说的，我就分享一些经验，而且每个学校复试内容都不同，其实讲的话也没啥意义。</p>\n<ol>\n<li>遇到不会的问题，如果没想好的，不用急着开始回答，可以请求老师给你时间思考。不要没想好就匆匆忙忙的回答，支支吾吾的很影响观感。如果想了之后还是不会，可以延伸到其他问题，或者诚恳一点道歉，不要找那么多理由。</li>\n<li>可以试着换位思考，想一想如果你是老师的话，你会想要一个怎么样的学生，然后尽力将自己往这个方向靠拢。把自己当作一件商品，将自己推销给面试老师这位顾客。</li>\n<li>沉着冷静是最重要的，知道的人很多，能做到的人很少。面对着陌生的老师，自己一年多的努力将被这短短二十分钟决定，说实话，挺难控制住自己的情绪波动。尤其是在面临陌生的问题，所以要多模拟，而且人选你越陌生越好，面对同学你可能表现的很好，但是遇到陌生人的问题可能效果就要打折扣了。我建议可以报个模拟面试班，很多机构都会提供这个服务。</li>\n<li>可以适当的包装一下自己，但要保证老师问不倒你，不要吹一些你圆不了的牛。所以建议还是老实一点，不然被老师戳破谎言还是挺尴尬的。</li>\n<li>引导老师问你擅长的领域，把自己的优势展示出来。比如竞赛经历，论文经历都可以写上去，然后重点展示。你要找到你自己的优势所在，然后尽力去展现你的优点，就要表现出 “老师，你快来问我这个的感觉”。</li>\n</ol>\n<h2 id=\"复试结果\"><a class=\"markdownIt-Anchor\" href=\"#复试结果\">#</a> 复试结果</h2>\n<p>看到复试结果的时候，我还挺惊讶的，本来以为自己能压线录取就很幸运，没想到是复试第七。我想说结果不会辜负你的努力的，复试期间我非常认真的准备，积极地去问别人经验。我觉得无论做什么事情，都应该全力以赴的去做，不要为自己留下遗憾。然后这次复试有 10 个人逆袭成功，刷掉了 2 个 400 分的，3 个 390 多的，还有 5 个 384（第 39 名）以上的，其中一个 400 分是深大科班出身，本来群里觉得他都稳了，还挺遗憾的。还有一个逆袭哥，压线进入复试，来自珠海科技学院，一个三本院校，无竞赛，无论文，但是在考研群里聊天感觉计算机基础很好，自己做了不少项目。然后他复试表现好，还是被录取了。还有我们的初试第一，复试完就变 31 名，复试还是很重要的。而且我个人感觉暨大复试还挺公平的，并不是走个过场。暨大的复试录取均分为 392.2，在计算机领域算是挺高的，尤其是专业课分数不高的情况下。</p>\n<p>我事后想了一下自己复试表现有哪些的优势，我觉得首先我有竞赛经历，有一个数学建模国赛二等奖和蓝桥杯国三，然后绩点也不错，华农在考暨大的生源中也还是不错的。然后虽然我当时心里挺慌的，但是我还是尽量表现的很冷静，我觉得这个是我的加分项。但是复试感觉是个黑箱模型，只有输入和输出，中间过程 —— 老师是怎么想的，我也没有办法能够得知。我建议大家可以看看复试被逆袭的人的经验贴，复试成功的人可能有各种不同的优势，但是失败的通常都会犯类似的错误。</p>\n<h1 id=\"考研原因和计算机考研介绍\"><a class=\"markdownIt-Anchor\" href=\"#考研原因和计算机考研介绍\">#</a> 考研原因和计算机考研介绍</h1>\n<p>其实刚上大学的时候是没有考研这个打算的，本来是想毕业之后去当个数学老师的。在知乎一致看好计算机领域的影响下，高考完我就自学了 Python，然后大学期间开始更深入计算机，开始学编程，学数据结构，越了解就越感觉到计算机真的很有意思，感觉动手实现一个东西还挺有趣的。当时其实就有转专业的想法，但是我又蛮喜欢数学的，然后犹豫了很久也没有转，让我坚定转行的应该是实变函数和泛函分析这门课，~~ 本来刚适应数学分析，觉得自己又行了的时候，实变和泛函给我整不会了，~~ 感觉自己没有什么数学天赋，适合做应用相关的领域。因此我这次读研也是选择了专硕，研究方向想选开发，而不是搞算法方向的。出结果之后也有不少老师联系我，想我跟着他搞算法，我个人觉得数学转计算机搞算法其实很受老师欢迎的。但是我觉得自己能力不够，我还是务实一点，能把自己能力范围内的事情做好就已经很成功了。我个人考研的目的就是为了更好的学习计算机、有个更好的文凭和给自己一点时间缓冲，因为我现在的水平在跨专业的人中算是很不错的，但是跟计算机科班出身的还有很大的差距。离我的目标进入大厂还差的远，我看了网上别人分享的后端开发的学习路线，我感觉考上研只是我漫长计算机学习生涯中的一步，后面还有很长的路要走。<strong>考上研只是代表了你获得了成为研究生的资格，而不是掌握了研究生所具备的技能</strong>，我考研期间学到的知识，无论我是否考上，它都属于我了，没学到的也不会因为我考上了而属于我。而且考研不是万能药，甚至它并不是最好的选择，<strong>它并不能解决你现在面临的问题，如果你不在读研期间解决它的话</strong>，你现在找不到工作，读研期间不提高自己的竞争力，研究生毕业也还是找不到，我希望大家能够意识到这一点。</p>\n<p>现在这个考研的大形势和计算机的热门，导致了计算机考研其实是个竞争很激烈的情况。考研和高考不同，高考的知识点基本相同，不同的学校基本就是不同的档次，所以我认为是学校优先的。然后考研由于不同的学科考的内容是不一样的，所以是专业优先的，所以我认为选择自己喜欢的专业很重要。而且少看那些什么三本三个月上岸 985 的帖子，基本都是考末流 985 的冷门中的冷门学科，就是忽悠人的，不要低估考研的难度，尤其是想转行到计算机的同学，我当时就低估了考暨大的难度，~~5 月份的时候我妈问我考暨大计算机有把握吗？我说华农考个暨大应该难度不大吧，很多二本的都能考上 985，我觉得挺稳的。~~ 然后我付出的代价也挺大，后期心态爆炸，进度完全赶不上别人，所以我觉得对于考研，不能看那些考研机构贩卖焦虑，给自己过多的压力，也不能低估考研的难度，指望自己能够最后时刻能够超常发挥，不是不可能，只是概率小，考研是一个需要漫长积累的过程。</p>\n<p>考暨大计算机技术比较不好的是调剂比较麻烦，因为数二英二自命题基本是鄙视链的底端，有些学校会限制只要数一英一，或者限制要 408。不过暨大只接受校内调剂，所以如果能调暨大校内的话，竞争会比较小，毕竟你只需要和一志愿是暨大的人竞争。今年被刷的两位 400 分同学一个去了广大的方班，一个去了广工。如果不介意去珠海的话，可以选择暨大的人工智能专业，珠海两人间，今年才第二年招生，性价比贼高，今年还扩招了一倍，复试线很低。最后我还想讲一下一个师兄的故事，当时我和你们一样，在下面听师兄分享经验，这位师兄有着极其明确的人生规划，他大一就开始关注大厂的招聘要求，然后根据要求来调整自己的学习计划，然后学一个阶段后就去应聘实习，根据反馈再调整，学完再去应聘，循环往复。他说就像打游戏刷级一样，需要哪个技能就点哪个技能。最后拿到了很多大厂的 offer，然后去了微信。他说自己是个普通人，没有过人的天赋，只能靠努力弥补。我觉得他是我们应该学习的对象，我们可能不能像 ACM 选手一样靠天赋碾压，也不能论文发到手软，但<strong>我们可以明确自己的人生目标，并努力向其靠拢。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (true) &#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;祝你们都能上岸&quot;</span>); </span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;祝你们都能上岸\\n&quot;</span>);</span><br><span class=\"line\">  printf(<span class=\"string\">&quot;祝你们都能上岸\\n&quot;</span>); </span><br><span class=\"line\">  cout &lt;&lt; <span class=\"string\">&quot;祝你们都能上岸&quot;</span> &lt;&lt; endl; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"app推荐\"><a class=\"markdownIt-Anchor\" href=\"#app推荐\">#</a> APP 推荐</h1>\n<p>水滴清单：一个做任务规划的软件，我觉得做时间规划可以极大地提高你的工作效率，同时我觉得时间规划不用做的太细，因为这样比较浪费时间而且也难以坚持下去，我个人是习惯按周和按月进行的。</p>\n<p>番茄 TODO：一个学习软件，可以定时锁屏，让你更高效的学习，还会记录你的学习情况，我是用了才发现原来我一天中真正用来学习的时间这么少。可以在学习的时候锁屏，然后设一个白名单，这样学习生活两不误。我是觉得学习的时候应该将手机放远一点，避免影响学习。</p>\n<p>MOODA 心情日记：写日记的软件，我之前一直都没有写日记的习惯，因为老是找不到日记本和不知道写啥，这个软件可以选择一天的心情，非常简便，然后每天记录自己的学习和生活是个很好的习惯，事后你再看也很有意思。</p>\n<p>不背单词：一个背单词软件，个人使用体验还是很好的。</p>\n<p>小睡眠：一个白噪音软件，如果压力比较大，睡不好的话可以听听白噪音助眠。</p>\n<p>LeetCode：计算机专属，可以做一下算法题，建议准备复试使用，也可以在上面了解一下计算机领域相关的东西。</p>\n<h1 id=\"联系方式\"><a class=\"markdownIt-Anchor\" href=\"#联系方式\">#</a> 联系方式</h1>\n<p>暨大计算机考研群：943823112</p>\n<p>暨南大学计算机考研信息汇总、报录比信息、参考书目、经验贴等信息可以参考以下链接：<a href=\"https://\">https://github.com/Steve0x2a/JNU_CS</a>。如无法访问可以访问国内镜像:<a href=\"https://\">https://gitee.com/Steve0x2a/JNU_CS</a></p>\n",
            "tags": [
                "跨考",
                "考研",
                "计算机"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%B2%81%E8%BF%85%E6%9D%82%E6%96%87%E7%B2%BE%E9%80%89_%E9%B2%81%E8%BF%85_92/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%B2%81%E8%BF%85%E6%9D%82%E6%96%87%E7%B2%BE%E9%80%89_%E9%B2%81%E8%BF%85_92/",
            "title": "鲁迅杂文精选_鲁迅_92",
            "date_published": "2023-10-12T10:49:33.034Z",
            "content_html": "<ol>\n<li>因为历史结账，不能像数学一样精密，写下许多小数，却只能学粗人算账的四舍五入，记一笔整数。</li>\n<li><strong>曙光在头上，不抬起头，便永远只能看见物质的闪光。</strong></li>\n<li><strong>不满是向上的车轮，能够载着不自满的人类，向人道前进。</strong></li>\n<li>我们更不要借了 “天下无公理，无人道” 这些话，遮盖自暴自弃的行为，自称 “恨人”，一副恨恨而死的面孔，其实并不恨恨而死。</li>\n<li>暴君的臣民，只愿暴政在他人的头上，他却看着高兴，拿 “残酷” 做娱乐，拿 “他人的苦” 当赏玩，做慰安。自己的本领只是 “幸免”。</li>\n<li><strong>人生最苦痛的是梦醒了无路可走。</strong></li>\n<li>梦是好的；否则，钱是要紧的。</li>\n<li>自由固不是钱所能买到的，但能够为钱而卖掉。</li>\n<li>天下事尽有小作为必大作为更烦难的。</li>\n<li><strong>人们因为能忘却，所有自己能渐渐脱离了受过的苦痛，也因为能忘却，所有往往地再犯前人的错误。</strong></li>\n<li>我们无权去劝诱人做牺牲，也无权阻止人去做牺牲。</li>\n<li><strong>悲剧将人性的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。</strong></li>\n<li><strong>我们极容易变成奴隶，而且变了之后，还万分喜欢。</strong></li>\n<li>然而由本身的矛盾或社会的缺陷所生的苦痛，虽不正视，却要身受的。</li>\n<li>一天一天的满足着，即一天一天的堕落着，但又觉得日见其光荣。</li>\n<li>暴君的专制使人们变成冷嘲，愚民的专制使人们变成死相。</li>\n<li>不革新，是生存也为难的，而况保古。</li>\n<li>一要生存，二要温饱，三要发展。</li>\n<li><strong>勇者愤怒，抽刃向更强者；怯者愤怒，却抽刃向更弱者。</strong></li>\n<li>不可救药的民族，一定有许多英雄，专向孩子们瞪眼。</li>\n<li>我之所谓生存，并不是苟活；所谓温饱，并不是奢侈；所谓发展，并不是放纵。</li>\n<li>唯独半死半生的苟活，是全盘失错的。因为他挂了生活的招牌，其实却引人到死路去。</li>\n<li><strong>即使慢，驰而不息，纵令落后，纵令失败，但一定可以达到他所向的目标。</strong></li>\n<li><strong>我独不解中国人何以于旧状况那么心平气和，于较新的机运就那么疾首蹙额；于已成之局那么委曲求全，于初兴之事就那么求全责备？</strong></li>\n<li><strong>久受压制的人们，被压制时只能忍苦，幸而解放了便只知道作乐，悲壮剧是不能久留在记忆里的。</strong></li>\n<li>蜜蜂的刺，一用即丧失了它的生命；犬儒的刺，一用则苟延了他的生命。</li>\n<li><strong>人类的悲喜并不相通，我只觉得他们吵闹。</strong></li>\n<li><strong>一见短袖子，立即想到白臂膊，立即想到全裸体，立即想到生殖器，立即想到性交，立即想到杂交，立即想到私生子。中国人的想象惟在这一层能够如此跃进。</strong></li>\n<li>没有更激烈的主张，他们总连平和的改革也不肯行。</li>\n<li>幼稚是会生长，会成熟的，只不要衰老，腐败，就好。</li>\n<li>革命的完结，大概只因为投机者的潜入。</li>\n<li>仅大叫未来的光明，其实是欺骗怠慢的自己和怠慢的听众的。</li>\n<li>人必有所缺，这才想起他所需。</li>\n<li>某一种人，一定只有某种人的思想和眼光，不能越出他本阶级之外。</li>\n<li>童年的情形，便是将来的命运。</li>\n<li>奴隶们受惯了猪狗的待遇，他只知道人们无异于猪狗。</li>\n<li>得到了 “深于事故” 的恶谥者，却还是因为 “不通世故” 的缘故。</li>\n<li>自称酷爱和平的人民，也会有杀人不见血的武器，那就是造谣者。</li>\n<li>谣言世家的子弟，是以谣言杀人，也以谣言被杀的。</li>\n<li>我们只看见点灯是平凡的，防火是雄壮的。所以点灯就被禁止，防火就受供养。</li>\n<li>不测的威凌使人萎伤，不测的妙法使人希望。</li>\n<li>家是我们的生处，也是我们的死所。</li>\n<li>人的言行，在白天和在深夜，在日下和在灯前，常常显得两样。</li>\n<li><strong>自得在暗中，看一切暗。</strong></li>\n<li><strong>爬得上的机会越少，愿意撞的人就越多，那么早已爬在上面的人们，就天天替你们制造撞的机会，叫你们化点小本钱，而豫约着你们名利双受的神仙生活。</strong></li>\n<li>周围捣着鬼，无论如何严肃的说法也要减少力量的，而不利于凶手的事情却就在这疑心和笑声中完结了。</li>\n<li>暴露者只在有为的人们中有益，而在无聊的人们中便要灭亡。</li>\n<li><strong>人固然应该生存，但为的是进行；也不妨受苦，但为的是解除将来的一切苦；更应该战斗，但为的是改革。</strong></li>\n<li>责别人的自杀者，一面责任，一面正也应该向驱人于自杀之途的环境挑战，进攻。</li>\n<li>名声的起灭，也如光的起灭一样，起的时候，从近到远，灭的时候，远处倒还留着余光。</li>\n<li>撒一点小谎，可以解无聊，也可以消闷气；到后来，忘却了真，相信了慌。</li>\n<li>他们不但歌颂升平，还粉饰黑暗。</li>\n<li><strong>譬如勇士，也战斗，也休息，也饮食，自然也性交，如果只取他来一点，画起像来，挂在妓院里，性交大师，那当然也不能说是毫无根据，然而，岂不冤哉。</strong></li>\n<li>苟求君子，宽纵小人，自以为明察秋毫，而实则反助小人张目。</li>\n<li>石在，火种是不会绝的。</li>\n<li>凡活着的，有些出于心服，多数是被压服的。</li>\n<li>最高的轻蔑是无言，而且连眼珠也不转过去。</li>\n<li>凡是一个有良心，有觉悟的人，到一个时候，自然知道老调子不该再唱，将它抛弃。</li>\n<li><strong>贪安稳就没有自由，要自由就总要历一些风险。</strong></li>\n<li>做人的趣味在于和许多朋友有趣的聊天，热烈的讨论。</li>\n<li>足可证明中国的旧学说旧手段，实在从古以来，并无良效，无非使坏人增长写虚伪，好人无端的多受些人我都无利益的苦痛罢了。</li>\n<li>这样，便是父母对于子女，应该健全的产生，尽力的教育，完全的解放。</li>\n<li>历来都竭力表彰 “五世同堂”，便足见实际上同居的为难；拼命的劝孝，也足见事实上孝子的缺少。而其原因，便全在一意提倡伪道德，藐视了真的人情。</li>\n<li>保存我们，的确是第一义。只要问他有无保存我们的力量，不管他是否国粹。</li>\n<li>我们都不太有记性。这也无怪，人生苦痛的事太多了，尤其是在中国。记性好的，大概都被厚重的苦痛压死了；只有记性坏的，适者生存，还能欣然活着。</li>\n<li>有一流人之所谓伟大与渺小，是指他可给自己利用的效果的大小而言。</li>\n<li>他们都知道，有些东西，为要显示他伤害你的时候的公正，在不相干的地方就称赞你几句，似乎有赏有罚，是别人看去，很像无私…。</li>\n<li>这就是说，文官考试一及第，这些东西也就同时被忘却，恰如敲门时所用的砖头一样，门一开，这砖头也就被抛掉了。孔子这人，其实是自从死了以后，也总是当着 “敲门砖” 的差使的。</li>\n<li>古人曾以女子作苟安的城堡，又美其名以自欺曰 “和亲”，今人还用子女玉帛为做奴的贽敬，又美其名曰 “同化”。</li>\n<li>所谓中国的文明者，其实不过是安排给阔人享用的人肉的筵宴。所谓中国者，其实不过是安排这人肉的筵宴的厨房。不知道为赞颂这是可恕的，否则，此辈当得永远的诅咒！</li>\n<li></li>\n</ol>\n",
            "tags": [
                "历史政治",
                "杂文",
                "鲁迅"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%AD%8F%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%E5%8F%B2%E8%AE%B2%E6%BC%94%E5%BD%95_%E9%99%88%E5%AF%85%E6%A0%BC_89/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%AD%8F%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%E5%8F%B2%E8%AE%B2%E6%BC%94%E5%BD%95_%E9%99%88%E5%AF%85%E6%A0%BC_89/",
            "title": "魏晋南北朝史讲演录_陈寅格_89",
            "date_published": "2023-10-12T10:49:33.032Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>魏晋的兴亡递嬗，不是司马，曹两姓的胜败问题，而是儒家豪族与非儒家的寒族的胜败问题。</strong></li>\n<li>因此，以孝及礼法见称于宗族乡里，就成了儒家豪族人物的一个明显的特点。</li>\n<li><strong>三令表明了曹操政策之所在 —— 标准是才，不是道德。</strong></li>\n<li>袁绍是有后继人的，他的继承人就是司马懿。</li>\n<li>刘备虽自云汉朝的宗室，可是渊源既远，又不能记其世代之数，实亦等同于寒族。</li>\n<li>故孙吴政治社会的势力完全操在地方豪族之手。</li>\n<li>概言之，江东有文化的名家顾、陆、朱、张等和不以文化见称的次等士族孙氏的结合，便形成了孙吴政权。</li>\n<li><strong>魏，蜀的出现和灭亡，反映了豪族儒门的统治动摇和稳定。</strong></li>\n<li>东晋之初，乃取天竺 “竹林” 之名，加于 “七贤” 之上，成为 “竹林七贤”。</li>\n<li>所谓清谈，实始于郭泰，成于阮籍。</li>\n<li>由此可知，名教与自然相同之说之所以成为清谈的核心，原有其政治的实际功用。</li>\n<li>那时候的西晋官场是，一面侈谈名教与自然 “将无同”，一面穷极奢侈享受，名士与高官合为一体，而变乱就在这种风气中孕育。</li>\n<li>所谓胡、羯、鲜卑、氐、羌就是 “五胡”。</li>\n<li>羯人实则赭羯之人，亦即月氏人。</li>\n<li>从语言、生产、习俗来看，氐族和西南夷族南诏之先六诏，实同出一源。</li>\n<li><strong>即胡族和胡族之间的融合将让位与胡汉之间的融合；以地域区分民族将让位于以文化区分民族。</strong></li>\n<li>胡族部落系统用于打仗，汉族编户系统用于耕织。</li>\n<li><strong>两晋南北朝三百年的大变动，可是说就是由人口的大流动、大迁徙问题引起的。</strong></li>\n<li>北方人民的大规模流动，是从刘渊起兵开始的。</li>\n<li>如果说宋武帝刘裕的兴起依赖于京口北府集团的武力，则梁武帝箫衍的兴起依赖于的是襄阳集团的武力。</li>\n<li>南朝商品与城市都比较发达，北朝则以农业和坞为重要。</li>\n<li>真实的桃花源应在北方的弘农或上洛，而不在南方的武陵。</li>\n<li>南朝的历史可以分为三个阶段，一为东晋，二为宋、齐、梁，三为陈。</li>\n<li><strong>北人轻视南人有传统。但是南北士族之间，占主要地位的，是阶级和信仰的一致。这决定了他们不是分，而是合。</strong></li>\n<li>在孙泰欲起兵之前，五斗米道，已成为一种隐伏于朝廷的大势力。</li>\n<li>楚与东晋及宋，齐政权的转移有关，谿与陈朝的建立有关。</li>\n<li>这个京口楚子集团为东晋南朝数百年武力之所出。</li>\n<li><strong>东晋需要它来维系，也就必易为它所替代。</strong></li>\n<li><strong>襄阳的得失与荆襄的胜负，往往影响到历史的变迁。</strong></li>\n<li>楚子的天下，桓彝可谓是一个开创人，梁武可谓是一个结束人。其显赫者为刘裕。</li>\n<li><strong>南朝前朝宋，齐，梁的政治史，概括言之，是以北人中武装善战的豪族为君主，而北人中不善战的文化高门为公卿，相互利用，以成统治之局的历史。</strong></li>\n<li>货币本用铜铸，在梁朝出现了一种异常的现象，即为铁币来取代铜币。</li>\n<li><strong>可是就在这种太平盛世中，整个上层社会在腐烂下去，严重的政治危机在隐伏中。</strong></li>\n<li>陈为北人低门与南方蛮族相结合所建立的朝代。</li>\n<li>但又一点是相同的，即在一个系统或一个机构中，名实不符；在不同系统之间，此一系统的权力为旁一系统所侵占。</li>\n<li>君主为贵族争权，在同一系统中，把重权寄给原系微不足道的小官。</li>\n<li>位高者无权（多为士族），有权者位很低（多为寒人）。</li>\n<li><strong>南北比较，经济，武备，北方远胜于南方。</strong></li>\n<li><strong>在古代以耕织为基础的农业社会里，人口的优胜也就是经济的优胜。</strong></li>\n<li><strong>北朝军事胜于南朝，可用组织之密，骑术之精，斥候之明三语来概括。</strong></li>\n<li>北朝之所以不能一举吞并南朝，主要在于内部民族与文化问题没有解决。</li>\n<li>北朝整个胡族不及汉人多，统治者胡族又不及被统治者胡人多，以此极少数人统治极大多不同种族的民族，问题遂无穷无尽。</li>\n<li>在我国历史上，统一不能从血统着手而要看文化高低。</li>\n<li>总之，当北朝民族问题尚未解决之时，则南北分；一旦解决，则南北合。</li>\n<li><strong>看似外表或形式，实际能够决定性质或内容。</strong></li>\n<li>在孝文帝的汉化政策中，“断诸北语，一从正音”，不得以北俗之语言于朝廷，是一项最重要的政策。</li>\n<li>六镇起兵最大的现实问题，在于改变了北朝的历史。</li>\n<li>汉人为兵在北魏不占重要地位，重要的是鲜卑与高车军。</li>\n<li>北魏的兵主要由鲜卑及其他少数民族充当，农业主要由汉人担负。</li>\n<li>自孝文帝迁都洛阳，推行汉化，“以夏变夷”，遂至崇文鄙武，把武人排斥在清途之外。</li>\n<li>六镇军人是北齐，北周的统治者。</li>\n<li><strong>在研究北朝民族问题的时候，不应过多地去考虑血统的问题，而应注意 “化” 的问题。</strong></li>\n<li>北齐鲜卑化的风气极盛。</li>\n<li>胡小儿能以人工于歌舞称王，波斯狗也能受封为仪同郡君，说明北齐鲜卑贵人爱好西胡习俗到了何种程度。</li>\n<li>府兵为中央军队，乡兵为豪族的私兵，府兵与乡兵为两个系统。</li>\n<li>府兵将领豪族化，有土地，有部曲（乡兵），是关陇集团变得牢不可破的关键所在。</li>\n<li>周武帝改军士为侍官，即变更府兵的部属观念，使府兵直隶于君主。</li>\n<li>唐代府兵的基本条件，即军民合一，实已完成于隋文帝之世。</li>\n<li>复姓，表明汉化的主流，终究战胜了鲜卑化的逆流。</li>\n<li>佛教的移植中国，可视为一个以宪法结合的外国（夷）贵族集团，插入到中国（华）社会中来。</li>\n<li>道生创立顿悟义，非凭空想，而是阶级、人事变动的反映。</li>\n<li>南朝文学界极重要的发明为四声。</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<ol>\n<li>有权力的时候也需要妥协，各地方势力十分强悍。强宗望族是一个难以处理的问题，民族问题也是如此。</li>\n<li>这就是政治的智慧，为了削弱贵族势力，加强中央集权。在九品中正制下居然有这种操作，驱狼吞虎，有名无实，最终只能都成为皇帝的玩物。越多越杂，就越凝聚不了力量，实际上不利于国家的发展，但作为皇权衰退的过渡时期的无奈之举。</li>\n<li>只重种姓，不论人伦。是孝文帝为了保护自身民族社会地位的无奈之举。</li>\n<li>让我了解到了分析问题一定要根据当时的阶级情况，有很多现今的社会状况下难以理解的政策也许数学当时社会问题的最优解。有许多表面上，释义上的变更往往蕴含其内在的逻辑与思考，名与实事实会互相影响的。同时我也了解到了名正言顺的重要性，在古代社会，谁是正统，立国之本影响着国家的发展。所以为什么一些君主急着去发动战争，因为他需要一个理念去凝聚国人的共识，使国家不至于分崩离析。</li>\n<li>优点在于引用了很多文献，缺点也在于引用了很多文献。</li>\n</ol>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%AB%98%E8%80%81%E5%A4%B4_[%E6%B3%95]%E5%B7%B4%E5%B0%94%E6%89%8E%E5%85%8B_88/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%AB%98%E8%80%81%E5%A4%B4_[%E6%B3%95]%E5%B7%B4%E5%B0%94%E6%89%8E%E5%85%8B_88/",
            "title": "高老头_[法]巴尔扎克_88",
            "date_published": "2023-10-12T10:49:33.030Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>谁又能说，枯萎的心灵和空无一物的骷髅，究竟哪一样看上去更可怕。</strong></li>\n<li>她只缺少教女人返老还童的东西：衣衫和情书。</li>\n<li>饱经忧患的结果，大家对最惨痛的苦难都冷了心。</li>\n<li><strong>也许人的天性就喜欢教那些为了谦卑，为了懦弱，或者为了满不在乎而忍受一切的人，忍受一切。</strong></li>\n<li>一个人向感情的高峰攀登，可能中途休息；从怨恨的险坡往下走，就难得留步了。</li>\n<li>年轻人发狠要在夜里读书，十有九夜是睡觉完事的。</li>\n<li>社会不过是傻子和骗子的集团。</li>\n<li>他看到了社会的本相：法律跟道德对有钱的人全无效力，财产才是金科玉律。</li>\n<li>拐弯抹角的路绝无伟大的成就。</li>\n<li>感情无论在什么东西上面都能留下痕迹，并且能够穿越空间。</li>\n<li>一个年青人的举动，高调目光，使那些废话变得有声有色。</li>\n<li>一般人就是从这一类的交易开始，终于廉耻荡然，而今天社会也相习成风，恬不为怪。</li>\n<li>反正她们暖和了，我就不觉得冷；她们笑了，我就不觉得心烦；只有她们伤心了，我才伤心。</li>\n<li><strong>感情有股熏陶的力量；一个人无论如何相信，只要表现出一股真实而强烈的情感，就有中特殊的气息，使容貌为之改观，举动有生气，声音有音色。</strong></li>\n<li>女人的天性喜欢用可能来证明不可能，用预感来取消事实。</li>\n<li><strong>一个人要失败之后，方始发觉他欲望的强烈。</strong></li>\n<li><strong>人总喜欢小小的抗拒一下，对自己的良心有个交代，替以后的不正当行为找个开脱了理由。</strong></li>\n<li>那种天真的钦佩在青年人心中就是有信仰的表现。</li>\n<li>巴黎的爱情尤其需要吹捧、无耻、浪费、哄骗、摆阔。</li>\n<li>“但愿如此。唯，爸爸，你能不能给个背书？”</li>\n<li>“他还是快一点死的好。” 这是医生的最后一句话。</li>\n<li><strong>服从吗？受不了；反抗吗？做不到；斗争吗？没有把握。</strong></li>\n<li>没有一个讽刺作家能写尽隐藏在金银珠宝下的丑恶。</li>\n<li>你给他生命，他们给你死。</li>\n<li>这是穷人的葬礼，既没排场，也没后代，也没朋友，也没亲属。</li>\n</ol>\n<h1 id=\"读后感\"><a class=\"markdownIt-Anchor\" href=\"#读后感\">#</a> 读后感</h1>\n<p>那些阔太太在谈论别人的故事，大发感慨的时候，居然连别人的名字都说错，这不得不说是一个巨大的讽刺。父爱的伟大，令人动容。但不得不说，形成这一局面也有着他自身的愿因。无条件的爱只能带来轻视，当你不加辨别的付出时，让人们无比轻视你的爱。一件东西太容易得到的时候，人们自然不会学会珍惜。另外，这也给我提出了一个问题：面对纸醉金迷的生活，我是否有定力做出无愧于自己良心的抉择？会不会透支父母的金钱只为了虚荣的生活。现在的我不会 这样做，以后的我会不会像两姐妹一样为了虚荣而掏空自己的父母，这需要我时刻警醒。另外这本书也让我感受到了世间的冷酷和唯利是图高老头没有去做什么坏事，只是在安静地过着自己的生活，最终只落得个如此冷清的下场，实在令人无限唏嘘。在社会中，保留自己的初心究竟有多难？现实的压迫，爱人的希望，家人的期盼都在推动着你去做一些你可能并不乐意去做的事。感慨一句，巴黎的有钱人真是个玩个的吗？那当初为什么要去结这个婚呢？难道真的只是相互利用的关系吗？</p>\n",
            "tags": [
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A.[%E7%BE%8E]%E9%A9%AC%E6%AD%87%E5%B0%94.%E5%8D%A2%E6%A3%AE%E5%A0%A1.82/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A.[%E7%BE%8E]%E9%A9%AC%E6%AD%87%E5%B0%94.%E5%8D%A2%E6%A3%AE%E5%A0%A1.82/",
            "title": "非暴力沟通_[美]马歇尔.卢森堡_82",
            "date_published": "2023-10-12T10:49:33.028Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>阿伦。甘地：” 如果今天的世界是无情的，那是我们的生活方式造成它的无情。“</li>\n<li>我一心分析和确定错误的性质，而忽视自己和他人的需要。</li>\n<li><strong>我们不要将价值判断与道德评判混为一谈。</strong></li>\n<li>暴力的根源在于人们忽视彼此的感受和需要，而讲冲突归咎于对方。</li>\n<li>分类和评判提倡的是暴力。</li>\n<li>我们可以用负责任的语言替代回避责任的语言。</li>\n<li>我们对别人的要求往往暗含着威胁。</li>\n<li>我相信，如果一个人选择新的生活，是为了追求幸福，而非为了逃避惩罚，那他的行为就符合所有人的利益。</li>\n<li>人们越是习惯于评定是非，他们也就越倾向于追随权威，来获得正确和错误的标准。</li>\n<li><strong>不区分观察和评论，人们将倾向于听到批评。</strong></li>\n<li>克里希那穆提：“不带评论的观察是人类智力的最高形式。”</li>\n<li>鲁思。贝本梅尔：“如果不把事实和意见混为一谈，我们将不再困惑。”</li>\n<li>如果我们的回答言过其实，别人就可能产生逆反心理，而不愿做出友善的回应。</li>\n<li>它提倡在特定的时间和情景中进行观察，并清楚地描述观察结果。</li>\n<li><strong>区分感受和自我评价。</strong></li>\n<li>示弱有助于解决冲突。</li>\n<li>为了更好地表达情景，非暴力沟通主张使用具体的语言。</li>\n<li>我们的需要和期待，以及对他人言行的看法，导致了我们的感受。</li>\n<li>我们可以通过 “我（感到）… 因为我…” 这种表达方式来认识感受与自身的关系。</li>\n<li>批评往往暗含着期待。</li>\n<li><strong>我们帮助别人，是出于爱，而不是出于恐惧，内疚或惭愧。</strong></li>\n<li>真诚待人比委屈求全更为可贵。</li>\n<li>人与人相互依存，损人无法真正利己。</li>\n<li><strong>直接表达出自己的需要，提出具体的需求。</strong></li>\n<li>抽象的语言无助于深化自我认识。</li>\n<li><strong>更为常见的是，我们在说话时，并不知道自己想要什么。</strong></li>\n<li>如果一个人提出了明确的请求，却没有提及感受和需要，也可能导致交流的困难。</li>\n<li>我们在和另一个人说话的时候，总是希望有所回应。</li>\n<li>对自己的人认识越深刻，表达越清楚，我们就越可能得到称心的回答。</li>\n<li>对对方给予反馈，表达我们的感激，如果对方不愿反馈，倾听他的感受和需要。</li>\n<li>我们越是将他人的不顺从看作多我们的排斥，我们所表达的愿望就越有可能被看作是命令。</li>\n<li>如果一个人想要了解别人了解他的处境，听到的却是安慰和建议，那么，他就有可能觉得不太舒服。</li>\n<li><strong>分析妨碍了倾听。</strong></li>\n<li><strong>急于采取行动使我们无法充分体会他们的状况。</strong></li>\n<li>询问前，先表达我们的感受和需要。</li>\n<li>在给人反馈时，我们的语气十分重要。</li>\n<li>有时，我们认为自己受到了指责，实际上，那些话是他人表达需要和请求的方式。</li>\n<li>** 约瑟夫。坎伯：“为了幸福，必须把 “别人怎么看我” 这个问题放在一边。” **</li>\n<li>在解决问题或询问他人的请求前，为他人的充分表达创造条件。</li>\n<li><strong>我们最不愿意示弱的时候往往是因为担心失去控制想显得强硬的时候。</strong></li>\n<li>在一个生气的人面前，永远不要用 “不过”“可是”“但是” 之类的词语。</li>\n<li>尽快提醒说话的人留意自己的感受和需要。</li>\n<li>说的人更希望对方打断，而不是假装在听。</li>\n<li>倾听有赖于我们体会别人的能力。</li>\n<li>非暴力沟通最重要的应用也许是培养对自己的爱。</li>\n<li>失误揭示我们的局限性，并引导我们的成长。</li>\n<li>当我们的行为无法满足自身的需要，我们体会着人生的悲哀和内心的渴望。</li>\n<li>感到遗憾时，我们试图了解过去的行为所要满足的需要。</li>\n<li>不论你选择做什么，了解自己为什么要那样做。</li>\n<li>我们误以为生活的目的就是为了获得回报。</li>\n<li><strong>最危险的行为也许是 “因为别人的要求” 我们不得不做。</strong></li>\n<li>希望他人因为内疚发生改变，就是我们将刺激和原因混为一谈。</li>\n<li><strong>专注我们的需要，比评判他人是什么人，更有益于生活。</strong></li>\n<li>我生气的原因不在于别人做了什么，而是我怎么看待对方及其行为。</li>\n<li>使用防卫性的强制力，是为了保护自己和他人，而不是为了惩罚，羞辱或谴责他人。</li>\n<li>专注于我们想要做的，而不是追究错在哪里。</li>\n<li><strong>哥达。梅厄：“不要那么谦虚，因为你没有那么强大。”</strong></li>\n<li>保持对感激的渴望和充分表达感激。</li>\n</ol>\n",
            "tags": [
                "人际交往"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%9A%8F%E6%9C%BA%E6%BC%AB%E6%AD%A5%E7%9A%84%E5%82%BB%E7%93%9C-[%E7%BE%8E]-%E5%A1%94%E7%BA%B3%E5%B8%83-92/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%9A%8F%E6%9C%BA%E6%BC%AB%E6%AD%A5%E7%9A%84%E5%82%BB%E7%93%9C-[%E7%BE%8E]-%E5%A1%94%E7%BA%B3%E5%B8%83-92/",
            "title": "随机漫步的傻瓜-[美]-塔纳布",
            "date_published": "2023-10-12T10:49:33.026Z",
            "content_html": "<h1 id=\"摘抄\"><a class=\"markdownIt-Anchor\" href=\"#摘抄\">#</a> 摘抄</h1>\n<ol>\n<li><strong>如果某件事失败的代价过于沉重、难以承受，那么其成功的概率有多高根本无关紧要。</strong></li>\n<li>梭伦很聪明，知道得自运气之物，也可能被运气取回，而且往往是出乎意料地迅速被取走。</li>\n<li>一个人的表现好坏会显露在外表上，就像动物的显性特征足以传递很多信息，赢家通常更容易被注意到。</li>\n<li><strong>我们在讨论一项行业时，必须考虑那一行人士的平均值，而不是拿一个已经成功的人做样本。</strong></li>\n<li>除了考虑观察得到的可能性结果，我们也应考虑观察不到的可能性结果。</li>\n<li>生活中的陷阱很难通过肉眼观察到，因此我们可能在不知不觉中就玩上了披着其他外衣的俄罗斯转盘。</li>\n<li>把预测和预言混为一谈，正可显现人们对随机性的无知。</li>\n<li>请不要把正确性和可理解性混为一谈。</li>\n<li>历史存在着多种可能，我们不能为历史的一小段过程所迷惑，而要在较大尺度的历史范围内考察一切。</li>\n<li><strong>幸运的傻瓜可能得益于生命中某一阶段的好运气，但是长期而言，他的处境会慢慢趋近于运气没那么好的白痴，每个人都会向长期的性质靠拢。</strong></li>\n<li>从数学的角度来说，进步意指某些新信息优于旧信息，但并不是说一般的新信息都会取代旧信息，因此，最恰当的做法是在有所疑虑的时候，以系统化的方法排拒新观念、信息或方法。</li>\n<li>我这一辈子唯一的优点，是知道自己有一些缺点。</li>\n<li>面对宗教和个人行为等事物时，我们变得极其务实和理智，面对市场和受随机性影响的事物时，我们却失去理性。</li>\n<li>这里有个不良的属性，就是这些动物不曾遭遇稀有事件的时间越久，则它们对该稀有事物的承受力越弱。</li>\n<li><strong>务必牢记，每个人都认为自己的成功全凭实力，毫无侥幸，只有失败时才会认为是运气使然。</strong></li>\n<li><strong>一群能力欠佳的经理人中，仍然会有少数人获得极其亮眼的绩效记录。</strong></li>\n<li><strong>我们所关心的绩效记录的最大期望值，受原始样本的大小影响较大，受每位经理人的运气影响较小。</strong></li>\n<li>我们做个简短的总结：我们经历的现实只是所有可能出现的随机历史中的一个，我们却误将它当作最具代表性的，忘了还有其他可能性。简言之，幸存者偏差的含义是 “表现最好的最容易被看见”。为什么？因为输家并没有现身。</li>\n<li>我们应该记住：致富纯粹是自利行为，不是社会行为。资本主义的优点在于社会能够善用人们的贪婪，而不是他们的善行，同时也不需要将这种贪婪颂扬为一种道德或知性成就。</li>\n<li><strong>因为他选择居住在非常功的一群人中间，这个地方没有失败者。换句话说，失败者根本不会出现在那个样本中，而这使他看起来好像一事无成。住在公园道的人放眼望去看不到失败者，只见得到成功者。落居于非常小的社区中，便很难跨越这个生活小圈圈，去评估自己真正的处境。</strong></li>\n<li>这些偏差可以简述如下：第一，幸存者偏差（又称打字机前的猴子），起于我们只看见赢家，因而对运气持有错误看法；第二，不同凡响的成功最常见的原因是运气；第三，我们在生物构造上缺乏了解概率的能力。</li>\n<li>一般来说，推论上的一大问题是：靠资料下结论的人，往往会比别人更快，更有信心地坠入陷阱中。我们拥有的资料越多，淹没在里面的可能性越高。</li>\n<li><strong>非对称概率是指某事件的概率不是 50% 而是一边的概率高于另一边的概率。非对称结果是指报酬不相等。</strong></li>\n<li>问题出在他们不希望这些随机数表呈现任何形式的规则性，而真正的随机现象看起来并不随机！</li>\n<li><strong>我们要求自相矛盾的权利！</strong></li>\n<li>但在这之前，我们必须先接受自己只是动物的事实，我们需要靠一些低等形式的窍门帮助自己，而不是讲大道理。</li>\n<li>我们生来不会把不同的事情独立开来看待。观察 A 和 B 两件事时，我们很难不假设是 A 造成 B B 造成 A，或者两者彼此影响，我们的偏差会立即在其间建立因果关系。</li>\n<li>人们过去做出的选择决定了他们现在及未来可能的选择。</li>\n<li>一个人发表的意见中，估计值或预测值的重要性不如信赖水平。</li>\n<li><strong>早上去上班的时候，抱着获得一点小钱的期待心理会使你心情愉快。但是反过来说，即使某种操作策略长期而言可望获利，但必须经常赔点小钱，这种事只有坚强的人才能忍受。</strong></li>\n<li>信息时代促使人们的品位趋于一致，这导致不公平现象更为尖锐 —— 赢家几乎可掌控全部的顾客。</li>\n<li><strong>生命是以非线性（nonlinearity）的方式呈现不公平的。</strong></li>\n</ol>\n",
            "tags": [
                "心理"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%80%89%E9%9B%86_92/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%80%89%E9%9B%86_92/",
            "title": "选集_92",
            "date_published": "2023-10-12T10:49:33.023Z",
            "content_html": "<h1 id=\"第一卷_92\"><a class=\"markdownIt-Anchor\" href=\"#第一卷_92\">#</a> 第一卷_92</h1>\n<ol>\n<li><strong>谁是我们的敌人？谁是我们的朋友？这个问题是革命的首要问题。</strong></li>\n<li>“举起你的左手打倒帝国主义，举起你的右手打倒共产党。”</li>\n<li>那些中间阶级，必然很快分化，或者向左跑入革命派，或者向右跑入反革命派，没有他们 “独立” 的余地。</li>\n<li>工业无产阶级是我们革命的领导力量。一切半无产阶级，小资产阶级是我们最接近的朋友。</li>\n<li>凡是反抗最力，乱了闹得更大的地方，都是土豪劣绅，不法地主为恶最甚的地方。</li>\n<li><strong>革命不是请客吃饭，不是做文章，不是绘画绣花，不能那样雅致，那么从容不迫，文质彬彬，那样温良恭俭让，革命是暴动，是一个阶级推翻一个阶级的暴烈的行动。</strong></li>\n<li>矫枉必须过，不过正不能矫枉。</li>\n<li>没有贫农，便没有革命。若否认他们，便是否认革命。若打击他们，便是打击革命。</li>\n<li>土豪劣绅极盛时，杀农民真是杀人不眨眼。</li>\n<li>这四种权力 —— 政权、族权、神权、夫权，代表了全部封建宗法的思想和制度，是束缚中国人民特别是农民的四大极大的绳索。</li>\n<li><strong>嘴里天天说 “唤起民众”，民众起来了又害怕的要死，这和叶公好龙有什么两样！</strong></li>\n<li><strong>今天暂时的妥协，即酝酿着明天的更大的战争。</strong></li>\n<li>我们只须知道中国白色政权的分裂和战争是继续不断的，则红色政权的发生，存在并且日益发展，便是无疑的了。</li>\n<li>红军的物资生活如此菲薄，战斗如此频繁，仍能维持不敝，除党的作用外，就是靠实行军队中的民主主义。</li>\n<li>同样一个兵，昨天在敌军不勇敢，今天在红军很勇敢，就是民主主义的影响。</li>\n<li>红军以集中为原则，赤卫队以分散为原则。</li>\n<li>对敌军的宣传，最有效的方法是释放俘虏和医治伤兵。</li>\n<li><strong>不顾主客观条件，犯着革命的急性病，不愿意艰苦地做细小严密的群众工作，只想着大干，充满着幻想。</strong></li>\n<li>他们的这种理论的来源，主要是没有把中国是一个许多帝国主义国家互相争夺的半殖民地这件事认清楚。</li>\n<li>它是站在海岸遥望海中已经看得见桅杆尖头的一只航船，它是在于高山之巅远看东方已看见光芒四射喷薄欲出的一轮朝日，它是躁动于母腹中的快要成熟了的一个婴儿。</li>\n<li><strong>没有调查，没有发言权。</strong></li>\n<li><strong>一切结论产生于调查情况的末尾，而不是在它的开头。</strong></li>\n<li>要把官僚主义抛到粪缸里去，因为没有一个同志喜欢它。</li>\n<li>节省每一个铜板为着战争和革命事业，为着我们的经济建设，是我们会计制度的原则。</li>\n<li>同志们，真正的铜墙铁壁是什么？是群众，是千百万真心实意地拥护革命的群众。</li>\n<li>组织革命战争，改良群众生活，这是我们的两大任务。</li>\n<li>不解决方法问题，任务也只是瞎说一顿。</li>\n<li>我们要把敌人营垒中间的一切争斗，缺口，矛盾，统统收集起来，作为反对当前主要敌人之用。</li>\n<li><strong>马克思主义者看问题，不但看到部分，而且要看到全体。</strong></li>\n<li>不到决战的时候，没有决战的力量，不能冒冒失失地去进行决战。</li>\n<li>革命的道理，同世界上一切事物活动的道路一样，总是曲折的，不是笔直的。</li>\n<li>我们固然应该尊重过去流血的经验，但是还应该尊重自己流血的经验。</li>\n<li>战争的目的在于消灭战争。</li>\n<li><strong>学习不是一件容易的事情，使用则更加不容易。</strong></li>\n<li>革命战争是民众的事，常常不是先学好了再干，而是干起了再学习，干就是学习。</li>\n<li>他们自称马克思主义者，其实一点马克思列宁主义也没有学到。</li>\n<li>由此可知，不了解中国革命战争的特点，就不指导中国革命战争，就不能引导中国革命走上胜利的途经。</li>\n<li>第一个特点，中国是一个政治经济发展不平衡的半殖民地的大国，而又经过了一九二四年至一九二七年的革命。</li>\n<li>第二个特点是敌人的强大。</li>\n<li>第三个特点是红军的弱小。</li>\n<li>第四个特点是共产党的领导和土地革命。</li>\n<li><strong>为了进攻而防御，为了前进而后退，为了向正面而向侧面，为了走直路而走弯路，是许多事物在发展过程中所不可避免的现象，何况军事运动。</strong></li>\n<li>谁人不知，两个拳师放对，聪明的拳师往往退让一步，而蠢人则其势汹汹，辟头就使出全副本领，结果却往往被退让者打倒。</li>\n<li>革命运动所造成的丧失是破坏，而其取得的是进步的建设。</li>\n<li><strong>惧怕一时的不良政治影响，就要以长期的不良影响做代价。</strong></li>\n<li>他们看问题仅从一局部出发，没有能力通观全局，不愿把今天的利益和明天的利益相联结，把部分利益和全体利益相连接，捉住一局部一时间的东西死也不放。</li>\n<li>但是虚心接受别人的经验也属必需，如果样样要待自己经验，否则固执己见拒不接受，这就是十足的 “狭隘经验论”。</li>\n<li><strong>没有全局在胸，是不会真的投下一着好棋子的。</strong></li>\n<li>必须打胜；必须照顾全战役计划；必须照顾下一战略阶段：这是反攻开始，即打第一仗时，不可忘记的三个原则。</li>\n<li>集中兵力之所以必要，是为了改变敌我的形势。</li>\n<li>我们的战略是 “以一当十”，我们的战术是 “以十当一”，这是我们制胜敌人的根本法则之一。</li>\n<li>我们是以少胜多的 —— 我们向整个中国统治者这样说。我们又是以多胜少的 —— 我们向战场上的作战的各个局部的敌人这样说。</li>\n<li>把我们的思想，工作适应于情况，准备坐下，又准备走路，不要把干粮袋丢掉了。</li>\n<li>游击性在将来一定是可羞的和必须抛弃的东西，但在今天却是宝贵的和必须坚持的东西。</li>\n<li>对于人，伤其十指不如断其一指，对于敌，击溃其十个师不如歼灭其一个师。</li>\n<li>伦敦和汉阳的兵工厂，我们是有权利的，并且经过敌人的运输队送来。</li>\n<li>而争取政治上的民主自由，则为保证抗战胜利的中心一环。</li>\n<li>民主是抗日的保证，抗日能给予民主运动发展以有利条件。</li>\n<li><strong>我们的实践证明：感觉到了的东西，我们不能立即理解它，只有理解了的东西才能更深刻地感受它。</strong></li>\n<li><strong>知识的问题是一个科学的问题，来不得半点的虚伪和骄傲，决定需要的倒是其反面 —— 诚实和谦逊的态度。</strong></li>\n<li>由此看来，认识的过程，第一步，是开始接触外界事情，属于感觉的阶段。第二步是综合感觉的材料加以整理和改造，属于概念判断和推理的阶段。</li>\n<li>理性的东西之所以靠得住，正是由于它来源于感性。</li>\n<li><strong>理性认识依赖于感性认识，感性认识有待于发展到理性认识，这就是辩证唯物论的认识论。</strong></li>\n<li>认识从实践起，经过实践得到了理论的认识，还须再回到实践去。</li>\n<li>无数相对的真理之总和，就是绝对的真理。</li>\n<li>研究问题，忌带主观性，片面性和表面性。</li>\n<li>一句话，不了解矛盾各方的特点。这就叫做片面地看问题。</li>\n<li>对于具体的事物作具体的分析。</li>\n<li>一切个性都是有条件地暂时地存在的，所以是相对的。</li>\n<li>抓住这个主要矛盾，一切问题就迎刃而解了。</li>\n<li>对抗是矛盾斗争的一种形式，而不是矛盾斗争的一切形式。</li>\n</ol>\n<h1 id=\"第二卷_90\"><a class=\"markdownIt-Anchor\" href=\"#第二卷_90\">#</a> 第二卷_90</h1>\n<h2 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h2>\n<ol>\n<li><strong>团结要是真正的团结，尔虞我诈是不行的。办事要大方一点，手笔要伸畅一点。</strong></li>\n<li><strong>事情有大道理，有小道理，一切小道理都归大道理管着。</strong></li>\n<li>当面不说，背后乱说；开会不说，会后乱说。</li>\n<li>事不关己，高高挂起；明知不对，少说为佳；明哲保身，但求无过。</li>\n<li><strong>命令不服从，个人意见第一；只要组织照顾，不要组织纪律。</strong></li>\n<li>办事不认真，无一定计划，无一定方向，敷衍了事，得过且过，做一天和尚撞一天钟。</li>\n<li><strong>这些人，马克思主义是有的，自由主义也是有的：说的是马克思主义，行的是自由主义；对人是马克思主义，对己是自由主义。</strong></li>\n<li><strong>只要我们努力，我们的前途是光明的。</strong></li>\n<li>危险是在中国居然有些动摇分子正在准备去上敌人的钓钩，汉奸卖国贼从而穿插其中，散布种种谣言，企图使中国投降日寇。</li>\n<li><strong>民主和集中之间并没有不可越过的深沟，对于中国，二者都是必需的。</strong></li>\n<li>战争的性质决定政府与人民的关系，这是一个历史的原则。</li>\n<li>分散，集中和变换是游击战争灵活使用兵力的是三个方法。</li>\n<li>战略统一下的独立自主的游击战争。</li>\n<li><strong>总之，他们没有勇气承认敌强我弱这件事实。</strong></li>\n<li>但是我们指出没有一定的条件，速胜只存在头脑之中，客观上是不存在的，只是幻想和假道理。</li>\n<li><strong>我们主张为着争取最后胜利所必要的一切条件而努力，条件多具备一分，早具备一日，胜利的把握就多一分，胜利的时间就早一日。</strong></li>\n<li><strong>中国会灭亡吗？答复：不会亡，最后的胜利是中国的。中国能够速胜吗？答复：不能，必须是持久战。</strong></li>\n<li>力量对比不但是军力和经济力的对比，而且是人力和人心的对比。</li>\n<li><strong>“战争是政治的延续” 在这点上说，战争就是政治，战争本身就是政治性质的行动，从古以来没有不带政治性的战争。</strong></li>\n<li>战争一刻也离不了政治。</li>\n<li><strong>优势而无准备，不是真正的优势，也没有主动。</strong></li>\n<li>拼命主义是军事上的近视眼，其根源常是惧怕丧失土地。</li>\n<li>中国之所以能够进行持久战，用歼灭达到消耗是主要的手段。</li>\n<li>世界上只有猫和猫做朋友的事，没有猫和老鼠做朋友的事。</li>\n<li>抗日战争中的决战问题应分为三类：一切有把握的战役和战斗应坚决地进行决战，一切无把握的战役和战斗应避免决战，赌国家命运的战略决战应根本避免。</li>\n<li><strong>军队政治工作的三大原则：第一是官兵一致，第二是军民一致，第三是瓦解敌军。</strong></li>\n<li>一个好的共产党员，必须善于照顾全局，善于照顾多数，并善于与同盟者一道工作。</li>\n<li>领导者的责任，归结起来，主要地是出主意，用干部两件事。</li>\n<li>共产党员是国际主义的马克思主义者，但是马克思主义必须和我国的具体特点相结合并通过一定的民族形式才能实现。</li>\n<li>学习的敌人是自己的满足，要认真学习一点东西，必须从不自满开始。</li>\n<li>对自己，“学而不厌”，对人家，“诲人不倦”，我们应取这种态度。</li>\n<li>在中国，主要的斗争是战争，而主要的组织形式是军队。</li>\n<li>一句话，全党都要注重战争，学习军事，准备打仗。</li>\n<li><strong>我们的原则是党指挥枪，而决不容许枪指挥党。</strong></li>\n<li>我们是战争消灭论者，我们是不要战争的；但是只能经过战争去消灭战争，不要枪杆子，必须拿起枪杆子。</li>\n<li>革命的或不革命的或反革命的知识分子所最后的分界，看其是否愿意并且实行和工农民众相结合。</li>\n<li>中国应该统一，不统一就不能胜利。</li>\n<li>要全国进步，要落后的人向进步的人看齐，决不能拉进步的人向落后的人看齐。</li>\n<li><strong>凡是敌人反对的，我们就要拥护；凡是敌人拥护的，我们就要反对。</strong></li>\n<li>党的失败和胜利，党的后退和前进，党的缩小和扩大，党的发展和巩固，都不能联系于党同资产阶级的关系和同武装斗争的关系。</li>\n<li>民族革命和民主革命这样两个基本任务，是互相区别，又是互相统一的。</li>\n<li>民主主义革命是社会主义革命的必要准备，社会主义革命是民主革命的必然趋势。</li>\n<li><strong>一个人能力有大小，但只要有这种精神，就是一个高尚的人，一个纯粹的人，一个有道德的人，一个脱离了低级趣味的人，一个有益于人民的人。</strong></li>\n<li><strong>真理只有一个，而究竟是谁发现了真理，不依靠主观的夸张，而依靠客观的实践。</strong></li>\n<li>不破不立，不塞不流，不止不行，它们之间的斗争是生死斗争。</li>\n<li>一切新的东西都是从艰苦斗争中锻炼出来的。</li>\n<li>他们不愿工农在政治上抬头，也不愿工农在文化上抬头。</li>\n<li>决不可无故进攻人家，也决不可在被人家进攻时不予还击。</li>\n<li>不斗则以，斗则必胜，决不举行无计划无准备无把握的斗争。</li>\n<li><strong>这三个原则，换一句话说，就是 “有理”，“有利”，“有节”。</strong></li>\n<li>斗争是克服投降危险，争取时局好转，巩固国共合作的最主要的方法。</li>\n</ol>\n<h2 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h2>\n<ol>\n<li>“唤醒民众”</li>\n<li>全局意识，不谋全局者不能保一隅，大局观十分重要。</li>\n<li>在于其他党派的合作中，需要保留一定的独立性，切忌无条件的妥协，在阶级斗争中维持一个相对的底线，注重主要矛盾，淡化次要矛盾，促进合作。</li>\n<li>国民党真是一个不了解他的人觉得他是废物，了解之后觉得怎么还能这么废物的党派。百年烂党名不虚传。在内忧外患，日寇侵袭的情况下，还对日软弱，对内则残杀进步人士，自己抗日不力，还要拖着别人的后腿对外则卑躬屈膝，真是民族之耻。</li>\n<li>要以斗争求和平，指望别人主动对你好，一味的退让是没有好结果的。</li>\n</ol>\n<h1 id=\"第三卷_91\"><a class=\"markdownIt-Anchor\" href=\"#第三卷_91\">#</a> 第三卷_91</h1>\n<ol>\n<li>墙上芦苇，头重脚轻根底浅；山间竹笋，嘴尖皮厚腹中空。</li>\n<li>它的党员应该站在民众之中，而决不应该站在民众之上。</li>\n<li>自从有阶级的社会存在以来，世界上的知识只有两门，一门叫做生产斗争知识，一门叫做阶级斗争知识。</li>\n<li><strong>我想，我们应该是老老实实地办事；在世界上要办成几件事，没有老实态度是根本不行的。</strong></li>\n<li><strong>凡真理都不装样子吓人，它只是老老实实地说下去和做下去。</strong></li>\n<li>最干净的还是工人农民，尽管他们手是累的，脚上有牛屎，还是比资产阶级和小资产阶级知识分子都干净。这就叫做感情起了变化，由一个阶级变到另一个阶级。</li>\n<li>我们讨论问题，应当从实际出发，不是从定义出发。</li>\n<li><strong>但是时间无论怎么长，我们却必须解决它，必须明确地彻底地解决它。</strong></li>\n<li>只有代表群众才能教育群众，只有做群众的学生才能做群众的先生。</li>\n<li><strong>世上绝没有无缘无故的爱，也没有无缘无故的恨。</strong></li>\n<li><strong>普通的人，容易为过去和当前的情况所迷惑，以为今后也不过如此。</strong></li>\n<li>发展经济，保障供给，是我们的经济工作和财政工作的总方针。</li>\n<li>他们不设想到可能的最困难和最复杂的情况，而是梦想这不可能的最顺利和最简单的情况。</li>\n<li>我们的同志在困难的时候，要看到成绩，要看到光明，要提高我们的勇气。</li>\n<li>我们的工作首先是战争，其次是生产，其次是文化。</li>\n<li>凡是需要群众参与的工作，如果没有群众的自觉和自愿，就会徒于形式而失败。</li>\n</ol>\n<h1 id=\"第四卷_93\"><a class=\"markdownIt-Anchor\" href=\"#第四卷_93\">#</a> 第四卷_93</h1>\n<ol>\n<li><strong>让那些内外反动派在我们面前发抖罢，让他们去说我们这也不行，那也不行罢，中国人民的不屈不挠的努力必将稳步地达到自己的目的。</strong></li>\n<li>必须深刻地估计到各种可能遇到和必然遇到的困难情况，并准备用高度的热情，勇气，细心和刻苦耐劳的精神去克服这些困难。</li>\n<li>我们在目前不仅没有全部实行协定的物质基础，也没有全部实行协定的群众基础，也没有全部实行协定的上层建筑，勉强实行，害多利少。</li>\n<li>应当是那样，实际是这样，中间有个距离。</li>\n<li><strong>但是问题总是会有的，不要以为一下子都能解决，今天有，将来还会有。</strong></li>\n<li>伪装得最巧妙的，杀人不见血的，是用笔杀人。</li>\n<li>一方面要有严肃的批评，一方面要有宽大的态度。</li>\n<li>新民主主义的革命，不是任何的革命，它只能是和必须是无产阶级领导的，人民大众的，反对帝国主义，封建主义和官僚资本主义的革命。</li>\n<li><strong>离开实际情况，错误地扩大打击面，是危险的。</strong></li>\n<li>我们的政策，不光要使领导者知道，干部知道，还要使广大的群众知道。</li>\n<li><strong>马克思列宁主义的基本原则，就是要使群众认识到自己的利益，并且团结起来，为自己的利益而争斗。</strong></li>\n<li>知识分子往往不懂事，对于实际事物往往没有经历，或者经历很少。</li>\n<li><strong>我们共产党人从来认为隐藏自己的观点是可耻的。</strong></li>\n<li>即使一切其他目的都未达到，只要攻克了锦州，你们就有了主动权，就是一个伟大的胜利。</li>\n<li>如果你们还想打一下，那就再打一下，总归你们是要被解决的。</li>\n<li>在拿枪的敌人被消灭以后，不拿枪的敌人依旧存在，他们必然地要和我们作拼死的斗争，我们决不可以轻视这些敌人。</li>\n<li>对内的节制资本和对外的统制贸易，是这个国家在经济斗争中的两个基本政策。</li>\n<li><strong>我们不但善于破坏一个旧世界，我们还将善于建设一个新世界。</strong></li>\n<li>我们说中国地大物博，人口众多，实际上是汉族 “人口众多”，少数民族 “地大物博”。</li>\n<li>凡是历史上发生的，都要在历史上消灭。</li>\n<li>从战略上说，完全轻视它。从战术上说，重视它。</li>\n<li>什么都打，看起来很革命，实际上为害很大。</li>\n<li>动是绝对的，静是相对的，有条件的。</li>\n<li>成绩有两重性，错误也有两重性。</li>\n<li><strong>世界上一切事物都是对立统一的。</strong></li>\n<li>我们每个人也是如此，总是有两点，有优点，有缺点，不是只有一点。</li>\n<li>你们怕群众上街，我不怕，来他几十万也不怕。</li>\n<li>要允许工人罢工，允许群众示威。</li>\n<li>跑出来对我们有什么坏处呢？没有什么坏处，无非是骂人。</li>\n<li>第一条保护他，第二条批评他。</li>\n<li>政党就是一种社会，是一种政治的社会。</li>\n<li><strong>你不研究反面的东西，就驳不倒它。</strong></li>\n<li>有些现象在一个时期是不可避免的，等它放出来以后就有办法了。</li>\n<li>要学会这么一种领导艺术，不要什么事总是捂着。</li>\n<li><strong>消灭阶级，消灭国家权力，消灭党，全人类都要走这一条路的，问题只是时间和条件。</strong></li>\n<li><strong>十月革命一声炮响，给我们送来了马克思列宁主义。</strong></li>\n<li>灭敌人的威风，才能孤立反动派，战而胜之，或取而代之。</li>\n<li><strong>封锁吧，封锁十年八年，中国的一切问题都解决了。</strong></li>\n<li>中国人民历次推翻自己的封建朝廷，是因为封建朝廷压迫和剥削人民，而不是什么人口过剩。</li>\n<li><strong>世间一切事物中，人是第一个可宝贵的。</strong></li>\n<li>世界上只有具体的自由，具体的民主，没有抽象的自由，抽象的民主。</li>\n<li><strong>民主这个东西，有时看起来似乎是目的，实际上，知识一种手段。</strong></li>\n<li>许多人不敢公开承认我国人民内部还存在着矛盾，正是这些矛盾推动着我们的社会向前发展。</li>\n<li>应该承认：有些群众往往注意当前的，局部的，个人的利益，而不了解长远的，全国性的，集体的利益。</li>\n<li>一定要研究当前的情况，研究实际的经验和材料，要和工人农民交朋友。</li>\n<li><strong>我们要提倡正确的东西，反对错误的东西，但是不要害怕人们接触错误的东西。</strong></li>\n<li>这种批判，应该是充分说理的，有分析的，有说服力的，而不应该是粗暴的，官僚主义的，或者是形而上学的，教条主义的。</li>\n<li>他们是男儿有泪不轻弹，只因未到评级处。</li>\n<li>人没有饿死，就要做革命工作，就要奋斗。</li>\n<li>善意，恶意，不是猜想的，是可以看出来的。</li>\n<li>阶级敌人是一定要寻找机会表现他们自己的。</li>\n<li><strong>阶级斗争是客观存在的，不依人的意志为转移的。</strong></li>\n<li>社会主义改造有两个方面：一方面是制度的改造，一方面是人的改造。</li>\n<li>智慧都是从群众那里来的。</li>\n</ol>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%80%89%E9%9B%86/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E9%80%89%E9%9B%86/",
            "title": "选集_92",
            "date_published": "2023-10-12T10:49:33.022Z",
            "content_html": "<h1 id=\"第一卷_92\"><a class=\"markdownIt-Anchor\" href=\"#第一卷_92\">#</a> 第一卷_92</h1>\n<ol>\n<li><strong>谁是我们的敌人？谁是我们的朋友？这个问题是革命的首要问题。</strong></li>\n<li>“举起你的左手打倒帝国主义，举起你的右手打倒共产党。”</li>\n<li>那些中间阶级，必然很快分化，或者向左跑入革命派，或者向右跑入反革命派，没有他们 “独立” 的余地。</li>\n<li>工业无产阶级是我们革命的领导力量。一切半无产阶级，小资产阶级是我们最接近的朋友。</li>\n<li>凡是反抗最力，乱了闹得更大的地方，都是土豪劣绅，不法地主为恶最甚的地方。</li>\n<li><strong>革命不是请客吃饭，不是做文章，不是绘画绣花，不能那样雅致，那么从容不迫，文质彬彬，那样温良恭俭让，革命是暴动，是一个阶级推翻一个阶级的暴烈的行动。</strong></li>\n<li>矫枉必须过，不过正不能矫枉。</li>\n<li>没有贫农，便没有革命。若否认他们，便是否认革命。若打击他们，便是打击革命。</li>\n<li>土豪劣绅极盛时，杀农民真是杀人不眨眼。</li>\n<li>这四种权力 —— 政权、族权、神权、夫权，代表了全部封建宗法的思想和制度，是束缚中国人民特别是农民的四大极大的绳索。</li>\n<li><strong>嘴里天天说 “唤起民众”，民众起来了又害怕的要死，这和叶公好龙有什么两样！</strong></li>\n<li><strong>今天暂时的妥协，即酝酿着明天的更大的战争。</strong></li>\n<li>我们只须知道中国白色政权的分裂和战争是继续不断的，则红色政权的发生，存在并且日益发展，便是无疑的了。</li>\n<li>红军的物资生活如此菲薄，战斗如此频繁，仍能维持不敝，除党的作用外，就是靠实行军队中的民主主义。</li>\n<li>同样一个兵，昨天在敌军不勇敢，今天在红军很勇敢，就是民主主义的影响。</li>\n<li>红军以集中为原则，赤卫队以分散为原则。</li>\n<li>对敌军的宣传，最有效的方法是释放俘虏和医治伤兵。</li>\n<li><strong>不顾主客观条件，犯着革命的急性病，不愿意艰苦地做细小严密的群众工作，只想着大干，充满着幻想。</strong></li>\n<li>他们的这种理论的来源，主要是没有把中国是一个许多帝国主义国家互相争夺的半殖民地这件事认清楚。</li>\n<li>它是站在海岸遥望海中已经看得见桅杆尖头的一只航船，它是在于高山之巅远看东方已看见光芒四射喷薄欲出的一轮朝日，它是躁动于母腹中的快要成熟了的一个婴儿。</li>\n<li><strong>没有调查，没有发言权。</strong></li>\n<li><strong>一切结论产生于调查情况的末尾，而不是在它的开头。</strong></li>\n<li>要把官僚主义抛到粪缸里去，因为没有一个同志喜欢它。</li>\n<li>节省每一个铜板为着战争和革命事业，为着我们的经济建设，是我们会计制度的原则。</li>\n<li>同志们，真正的铜墙铁壁是什么？是群众，是千百万真心实意地拥护革命的群众。</li>\n<li>组织革命战争，改良群众生活，这是我们的两大任务。</li>\n<li>不解决方法问题，任务也只是瞎说一顿。</li>\n<li>我们要把敌人营垒中间的一切争斗，缺口，矛盾，统统收集起来，作为反对当前主要敌人之用。</li>\n<li><strong>马克思主义者看问题，不但看到部分，而且要看到全体。</strong></li>\n<li>不到决战的时候，没有决战的力量，不能冒冒失失地去进行决战。</li>\n<li>革命的道理，同世界上一切事物活动的道路一样，总是曲折的，不是笔直的。</li>\n<li>我们固然应该尊重过去流血的经验，但是还应该尊重自己流血的经验。</li>\n<li>战争的目的在于消灭战争。</li>\n<li><strong>学习不是一件容易的事情，使用则更加不容易。</strong></li>\n<li>革命战争是民众的事，常常不是先学好了再干，而是干起了再学习，干就是学习。</li>\n<li>他们自称马克思主义者，其实一点马克思列宁主义也没有学到。</li>\n<li>由此可知，不了解中国革命战争的特点，就不指导中国革命战争，就不能引导中国革命走上胜利的途经。</li>\n<li>第一个特点，中国是一个政治经济发展不平衡的半殖民地的大国，而又经过了一九二四年至一九二七年的革命。</li>\n<li>第二个特点是敌人的强大。</li>\n<li>第三个特点是红军的弱小。</li>\n<li>第四个特点是共产党的领导和土地革命。</li>\n<li><strong>为了进攻而防御，为了前进而后退，为了向正面而向侧面，为了走直路而走弯路，是许多事物在发展过程中所不可避免的现象，何况军事运动。</strong></li>\n<li>谁人不知，两个拳师放对，聪明的拳师往往退让一步，而蠢人则其势汹汹，辟头就使出全副本领，结果却往往被退让者打倒。</li>\n<li>革命运动所造成的丧失是破坏，而其取得的是进步的建设。</li>\n<li><strong>惧怕一时的不良政治影响，就要以长期的不良影响做代价。</strong></li>\n<li>他们看问题仅从一局部出发，没有能力通观全局，不愿把今天的利益和明天的利益相联结，把部分利益和全体利益相连接，捉住一局部一时间的东西死也不放。</li>\n<li>但是虚心接受别人的经验也属必需，如果样样要待自己经验，否则固执己见拒不接受，这就是十足的 “狭隘经验论”。</li>\n<li><strong>没有全局在胸，是不会真的投下一着好棋子的。</strong></li>\n<li>必须打胜；必须照顾全战役计划；必须照顾下一战略阶段：这是反攻开始，即打第一仗时，不可忘记的三个原则。</li>\n<li>集中兵力之所以必要，是为了改变敌我的形势。</li>\n<li>我们的战略是 “以一当十”，我们的战术是 “以十当一”，这是我们制胜敌人的根本法则之一。</li>\n<li>我们是以少胜多的 —— 我们向整个中国统治者这样说。我们又是以多胜少的 —— 我们向战场上的作战的各个局部的敌人这样说。</li>\n<li>把我们的思想，工作适应于情况，准备坐下，又准备走路，不要把干粮袋丢掉了。</li>\n<li>游击性在将来一定是可羞的和必须抛弃的东西，但在今天却是宝贵的和必须坚持的东西。</li>\n<li>对于人，伤其十指不如断其一指，对于敌，击溃其十个师不如歼灭其一个师。</li>\n<li>伦敦和汉阳的兵工厂，我们是有权利的，并且经过敌人的运输队送来。</li>\n<li>而争取政治上的民主自由，则为保证抗战胜利的中心一环。</li>\n<li>民主是抗日的保证，抗日能给予民主运动发展以有利条件。</li>\n<li><strong>我们的实践证明：感觉到了的东西，我们不能立即理解它，只有理解了的东西才能更深刻地感受它。</strong></li>\n<li><strong>知识的问题是一个科学的问题，来不得半点的虚伪和骄傲，决定需要的倒是其反面 —— 诚实和谦逊的态度。</strong></li>\n<li>由此看来，认识的过程，第一步，是开始接触外界事情，属于感觉的阶段。第二步是综合感觉的材料加以整理和改造，属于概念判断和推理的阶段。</li>\n<li>理性的东西之所以靠得住，正是由于它来源于感性。</li>\n<li><strong>理性认识依赖于感性认识，感性认识有待于发展到理性认识，这就是辩证唯物论的认识论。</strong></li>\n<li>认识从实践起，经过实践得到了理论的认识，还须再回到实践去。</li>\n<li>无数相对的真理之总和，就是绝对的真理。</li>\n<li>研究问题，忌带主观性，片面性和表面性。</li>\n<li>一句话，不了解矛盾各方的特点。这就叫做片面地看问题。</li>\n<li>对于具体的事物作具体的分析。</li>\n<li>一切个性都是有条件地暂时地存在的，所以是相对的。</li>\n<li>抓住这个主要矛盾，一切问题就迎刃而解了。</li>\n<li>对抗是矛盾斗争的一种形式，而不是矛盾斗争的一切形式。</li>\n</ol>\n<h1 id=\"第二卷_90\"><a class=\"markdownIt-Anchor\" href=\"#第二卷_90\">#</a> 第二卷_90</h1>\n<h2 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h2>\n<ol>\n<li><strong>团结要是真正的团结，尔虞我诈是不行的。办事要大方一点，手笔要伸畅一点。</strong></li>\n<li><strong>事情有大道理，有小道理，一切小道理都归大道理管着。</strong></li>\n<li>当面不说，背后乱说；开会不说，会后乱说。</li>\n<li>事不关己，高高挂起；明知不对，少说为佳；明哲保身，但求无过。</li>\n<li><strong>命令不服从，个人意见第一；只要组织照顾，不要组织纪律。</strong></li>\n<li>办事不认真，无一定计划，无一定方向，敷衍了事，得过且过，做一天和尚撞一天钟。</li>\n<li><strong>这些人，马克思主义是有的，自由主义也是有的：说的是马克思主义，行的是自由主义；对人是马克思主义，对己是自由主义。</strong></li>\n<li><strong>只要我们努力，我们的前途是光明的。</strong></li>\n<li>危险是在中国居然有些动摇分子正在准备去上敌人的钓钩，汉奸卖国贼从而穿插其中，散布种种谣言，企图使中国投降日寇。</li>\n<li><strong>民主和集中之间并没有不可越过的深沟，对于中国，二者都是必需的。</strong></li>\n<li>战争的性质决定政府与人民的关系，这是一个历史的原则。</li>\n<li>分散，集中和变换是游击战争灵活使用兵力的是三个方法。</li>\n<li>战略统一下的独立自主的游击战争。</li>\n<li><strong>总之，他们没有勇气承认敌强我弱这件事实。</strong></li>\n<li>但是我们指出没有一定的条件，速胜只存在头脑之中，客观上是不存在的，只是幻想和假道理。</li>\n<li><strong>我们主张为着争取最后胜利所必要的一切条件而努力，条件多具备一分，早具备一日，胜利的把握就多一分，胜利的时间就早一日。</strong></li>\n<li><strong>中国会灭亡吗？答复：不会亡，最后的胜利是中国的。中国能够速胜吗？答复：不能，必须是持久战。</strong></li>\n<li>力量对比不但是军力和经济力的对比，而且是人力和人心的对比。</li>\n<li><strong>“战争是政治的延续” 在这点上说，战争就是政治，战争本身就是政治性质的行动，从古以来没有不带政治性的战争。</strong></li>\n<li>战争一刻也离不了政治。</li>\n<li><strong>优势而无准备，不是真正的优势，也没有主动。</strong></li>\n<li>拼命主义是军事上的近视眼，其根源常是惧怕丧失土地。</li>\n<li>中国之所以能够进行持久战，用歼灭达到消耗是主要的手段。</li>\n<li>世界上只有猫和猫做朋友的事，没有猫和老鼠做朋友的事。</li>\n<li>抗日战争中的决战问题应分为三类：一切有把握的战役和战斗应坚决地进行决战，一切无把握的战役和战斗应避免决战，赌国家命运的战略决战应根本避免。</li>\n<li><strong>军队政治工作的三大原则：第一是官兵一致，第二是军民一致，第三是瓦解敌军。</strong></li>\n<li>一个好的共产党员，必须善于照顾全局，善于照顾多数，并善于与同盟者一道工作。</li>\n<li>领导者的责任，归结起来，主要地是出主意，用干部两件事。</li>\n<li>共产党员是国际主义的马克思主义者，但是马克思主义必须和我国的具体特点相结合并通过一定的民族形式才能实现。</li>\n<li>学习的敌人是自己的满足，要认真学习一点东西，必须从不自满开始。</li>\n<li>对自己，“学而不厌”，对人家，“诲人不倦”，我们应取这种态度。</li>\n<li>在中国，主要的斗争是战争，而主要的组织形式是军队。</li>\n<li>一句话，全党都要注重战争，学习军事，准备打仗。</li>\n<li><strong>我们的原则是党指挥枪，而决不容许枪指挥党。</strong></li>\n<li>我们是战争消灭论者，我们是不要战争的；但是只能经过战争去消灭战争，不要枪杆子，必须拿起枪杆子。</li>\n<li>革命的或不革命的或反革命的知识分子所最后的分界，看其是否愿意并且实行和工农民众相结合。</li>\n<li>中国应该统一，不统一就不能胜利。</li>\n<li>要全国进步，要落后的人向进步的人看齐，决不能拉进步的人向落后的人看齐。</li>\n<li><strong>凡是敌人反对的，我们就要拥护；凡是敌人拥护的，我们就要反对。</strong></li>\n<li>党的失败和胜利，党的后退和前进，党的缩小和扩大，党的发展和巩固，都不能联系于党同资产阶级的关系和同武装斗争的关系。</li>\n<li>民族革命和民主革命这样两个基本任务，是互相区别，又是互相统一的。</li>\n<li>民主主义革命是社会主义革命的必要准备，社会主义革命是民主革命的必然趋势。</li>\n<li><strong>一个人能力有大小，但只要有这种精神，就是一个高尚的人，一个纯粹的人，一个有道德的人，一个脱离了低级趣味的人，一个有益于人民的人。</strong></li>\n<li><strong>真理只有一个，而究竟是谁发现了真理，不依靠主观的夸张，而依靠客观的实践。</strong></li>\n<li>不破不立，不塞不流，不止不行，它们之间的斗争是生死斗争。</li>\n<li>一切新的东西都是从艰苦斗争中锻炼出来的。</li>\n<li>他们不愿工农在政治上抬头，也不愿工农在文化上抬头。</li>\n<li>决不可无故进攻人家，也决不可在被人家进攻时不予还击。</li>\n<li>不斗则以，斗则必胜，决不举行无计划无准备无把握的斗争。</li>\n<li><strong>这三个原则，换一句话说，就是 “有理”，“有利”，“有节”。</strong></li>\n<li>斗争是克服投降危险，争取时局好转，巩固国共合作的最主要的方法。</li>\n</ol>\n<h2 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h2>\n<ol>\n<li>“唤醒民众”</li>\n<li>全局意识，不谋全局者不能保一隅，大局观十分重要。</li>\n<li>在于其他党派的合作中，需要保留一定的独立性，切忌无条件的妥协，在阶级斗争中维持一个相对的底线，注重主要矛盾，淡化次要矛盾，促进合作。</li>\n<li>国民党真是一个不了解他的人觉得他是废物，了解之后觉得怎么还能这么废物的党派。百年烂党名不虚传。在内忧外患，日寇侵袭的情况下，还对日软弱，对内则残杀进步人士，自己抗日不力，还要拖着别人的后腿对外则卑躬屈膝，真是民族之耻。</li>\n<li>要以斗争求和平，指望别人主动对你好，一味的退让是没有好结果的。</li>\n</ol>\n<h1 id=\"第三卷_91\"><a class=\"markdownIt-Anchor\" href=\"#第三卷_91\">#</a> 第三卷_91</h1>\n<ol>\n<li>墙上芦苇，头重脚轻根底浅；山间竹笋，嘴尖皮厚腹中空。</li>\n<li>它的党员应该站在民众之中，而决不应该站在民众之上。</li>\n<li>自从有阶级的社会存在以来，世界上的知识只有两门，一门叫做生产斗争知识，一门叫做阶级斗争知识。</li>\n<li><strong>我想，我们应该是老老实实地办事；在世界上要办成几件事，没有老实态度是根本不行的。</strong></li>\n<li><strong>凡真理都不装样子吓人，它只是老老实实地说下去和做下去。</strong></li>\n<li>最干净的还是工人农民，尽管他们手是累的，脚上有牛屎，还是比资产阶级和小资产阶级知识分子都干净。这就叫做感情起了变化，由一个阶级变到另一个阶级。</li>\n<li>我们讨论问题，应当从实际出发，不是从定义出发。</li>\n<li><strong>但是时间无论怎么长，我们却必须解决它，必须明确地彻底地解决它。</strong></li>\n<li>只有代表群众才能教育群众，只有做群众的学生才能做群众的先生。</li>\n<li><strong>世上绝没有无缘无故的爱，也没有无缘无故的恨。</strong></li>\n<li><strong>普通的人，容易为过去和当前的情况所迷惑，以为今后也不过如此。</strong></li>\n<li>发展经济，保障供给，是我们的经济工作和财政工作的总方针。</li>\n<li>他们不设想到可能的最困难和最复杂的情况，而是梦想这不可能的最顺利和最简单的情况。</li>\n<li>我们的同志在困难的时候，要看到成绩，要看到光明，要提高我们的勇气。</li>\n<li>我们的工作首先是战争，其次是生产，其次是文化。</li>\n<li>凡是需要群众参与的工作，如果没有群众的自觉和自愿，就会徒于形式而失败。</li>\n</ol>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "title": "读书笔记",
            "date_published": "2023-10-12T10:49:33.020Z",
            "content_html": "<h1 id=\"月亮与六便士_毛姆_90\"><a class=\"markdownIt-Anchor\" href=\"#月亮与六便士_毛姆_90\">#</a> 月亮与六便士_毛姆_90</h1>\n<ol>\n<li>那些慷慨激昂的人自以为他们说的话是前人闻所未闻的，殊不知此类豪言壮语早已被说过上百遍，而且连说话的腔调也是大同小异。</li>\n<li>那些作家当面称兄道弟，但转身就会用尖酸刻薄的言论相互挖苦，我常听得瞠目结舌。</li>\n<li>他们就像是身体里的细胞，重要是很重要，但只要是健康的细胞，就会被巨大的总体吞没而显露不出来。</li>\n<li>绝大部分的人做着普普通通的事情就心满意足了。</li>\n<li>尽管心中有许多美好而奥秘的意思要表达，却只能借助会话手册上那些陈腔滥调。他们的大脑充满了想法，却只能告诉你园丁的姨妈的雨伞在屋子里。</li>\n</ol>\n<h1 id=\"伤心者_何夕_87\"><a class=\"markdownIt-Anchor\" href=\"#伤心者_何夕_87\">#</a> 伤心者_何夕_87</h1>\n<h2 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h2>\n<ol>\n<li><strong>一种仇恨使人蔑视生命，另一种仇恨则使人顽强地活下去。</strong></li>\n<li>真正存在的只有一样东西，那便是能量以及能量的流动。</li>\n<li>时光只有在回想的时候才发觉它过得真快。</li>\n<li>“你错了，改变世界的不是你们。” 何夕的声音变得有点异样。“是我。”</li>\n<li>对于我们脚下这片浸透着苦难的古老土地来说。只有那些最最‘基本’的东西才会真正有用。</li>\n<li><strong>从某种意义上讲，地球上的所有生命都不过是一段各不相同的四进制程序代码罢了。</strong></li>\n</ol>\n<h2 id=\"读后感\"><a class=\"markdownIt-Anchor\" href=\"#读后感\">#</a> 读后感</h2>\n<p>我觉得何夕和刘慈欣是国内最优秀的两位科幻作家，不同于刘慈欣的硬核，何夕的作品更多的是对于社会中软文化的思考，但是也同样充满想象的科幻色彩。何夕的文字更为流畅，读起来更舒服，但是感觉何夕有点太喜欢写爱情了，基本每篇都会出现男女主的感情故事，偶尔来一下还好，一直这样感觉有点水字数。</p>\n<h1 id=\"情人_法玛格丽特杜拉斯_83\"><a class=\"markdownIt-Anchor\" href=\"#情人_法玛格丽特杜拉斯_83\">#</a> 情人_[法] 玛格丽特。杜拉斯_83</h1>\n<ol>\n<li>我自以为我在写作，但事实上我从不曾写过，我以为我在爱，但我从来也不曾爱过，我什么都没有做，不过是站在那紧闭的门前等待罢了。</li>\n<li>那笑声是再也听不到了，笑声，哭声，都听不到了。完了，完了，都忘了，都记不起来了。</li>\n<li><strong>我们憎恶生活，也憎恶我自己。</strong></li>\n<li>我再也不能得到了，我自以为还能，但是办不到了。</li>\n</ol>\n<h1 id=\"杀死一只知更鸟_哈珀李_83\"><a class=\"markdownIt-Anchor\" href=\"#杀死一只知更鸟_哈珀李_83\">#</a> 杀死一只知更鸟_哈珀。李_83</h1>\n<ol>\n<li>富林克林。罗斯福：“除了恐惧本身，他们没有什么可恐惧的。”</li>\n<li>世界上就是有那么一类人，他们 —— 他们只顾担心来世，根本不去学习在今生如何做人。</li>\n<li>我在接受他人之前，首先要接受自己。有一种东西不能遵循从众原则，那就是人的良心。</li>\n<li>一个人很少能赢，但也总会有赢的时候。</li>\n<li>一个人没必要把自己懂的东西都展现出来。</li>\n<li>我不赞成以人的生命为代价保持虚伪的礼节。</li>\n<li>如果人们能把事情归结于一个理由，就好办多了。</li>\n<li>我之所以这样生活，是因为这就是我想要的生活。</li>\n<li>他们以前做过，今天晚上又做了，将来还会在做，而且，他们这样做的时候… 似乎只有孩子会哭泣。</li>\n<li>在我们生活的这个世界，总有什么东西让人丧失理智 —— 即使他们努力想做到公平，结果还是事与愿违。</li>\n<li>我们的法庭也有缺陷，任何社会机构都不例外，但是，在这个国家里，我们的法庭是伟大的平等主义者。在我们的法庭里，人人生而平等。</li>\n</ol>\n<h1 id=\"茶花女_小仲马_85\"><a class=\"markdownIt-Anchor\" href=\"#茶花女_小仲马_85\">#</a> 茶花女_小仲马_85</h1>\n<ol>\n<li><strong>如果不了解一个人的痛苦，而又想去安慰她，那实在是一件难事。</strong></li>\n<li>如果人的想象能够使感官带上某种诗意，而肉体的欲望有能在心灵的幻想前退却三分，那可真是一件值得庆幸的事！</li>\n<li>爱情这件事，实在是一件极其孩子气的崇高行为。</li>\n<li>男人们总是这样，都心急火燎地想知道那些听了以后会让他们心里痛苦的事。</li>\n<li>人生只不过是为了反复满足一种持续不断的欲望，灵魂也只不过是维持爱情圣火的贞女。</li>\n<li><strong>人经常有一种孩子般的快乐，而破坏这种快乐的人是可恶的。</strong></li>\n<li>如果一个人不随着时间的推移而自我完整，那他也只是长了年龄而不长见识。</li>\n<li>真正的爱情总是把人塑造得更完美，不管激起这种爱情的女人是怎么样的人。</li>\n</ol>\n<h1 id=\"呼兰河传_萧红_84\"><a class=\"markdownIt-Anchor\" href=\"#呼兰河传_萧红_84\">#</a> 呼兰河传_萧红_84</h1>\n<ol>\n<li><strong>在乡村，人和动物一起忙着生，忙着死…</strong></li>\n<li>坟场是死的城郭，没有花香，没有鸟鸣，即使有虫，那都是唱奏着别离歌，陪伴着说不尽的死者永远的寂寞。</li>\n<li>她无助的嘶狂着，圆眼睛望一望锁住的门不能自开，她不能逃走，事情必然要发生。</li>\n<li><strong>漫天星光，满屋月亮，人生何如，为什么这么悲凉。</strong></li>\n<li>人生为了什么，才有这样凄凉的夜。</li>\n<li>他们想击退寒凉，因此带来了悲哀。</li>\n</ol>\n<h1 id=\"狂热分子_美埃里克霍弗_87\"><a class=\"markdownIt-Anchor\" href=\"#狂热分子_美埃里克霍弗_87\">#</a> 狂热分子_[美] 埃里克。霍弗_87</h1>\n<ol>\n<li>一个人愈是没有值得自夸之处，就愈容易夸耀自己的国家，宗族，种族或他所参与的神圣事业。</li>\n<li><strong>失业者宁愿追随贩卖希望的人，而不愿追随施与救济的人。</strong></li>\n<li>为最起码生活操劳的人，不会有时间，心情去悲愤或造梦。</li>\n<li><strong>一个人除非善于用脑子，否则自由就会成为他一种讨厌的负担。</strong></li>\n<li><strong>当一个极权社会的人民揭竿而起时，他们要反对的不是它的邪恶，而是他的软弱。</strong></li>\n<li>爱国主义是歹徒最后的归宿。</li>\n</ol>\n<h1 id=\"棋王_阿城_89\"><a class=\"markdownIt-Anchor\" href=\"#棋王_阿城_89\">#</a> 棋王_阿城_89</h1>\n<p>书本的开头就十分引人入胜，通过 “我” 的观察，寥寥数笔就写出了棋王王一生最突出的两个特征，一是嗜棋如命，躲避着亲人的送别，却到处寻人下棋，一找到人下棋就开心的不得了；二是对吃的渴望，细节在于对其吃饭时的神态，最妙的是写王一生将桌子上的干了的饭粒抠出来再放入口中细细咀嚼的神态。</p>\n<p>“若饭粒儿落在衣服上，就马上一按，拈进嘴里。若一个没按住，饭粒儿由衣服上掉下地，他也立刻双脚不再移动，转了上身找，吃完以后，他把两只筷子吮净，拿水把饭盒冲满，先将上面一层油花吸净，然后就带着安全到达彼岸的神色小口小口的呷，他对吃是虔诚的，而且很精细。有时你会可怜那些饭被他吃得一个渣儿都不剩，真有点儿惨无人道。”</p>\n<p>用着最平淡的语气来写最传神的文章，这是这篇小说的精妙之处。而小说的高潮是王一生与九位棋赛胜者同时进行比赛。“他把嘴定在碗边儿，半响，回报了棋步，才咽一口水下去，“咕” 的一声，声音大的可怕，眼里有了泪花。” 没有写棋局的凶险，而去写喝水的情形来刻画说明。而王一生隐隐有股书呆子气，“脚卵” 送了自己珍藏多年的棋盘给棋赛领导来让王一生去参赛，他拒绝了，宁愿在棋赛结束后，去和棋赛的赢家再比一次。而且这篇小说充满着一种传统文化，例如 “势”，“阴阳” 等。风格有点类似于冯骥才的《俗世奇人》，也是用精妙的语言来刻画人物。小说可读性很强，情节引人入胜。</p>\n<br/>\n<h1 id=\"人类简史_以色列尤瓦尔赫拉利_87\"><a class=\"markdownIt-Anchor\" href=\"#人类简史_以色列尤瓦尔赫拉利_87\">#</a> 人类简史_[以色列] 尤瓦尔。赫拉利_87</h1>\n<ol>\n<li><strong>农业革命并没有让大多数人都过上更好的生活，只是让人类以更低的标准养活更多的人。</strong></li>\n<li>学会用火，使人可以集中能量以供大脑的发展。</li>\n<li><strong>相信并不存在的事物，是人类最重要的技能。</strong></li>\n<li><strong>历史的进程并不明智，有时甚至是错误接着一个错误。</strong></li>\n<li>历史的进程并不明朗，谁都无法准确的预测未来。</li>\n<li>帝国，宗教客观上推动了全球化的进行，推动了艺术和科学的发展。</li>\n<li>阶级使得大家有了共同语言和共同目标。</li>\n<li>智人从未与自然和谐相处，从开始便是杀人凶手。</li>\n<li>文字使得文化可以代代传承。</li>\n<li>我们现在处于历史上最为和平的时代。</li>\n<li><strong>能源并不会被人类耗尽，只是需要工具。</strong></li>\n<li>环境问题是急需解决的问题。</li>\n<li>资本主义冲掉所有抗拒全球化的力量。</li>\n</ol>\n<h1 id=\"撒哈拉的故事_三毛_88\"><a class=\"markdownIt-Anchor\" href=\"#撒哈拉的故事_三毛_88\">#</a> 撒哈拉的故事_三毛_88</h1>\n<ol>\n<li>我看见每个一个女人都用一片小石头沾着水，在刮自己的身体，没刮一下，身上就出现一条黑黑的浆汁的污垢，她们不太用水，要刮得全身的脏都松了，才用水冲。</li>\n<li>光看这张照片，就令人眼花缭乱，招架不及，如果真人来了，加上香粉味一定更是精彩。</li>\n<li>这么一个拘谨孤单年轻的心，碰到一点点即使是假的爱情，也当然要不顾一切地去抓住了。</li>\n<li>“我在想，飞蛾扑火时，一定是极快乐幸福的。”</li>\n<li><strong>人，是最怕认识自己的动物。</strong></li>\n<li>我认真地在想，关在牢里面的人，不一定比放在外面的人坏。</li>\n<li>我并不气馁，人，多几种生活的经验总是可贵的事。</li>\n<li><strong>人，真是奇怪，没有外人来证明自己，就往往看不出自己的价值。</strong></li>\n<li>没有拍到红鹤自是可惜，但是那一刹那的美丽，在我的心底，一生也不会淡忘掉了。</li>\n<li>没有变化的生活，就像是织布机上的经纬，一匹一匹的岁月都织出来了，而花色却是一个样子的单调。</li>\n<li>路，像一条发光的小河，笔直地流在苍穹下。</li>\n<li><strong>写，是重要，而有时搁笔不写，却是更重要。</strong></li>\n</ol>\n",
            "tags": [
                "科幻",
                "小说",
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E8%8E%AB%E6%B3%8A%E6%A1%91%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4%E7%B2%BE%E9%80%89_[%E6%B3%95]%E8%8E%AB%E6%B3%8A%E6%A1%91_90/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E8%8E%AB%E6%B3%8A%E6%A1%91%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4%E7%B2%BE%E9%80%89_[%E6%B3%95]%E8%8E%AB%E6%B3%8A%E6%A1%91_90/",
            "title": "莫泊桑短篇小说精选_[法]莫泊桑_90",
            "date_published": "2023-10-12T10:49:33.018Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>焦虑不安的等待，反倒让人盼着敌人快点来。</li>\n<li>不可一世的军队屠杀着保家卫国的人，捉走俘虏，以战刀之名抢劫，用大炮的怒吼感恩上帝。</li>\n<li>对外敌的仇恨总是能够激励少数愿意为信念慷慨赴死的义士。</li>\n<li>这些不为人知的英雄之举，这些悄无声息的攻击，比光天化日下的战斗更加危险，却得不到应有的荣光。</li>\n<li>因为愤怒这个东西也必须应景而生，而现在，他们周围慢慢形成的气氛已经放荡不堪了。</li>\n<li>她燃烧起怒火，越来越炽热，却忽然像一根绳子绷太紧会断一样，熄灭了。</li>\n<li><strong>只能说，生活古怪又多变，就那么一丁点的小东西，就能毁了你的人生，或者救了你的人生。</strong></li>\n<li>他的生活没有变故，没有激情，也几乎没有希望。</li>\n<li>梦想的能力每个人都有，但却从未在他平淡无奇的志向中伸展过。</li>\n<li>所有的日子，星期，月份，季节，年岁，全都一个样。</li>\n<li>同样的行动，同样的事和同样的想法循环往复，从没有什么能够打破这种单调。</li>\n<li><strong>最后的日子与最初的日子一模一样，他眼前一无所有，背后一无所有，四周一无所有，心中一无所有，到处，一无所有。</strong></li>\n</ol>\n<h1 id=\"感想\"><a class=\"markdownIt-Anchor\" href=\"#感想\">#</a> 感想</h1>\n<h2 id=\"羊脂球\"><a class=\"markdownIt-Anchor\" href=\"#羊脂球\">#</a> 《羊脂球》</h2>\n<ol>\n<li>不同想法的人难以在一起，人们总是站在相同想法的人身边排斥不同想法的人。</li>\n<li>人们为了自己的利益，委屈别人的做不堪的事情，得益后，反倒嫌弃别人的不堪。</li>\n<li>身份和职业，都不能反映出一个人的品行。</li>\n<li>自己想做却做不成坏事，反倒嫌弃别人做了同样的坏事。</li>\n<li>不能用品行不正来否定一个人的真知灼见。</li>\n<li>不要着急着去帮助别人，也许会被反咬一口。</li>\n<li>不需要委屈自己去帮助别人，也许别人当你的牺牲是笑话，不会领你的情。</li>\n<li>容易倒向你的人，也容易倒向别人。</li>\n<li>别人的话可以用于参考，判断还是要靠自己。</li>\n</ol>\n<h2 id=\"项链\"><a class=\"markdownIt-Anchor\" href=\"#项链\">#</a> 《项链》</h2>\n<ol>\n<li>虚荣和虚伪是毁掉一个人的最佳方式。</li>\n<li>生活永远是无法预测的。</li>\n<li>一丁点的小错误可能要你用千百倍的代价偿还。</li>\n</ol>\n<h2 id=\"散步\"><a class=\"markdownIt-Anchor\" href=\"#散步\">#</a> 《散步》</h2>\n<ol>\n<li>相同，重复，也许是磨灭人心智的凶器。</li>\n<li>难以忍受的孤独和重复如影随形。</li>\n<li>每个自杀者，都忍受着比死亡更可怕的东西。</li>\n<li>每一天，都应该活出个不一样的风采。</li>\n</ol>\n<h2 id=\"绳子\"><a class=\"markdownIt-Anchor\" href=\"#绳子\">#</a> 《绳子》</h2>\n<ol>\n<li>没有必要多次辩解，人们只愿意想象自己愿意想象的。</li>\n<li>不要太在意别人的看法，自己问心无愧即可。</li>\n</ol>\n",
            "tags": [
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E8%8B%8F%E8%81%94%E7%9C%9F%E7%9B%B8_%E9%99%86%E5%8D%97%E6%B3%89%E7%AD%89_91/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E8%8B%8F%E8%81%94%E7%9C%9F%E7%9B%B8_%E9%99%86%E5%8D%97%E6%B3%89%E7%AD%89_91/",
            "title": "苏联真相:对101个重要问题的思考_陆南泉等_91",
            "date_published": "2023-10-12T10:49:33.016Z",
            "content_html": "<h1 id=\"苏联真相对101个重要问题的思考上_陆南泉等_93\"><a class=\"markdownIt-Anchor\" href=\"#苏联真相对101个重要问题的思考上_陆南泉等_93\">#</a> 苏联真相：对 101 个重要问题的思考 (上)_陆南泉等_93</h1>\n<h2 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h2>\n<ol>\n<li>欧化有其自身的逻辑，与沙皇政权的初衷相悖，欧化的范围不可避免地进入更深的领域。</li>\n<li><strong>最核心的问题是经济和社会方面的农民土地问题，以及政治领域贵族独掌权力问题。</strong></li>\n<li>在自由主义活动家的影响和引导下，各社会组织的活动很快从纯粹的事务方面扩展到政治方面。</li>\n<li>当时沙皇的口号是 “吃不饱，也得出口。”</li>\n<li>列宁指出，俄国经济的特点 “一方面是最落后的土地占有制和最野蛮的乡村，另一方面是最先进的工业资本主义和金融资本主义！”</li>\n<li>俄国垄断资本主义的发展虽晚于美欧国家，其经济亦比美欧国家落后，但它的垄断和集中程度要比美欧国家高。</li>\n<li><strong>俄国的基本国情是资本主义不发达，经济落后，农民占人口的绝大多数，而无产阶级占少数。</strong></li>\n<li>在 19 世纪末 20 世纪初，俄国的资本主义还处于非常不发达的状态，保存着大量的资本主义以前的残余，而资本主义的比重极小。</li>\n<li>直到第一次世界大战，列宁一直主张在俄国进行民主革命，而不是社会主义革命。</li>\n<li>马克思：“一种社会形态在竭尽其潜力之前是不会灭亡的。”</li>\n<li>十月革命胜利后我们看到 “政权万能论” 的实践 —— 有了政权就有了一切，就能改变一切。</li>\n<li>世界历史的发展确实不是严格按照所谓五种社会形态的顺序，按部就班地进行的。</li>\n<li><strong>缺乏生产力的支撑，单纯靠暴力来改变社会发展阶段，最后一定失败。</strong></li>\n<li><strong>他们不懂得，可以暂时改变历史发展顺序不等于可以随意跳过历史发展阶段，缺的东西需要补上，历史的欠账终究是要还的。</strong></li>\n<li>2 月 10 日，杜马主席罗将科在面见沙皇时指出：“战争表面，国家的治理不能没有人民参与的”</li>\n<li><strong>“没有任何一个政党为伟大转折做好了准备。”</strong></li>\n<li>起义士兵由于特殊的 “革命功勋” 将不被调往前线。</li>\n<li>如果事情到此为止的话，俄国将会成为君主立宪制国家。</li>\n<li>沙皇制度的被推翻通常被认为是全民的意志，但实际情况并非如此。</li>\n<li>君主制的思想在农民中具有更深的根基。</li>\n<li><strong>“军队始终是专制政权的主要支柱，正是军队的瓦解成为决定俄国君主制崩溃的基本原因。”</strong></li>\n<li>通常认为，二月革命后政治局面的基本特色是两个政权并存。实际上，这只是表面现象，更本质的特点是无政府主义泛滥。</li>\n<li>最主要的是临时政府没有看清楚二月后彼得格勒政治舞台上的真正主角是不再承认任何权威的群众，没有把群众的迫切需要作为政局的最基本问题来解决。</li>\n<li>毫无疑问，如果没有列宁，布尔什维克党将走上截然不同的另一条道路，俄国也将因此而朝向另一个方向发展。</li>\n<li>由于八月叛乱的失败，国内政治格局发生了重大变动，在总体上出现了左倾化。</li>\n<li>托洛茨基轻蔑地宣称：“你们是可怜的一小撮，你们破产了，你们的戏演完了，滚进历史的垃圾堆吧！”</li>\n<li>“七月事件” 是 1917 年 10 月 26 日 1 点左右的这一幕，展示了俄国社会主义者的决裂，也表明不同社会主义政党或派别在对待俄国革命的理解和信念，对俄国未来道路的选择上，存在根本性的差异。</li>\n<li>在获悉最后选举结果后，列宁立即表示：“一切权力归立宪会议” 是 “反革命口号”，“立宪会议如果同苏维埃政权背道而驰，那就必然注定要在政治上死亡。”</li>\n<li>夺取政权的目的不是为了再把它交出去。</li>\n<li>俄国广大工农大众要求的是什么？是 “四大件”：和平，土地，面包和自由。</li>\n<li>关注民生就必须实行民主，党的领导的正确，根本保证在于充分的信任和尊重广大人民的自主精神和创造性。</li>\n<li>搞社会主义不能仅靠 “高举红旗”，“政治热情”，应该靠人民大众从私人利益上来关心社会主义事业。</li>\n<li>由此可见，列宁没有否定布尔什维克执政条件下出现多党制的可能性。</li>\n<li>列宁在大会上说：“党必须团结，党内不容许有反对派存在 —— 这就是从现在形式得出的政治结论。”</li>\n<li>列宁还提出了一个及其重要的观点：“让代表大会选出的中央委员会有权开除中央委员，这是任何时候任何民主制和任何集中制都不容许的。”</li>\n<li>这里提出的问题是：如何正确区别党内正常的民主生活和派别活动？如何防止和惩处借反派别活动而破坏党章，党纪和党内民主的行为？</li>\n<li><strong>“只要还存在着市场经济，只要还保持着货币权力和资本力量，世界上任何法律都无法消灭不平等和剥削。”</strong></li>\n<li>社会主义就是消灭商品经济。</li>\n<li>由于禁止任何贸易，国内出现经济的自然化，实物化。</li>\n<li>用发行天文数字的货币来消灭货币，即把货币变成废纸。</li>\n<li>在国内战争已经基本结束的时候，“共产主义” 性质的分配方法反而达到顶点。</li>\n<li>军事共产主义并不会是战争环境迫使的。</li>\n<li>苏俄和以苏联长期的党政不分，党政合一，一党专政的制度结束从这时开始的。</li>\n<li>1921 年 3 月俄共决定废除粮食征收制，改行粮食税，这标志着新经济政策的开始。</li>\n<li>党的任务是 “对所有国家机关的工作进行总的领导，不是目前那样进行过分频繁的，不正确的，往往是琐碎的干预。”</li>\n<li>“老实说，农民并不理会谁，什么样的领导坐在城里，谁在克里姆林宫统治。对他们来说，重要的是从城里得到什么，克里姆林宫给他们什么。”</li>\n<li>并且具体建议解除作风粗暴的斯大林的总书记职务，指出这不是小事，或者说，这是一种可能的具有决定意义的小事。</li>\n<li>列宁还多次强调，资本是一种国际力量，要想在一个国家内彻底战胜资本是不可能的。</li>\n<li>经实践验证，正确的继续，错误的放弃，并不困守死板的原则。</li>\n<li>“至于在实践中具体如何走，那只能在千百万人的经验来表明。”</li>\n<li>另一个是对社会主义的看法的改变，吧经济文化建设提到第一位。</li>\n<li>揭发隐匿粮食这可获得粮价一半的奖励，另一半奖给村社。</li>\n<li>在俄国无产阶级是少数，共产党人更是小数。少数人专制必须借助于强制和暴力。</li>\n<li>粮食专制或者粮食垄断并没能够解决粮食问题。</li>\n<li>波格丹诺夫的话证实，军事共产主义并不是在国内战争和外国干涉的逼迫下才采取的措施，它的起源要早于苏俄的国内战争。</li>\n<li>粮食征收制几乎拿走农民的所有粮食。</li>\n<li>“向纯社会主义形式和纯社会主义分配的直接过渡，是我们力所不及的，如果我们不能实行退却，即把任务限制在较容易完成的范围内，那我们就有灭亡的危险。”</li>\n<li>布尔什维克经常说，在国内战争中同农民建立了政治联盟，而缺乏经济联盟。然而，缺乏经济联盟作基础的政治联盟是不牢靠的。</li>\n<li>农民起义是促进布尔什维克党改变粮食征收制政策的根本原因，而给予改革最后一记推动力的喀琅施塔得水兵的暴动。</li>\n<li>这给苏维埃政权一个严重的教训，即一个政权不能长期无视人民群众的政治，经济利益，凭借暴力进行 “领导”。</li>\n<li><strong>俄国革命只要具备两个条件才能彻底胜利，一个是得到先进国家社会主义革命的支援，另一个是同占人口多数的农民达成妥协。</strong></li>\n<li>所以起初设想的 “商品交换” 实际上并不是做买卖的商业的合法化，还是停留在 “商品交换” 上。</li>\n<li>这里最重要的一点计算承认了市场关系的作用，它构成了新经济政策的核心。</li>\n<li><strong>但任何政策都不可能是孤立的，这种退却必然发生连锁反应。</strong></li>\n<li>政治体制改革的缺位是新经济政策的致命所在。</li>\n<li>20 年代的多次危机大多是有行政命令的措施引起的，结果也依靠行政命令的方法解决。而越是这样，党的领导就越是把行政命令看成是解决经济问题的唯一手段。</li>\n<li>布尔什维克有特别重视意识形态的传统，目前俄罗斯学者将其称为 “意识形态治国论” 思想。</li>\n<li>由于迅速地，大量地吸引工人，农民党员，党内文化状况受到了很大的影响。</li>\n<li>就是提高工业产品的价格，压低农产品的收购价格，有意识地利用工农产品价格的 “剪刀差”，通过不等价交换，使社会主义获得 “原始积累”。</li>\n<li>斯大林左右起手，最初在托、季之间充当不偏不倚的法官，以期确保自己在政治上的胜利并取得权力。</li>\n<li>尽管这期间采取了非常措施，只要富裕农民和中农拒绝按收购价格向国家交售粮食，就对他们采取直到逮捕和关押的镇压措施。</li>\n<li>在斯大林看来，选择只有一个：“或者是农村资本家，或者是集体农庄。”</li>\n<li>1929 年秋，市场经济机制已彻底扫荡净尽。</li>\n<li>在 1929 年四月中央全会上，彻底在政治上取得对布哈林集团的胜利。</li>\n<li>而正式宣布要将新经济政策 “抛开”，让它 “见鬼去” 的，是斯大林 1929 年 12 月 27 日在马克思主义工作者代表会议的报告，这可以说是新经济政策最后终结的标志性事件。</li>\n<li>决议的第七条规定：如果中央委员会进行派别活动，“就把他降为候补中央委员，甚至采取极端措施，把他开除出党。”</li>\n<li>“禁止派别” 变成了压制批评，打击不同意见者的借口。</li>\n<li>在以后的宣传中只提禁止派别的 “关于党的统一” 的决议，而根本不提 “党的建设的决议”，以致很长时间里人们根本不知道十大还有一个主张实行 “工人民主” 的决议。</li>\n<li>所以遗嘱强调两点，首先就是扩大中央委员会，完善党的最高机关的组成，二是把斯大林从总书记职务上调开。</li>\n<li>当时列宁不安的是官僚主义愈演愈烈。</li>\n<li>列宁的主张，其愿望固然美好，但实践证明是空想。中央委员会虽然增加了一些淳朴的工农分子，但由于他们的经历，他们不了解真相，缺乏判断的经验与足够信息，智力，能力，他们能起监督的作用吗？</li>\n<li>列宁与托洛茨基齐名，国内当时悬挂领袖像，只有列宁和托洛茨基（个别场合还有季洛维也夫）。</li>\n<li>本来应该 “印发” 给党代表大会每一个代表的信，却变成了 “对中央全会特别会议” 的 “传达”。</li>\n<li><strong>有了不受监督的最高权力，就有了一切，一切的一切就好办了。</strong></li>\n<li>过了一年多，斯大林开始报复，70% 的中央委员，过半的十七大代表，成了枪下鬼，牢中囚。</li>\n<li>但是教训对于托洛茨基来说是置若罔闻，他取自杀式的宽宏大度。</li>\n<li>列宁愤慨地说：“我还没有死，而他们，以斯大林为首的，已经把我埋葬了。”</li>\n<li>如果苏联存在下去，这种做法延续下去，有一天红场很可能会变成一片墓地。</li>\n<li>就知名度而言，当时的排名大体依次是：列宁，托洛茨基，斯维尔德洛夫，季洛维也夫，加米涅夫，布哈林，这以后才轮得上斯大林。</li>\n<li>政治局和组织局成立后就开始取代中央全会。</li>\n<li>十一大选举中最奇特之处是在发给代表的中央委员选票上，在斯大林名字后面的括弧内写着 “总书记” 字样，在莫洛托夫和古比雪夫名字后面标明 “书记”！</li>\n<li>这种做法招致检票委员会尼。斯克雷普尼克的不满，甚至要求将这些选票作废。</li>\n<li><strong>列宁就曾对季洛维也夫说过，“这个厨师只会做辣菜。”</strong></li>\n<li>那时候许多人并不看重：“总书记” 这一职务，觉得这是纯属机关性质的，并非很高级的职位。</li>\n<li>为了能立即从新党员身上获得支持，斯大林违背党章，允许预备党员参加党代表大会代表的选举。</li>\n<li><strong>斯大林自己也承认，由于大量吸收新党员，党内 “政治文盲” 的比有 60% 上升到 80%。</strong></li>\n<li>有了自己的基干队伍和群众，斯大林剩下的工作就是在 30 年代通过公开和秘密途经消灭列宁时期的老近卫军，消灭人们对这些开国功臣的记忆，消灭任何可能的潜在对手。</li>\n<li>从实践情况看，苏联工业化作为一个运动的全面开展始于 1928 年，即第一个五年计划。</li>\n<li>这样，在 “一五” 计划期间，进口商品中生产资料的比重提高到 90% 以上，其中机器设备占一半以上。</li>\n<li>重工业，超高速与主要通过剥夺农民的办法用高积累来保证工业化的基金来源。</li>\n<li>从 1926 年到 1940 年，苏联重工业增长 18.4 倍，年均增长率为 21.2%，轻工业增长 6.2 倍，年均增长率为 14.1%，农业仅增长 26%，年均增长率仅为 1.5%。</li>\n<li>据估计，“一五” 计划期间，从农业那里吸收的资金占用于发展工业所需资金的 1/3 以上。</li>\n<li>但要指出的是，工业化时期形成的经济和军事力量，在战争中并未能全部发挥作用。</li>\n<li>通过 “贡税” 榨取农民的政策，导致农业破产，影响整个国民经济的正常发展。</li>\n<li>据有关材料，1931 年 —1939 年饿死的农民达 300 万 —500 万人。</li>\n<li>重工业过重，轻工业过轻，农业长期落后。</li>\n<li>后来，粮食进口上了瘾，就像吸毒者上了海洛因的瘾一样。</li>\n<li>当提高人民生活水平与扩充军备发生矛盾时，在苏联最终总是 “大炮” 战胜 “黄油”。</li>\n<li>粗放型的工业化政策，造成资源的极大浪费。</li>\n<li>从 1928 年开始实施 “一五” 计划后，到 1935 年才有第一家新建的重工业企业成为盈利企业。</li>\n<li>农业的生产组织形式与经营方式要由广大农民创造。</li>\n<li>苏联生产单位产品的物资消耗很大，如在 20 世纪 70 年代末，生产每单位国民收入用钢量比美国多 90%，耗电量多 20%，耗石油量多 100%，水泥用量多 80%，投资多 50%。</li>\n<li>几个月的全盘集体化运动高潮的成果实际上是空中楼阁。</li>\n<li>一些农村干部将没收的物品或据为己有或共同瓜分，他们拿出了 “拿吧，这都是我们的” 口号。</li>\n<li>为了确保国家指令的执行，除了通过党政机关进行直接领导外，还采取了两项重要措施；一是建立了国营的机器拖拉机站，二是实行义务交售制。</li>\n<li>农民常用 BKII（“联共” 的俄文缩写）来暗指 “第二次农奴制”（其俄文缩写也是 BKII）。</li>\n<li>在中国，很少人知道 “大跃进” 起源于苏联。</li>\n<li>苏联政治模式的核心之一，是高度集中的而又缺乏监督的任命制。</li>\n<li>可以说，强制实行粮食征收制是引发史无前例大饥荒的直接因素。</li>\n<li>斯大林对农民的偏见几乎可以看成是斯大林主义 的特征之一。</li>\n<li>1926 年乌克兰的登记人口为 2890 万人，1937 年的登记人口仅 2840 万人。</li>\n<li>按照《苏联哲学百科全书》的说法，庸俗社会学观点就是由于把马克思列宁主义关于阶级和阶级斗争的理论简单化，公式化，绝对化的理解，往往把社会阶级看成是某种孤立的，封闭的，自律的，具有一成不变的特征的东西。</li>\n<li><strong>把什么都说成是阶级斗争，无限扩大阶级斗争的概念，实际上是庸俗社会学的表现形式之一。</strong></li>\n<li>“作战就像在战争中一样！声音要粗暴，行动要严厉，战斗要无情，不要吝惜弹药，俘虏是多余的。”</li>\n<li>斯大林对意识形态的控制，主要是通过三个途经：一是建立严厉的书报检查制度，二是不断展开意识形态的大批判运动，三是制定严格的意识形态标准和规范。</li>\n<li>斯大林搞的个人集体主义，“其要害是实行个人集权制，领导职务终身制，制定接班人制，党政不分制，干部等级授职制和党政官僚特权制。”</li>\n<li>但是无论如何，不能 “倒立行走”，始终把发展国防工业当做 “龙头老大”。</li>\n<li>普遍认为，农业全盘集体化，超高速工业化和政治大清洗三大社会运动，是构成斯大林模式的三大社会支柱，也是形成其斯大林模式的主要因素。</li>\n<li>换言之，斯大林模式的失败是 20 世纪社会主义遭到严重挫败的根本原因。</li>\n<li>斯大林在推行他的政策或提出理论是对的，“最不光彩的是，这一切都是打着列宁主义的旗帜做的。”</li>\n<li>《简明教程》乃伪造历史之大成。</li>\n<li>苏联学者卡普斯京认为，问题不在于个人，也不在于崇拜，而在于必须改变已经形成的僵化的极权主义和官僚体制。</li>\n<li>总的来说，领导人的政治主张与述求和历史学家的研究不是一回事。</li>\n<li>乌云笼罩在党的头上；我这无辜的脑袋还会株连到成千上万无辜的人，因为需要制造一个组织 —— 布哈林组织。</li>\n<li>历史的法庭是公证的，“历史的过滤器” 清除了加在布哈林头上的污秽！</li>\n<li>1902 年秋从西伯利亚逃脱，其假护照署名 “托洛茨基”，结果弄假成真，以后反而以此名著称。</li>\n<li>争论是以民主问题展开的，是要争取党内民主，大家都需要民主，然而却以不民主的办法结束，这就是列宁以后的党内生活的可悲局面。</li>\n<li>以致后来有人说，斯大林比托洛茨基还托洛茨基。</li>\n<li>他虽然逃过了斯大林 30 年代大审判的子弹，但最后仍不免丧生在斯大林杀手的冰斧之下。</li>\n<li>纵观托洛茨基的社会主义观点，有几条是他始终坚持的，这就是世界革命，阶级斗争，无产阶级专政，公有制，计划经济，工业化和农业集体化。</li>\n<li>他同布哈林的争论才真正是两种社会主义建设方法的争论。</li>\n<li>暴力只能摧毁阶级的反抗，但不能消灭阶级。</li>\n<li>即使是一场战争，也不会使一个国家的军队失去如此之多的指挥官。</li>\n<li>无产阶级专政应该有广义和狭义两种解释：广义上是指无产阶级革命胜利后建立的整个国家政权；狭义是指无产阶级国家政权的暴力镇压职能。</li>\n<li>1547 年伊凡三世之孙伊凡四世自称沙皇，自比古罗马大独裁者凯撒。（沙” 即凯撒的变音）</li>\n<li>功就是功，过就是过，这是我们认识历史应遵循的起码的原则。</li>\n<li>推进世界革命是斯大林所追求的始终不渝的大目标。</li>\n<li>历史上任何大规模战争，在任何国家和社会，对其政治经济的发展和社会人心的动向，都会产生极其深刻的影响。</li>\n<li>文艺是社会情绪最敏锐的传感器。</li>\n<li>世界革命战略和总危机理论害人害己，危害不浅。</li>\n<li>苏联在第二次世界大战中共获得了 687707 平方公里的土地。</li>\n<li>值得注意的是，苏联不只是沙皇俄国的简单继续，而且是一个意识形态大国，“世界共产主义的中心”。</li>\n<li>苏联对华政策方针取决于两个因素，即苏联在远东的战略目标和苏美在亚洲的战略关系。</li>\n<li>苏联对华政策基本的和首要的目标就是完全控制东北，内蒙古和新疆在内的中国北部地区。</li>\n<li>对于苏联来说：“在可预见的未来的任何战争中，中国最好是一个虚弱的盟友，或者最差是一个无足轻重的敌人。”</li>\n<li>美国是 “斯大林和毛泽东交往中无形的第三者”。</li>\n<li>从本质来说，中国出兵要挽救的主要不是朝鲜，而是中苏联盟。</li>\n<li>朝鲜战争是一场完全符合苏联利益的战争，苏联是唯一在战争中只获利的国家。</li>\n<li>20 世纪 90 年代末，妓女总数为 300 万人，其中每年有 25 万人以上甚至更多的人到国外从事卖淫。</li>\n</ol>\n<h2 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h2>\n<p>历史的发展不仅看得是当时的时代潮流，与领导人的个人品质方面也存在着较大的关。不得不说，列宁的早逝导致了苏联走上了一条不一样的道路，改变了历史。总的来说，本书对列宁持肯定的态度，对斯大林持否定的态度。这也许也有一些国家宣传上的需要。最重要的是从本书中，我学会了如何正确的方法看待历史，如何通过阶级分析，社会思潮，历史沿革等方面去分析历史事件发生的必然性。如何找出主要矛盾并将其解决是所有执政党的难题，不被其他的次要矛盾掩盖极大的考验领导人的智慧。但同时我也看到历史的偶然性，看到了领导人有时会不顾政党和国家的利益，去谋取自己的政治利益。兴百姓苦，亡百姓苦。农民一直处于被剥削的地位，国家依靠剥削农民获得了原始积累，却没想着怎么回馈农民。政治制度的完善是国家长治久安的重要因素，谨防一些野心家打着正义的旗号去破坏党的纪律。有时候你不能光怪人民被 “和平演变”，当人们生活在痛苦之中，他们便不会去拥护这个制度。</p>\n<h1 id=\"苏联真相对101个重要问题的思考中_陆南泉等_89\"><a class=\"markdownIt-Anchor\" href=\"#苏联真相对101个重要问题的思考中_陆南泉等_89\">#</a> 苏联真相：对 101 个重要问题的思考 (中)_陆南泉等_89</h1>\n<h2 id=\"摘要-2\"><a class=\"markdownIt-Anchor\" href=\"#摘要-2\">#</a> 摘要</h2>\n<ol>\n<li><strong>文学的研究和认识功能退到第二、第三位，主要功能变为进行宣传教育。</strong></li>\n<li>“解冻” 文学的典型特征就是强烈要求表现过去被压制了的人的个性，它的内在自由，他的尊严，它的责任感。</li>\n<li>他仍是斯大林主义者，只是策略上的有所变化。</li>\n<li>“解冻文学实际上” 超越了赫鲁晓夫《秘密报告》调子。</li>\n<li>接着他又换了一种说法：“情况常常是这样：一位上校同一位将军争论起来，上校说得全对，非常正确。将军听呀听，无言以对。可是他听腻了上校的话，于是站起来说：“是这样，你是上校，我是将军，向右转！” 上校只得转身离开 —— 他得执行命令！同样是如此，你是上校，我呢，对不起，是将军。向右转，请吧。”</li>\n<li>斯大林逝世后，首先是贝利亚主动搞起苏联平反冤假错案工作。</li>\n<li><strong>在秘密策划中起决定性作用的是赫鲁晓夫，布尔加宁，马林科夫和莫洛托夫。</strong></li>\n<li>从 2 月 3 日开始，斯大林的名字被从官方文件中取掉。</li>\n<li>在代表大会上作《关于个人崇拜及其后果》报告的决定是代表大会开幕以前就作出了。</li>\n<li>赫鲁晓夫甚至指责斯大林 “按地球仪指挥战争”。</li>\n<li><strong>对斯大林的个人崇拜，被崇拜者有责任，崇拜者也有责任。</strong></li>\n<li>赫鲁晓夫打开了监狱和集中营的大门，恢复了人们被践踏的荣耀和尊严，千百万家庭不能不感激它。</li>\n<li><strong>国家是一个历史范畴，有其发生，发展以至消灭的过程，在它发展的每个阶段都会出现该阶段国家的性质，职能问题。</strong></li>\n<li><strong>在阶级社会的国家，首先是镇压的工具，但是它的职能并不限于镇压，它还起 “缓和矛盾，把冲突保持在 “秩序” 的范围以内” 的作用。</strong></li>\n<li>中苏关系的恶化是从赫鲁晓夫提出建立长波电台和共同舰队开始的。</li>\n<li>更为严重的是，1926 年 4-5 月间，苏联通过其驻新疆的机构和人员，通过发放侨民证，策动中国边民叛逃苏联。</li>\n<li>垦荒、扩种玉米与畜产品产量赶超美国这三大政策，在赫鲁晓夫执政时期，可称为推进农业的熊熊燃烧的三把火。</li>\n<li>赫鲁晓夫顶住了巨大的压力，勇敢地站出来破除斯大林个人崇拜，成为苏联第一个改革者，使苏联历史上翻开了新的一页，活跃了气氛，振奋了人心，给苏联历史上留下了谁都不能抹杀的深深的印痕。</li>\n<li>由于赫鲁晓夫的改革，涉及大量的人事变动，侵犯了很多人的利益，对此事先又没有充分考虑，也未作出应有的安排。</li>\n<li>“人是脆弱；绝对的权力使人绝对的腐败。”</li>\n<li><strong>任何的国家的现代化能够持续进行必须满足两个条件：一是保持经济的持续快速发展。二是将现代化成果在社会各个阶级，阶层间合理分配，以产生支撑现代化进行的阶级基础。</strong></li>\n<li>改革要想成功也必须使支持它的意识形态和文化获得合法性。</li>\n<li><strong>勃列日涅夫执政时期是苏联由盛转衰的一个关键时期。</strong></li>\n<li>勃列日涅夫在这次 “宫廷政变” 中所起的远不是主要的作用。这次政变的主要策划者是谢列平和苏斯洛夫。</li>\n<li>“权力是作为命运的礼物落到勃列日涅夫身上的。”</li>\n<li>有人称他为 “妥协能手”。</li>\n<li>正如他自己所说，“我的长处在于组织能力和心理素质上。” 他确实善于培植，使用亲信，安排老相识，老部下。</li>\n<li>大家的表现总是：“英雄所见略同”，照例不会同事先起草的决议草案有多少出入。</li>\n<li><strong>如果翻开 70 年代中期的苏联报纸杂志，对勃列日涅夫令人作呕的颂扬言论到处可见。到 1981 年苏共二十六大时，政治局委员平均年龄为 70 岁，书记处成员为 68 岁，核心成员的平均年龄高达 75 年岁。</strong></li>\n<li>阿富汗战争成为苏联的滑铁卢，是导致苏联解体的直接原因之一。</li>\n<li>“持不同政见者” 的存在，“持不同政见者” 的此起彼伏，是勃列日涅夫当政时期的一种标志性现象。</li>\n<li>因此，也可以把 1965 年看成是 “持不同政见者” 正式出现的时间。</li>\n<li>要求当局遵守苏联宪法，切实保障宪法所赋予公民的民主权利，成为勃列日涅夫当政时期 “持不同政见者” 的共同基本要求。</li>\n<li>“一种非核的，非弹道的，但却是洲际的武器，已经被发明出来，这就是美国人的旅游。”</li>\n<li><strong>具有讽刺意味的是：从阿富汗撤回国的苏军，正好赶上为苏联送葬。</strong></li>\n<li>直到 1979 年秋，苏共中央对阿富汗的基本方针都是不直接出兵。</li>\n<li>入侵阿富汗的军事行动也转化为政治因素，腐蚀了苏联的心灵，使苏军士兵在现实面前醒悟。</li>\n<li>民主化不是目标，而是取得经济改革的一种手段。</li>\n<li>经济建设成了政治斗争的 “人质”。</li>\n<li>理论上这样讲并没有错，关键在于如何行动。</li>\n<li>在一定程度上，是公开性促使戈尔巴乔夫走上了根本改革苏联政治体制之路。</li>\n<li><strong>“任何激进的改革一开始就应该考虑自己改革的预先设想和时间表将会被推翻。”</strong></li>\n<li>病榻上的安德波洛夫已经不能完全控制住局势，在正式开会之前，安德罗波夫这段话被删掉了。</li>\n<li>尽管当事人的说法不一，客观现实是当时根本没有别的候选人，戈尔巴乔夫是唯一的选择。</li>\n<li>戈尔巴乔夫要改变苏联的体制，政治家的良心，责任与道德无疑起了很大作用。</li>\n<li>所传的戈尔巴乔夫 1999 年在土耳其美国大学的讲演是伪造的。</li>\n<li><strong>戈尔巴乔夫认识到世界是统一的，但他没有认识到资本社会国家不会轻易地接受苏联加入与它们竞争的行列，他对资本主义国家，特别是对美国抱有过分的幻想。</strong></li>\n<li>戈尔巴乔夫作为苏联党和国家领导人，对推动中苏关系的正常化起了关键性的作用。</li>\n<li>华约解散，北约犹存，并向东拓展，是戈尔巴乔夫不曾想到的。</li>\n<li>更深层的原因在于戈尔巴乔夫想在欧洲创造一种政治上合作的气氛，以结束冷战和消除军备竞赛，他确信分裂的德国走向统一是不可抗拒的。</li>\n<li>战后，苏联安全的基础是欧洲的分裂，是苏联对东欧的控制。</li>\n<li>“8.19” 事变的悲剧性在于，它以维护苏联为目的，却成了苏联加速瓦解的催化剂。</li>\n<li>“8.19” 事变并不是偶然的，它是苏共中央党内危机的反映，苏共党内潜在的冲突变成了公开的决战。</li>\n<li>政变的实际筹划者是克格勃（国家安全委员会）主席克留奇科夫。</li>\n<li>几乎所有与戈尔巴乔夫一道并肩工作的高官都参加了政变。</li>\n<li>1994 年 2 月 23 日俄罗斯联邦国家杜马通过大赦法，因 “8.19” 事变而被审判者被大赦，他们在新的制度下找到了自己的位置。</li>\n<li>这说明现代社会的问题不能通过强硬手段解决，人们不愿为信仰而战，意识形态的交锋已不能为社会对抗。</li>\n<li>叶利钦是 “8.19” 事变的最大得益者，他被拥戴为英雄。</li>\n<li>苏联共产党生命的终止实际上宣告了苏联解体已无法逆转。</li>\n<li>这种单一性体制的权力不平衡潜藏着严重的中央与地方的矛盾。</li>\n<li>“要是有一个共和国分离出去，戈尔巴乔夫就会完蛋，可是他要是使用武力加以制止呢，那同样也会完蛋。”</li>\n<li>戈尔巴乔夫的话讲到一半，叶利钦才到会，也没有表态。</li>\n<li>12 月 25 日，戈尔巴乔夫宣布辞去苏联总统的职务，克里姆林宫上空飘扬的苏联国旗被俄罗斯联邦的三色旗所取代，苏联从世界地图上消失了。</li>\n<li>职工月平均 10% 最高工资与 10% 最低工资差距逐步缩小：1956 年是 8 倍，而 1979 年降低到 4 倍。</li>\n<li>它在追求劳动者内部各阶层收入数量 “公平” 的同时，制造了另一种 “不公平”。</li>\n<li>它向社会主义国家的执政党敲起警钟 —— 执政党没有一劳永逸的合法性。</li>\n<li>在经济体制改革起始阶段，实行加速战略是走错的第一步。</li>\n<li>党无权管，最高苏维埃无力管，政府无法管。</li>\n<li>1988 年一年，就开了八次中央全会，两次人民代表大会，两次最高苏维埃会议。</li>\n</ol>\n<h2 id=\"书评-2\"><a class=\"markdownIt-Anchor\" href=\"#书评-2\">#</a> 书评</h2>\n<ol>\n<li>一开始也听说过苏联的腐败，但没想到是如此严重。触目惊心，特权阶级简直到了无法无天的地步，希望我们的国家不要变成这样。</li>\n<li>改革是一项长期而艰巨的调整。苏联的失败给我们上了很好的一课，你需要分清步骤是什么，有些事情是好的，但是时机对不对也很重要。需要跟民众一个理由，为什么我们需要改革，我的生活变得更好了吗？要代入到当事人的情况里，替他们考虑，光靠喊口号，大家是不会记入脑子里面的。要充分考虑到问题的严峻，考虑外部的干扰，不要对外国势力报有不切实际的幻想。</li>\n</ol>\n<h1 id=\"苏联真相对101个重要问题的思考下_陆南泉等_85\"><a class=\"markdownIt-Anchor\" href=\"#苏联真相对101个重要问题的思考下_陆南泉等_85\">#</a> 苏联真相：对 101 个重要问题的思考 (下)_陆南泉等_85</h1>\n<h2 id=\"摘要-3\"><a class=\"markdownIt-Anchor\" href=\"#摘要-3\">#</a> 摘要</h2>\n<ol>\n<li><strong>剧变的根本原因在于斯大林 - 苏联模式的社会主义制度本身。</strong></li>\n<li>垄断权力的政治法律制度，垄断经济利益的封建特权制度和垄断真理的意识形态管理制度。</li>\n<li><strong>我们肯定什么，否定什么，只有从历史事实出发。</strong></li>\n<li>无产阶级在资本主义社会只是 “作为一种有组织的政治力量成熟起来”，而 “决不是作为一种文化力量成熟起来的”。</li>\n<li>俄共（布）如同一条纽带把各共和国捆绑在一起。</li>\n<li>如果俄罗斯反对苏联解体，苏联解体就很难实现。</li>\n<li>长期以来，苏联治国的主导思想是强国而不是富民。</li>\n<li>但事实上，他们只有选举权，而没有被选举权，因为候选人是由党组织决定的。</li>\n<li>当一个国家的法律从上到下都没有人执行的时候，有宪法监督机构也是枉然的。</li>\n<li><strong>1981 年 2 月召开的苏共二十大选出的中央政治局和书记处，竟是苏共二十五大的原班人马，这在苏共历史上是没有先例的。</strong></li>\n<li>约束是外在的，而动力则是内生的。</li>\n<li>布哈林指出：“过去我们认为，我们可以一举消灭市场关系。而实际情况表明，我们恰恰要通过市场关系走向社会主义。”</li>\n<li><strong>我们用一只手给了权利，却又用另一只手收了回来。我们通过了新的法令，可是旧的指令还照样保留。</strong></li>\n<li>中苏论战的一个直接结果是促使毛泽东下决心发动 “文化大革命”。</li>\n<li>实践表明，改革开放的实际绩效的说服力，远比隔空喊话的口水战有力得多。</li>\n<li>什么东西关系党的政治制度或政治秩序的认同，支持和拥护。</li>\n<li>无产阶级国家的执政合法性问题在马克思主义国家学说中处于一种缺失的状态。</li>\n<li>苏共不代表工人，农民、知识分子；不代表先进生产力；一切为了政权，拒绝自身的变革。</li>\n<li>对斯大林来说，早已生活在 “共产主义社会”。</li>\n<li>在俄罗斯独特的景象是：现实纠缠着现实，历史变成了现实。</li>\n<li>苏维埃政权 + 西方资本主义文明成果 = 社会主义。</li>\n<li>搞教条主义只能丧失马克思主义的思想理论阵地。</li>\n<li>4 月 8 日，布尔什维克党彼得格勒委员会以 13 票比 2 票否决了《四月纲领》。</li>\n<li>3 月 5 日，斯大林逝世。</li>\n<li>12 月 2 日，戈尔巴乔夫和布什在马耳他实现会晤，标志美苏之间的 “冷战” 结束。</li>\n<li>10 月 16 日，戈尔巴乔夫获得诺贝尔和平奖。</li>\n</ol>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E8%80%81%E4%BA%BA%E4%B8%8E%E6%B5%B7_%E6%B5%B7%E6%98%8E%E5%A8%81_89/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E8%80%81%E4%BA%BA%E4%B8%8E%E6%B5%B7_%E6%B5%B7%E6%98%8E%E5%A8%81_89/",
            "title": "老人与海_海明威_89",
            "date_published": "2023-10-12T10:49:33.014Z",
            "content_html": "<h1 id=\"摘抄\"><a class=\"markdownIt-Anchor\" href=\"#摘抄\">#</a> 摘抄</h1>\n<ol>\n<li><strong>运气好当然不错。但我宁可准确。那么等运气来的时候，你就能有所准备了。</strong></li>\n<li>他没有把这个想法说出来，因为他知道好事不能说，说了就不会发生。</li>\n<li>“鱼啊”，他温柔的说，“我到死也要陪着你。”</li>\n<li>每次都是从头再来，他重新证明时从不想着过去。</li>\n<li>想想啊，要是人每天都必须努力去杀死月亮，那会怎么样呢，他想。</li>\n<li><strong>“但好汉不是为失败而生的”，他说，“好汉可以被毁灭，但绝不能被打败。”</strong></li>\n<li>从某种意义上来说，每样东西都杀死别的东西。</li>\n<li>现在没空去想那些你没有的工具，好好想想怎么利用手头的东西。</li>\n<li>老人正在梦见狮子。</li>\n</ol>\n<h1 id=\"感想\"><a class=\"markdownIt-Anchor\" href=\"#感想\">#</a> 感想</h1>\n<ol>\n<li>究竟什么样的人才能被称为好汉呢？是悍不畏死？是实力超群？是坚定不移？每个人都有自己的答案。书中的老人是我的答案，他心中有过动摇，有过疑惑，想着能有小伙子的帮忙，他也害怕，担心过自己的生命，但他还是坚持下来了，靠着他的毅力，他的勇气，当然还有他的实力。所以我认为真正的好汉是面对困难，即使恐惧，即使害怕，也依旧勇于向困难发起挑战的人，即使被毁灭，也不能丢失那颗勇敢的心。</li>\n<li>人与动物之间的关系。人们靠着杀害其他动物来维持自身的生存，这似乎很残忍，但是又有哪种生物能不伤害其他动物的前提下生存下来。我们能做到的不是停止杀害，而是尽可能的减少杀害。幸好我们只需杀掉普通的生物，而不是更亲密的伙伴。</li>\n<li>只有做好充足的准备，拥有足够的实力，当机会来临的时候才能握紧它。</li>\n<li>成为强者的第一步是尊重强者。</li>\n<li>有时候付出了努力也未必会有收获，老人千辛万苦带回来的只是一条光秃秃的鱼骨架。可是这份努力的过程会永远留在老人的心中，成为他的精神财富。</li>\n</ol>\n",
            "tags": [
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85%EF%BC%9A%E4%B8%AD%E5%9B%BD%E6%94%BF%E5%BA%9C%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%8F%91%E5%B1%95-%E5%85%B0%E5%B0%8F%E6%AC%A2-93/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85%EF%BC%9A%E4%B8%AD%E5%9B%BD%E6%94%BF%E5%BA%9C%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%8F%91%E5%B1%95-%E5%85%B0%E5%B0%8F%E6%AC%A2-93/",
            "title": "置身事内：中国政府与经济发展-兰小欢-93",
            "date_published": "2023-10-12T10:49:33.012Z",
            "content_html": "<h1 id=\"摘抄\"><a class=\"markdownIt-Anchor\" href=\"#摘抄\">#</a> 摘抄</h1>\n<ol>\n<li>在我国，政府不但影响 “蛋糕” 的分配，也参与 “蛋糕” 的生产，所以我们不能脱离政府谈经济。</li>\n<li><strong>对读者而言，了解政府应该怎么办，比了解 “我” 认为应该怎么办，重要得多。</strong></li>\n<li>了解招商引资，是理解地方政府深度融入经济发展过程的起点。</li>\n<li><strong>央地关系历来是研究很多重大问题的主线。一方面，维持大一统的国家必然要求维护中央权威和统一领导；另一方面，中国之大又决定了政治体系的日常运作要以地方政府为主。</strong></li>\n<li>使用体制内简化决策流程的原则之一，就是尽量在能达成共识的最低层级上解决问题。</li>\n<li>在任何的体制下，权力运作都受到两种约束：做事的能力和做事的意愿。</li>\n<li>一方面，因为规模经济，覆盖的人越多越划算；另一方面，受制于人们获取这些服务的代价的意愿，政区不能无限扩大。</li>\n<li>所以上级虽然有名义上有最终决策权，拥有 “形式权威”，但由于信息复杂，不易处理，下级实际上自主性很大，拥有 “实际权威”。</li>\n<li><strong>信息优势始终是权力运转的关键要素。</strong></li>\n<li>所谓权力，实质上是在看不清的情况下由谁来拍板决策的问题。</li>\n<li>如果一方想做的事，另一方既有意愿也有能力做好，就叫激励相容。</li>\n<li>做任何事都有代价，最优的结果是让效果和代价匹配，而不是不计代价地达成目标。</li>\n<li>事权划分的三种理论：公共服务的规模经济与边界、信息复杂性、激励相容。</li>\n<li>要把握政府的真实意图和动向，不能光读文件，还要看政府的流向和数量，所以财政从来不是一个纯粹的经济问题。</li>\n<li>成功的政策背后是成功的协商和妥协，而不是机械的命令与执行，所以理解利益冲突，理解协商和解决机制，是理解政府的基础。</li>\n<li><strong>分税制也从根本上改变了地方政府发展经济的模式。</strong></li>\n<li>地方政府发展经济就从之前的” 工业化 “变成了” 工业与城市化 “两手抓：一方面继续低价供应大量工业用地，招商引资；另一方面限制商住用地供给，从不断攀升的地价中赚取土地垄断收益。</li>\n<li><strong>中央财政蒸蒸日上，省级财政稳稳当当，市级财政摇摇晃晃，县级财政哭爹喊娘，乡级财政精精光光。</strong></li>\n<li><strong>所以土地真正的力量还不在 “土地财政”，而在以土地为抵押而撬动的银行信贷与其他各路资金。</strong></li>\n<li>经济发展的奥秘之一，正是把有形资产转变成为这种抽象资本，从而聚合跨越空间和时间的资源。</li>\n<li>按照法律，政府不能与企业直接分享税收，但可以购买服务，以产业发展服务费的名义来支付约定的分成。</li>\n<li><strong>现实世界中没有定义，只有现象，只有环环相扣的权责关系。</strong></li>\n<li>经济学家注重研究有形的 “奖惩”，强调外部的激励机制和制度环境，但其实内心的情感驱动也非常重要。</li>\n<li>产业政策有成功有失败，市场决策也有成功有失败，用一种成功去质疑另一种失败，或者有一种失败去推崇另一种成功，争论没有尽头。</li>\n<li>行政手段造成的扭曲往往只有行政力量才能破解，但这并不意味着政府就一定该帮助国内企业进入某一行业，关键还要看国内市场规模。</li>\n<li>但在产业发展早期，究竟是在哪个城市形成产业集群，却有很多偶然因素。</li>\n<li><strong>“工业化” 的核心的一环是把农民变成工人，这不仅仅是工作的转变，也是思想观念和生活习惯的彻底转变。</strong></li>\n<li>如果牺牲一些功能和质量就能让价格大幅下降，就有利于产品推广。</li>\n<li>然而 “破产难” 一直是我国经济的顽疾。</li>\n<li>无论是土地还是税收优惠，都无法改变招商引资的根本决定因素，即本地的资源禀赋和经济发展前景。</li>\n<li><strong>忽略了人，忽略了城市化本该服务于人，本该为人创造更好的环境和更高的收入，城市化就入了歧途。</strong></li>\n<li>土地流向与人口流向背道而驰，地区间房价差距因此越拉越大。</li>\n<li><strong>中国人财富的压舱石是房子，美国人财富的压舱石是金融资产。</strong></li>\n<li>2014-2017 年间，我国收入最低的 50% 的人储蓄基本为零甚至为负 (入不敷出)。</li>\n<li>要想平衡地区间的发展差距，关键是要平衡人均差距而不是规模差距。</li>\n<li><strong>正是这些看上去低技能的服务员工作，支撑着大城市的繁华，也支撑着所谓 “高端人才” 的生活质量。</strong></li>\n<li>一国之内，产品的流动额市场化最终会带来生产要素的流动和市场化。</li>\n<li>这种现象被称为 “隧道效应”，形容隧道中两条车道一动一静时，静的那条的焦虑和难耐。</li>\n<li>债务关系让经济各部门之间的联系变得更加紧密，任何部门出问题都可能传导到其他部门，一石激起千层浪，形成系统风险。</li>\n<li><strong>债务常常把风险集中到承受能力最弱的穷人身上。</strong></li>\n<li>债务源于人性；总想尽早满足欲望，又对未来盲目乐观，借钱时总觉得将来能还上。</li>\n<li>所以银行很少雪中送炭，却常常晴天打伞，繁荣时慷慨解囊，助力 3 经济过热，衰退时却捂紧口袋，加剧经济下行。</li>\n<li>在大多数发达国家，过去 40 年国内贫富差距的扩大都伴随着国内债务水平的上升。</li>\n<li>第二类方式是 “量化宽松”，即央行增发货币来买入各种资产，将货币注入经济，这是金融危机后发达国家的主流做法。</li>\n<li>贸易问题从来不是单纯的贸易问题，贸易冲突的根源也往往不在贸易本身。</li>\n<li><strong>盖因落后国家的崛起，必然带有两大特征：一是对先进国的高效模仿和学习；二是结合本土实际，带有本国特色发展路径与先进国有诸多不同之处。</strong></li>\n<li><strong>在经济学家理解最透，共识最大的问题上，他们对政策的影响力最小；在经济学家理解最浅，分歧最大的问题山，他们对政策的影响力最大。</strong></li>\n<li>既不要高估发达国家经验的普适性，也不要高估自己过去的成功经验在未来的适用性。</li>\n<li>激进改革多半欲速不达，以社会动乱收场。</li>\n<li>经济富裕，社会安定，政府得力是国家繁荣的三大支柱，缺一不可。</li>\n<li><strong>对落后国家而言，经济发展的关键在于能否在市场机制不完善的情况下，找到其他可行的动员和调配资源的方式，推动经济增长，在增长过程中有更多资源和时间去建设和完善市场经济。</strong></li>\n<li>所谓强力政府，不仅在于它有能力和资源支持企业发展，也在于它有能力拒绝对企业提供帮助。</li>\n<li>但对于发展中国家而言，核心议题并不是良好的市场机制如何运行，而是如何逐步建立和完善市场经济体制。</li>\n<li><strong>可行的政策不仅受既有制度的约束，也受既有利益的约束。</strong></li>\n<li>改革方向和改革过程是两回事。就算每个人都对改革方向和目的有共识 (事实上不可能)，但对改革路径和步骤也会有分歧。</li>\n<li>但任何成功转型过程都离不开缓冲机制。</li>\n<li>“在成功的经济体中，经济政策一定是务实的，不是意识形态化的。是具体的，而不是抽象的。”</li>\n<li>生活过得好一点，比大多数宏伟更宏伟。</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>如果要用一个词来形容这本书，我想应该是 “实事求是”。作者没有用很晦涩的理论来解释各种经济现象，也没有尝试使用 “放诸四海而皆准” 的经济理论来概括中国经济发展中出现的各种现象，而是用生动的语言和一个个具体的案例去剖析背后的原因。正如作者所说” 现实世界中没有定义，只有现象，只有环环相扣的权责关系。“，很多时候我在看待经济问题的时候都陷入了概念之中，认为政府应当做什么，市场应当做什么，但是政府和市场之间并没有一条清晰的界限，很多时候都是在权力和利益关系的互动下达成默契。这也启示我应当实事求是的分析问题，去弄明白背后的原理，而不是纠结于定义之中。还有对于市场的看法也很实事求是，市场不是经济发展的因，而是经济发展过程中不断改善的果，我们不能苛求发展中国家能有一个完善的市场，因为这本就是西方资本主义数百年的发展得到的果。只有在不断的经济发展中，不断调整政府和市场之间的关系才是正确的途经。</p>\n<p>书中最具启发性的莫过于对于当今房价的分析，分税制改革从根本上影响我们，两次金融危机引起的大放水又加重了地方政府对于土地财政的依赖。同时土地财政并不是单纯的土地买卖，而是利用土地作为抵押物所撬动的金融资源。但我们也不应该只看到分税制改变的缺点，应当承认正是由于中央财政的充实才又能能力加强国防和建设各种大型设施。只能说每项政策都是一体两面的，平民被迫承担了政策所产生的巨大影响，也享受了政策所带来的便利。</p>\n<p>最令我感动的是作者对人的重视，我以前一直觉得工业化的核心和各种大型器械和高精尖技术，但现在我觉得人也是其中的关键要素。没有技能娴熟的熟练工人，根本不可能运转起这一套复杂的体系。而工人的培养不是一蹴而就的，要将习惯了农耕文明的农民培养成合格的产业工业，培养他们的各种习惯，这里面的艰难却被我们一直无视。因此对于各种关于中国制造业流失，诸如越南制造业崛起什么的，我认为不必过于担忧，毕竟产业工人的培养不是一朝一夕的时期。最后我们认为城市应当善待那些底层服务业人民，正是他们的辛勤付出才降低了各行业的生活成本，正是他们形成了各大城市的血脉，支撑起了城市的发展。如果不能提高待遇，至少应当给他们一个安家立业的地方，而不是将他们当作低端人口隐形的将他们驱离出城市，来塑造自己的 “高端” 形象。</p>\n",
            "tags": [
                "经济学",
                "中国"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E_[%E7%BE%8E]%E5%B8%83%E8%8E%B1%E6%81%A9%E5%85%8B%E9%87%8C%E6%96%AF%E3%80%81[%E7%BE%8E]%E6%B1%A4%E5%A7%86%E6%A0%BC%E9%87%8C%E8%8F%B2%E6%96%AF_92/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E_[%E7%BE%8E]%E5%B8%83%E8%8E%B1%E6%81%A9%E5%85%8B%E9%87%8C%E6%96%AF%E3%80%81[%E7%BE%8E]%E6%B1%A4%E5%A7%86%E6%A0%BC%E9%87%8C%E8%8F%B2%E6%96%AF_92/",
            "title": "算法之美_[美]布莱恩克里斯、[美]汤姆格里菲斯_92",
            "date_published": "2023-10-12T10:49:33.010Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>阈值完全取决于搜寻成本。</li>\n<li><strong>可见，有些问题有解，反而会有损无益。</strong></li>\n<li>但是，决策行为几乎都不是孤立的，期望值也不是最终目标。</li>\n<li>基廷斯指数，一定要选择指数最高的那个拉把。</li>\n<li>把人生当中的遗憾降到最小。</li>\n<li>上限置信区间算法告诉我们，多臂老虎机问题非常简单，可以直接选择置信区间上限最高的那个方案。</li>\n<li><strong>从长远来看，乐观主义是防范遗憾的最有效措施。</strong></li>\n<li>一般而言，人们似乎倾向于过度探索 —— 对新鲜事物的青睐程度超过效果最佳的事物。</li>\n<li>孩子们的有些想法在我们看来是任性，但是实际上，可能比我们想象的更明智。</li>\n<li><strong>老年人的社会关系越来越简单，是他们主观选择的结果。</strong></li>\n<li>当人们接近生命的终点时，他们希望更多地关注对他们来说最重要的人。</li>\n<li>计算机科学同样认为，探索和利用的困境对剩余时间很敏感。</li>\n<li>这是排序理论的第一个，也是最基本的深刻见解：规模越大，难度越大。</li>\n<li>桶排序：有时候我们并不需要完全排序，有的时候根本不需要逐项比较也能完成排序工作。</li>\n<li>随着探索成本的下降，排序的价值也会随之降低。</li>\n<li><strong>有时，混乱不仅仅是轻松的选择，还是一个最优选择。</strong></li>\n<li>我们人类不仅会对数据，财产进行排序，还会把我们自己变成排序对象。</li>\n<li>比较计数排序：每个排序对象都会与其他对象做比较，从而统计出比该排序对象小的对象一共有多少个。</li>\n<li>冠军戒指或许并不是那么可信，但是分区的排名货真价实。</li>\n<li>如果一个动物根据它对等级概念的了解，判断不值得实施某个对抗行为，就会发生转位这种现象。</li>\n<li>竞争与争斗在本质上是不同的。</li>\n<li>自计算机问世以来，计算机科学家就开始苦苦思索哪些东西需要保存以及如何保存这两个孪生问题。</li>\n<li>在同等条件下，如果某个程序处于闲置的时间较长，就表明你在未来一段时间内应该也不会调用该程序。</li>\n<li><strong>最接近未卜先知的做法就是假定历史会重演，不过是按照相反的顺序上演。</strong></li>\n<li>预测个人购买行为是有挑战性的，但是当预测数千人的购买行为时，大数定律就会生效。</li>\n<li>尽可能把物品的 “缓存” 建立在它们通常使用的位置附近。</li>\n<li>他认为，大脑的记忆能力基本上的无限的，但我们在大脑中搜索的时间是有限的。</li>\n<li>存储器越大，在其中搜索并提取信息就不可避免地需要越多时间。</li>\n<li>在你有一个计划之前，必须首先选择一个衡量指标。</li>\n<li>最早到期日原则：从截止日期最近的任务开始。</li>\n<li>最短加工时间：总是先做完能最快完成的任务。</li>\n<li>我们通常认为拖延是一个错误的算法，但如果它正好相反呢？</li>\n<li><strong>计算机科学家称之为 “PING 攻击” 或 “拒绝服务” 攻击：给系统无数琐碎的事情做，重要的东西就会迷失在混乱之中。</strong></li>\n<li><strong>重点不只是要把事情做好，更重要的是把权值更高的事情做好。</strong></li>\n<li>要承诺做你所能做的最重要的事情，如果你一直目光短浅而不远望前方，那么你眼中的整个世界都仿佛处于拖延之中。</li>\n<li>有时候，最重要的事要等不重要的事情完成之后才能进行，所以这里只有将这些不重要的事情看得跟被阻塞的重要任务一样重要。</li>\n<li>换句话说，大多数的调度问题都没有现成的解决方案。</li>\n<li>在面对不确定性时最短加工时间调度加权版本是一种最通用的调度策略。</li>\n<li>在有些情况下，透视是一种负担。</li>\n<li><strong>任何一个人，如果你在一小时内被中断几次，那么你就有这一小时什么都做不成的危险。</strong></li>\n<li><strong>这就是颠簸：系统全速运行，却一事无成。</strong></li>\n<li>另一种避免颠簸的方式是学会说 “不” 的艺术。</li>\n<li>事实上，如果买 n 张彩票共 w 次获奖，那么中奖概率就是中奖数加 1，除以所购买的数目加 2，即。</li>\n<li>哥白尼原则：如果有任何一个时刻都有相同的可能性，那么平均来说，他的到来应该是在一个精确的中间点。</li>\n<li>如果我们要预测某个事物还将持续存在多久（在对它没有其他任何了解时），我们可以做出的最好的猜测就是，它将再持续已经存在的时间。</li>\n<li>对于任何幂律分布，贝叶斯法则表明，一个合适的预测策略就是相乘法则：将迄今观察到的数量乘以一些常数。</li>\n<li>厄兰分布给出了第三种预测法则 —— 相加法则：总是预测事物只会再持续一个常量。</li>\n<li>正态分布 ——“平均法则”。</li>\n<li><strong>我们的判断背叛了我们的预期，我们的期望又背叛了我们的经验。</strong></li>\n<li>学习自我控制是一个重要的问题，但在一个成年人始终能信赖的环境中成长也是同样重要的 。</li>\n<li>简单来说，媒体对事件的报道并不与其在世界上发生的频率相符。</li>\n<li>机器学习的最深刻的真理之一就是，事实上，并非使用一个更复杂的模型就会更好，它需要考虑更多的因素。</li>\n<li>击剑本来是一种令人兴奋的运动，但运动员因为奇怪的计分工具而对策略过度拟合，因此灌输真实的就变得不那么重要了。</li>\n<li><strong>对本就错误的事物进行无情和聪明的优化。</strong></li>\n<li>考希克的结论是：“真正的朋友是不会让朋友去测量页面浏览量的，永远都不会。”</li>\n<li>人们可能会对自己的准备过程过度拟合。</li>\n<li>如果你不能简单地解释一个问题，那你就没有完全理解它。</li>\n<li>所有的事情都是平等的，最简单的假设可能就是最正确的那个。</li>\n<li>计算机科学家将这个原则 —— 使用约束来惩罚模型的复杂性，称为正则化。</li>\n<li>面对现实生活的复杂性，他放弃了理性的模型，转而遵循一个简单的启发法则。</li>\n<li>如果我们最先想到的因素可能是最重要的因素，那么如果考虑的量超过某一个度的话，就不仅是浪费时间和努力，它会让我们找到更糟糕的解决方案。</li>\n<li>如果你有很高的不确定性和有限的数据，那么务必提前停止。</li>\n<li><strong>当你处于黑暗之中，最好的计划将是最简单的。</strong></li>\n<li>研究人员消除了一些问题的约束，并着手解决他们希望解决的问题。</li>\n<li>拉格朗日松弛算法：优化问题有两个部分：规则和计分。</li>\n<li>有时候，解决问题的最好方法是依靠运气，而不是试图完全地分析出答案。</li>\n<li><strong>的确，你从来不会完全确定，但是可以非常接近确定，或是非常快确定。</strong></li>\n<li>一个统计数据只能告诉我们部分的故事，它也掩盖了任何潜在的异质性。</li>\n<li>无论是抖动，随机重启，还是偶然的恶化，随机性对于避免局部最大值都是非常有用的。</li>\n<li><strong>“我无法让数学界人士相信，这些复杂的东西和温度，以及充满类比的东西都是真实的，因为数学家都被训练得不相信直觉。”</strong></li>\n<li>从爬山算法可以得知：即使你有执行坏主意的习惯，你也应该坚持执行那些好的想法。</li>\n<li>从梅特罗利斯算法可知：你有一个坏主意的可能性与该想法的糟糕程度成反比。</li>\n<li>从模拟退火算法可知：你应该提前实现随机性，在完全随机的状态下迅速冷却，随着时间的推移，使用越来越少的随机性，当接近冰点时，持续时间最长。</li>\n<li>包交换的网络没有给每个链接设立专用渠道，发送方和接受方将它们的消息拆分成一个个 “数据包” 的小碎片中，再将这些碎片合并到数据的公共流中。</li>\n<li>在三次握手的背后，每台机器都提供了一种序列号，而且每一个发送的数据包每次都会在发送的时候增加一个序列号，就像支票簿上的支票一样。</li>\n<li>第一个问题是，我们应该认为多长时间的不响应可以构成故障。</li>\n<li>因为最大延迟长度（2,4,8,16…）呈现一种指数递增，因此它被称为指数退避算法。</li>\n<li><strong>阿尔姆说：“我想，尝试改变别人的行为是一种疯狂的方式。”</strong></li>\n<li>传输协议拥塞控制的核心是一个被称为 “和式增加积式减少” 的算法，简称 AIMP。</li>\n<li>彼得说：“每个员工都倾向于提升自己的能力。”</li>\n<li>按照彼得原理的预测性推理，最终一个组织中的每一个职位都会被一个做得不好的人填补。</li>\n<li><strong>一个糟糕的听众往往会毁掉一个故事。</strong></li>\n<li>当一个网络缓冲区被填满时，通常会发生 “尾部丢弃”。</li>\n<li>一组游戏玩家的均衡，所有人都玩得很理性，这对那些玩家来说可能不是最好的结果。</li>\n<li>调和率衡量合作和竞争之间的差距。</li>\n<li><strong>“工作价值越高，休闲的价值就越低。”</strong></li>\n<li>通过恶化令人不满意的均衡，可以创造出一个新的，更好的均衡。</li>\n<li>信息瀑布提供了一个理性的理论，不仅是泡沫，而且更普遍的是潮流和羊群行为。</li>\n<li>任何一种好的算法的指令都是把思考的劳动最小化。</li>\n<li>礼貌地表达你的喜好有助于承担对团队带到问题解决办法上的认知负荷。</li>\n<li>设计的主要目的之一应该是保护人们避免不必要的紧张，摩擦混合精神劳动。</li>\n<li><strong>37 法则：在考察前 37% 的申请人时，不要接受任何人的申请；然后，只要任何一名申请人比前面所有人选都优秀，就要毫不犹豫的选择他。</strong></li>\n</ol>\n",
            "tags": [
                "科技"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E7%A8%80%E7%BC%BA-[%E7%BE%8E]%E7%A9%86%E6%9D%A5%E7%BA%B3%E6%A3%AE-97/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E7%A8%80%E7%BC%BA-[%E7%BE%8E]%E7%A9%86%E6%9D%A5%E7%BA%B3%E6%A3%AE-97/",
            "title": "稀缺-[美]穆来纳森-97",
            "date_published": "2023-10-12T10:49:33.008Z",
            "content_html": "<h1 id=\"摘抄\"><a class=\"markdownIt-Anchor\" href=\"#摘抄\">#</a> 摘抄</h1>\n<ol>\n<li>稀缺是 “拥有” 少有 “需要的感觉。</li>\n<li>稀缺造成的后果不仅仅是因为我们会因拥有的太少而感到不悦，而是因为它会改变我们的思维方式，会强行侵入我们的思想之中。</li>\n<li><strong>无论大脑的主人是否愿意，稀缺都会牢牢地俘获他的注意力。</strong></li>\n<li>稀缺对注意力的俘获，不仅会影响我们的所见和所见的速度，而且也会影响我们对周遭世界的认识。</li>\n<li><strong>孤独者非常善于记住与他人互动等社交内容的细节。</strong></li>\n<li>对稀缺的感觉，取决于可用的资源和我们自身的体验。</li>\n<li><strong>稀缺会降低所有这些带宽的容量，致使人们缺乏洞察力和前瞻性，还会减弱人们的执行控制力。</strong></li>\n<li><strong>稀缺会进一步延续并加剧稀缺。</strong></li>\n<li>稀缺会迫使人做出选择，所有抽象的事物都会变得具体起来。</li>\n<li>无论是有关工作还是娱乐，只要时间有限，我们都会尽量将其利用得淋漓尽致，这就是 “专注红利”。</li>\n<li>佯装稀缺是很难做到的。</li>\n<li>我们可以说稀缺令人 “专注”，也可以说稀缺导致我们有了 “管窥” 之见 —— 只能一门心思地专注于管理手头的稀缺。</li>\n<li>管窥会放大其他事物的成本，缩小其他事物的收益。</li>\n<li>对一项事物的专注会抑制竞争意识。</li>\n<li>因为买不起保险，反而要承担经受不起的风险。</li>\n<li>正如外部噪声会干扰我们进行清晰而有序的思考一样，稀缺也会让我们产生内部干扰。</li>\n<li><strong>稀缺会直接减少带宽 —— 不是减少某人与生俱来的带宽容量，而是减少其当下能用得上的容量。</strong></li>\n<li>一旦你意识到意志力不过是是学习如何控制注意力和想法时，就能开始提高自身的意志力了。</li>\n<li>稀缺会形成带宽负担，而这就意味着，稀缺不仅会降低流体智力，而且会降低自我控制力。</li>\n<li><strong>稀缺的本质就是没有余闲。</strong></li>\n<li>稀缺迫使我们产生了权衡式思维。所有那些没有被满足的需要俘获了我们的大脑，成了我们时时刻刻念念不忘的事情。</li>\n<li>我们所谓的余闲不是刻意预留的空间，而是装箱时空间充裕而产生的 “副产品”。</li>\n<li><strong>人们常常会通过坚持最初的计划来避免选择的负担，实际上就是选择了不去做选择。</strong></li>\n<li>余闲不仅会令你免于权衡，而且还以为着：即使 i 犯了错误，也不会让你遭受实实在在的牺牲。</li>\n<li>稀缺不仅提高了失误的成本，也为人民创造了更多机会去犯下错误，做出不明智的选择。</li>\n<li>一个人的富有程度，与他所能舍弃之物的数量成正比。</li>\n<li>我们在小物件上连几毛几分钱都会计较，而在大物件上却挥金如土。</li>\n<li>专业技能，也就是对某一领域知识的深度理解，能够对认知产生改变。</li>\n<li>需求的言论始终存在于穷人心中，挥之不去，从而造就了他们自身的内化尺度。</li>\n<li><strong>当我们为了解决眼下的难题而极度专注时，就无法有效地规划未来，这样一来，向前看的能力就很可能会因管窥负担而丧失。</strong></li>\n<li>借用与稀缺同时存在。</li>\n<li><strong>今天的稀缺将造就明天更大的稀缺。</strong></li>\n<li><strong>明天的稀缺注定无法像今天的稀缺一样俘获你的注意力。</strong></li>\n<li>现时偏见，人们会将未来的利益作为代价，过高地估计即刻的收益。</li>\n<li>可以，管窥心理会限制每一个人的视野。</li>\n<li>改变心态，才是人们逃离稀缺陷阱的唯一希望。</li>\n<li>对稀缺进行放大的行为，就像复利一样，会使最初的稀缺变本加厉。</li>\n<li>你一直 “知晓” 的事实，现在却成了突如其来的惊诧。</li>\n<li>制定计划很重要，但不紧急，而这类事情正是管窥心态导致我们所忽略的事情。</li>\n<li><strong>如果某个人需要持续地抵御诱惑，那么他的意志力就会被耗尽，想要逃离稀缺陷阱就会变得更难。</strong></li>\n<li>如果它现有的余闲不足以应对大的突发事件，那他就会重新回到稀缺心态之中。</li>\n<li>如果你和我们一样，就很可能依然会记得在某些社交场合中，你特别希望一切进展得很顺利，但却在那一刻表现得十分笨拙。</li>\n<li>如果关注度过低，表现就会变弱；而若关注度过高，表现同样会被削弱。</li>\n<li>更麻烦的是，你越是尽力不去想一件事，就越是会想到它。</li>\n<li>自由裁定能力的缺乏会导致一种极端形式的稀缺。</li>\n<li>良好的教养水平需要足够的带宽、复杂的决策能力和自我牺牲精神。</li>\n<li>无疑，教育是一件好事，但我们对待教育的方式，就好像穷人受教育时并不会为此而付出代价一样。</li>\n<li><strong>节约带宽能带来高额回报。</strong></li>\n<li>许多系统的正常运转，都以余闲的存在为前提。</li>\n<li>这种组织会解决紧迫问题，但对于非紧急事务，无论其重要性有多高，都会被搁置。</li>\n<li>对组织而言，有一种解决方案就是，对余闲进行管理，确保余闲的存在。</li>\n<li>真正有效率的人，不会整天马不停蹄地工作，而是闲庭信步般轻松愉悦地处理事务。</li>\n<li>我们在安排时间时，也总是忽略带宽。</li>\n<li><strong>时间稀缺的人，每天都工作很多个小时 —— 他们总想要在一天有限的时间里尽可能多地做一点事，他们会忽略问题，遇到了就打个 “补丁” 完事。</strong></li>\n<li>因为真正重要的是，将有效的带宽最大化，而非将工作的小时数最大化。</li>\n<li>对稀缺进行管理，有一种简单而常常为人低估的方法，那就是对 “管子” 视野之内的事物施加影响。</li>\n<li><strong>当忽略问题存在时，改变行为的结果往往比直接与其对抗更有效。</strong></li>\n<li>只要有可能，就要将警醒行为转变为一次性行为。</li>\n<li>你以为保持灵活度是在帮自己，但却让自己产生了拖延和分心。</li>\n<li>我们的带宽承受负担时，最简单的障碍也会造成巨大的损失。</li>\n<li><strong>在充满稀缺的世界中，漫长的截止日期就是酿造麻烦的问题所在。</strong></li>\n<li>带宽会影响我们的思维方式，影响我们做出的选择。</li>\n<li>沿着稀缺的线索向上追溯，我们就能看到充裕：萧条，是由我么在繁荣阶段的行为所导致的；最后一刻的拼凑，是由我们之前几周的不作为所造成的。</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>书中举了一个印度农民的例子：农民短期借款的最多的是学费和肥料费。作者觉得很难理解，因为这两种费用并不是临时出现的，而是可以预见的，为什么农民不会提前存款来解决这个问题。我一开始也觉得这些农民的行为很难以理解，但是仔细想想其实我也经常犯这样的错误，与他们在金钱上不同，我是经常在时间上犯错误。最典型的是在转专业的事情上，在入学的时候我就有了转专业的打算，然后到学校出转专业要求的时候我才发现自己并不符合学校的要求。而且学校的要求并没有发生变化，而我之前这么久居然没有想要去看一下学校要求。为什么会出现这种问题呢？这一度让我难以接受。</p>\n<p>看完这本书后我对当时的情况进行了回忆，我在忙什么呢？我在学本专业的课程，当时的我被数学分析和解析几何折腾得不轻，而且贪心的我还在自学计算机的课程。按照本书的观点，当时的我处于时间上的稀缺，我力图榨干自己的时间去兼顾专业课程的学习和课外知识的学习。同时安排了过重的任务，缺乏休息时间，精神上的负担并不轻，所以看似花了很多时间，但是其实效率并不高，按本书的观点是带宽被稀缺降低了。由此我并没有时间去长远考虑，每天都疲于奔命的解决当前的任务，并且心中存在侥幸心理，认为转专业离我还很远，等我忙完这个就开始规划。当时的我就像是一个杂耍的小丑，眼中只有正在下落的球，奋力接住并将其抛起，并没有余闲去看看上方还有什么类型的球会下落。当你连问题都没有看到的时候，你是不会想着去解决它的。终于转专业的小球掉到我的手上，此时没有准备的我自然无法成功将其抛起，只能眼睁睁的看着机会从手中溜走。当时处于一个很迷茫的状态，一方面身心疲惫，另一方面对未来也没有计划。</p>\n<p>如果我一直按照这个状态学习的话，我想我应该会很辛苦的同时难以取得任何成就。此时事情发生了变化，由于对转专业失败的心灰意冷，我放慢了自己的脚步，尝试放空自己。我开始学一些课外的知识，例如重新开始看小说，学做视频，在知乎上写回答。最重要的是我暂时放下当前的任务，开始规划自己的未来。没想到虽然每天学习的时间变少了，但是我的效率提高了不少，因为此时的我有时间对未来进行规划的。当时的我并没有多想，只是觉得当时的状态变好了。现在想想按照本书的理论，我的状态变化其实源于我的余闲产生了变化，降低了对于时间的稀缺，眼前不仅有当前要做的事情，还有对未来的规划，因此我会舍弃一下对未来其实没啥用的任务，这又降低了对时间的稀缺。由此带来的后果就是我的带宽提升了，效率也提高了。我只可惜没有早点看到这本书，并利用里面的想法来提高自己的效率。由此回想确实如此，当我忙于各种事情时，我通常既辛苦又没有学到什么，反而是余闲的时候学到了不少提高效率的方法。所以当你觉得自己为各种事情疲于奔命的时候，不妨慢下来，想想是不是忽略了什么。</p>\n",
            "tags": [
                "心理学",
                "经济学"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E7%97%85%E9%9A%99%E7%A2%8E%E7%AC%94_%E5%8F%B2%E9%93%81%E7%94%9F_89/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E7%97%85%E9%9A%99%E7%A2%8E%E7%AC%94_%E5%8F%B2%E9%93%81%E7%94%9F_89/",
            "title": "病隙碎笔_史铁生_89",
            "date_published": "2023-10-12T10:49:33.006Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>其实每时每刻我们都是幸运的，因为任何灾难的前面都可能再加一个 “更” 字。</strong></li>\n<li>人不可以逃避苦难，亦不可以放弃希望。</li>\n<li>真正的信心面前，其实是一片空旷，除了希望什么也没有，想要也没有。</li>\n<li>信心，既然不需要事先的许诺，自然也就不必有事后的恭维，它的恩惠唯在渡涉苦难的时候可以领受。</li>\n<li>古园寂静，你甚至能感到神明在傲慢地看着你，以风的穿流，以云的变幻，以野草和老树的轻响，以天高地厚和时间的均匀与漫长。</li>\n<li>只有蒙冤的往事，却无抚痛的忏悔，大约就只能是怨恨不断地克隆。</li>\n<li>“我们” 的 “立场” 很容易演成魔法，强制个人的情感和思想。</li>\n<li><strong>自卑，历来送给人间两样东西：爱的期盼，与怨恨的累积。</strong></li>\n<li>人不仅是被抛到这个时间上来的，而且是一个个分开着被抛来的。</li>\n<li>所有的种子都想发芽，所有的萌芽都想长大，所有的思绪都要漫展，没有办法的事。</li>\n<li>任何所谓天堂只要是许诺可以一劳永逸地到达，通向那儿的路都会拥有着贪婪。</li>\n<li><strong>爱是软弱的时刻，是求助于他者的心情，不是求助于他者的施与，而是求助于他者的参与。</strong></li>\n<li>彻底的圆满只不过是彻底的无路可走。</li>\n<li>我想，上帝为人性写下的最本质的两条密码是：残疾和爱情。</li>\n<li><strong>人，不能光是活着，不能光是以其高明的生产力和非凡的忍耐力为荣。</strong></li>\n<li>“不能” 写满四周！这便是残疾最根本的困苦。</li>\n<li>当白昼的一切明智与迷障都消散了以后，黑夜要你用另一种眼睛看着世界。</li>\n<li>白昼的清晰是有限的，黑夜却很漫长，尤其那心流所遭遇的黑暗更是辽阔无边。</li>\n<li><strong>生命的意义本不在向外的寻取，而是向内的建立。</strong></li>\n<li>上帝就像出题的考官，不断变换生活的牌面，看你是否还能从中找到生命的本义。</li>\n<li><strong>软弱的自己看不起自己的软弱，但还是软弱着。</strong></li>\n<li><strong>我慢慢看见，勇敢与可敬之外还有着更复杂的人生处境。</strong></li>\n<li>一方备下了屠刀，酷刑和株连，一方备下了赞美，或永生的惩罚。</li>\n<li>字，本当从沉默的心中流出。</li>\n<li>今天，绝对的信仰之光正趋淡薄，日新月异的生活道具正淹没着对生命意义的寻求。</li>\n<li>“我不能说”，不单因为惧怕权势，还因为惧怕舆论，惧怕习俗，惧怕知识的霸道。</li>\n<li>“你要忏悔”—— 这是神说的话，倘由人说就是病句。</li>\n<li>那美丽的梦想后面，还有一颗帝王的心；强制推行，比梦想本身更具诱惑。</li>\n<li>但这里面常常有一种悲哀，即主流文化经常湮灭着个人的独特。</li>\n<li>科学的要求是真实，信仰的要求是真诚。</li>\n<li>真，可以指真实，真理，也可以指真诚。</li>\n<li>痛苦不是丑陋，结束也不是，唯要挟和诅咒可以点石成金，化珍宝为垃圾，使过往的美丽毁于一旦。</li>\n<li>肉身蒙蔽了灵魂的眼睛，单是看见要回到那无中去，却忘了你原是从无中来。</li>\n<li>最易之读是不读，最易之恩是不恩，易之不易，终于弄到没有差别时便只剩下了简陋。</li>\n<li><strong>牢狱并不都由他人把守，自觉自愿画地为牢的也很多。</strong></li>\n<li>平等是说人的权利，大家站在同一起跑线上。平均单讲收获，各位请在终点上排齐。</li>\n<li><strong>进退维谷之日正可能是别有洞天之时。</strong></li>\n<li>一事之应不应该实行，并不取决于其实行是否有困难，而是取决于其实行是否正当。</li>\n<li>其辱在于，历来自尊的人类在死亡面前竟是如此慌张和无能为力。</li>\n<li>人不是苟活苟死的物类，，不是以过程的漫长而自豪，而是以过程的精彩，尊贵和独具爱愿为骄傲的。</li>\n<li>虚伪，这两个字，把它射向诚实，效果多佳。</li>\n<li><strong>自从我学会寻找，我就已经找到。</strong></li>\n</ol>\n",
            "tags": [
                "杂文",
                "人生感悟"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85-%E5%90%B4%E5%86%9B-93/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85-%E5%90%B4%E5%86%9B-93/",
            "title": "浪潮之巅-吴军-93",
            "date_published": "2023-10-12T10:49:33.004Z",
            "content_html": "<h1 id=\"摘抄\"><a class=\"markdownIt-Anchor\" href=\"#摘抄\">#</a> 摘抄</h1>\n<ol>\n<li>对于一个弄潮的年轻人来讲，最幸运的，莫过于赶上一波大潮。</li>\n<li>反垄断法逼着 AT&amp;T 靠科技进步来提升自己的实力。</li>\n<li>他们的任务是监督执行官的工作，保证投资人的利益，而不是考虑公司的长远发展。</li>\n<li><strong>在 2000 年前后，短线投资者发现最快的挣钱方法不是把一家公司搞好，而是炒作和包装上市。</strong></li>\n<li>评价一家上市公司的好坏，其实只要看那些最优秀的人是流进这家公司，还是流出这家公司即可。</li>\n<li><strong>在工业史上，新技术替代旧的技术是不以人的意志为转移的。</strong></li>\n<li>当一家公司没有人对它有控制权时，它的长期发展就会有问题。</li>\n<li>保守让 IBM 失去了无数次发展机会，但是也让它能专注于做最重要的事，并因此立于不败之地。</li>\n<li>早期领导人的灵魂常常会永久地留在这家公司，即使他们已经离去。</li>\n<li>凡是和微软合作的公司，最后都没有好结果。</li>\n<li>为了彰显人性化，IBM 减掉一个美国的工作岗位，会给相应的员工 “搬到印度” 的机会，但是要求到了印度后拿当地的工资。</li>\n<li><strong>原有产业 + 集成电路 = 新产业</strong></li>\n<li>仙童创造了硅谷的另一种文化 —— 从现有的著名公司中离职，直接创业。</li>\n<li>可以说，旧金山湾区之所以能成为硅谷，很大程度上是有了仙童公司。</li>\n<li>一家公司很难也没有必要像工业时代那样通过拥有生产资料来吧大家组织到一起，另立门户的成本非常低。</li>\n<li><strong>在每一次技术革命中，新技术必须比旧技术有数量级的进步才能站住脚。</strong></li>\n<li>帕洛阿尔托实验室可能是世界上最善于创新，同时也是最不善于将发明创造变成商品的地方。</li>\n<li>IPod 彻底改变了音乐市场，而 iPhone 继而颠覆了通信行业。</li>\n<li><strong>大多数产品经理之所以做不出改变世界的产品，是因为他们只看见了成功者最后的临门一脚，而忽视了别人的长期思考。</strong></li>\n<li><strong>创新远不止是原创，则更多的是发现价值，点石成金。</strong></li>\n<li><strong>反摩尔定律：一个 IT 公司如果今天和 18 个月前卖掉同样多的，同样的产品，它的营业额就要降一半。</strong></li>\n<li>反摩尔定律使得 IT 行业不可能像石油工业或飞机制造业那样值追求量变，而必须不断寻找革命性的创造发明。</li>\n<li>有时候，一家好的公司不能完全按照华尔街的意愿行事。</li>\n<li>PC 的领导者只有两个，软件方面的微软和硬件方面的英特尔。</li>\n<li>领先的苹果犯了一个致命的错误 —— 走封闭式道路和纯技术路线。</li>\n<li>一种操作系统成功与否，最终要看上面有多少既有用又廉价的应用软件。</li>\n<li>在硅谷，微软一直背负着抄袭者的骂名，但是这不妨碍微软继续前进。</li>\n<li>昔日打败网景公司的功臣，现在成了尾大不掉的累赘。</li>\n<li>纳德拉成功的秘诀源于印度人文化中的 “没有选择的幸福”。</li>\n<li>用一个字来形容埃里森，就是一个 “狠” 字。</li>\n<li>甲骨文这种务实而严格的管理方式也有它的弊端，就是很难造就有创新的人才。</li>\n<li><strong>成功的关键不在于做对了多少件事，而在于少犯多少错误。</strong></li>\n<li>思科早期成功的关键在于两个创始人在最合适的时机创办了一个世界上最需要的公司。</li>\n<li>如果留住早期员工，并调动他们的积极性，便成为了每一个上市科技公司的难题。</li>\n<li><strong>成功的公司各有各的绝招，失败的公司倒是有不少共同之处。</strong></li>\n<li><strong>他们对世界的贡献远不止是创建了世界上最大的互联网门户网站雅虎公司，更重要的是制定下了互联网这个行业全世界至今遵守的游戏规则 —— 开放、免费和盈利，并且发明了一种让用户和客户可以不是同一个人的新型商业模式。</strong></li>\n<li>追求流量应该是互联网公司营利的手段，而不是目的。</li>\n<li>在广告业，做品牌广告有个不成文的约定，非常讲究门当户对，即一流品牌的公司必须在第一流的媒体上做广告。</li>\n<li>当然所有的技术都会有一定的局限性和不足，一家崇尚技术的公司的态度是解决这些问题而不是倒退回手工操作。</li>\n<li>世界上没有一家公司不强调对技术的重视，但是有的公司是挂在嘴边，只有少数公司落在实处，Google 显然是后者。</li>\n<li>重视一方面体现在收入上，另一方面体现在他在公司有多少发言权。</li>\n<li><strong>世界上两个较弱的公司合并后，往往离第一名差距更大了，因为较弱的公司通常是问题有点多，合并后各自有一大堆毛病的公司很难整合到一起。</strong></li>\n<li><strong>10 个第二名未必抵得上一个第一名。</strong></li>\n<li>每个财富 500 强的公司平均年龄只有 38 岁，可见要办一个百年老店有多难。</li>\n<li>亚洲制造的影响不仅在于限制了利润率，而且还在于亚洲公司参与指定商业模式和游戏规则。</li>\n<li>曾几何时，摩托罗拉就是无线通信的代名词，也是技术和品质的化身。</li>\n<li>摩托罗拉并不是没有看出数字手机将来会替代模拟手机，而是很不情愿看到这件事情发生。</li>\n<li><strong>摩托罗拉长期以来都是一个了不起的技术公司，它长于技术，但是过分相信技术的作用。</strong></li>\n<li><strong>失败并不可怕，可怕的是轻易的失败，并且在一次次的失败后形成习惯性失败。</strong></li>\n<li>在人才竞争中最厉害的一招是从对手那里挖到优秀人才，同时必须让它留下平均水平以下的人。</li>\n<li>私募基金是在和魔鬼打交道，但他们是更厉害的魔鬼。</li>\n<li>风险投资则相反，他们是在和世界上最聪明的人打交道，同时他们又是更聪明的人。</li>\n<li>风险投资就是投人。</li>\n<li><strong>一个创业公司的创始人本身远比他们所要做的项目重要。</strong></li>\n<li>一个风投公司想要成功，光有资金，有眼光还很不够，还要储备许多能代表自己管理公司的人才。</li>\n<li>一家在某一领域特别成功的大公司一定被优化得非常适应这个市场，它的企业文化、做事方式、商业模式、市场定位等已经甚至过分适应传统的市场。</li>\n<li><strong>同一个市场在不同的公司眼里是完全不同的。</strong></li>\n<li>越是以前成功的公司，越容易相信自己固有的基因是最优秀的。</li>\n<li>不得不说世界上有不少人缺乏常识和思考，并且热衷于传播谣言。</li>\n<li>开放校园的真正含义在于像斯坦福大学那样，让大学融入社会。</li>\n<li>要保证质量，最好的方法就是 “杀鸡用牛刀 &quot;。</li>\n<li>很多事情与其跟美国政府商量，不如找大公司和银行。</li>\n<li>诺基亚由一个地区性的木工厂发展为全球最大的手机厂商，原因可以简单概括为 &quot;长期探索，抓住机遇，制定规则&quot; 这几个关键词。</li>\n<li>但是，作为一家通信公司，诺基亚不懂得从 2G 到 3G 的变化不是简简单单的通信设备更新和网速的提高，而是将移动电话过去的电话功能降为可有可无的次要地位，将手机从通信和短信设备，变成移动的终端。</li>\n<li><strong>有长远发展眼光的公司一定会将前景不是很美妙但还值钱的部门卖掉。</strong></li>\n<li>在生产关系中有三个至关重要的因素，即所有权，经营过程中人与人的关系，以及利益的分配制度。</li>\n<li>扁平化管理的第三个重要特征体现在限制上级对下级的人事权。</li>\n<li><strong>科技像是我们这个社会的大脑，而金融则是血液。</strong></li>\n<li>最终生存下来的公司可能不是技术最好的，但一定是管理很不错的。</li>\n<li>每一次经济危机就会导致一下产业的变迁和行业内部调整。</li>\n<li>经济发展的瓶颈从原来的生产量不足变为了消费量不足。</li>\n<li><strong>一个产品如果不能盈利就是犯罪，因为它浪费了原来可以用于其他产品的有限的资源和资金。</strong></li>\n<li>一个国家整体的地位和作用需要慢慢提升，但是随着经济地位的改善，这最终是水到渠成的事。</li>\n<li>中国在过去和未来的成功，将再次向全世界阐述一个最最简单的常识性真理，那就是从长远来看，财富是创造出来的，不是靠炒作和救济取得的。</li>\n<li><strong>每当危机到来之际，我们与其抱怨，不如做好准备，拥抱明天。</strong></li>\n<li>很多时候，成就一件事很难兼顾所有方面，人在资源有限的条件下总要排一个做事的优先级。</li>\n<li>两位创始人给优步注入的基因 —— 那就是一种不看手段，只注重结果、野蛮生长的基因。</li>\n<li><strong>有前途有希望的商业模式是要让大家不断地花钱，把市场做得越来越大，而不是替大家省钱，让市场变得越来越小。</strong></li>\n<li>人们通常会对一两年内技术进步做过高估计，但是却会低估 10 年间的技术发展。</li>\n<li>把握了能量和信息两把钥匙，我们就能洞察未来技术的发展和产业的变迁。</li>\n<li>在不断变化的事物中，有些事物变化比较快，有些则变化比较缓慢，弄清楚其中的规律，对把握未来非常重要。</li>\n<li>在历届工业革命的过程中，永远不乏好的技术，但是孤立的技术并不能实现颠覆式的创新，任何成功的颠覆，都收益于那个时代其他技术的帮助。</li>\n<li>如果在低水平上重复他人工作，什么事情都想着自己做，反而没有竞争力。</li>\n<li>对比 V-2 和土星五号，可以看出机械思维和控制论思维两种方法的差异，前者是对未来做一种尽可能的预测，后者则是根据变化不断进行调整。</li>\n<li><strong>事实上，不确定性普遍客观存在于我们的生活中，只是我们过去没有能力应对许多不确定性而已。</strong></li>\n<li>但是系统论的观点却认为，整体的性能未必能通过局部性能的优化而实现。</li>\n<li>大部分亚洲人高估了固定资产的价值，而低估了人，新技术和先进生产关系的作用。</li>\n<li><strong>在信息时代，比拥有更重要的是链接。</strong></li>\n<li>从工业时代到信息时代，通常只有牺牲掉局部，才能保全整体。</li>\n<li>可以说，是否容忍失败，已经成为新时代公司成败的关键。</li>\n<li><strong>宽容失败，从本质上讲，是对不确定性的认可。</strong></li>\n<li>靠人为积累起来的经验对今后工作的指导意义，远不如掌握更新的信息收集和处理技术来得有效。</li>\n<li>“够用了” 这条很消极而枯燥的原则，让所有想通过做一个操作系统取代微软的努力都变得无效。</li>\n<li>尽管历史不会简单地重复，但是科技产业的发展是有章可循的。</li>\n<li>事实上，是中国非常糟糕的批发和零售产业，要求必须出现一家阿里巴巴这样让商业变得容易的公司。</li>\n<li>科技的进步，不可能通过房地产泡沫或者股市泡沫来实现。</li>\n<li><strong>科技的发展不是均匀的，而是以浪潮的形式出现的。</strong></li>\n<li>中国的优势在于，时间在中国这一边，而需要警惕的是，因过于急于求成而将一手好牌打烂。</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>一本很有意思的书，作者在科技领域耕耘多年，深刻了解科技领域的规律，同时兼顾可读性，对于想要了解科技领域的人而言，这是一本不可错过的好书。就个人而言，我觉得对我最有启发性的是要有格局，从宏观上把握，不在乎一城一池的得失，一个人一个公司的技术是有限的，一定要形成一个联盟，一个生态，才能得到最终的成功。同时要了解社会的需求，要破除了技术至高论，很多成功的公司的技术并非是最先进的，而是他们更加了解用户真正的需求，用户很多时候是有惰性的，业务需求也许是用户更加关注的部分。不要以为做出了技术上最先进的东西就能理所当然的得到用户的喜爱。</p>\n<p>要学会适应变化，应对危机，生活不是一成不变的，不能按照机械的思维，总是经过层层分析后才开始工作，应当根据实践的结果不断调整新的方法。不必对当前的低潮过于悲观，因为低潮贯彻整个人类发展的始终，我们经历了更多更大的经济困境，我们要做的是积蓄力量，看清形势，在适当的出击。但是对经济泡沫要有警惕，越简单的商业模式越有潜力，如果连自己的商业模式都无法解释清楚，无法确定盈利节点，一味地的声明自己是代表未来，通常这些都只是炒作概念罢了。但令人惋惜的是，这样的人往往可以捞一把就跑，却需要整个社会承担后果，并产生劣币驱逐良币的后果。还有很多反直觉的东西，例如公司不是越大越好，售卖一下部门反而是良策。还有商业模式的重要式，有时我们身处互联网中，没有察觉到现在的这种商业模式相对于前面的商业模式而言有多奇妙。</p>\n<p>身处第四产业革命的我们是悲哀的，也是幸运的，悲哀在于我们也许跟不上这波浪潮，成为时代的牺牲品，幸运在于我们遇到了难得的机遇。投身到科技领域吧，和我一样的年轻人们，用我们的聪明才智为时代添砖加瓦，成为这波浪潮中的弄潮儿。</p>\n",
            "tags": [
                "科技人文"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%B4%8B%E5%8A%A1%E5%A4%A7%E4%B8%9A_%E6%AF%9B%E5%B1%8B%E5%A0%82_80/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%B4%8B%E5%8A%A1%E5%A4%A7%E4%B8%9A_%E6%AF%9B%E5%B1%8B%E5%A0%82_80/",
            "title": "洋务大业_毛屋堂_80",
            "date_published": "2023-10-12T10:49:33.002Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>战争，对于一部分人来说，是灾难，而一旦落到另一部分人手里，那就是升官和发财的机会。</li>\n<li>你虽然手中有了权有了势，并不是你想干什么就能干什么，要看上面的人怎么说，更要看下面的人怎么想。</li>\n<li>在没有成功的经验和成熟的技术支持下，如果发展的太快，规模拉的越大，倒闭的越快。</li>\n<li>然而，如果说历史上出英雄的话，那也应该是跟我们常人的想法完全不同的人。</li>\n</ol>\n<h1 id=\"读后感\"><a class=\"markdownIt-Anchor\" href=\"#读后感\">#</a> 读后感</h1>\n<blockquote>\n<p>《洋务大业》“在泥泞中艰难前行”</p>\n</blockquote>\n<p>天行健，君子以自强不息。洋务运动即 “自强运动”。对于洋务运动，我相信大家都不会陌生。但是我们的印象大概都停留在开办了新式工厂，创立同文馆，期间签订的屈辱条款，还有那些在那段历史中大人物 —— 曾国藩、李鸿章、左宗棠… 除此之外，洋务运动留在我们脑海里的还有什么？洋务运动为什么会失败，真的只是一句腐朽的统治阶级就可以解决这个问题吗？它带给我们什么经验，抑或是什么教训？因此我不由的对这段历史产生了浓厚的兴趣，于是我翻开了毛展堂的《洋务大业》，试图去寻找问题的答案。</p>\n<p>“你虽然手里有了权有了势力，并不是你想干什么就干什么，要看上面的人怎么说，更要看下面的人怎么想。” 这是书中令我印象最为深刻的的一句话，也是洋务派面临的最大困境。上有慈禧太后对权力的制衡，有清流派的故意刁难，有顽固派的坚决抵抗。下有民众的抵抗，下面的官员则没几个人会弄这些洋玩意儿，靠外国人吧，他们并不会全心全意的为你们服务，还不时的中饱私囊，而且还有不少不学无术的外国人特意来坑蒙拐骗。那怎么办呢？洋务派想出了一个好办法 —— 创建新式学堂，自己培养自己的人才。洋务派开出了不少优厚的待遇去吸引人报读新式学堂。这时清流派出现了，指责这样以利来引诱，会使天下的举子贪利而亡义，这样一来，这样一来，国将不国了。还写了一幅对联：“诡计本多端，使小朝廷设同文之馆；军机无远略，诱佳子弟拜异类为师。” 这样一来，那些想进入新式学堂的人都不敢去了，毕竟谁都不想被带上 “贪利” 这顶大帽子。就这样只有几十人进入这新式学堂里，这些人都是当时社会里最底层的人的孩子，而且最令洋务派头疼的是这些学生都不认真学习外国知识，而是偷偷的学四书五经，以图科举取士。</p>\n<p>清流派并不清。可能大家对清流派并不太了解，其实这是一个以李鸿藻、倭仁为代表的儒生派别，清流派也是他们自己起的，因为他们认为自己是当时的一股清流。但是他们并不像自己所说的那样，他们也是为了名利而奋斗，是慈禧太后为了平衡势力的一支棋子。他们以骂人为生，以此来获取名利，那骂那些人呢？很明显，就是骂慈禧太后讨厌的人。他们有一套组织，先派地位较低的官员去试探着批评，方向错了的话就换一个话题，对了的话就群起而攻之，谁骂的最狠，谁就最多奖赏。真的应了一句话：“嘴上仁义道德，心里男娼女盗。” 真是读书人里的耻辱。最典型的一件事是刘锡鸿随郭嵩焘去外国考察，刘先打苦情牌，求郭带上他去，郭就带上他了。结果到了外国之后，郭的每个行为都被刘添油加醋的变成卖国行径，最后两人都提前结束了行程，考察自然难有什么收获。</p>\n<p>“然而，如果说历史上出英雄的话，那也应该是跟我们常人的想法完全不一样的人。” 在这么困难的处境下，洋务派也还是坚持着自己的想法，去试图改变这个落后的国家。谢谢你们，在无望时任试图带来一点希望。</p>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%AC%A7%E4%B9%9F%E5%A6%AE.%E8%91%9B%E6%9C%97%E5%8F%B0_[%E6%B3%95]%E5%B7%B4%E5%B0%94%E6%89%8E%E5%85%8B_90/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%AC%A7%E4%B9%9F%E5%A6%AE.%E8%91%9B%E6%9C%97%E5%8F%B0_[%E6%B3%95]%E5%B7%B4%E5%B0%94%E6%89%8E%E5%85%8B_90/",
            "title": "欧也妮.葛朗台_[法]巴尔扎克_90",
            "date_published": "2023-10-12T10:49:33.001Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>晴雨表能够轮流的叫人愁，叫人笑，叫人高兴。</li>\n<li>“你好厉害，我倒从不知道他的总数呢！”</li>\n<li>偌大的一笔财富把这个富翁的行为都镀了金。</li>\n<li>多年来女儿和拿侬拿的蜡烛，吝啬鬼总是亲自分发的，正如每天早上分发面包和食物一样。</li>\n<li>小人的心胸都在关切重大的利益；这位姑娘受到奉承包围，以为他们的友谊都是真情实意，仿佛一只小鸟不知道给人家标着高价作为赌注。</li>\n<li>可是谦虚，或者不如说惧怕，的确是爱情的主要德行之一。</li>\n<li>“好玩，靴子比穿的人还值钱，你觉得好玩？”</li>\n<li><strong>“难道我们就不吃人了吗？什么叫做遗产呢？”</strong></li>\n<li>因为激烈的情绪有一种特别的记忆力。</li>\n<li><strong>“可是这孩子没有出息，把死人看得比钱还重。”</strong></li>\n<li>这一晚，表面上跟他们单调生活的无数夜晚一样 ，但的确是最难受的一晚。</li>\n<li>金钱控制法律，控制政治，控制风俗，到了前所未有的程度。</li>\n<li>人类所有的力量，只是耐心加上时间的混合。</li>\n<li>老箍桶匠素来相信时间的力量，他说时间是一个好小鬼。</li>\n<li>感受，爱，受苦，牺牲，永远是女人生命中应有的文章。</li>\n<li><strong>“钱像人一样是活的，会动的，它会来，会去，会流汗，会生产。”</strong></li>\n<li>“父亲，把钱收起来吧！我们只需要你的感情。”</li>\n<li>谄媚从来不会出自伟大的心灵，而是小人的伎俩，他们卑躬屈膝，把自己尽量的缩小，以便钻进他们趋附的人物的生活核心。</li>\n<li>他眼见在一个地方成为罪恶的，在另一个地方竟是美德。</li>\n<li>一天到晚为利益打算的结果，心态冷了，收缩了，干枯了。</li>\n<li>“我一定做你的奴隶！” 他说。</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>经典就是经典，篇幅虽然不长，但是对人物的刻画堪称一绝。尤其是对于 “守财奴” 葛朗台的描写，通过他的反常识，反正常人思维的话语和行为充分的表现出了这样一个人物。他不仅对外人，对自己的妻女狠，他对自己也狠，把全家人的生活过得像一个苦行僧一般。他赚取钱财不为了改善家人的生活，而是为了赚钱而赚钱，这已经是完全被金钱异化的人。对于这样的人物，我们这些读者的心灵也受到了极大的震撼。而作为一本刻画众生百态的书，本书对于配角的刻画十分优秀，将众人对于金钱的渴望表现的淋漓尽致。其中以夏尔的转变最为令人惋惜，夏尔本是一个纯情少年，在金钱的腐蚀下，他慢慢忘却了自己曾经拥有的真挚的情感，变得冷漠而可厌。而里面最令我惋惜的是女主 —— 欧也妮。葛朗台。年少时被父亲管控，终于找到的爱情却被人轻易放弃。自己用生命守护的东西，却在心爱的人面前不值一提。那个人居然可以轻描淡写的放下所有，曾经说过的甜言蜜语也想风一样消逝。一个轻视金钱，渴望爱情的人，留给她的却是海量的财富和一生的孤寂。这也许是作者对于这个世界无无情的讽刺。本书的情景更是跌宕起伏，让人想要一直读下去。最精彩的情景显然是夏尔在一夜之间一无所有的情景，直接将故事发展推上了一个高潮。</p>\n",
            "tags": [
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%9C%AA%E6%9D%A5%E7%AE%80%E5%8F%B2_[%E4%BB%A5%E8%89%B2%E5%88%97]%E5%B0%A4%E7%93%A6%E5%B0%94.%E8%B5%AB%E6%8B%89%E5%88%A9_90/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%9C%AA%E6%9D%A5%E7%AE%80%E5%8F%B2_[%E4%BB%A5%E8%89%B2%E5%88%97]%E5%B0%A4%E7%93%A6%E5%B0%94.%E8%B5%AB%E6%8B%89%E5%88%A9_90/",
            "title": "未来简史_[以色列]尤瓦尔.赫拉利_90",
            "date_published": "2023-10-12T10:49:32.999Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>世界上已经不再有自然造成的饥荒，只有政治造成的饥荒。</strong></li>\n<li>没人能保证绝不会再有一场瘟疫席卷全球，但我们有充分的理由相信，在医生和细菌中，医生是跑在前面的一方。</li>\n<li>现在，糖可比火药更致命。</li>\n<li>全球经济导向也已经从物质经济转变为知识经济。</li>\n<li><strong>契诃夫：“在第一幕中出现的枪，在第三幕中必然发射。”</strong></li>\n<li>恐怖主义只是得不到真正权力的人采取的软弱策略。至少在过去，恐怖主义的手段是散播恐惧，而不是造成严重的实质伤害。</li>\n<li><strong>就本质而言。恐怖主义就是一种表演。</strong></li>\n<li>历史不会允许真空。</li>\n<li>只要是技术问题，就会有技术上的解决方案。</li>\n<li>你在 18 岁为国家打仗，在 40 岁愿意纳税，是因为希望到 70 岁的时候能够得到国家的照顾。</li>\n<li>无节制追求享乐带来的很可能是痛苦而并非快乐。</li>\n<li>人要升级为神，有三条路可以走：生物工程，半机械人工程，非有机生物工程。</li>\n<li><strong>我们早已习惯网络世界，但其实它正是奇迹中的奇迹。</strong></li>\n<li>治愈和进化之间并没有明确的界限。</li>\n<li>住在宫殿的人，心中的议题永远与住在陋室的人不同。</li>\n<li><strong>历史不但塑造了我们的科技，政治和社会，也塑造了我们的思想，恐惧和梦想。</strong></li>\n<li><strong>这正是研究历史的最好理由：不是为了预测未来，而是要摆脱过去，想象另一种命运。</strong></li>\n<li><strong>但历史唯一不变的事实，就是一切都会改变。</strong></li>\n<li>自然选择进化出喜好和厌恶的反应，作为评估繁衍机会的快速算法。</li>\n<li>哺乳动物要活下来，仅靠事物还不够，还需要情感联结。</li>\n<li>农业革命即是经济上的革命，也成了宗教上的革命。</li>\n<li>相对论不会令什么人生气，是因为它并不抵触我们宝贵的信仰。</li>\n<li>图灵从自己的个人经验就知道，你究竟是谁根本不重要，重要的是别人对你的看法。</li>\n<li><strong>如果你想发动一场革命，不要问：“有多少人会支持我的想法？”，而是要问：“我有多少支持者能够有效合作？”</strong></li>\n<li>所有的大规模人类活动，到头来都是基于我们想象的秩序。</li>\n<li>然而，现实还有第三种层次：互为主体。</li>\n<li>但事实上，大多数人生活的意义，都只存在于彼此讲述的故事之中。</li>\n<li><strong>人类会以一种不断自我循坏的方式，持续增强彼此的信念。</strong></li>\n<li>我们可能觉得书面文字只是用来温和地描述现实，但它却逐渐变得威力无穷，因为它能够重塑现实。</li>\n<li>随着官僚体系掌握的权力越来越多，他们变得即使犯错也无动于衷。</li>\n<li>人类合作网络评价自我时，常常用得就是自己发明的标准，屡获好评也就毫不意外。</li>\n<li>自己相信的，一定是 “真理”；只有别人相信的，才会是 “迷信”。</li>\n<li>每当灾难发生，就算这场悲剧实际上是由富人引起的，但穷人承受的苦难总是远远大于富人。</li>\n<li>在中世纪的欧洲，获得 2 知识的主要公式是：知识 = 经文 x 逻辑。</li>\n<li>科学革命知识公式则非常不同：知识 = 实证数据 x 数学。</li>\n<li>一个获取伦理知识的新公式出现了：知识 = 体验 x 敏感性。</li>\n<li><strong>塑造历史的，往往是一群向前看的创新者，而不是向后看的大众。</strong></li>\n<li>荒谬的是，我们对一个想象故事做出的牺牲的越多，就可能越坚持，只为了让我们的一切牺牲和痛苦有意义。</li>\n<li>现代人类已经患上了 “错过恐惧症”，总在担心自己错过了什么；虽然手中的选择比以往任何时候都多，但选了之后又很难全心全意对待。</li>\n<li>数百年来，人类曾是升级版的黑猩猩。而到了未来，人类则可能成为放大版的蚂蚁。</li>\n<li><strong>在古代，力量来自获得资料。而到了今天，力量却是来自该忽略什么。</strong></li>\n<li>生物真的只是算法，而生命也真的只是数据处理吗？</li>\n<li>智能与意识，究竟哪一个才更有价值？</li>\n<li>等到无意识但具备高度智能的算法比我们更了解我们自己时，社会，政治和日常生活将会有什么变化？</li>\n</ol>\n<h1 id=\"感想\"><a class=\"markdownIt-Anchor\" href=\"#感想\">#</a> 感想</h1>\n<p>本书最大的优点就是用诙谐轻松的口吻外加贴切的小例子去讲解一些比较深奥的问题，使人会心一笑而且能明白他的意思。而且也让我对于生命中已经习以为常的事物多加了一些思考，比如我们为什么相信国家，民族，公司，货币这些根本没有实际价值的事物，因为我们都相信这一个相同的故事，这使得我们通过这些虚构的事物达成更好的合作。也让我审视了我自己，更加了解了我自己，其实我们真的能了解自己吗？我们的处境是变好了，还是变坏了？这些原本不证自明的问题现在引起了我的思考。我一直认为我们是可以了解自己的，而且个人感受和对其他事物的看法是个人的特质，但是如果这些都是算法，只是我们头脑中的一些化学反应，这些都是算法，都是可以后期改变的话，那么我们怎么证明我就是我，我和别人不一样。同时我也深深的感到 “社畜” 的意味，随着科技逐渐接管我们的工作，我们的生活，有多少人会变得多余，而掌握这些科技的人的地位则越加不可动摇，到时民众也许已经不可能再反抗，因为到时候你已经可有可无了。科技正深刻地改变我们的生活和我们的思想，当科技帮助一部分人成为超人类后，也许我们会渐渐地变成两个不一样的物种。这也让我想起了日韩和欧洲的少子化问题，但是只真的是一个问题吗？未来的社会真的需要这么多人吗？我们为什么会认为少子化是一个问题呢？这是因为我们脑海中认为 —— 社会上有很多工作 —— 工作都需要人来做 —— 人变少了后，工作不够人做 —— 少子化是一个问题。可是我们有没有怀疑过这里面的前提可能都在未来并不成立，我们有这个前提是我们基于前人的经验得出的，它在未来一定成立吗？这是值得我们思考的问题。这本书还教会我看东西要透过事物的本身去看本质，例如科学与宗教，战争与思想，事物成功和失败的原因。</p>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%98%8E%E6%9C%AB%E5%86%9C%E6%B0%91%E6%88%98%E4%BA%89%E5%8F%B2-%E9%A1%BE%E8%AF%9A-93/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%98%8E%E6%9C%AB%E5%86%9C%E6%B0%91%E6%88%98%E4%BA%89%E5%8F%B2-%E9%A1%BE%E8%AF%9A-93/",
            "title": "明末农民战争史-顾诚-93",
            "date_published": "2023-10-12T10:49:32.997Z",
            "content_html": "<h1 id=\"摘抄\"><a class=\"markdownIt-Anchor\" href=\"#摘抄\">#</a> 摘抄</h1>\n<ol>\n<li>可见，家丁制度是明朝后期军政败坏下出现的一种畸形产物，它标志着官兵逐渐由维护整个地主阶级统治的力量，蜕变为将领们谋取私利的工具。正是由于存在着这种不成文的家丁制度，我们在叙述明末官兵时，既要看到它在总体上十分虚弱，又要看到那些军阀在个别场合，还是可以拿出一批亡命之徒来孤注一掷。</li>\n<li>农民起义并不是一帆风顺的，明王朝也不是一推就倒的。从万历年间起，各地的农民曾经多次举起义旗，向腐朽的统治发起冲击。</li>\n<li>那些中小规模的地区性农民起义，就像一阵阵刺目的闪电，不仅揭露了笼罩大地的黑暗，更有力地预示着一场大规模的暴风雨要来临了。</li>\n<li>勤王兵的哗变，不仅打乱了明廷的军事部署，牵扯了地方官员的精力，而且参加兵变的士卒往往不敢归伍，其中不少人漂泊无着，连群结伙地投入农民起义。这样，就使相当一批原来用于镇压农民起义的力量，转化为反抗明王朝的力量。</li>\n<li><strong>杨鹤的被罢官，标志着明廷在策略上，由以抚为主向以剿为主的转变。</strong></li>\n<li>明廷一面装出悲天悯人的样子，企图运用招抚的手段瓦解农民起义；一面又凶残暴戾地加紧向农民追逼赋税。</li>\n<li>陕西的农民起义一时沉寂了下去，而进入山西的起义军却越战越强。他们像决堤的洪水一样，冲入明帝国的腹心地区，把农民革命逐渐推向高潮。</li>\n<li><strong>崇祯六年十一月二十四日，农民军飞越黄河天险，进入中原大地，在明末农民战争史上是一件划时代的大事。</strong></li>\n<li>他们以大无畏的气概，防火烧毁了皇陵享殿和龙兴寺，连皇帝的祖坟也敢于动手挖掘。</li>\n<li>皇帝带头叫穷，，勋戚和乡绅也抗拒不捐，增加的兵饷就只有全部压到髓干血尽的贫苦农民身上了。</li>\n<li>北京城里的小户人家怨声鼎沸，像明世宗时百姓把皇帝的年号嘉靖呼为 “家净” 一样，他们也 “呼崇祯为重征”，借以发泄对朝廷苛捐杂税的不满。</li>\n<li><strong>既然导致这场农民大起义的各种因素不仅仍然存在，而且继续发展；既然暴虐通知的明王朝，不仅没有改变，而且还在拼死地反扑，那么，农民战争的高潮的再次到来就是不可避免的。</strong></li>\n<li>明廷何尝不想利用张献忠、罗汝才等部在一个狭小的地方居而不流的形势，来个一网打尽，仅仅是因为满洲贵族军队拖住了它的手脚，实在无暇他顾，才只好诶诸来日。</li>\n<li><strong>继剿饷之后又加派练饷，充分显露了朱由检之流的凶残和昏庸。他们以为可以通过无穷无尽的榨取，豢养一支庞大的军事力量，用反革命的屠刀杀出一个天下太平。殊不知越是狠命把老百姓的裤带勒紧，套在他们脖子上的绞索也就拉得越紧。</strong></li>\n<li><strong>起义农民在军事上可能取得胜利甚至决定性胜利；在思想上却无法超越时代的局限，注定要一败涂地。这种情况决定了每一次农民革命都避免不了悲剧性的结局不是被淹没在疯狂围剿的血泊中，就是 “在革命中和革命后被地主和贵族利用了去，当作他们改朝换代的工具”。</strong></li>\n<li>如果不带先入为主的流动作战，也就没有崇祯十五年冬季以后，李自成、张献忠在大面积土地上建立农民革命政权的局面。</li>\n<li><strong>后来的事实证明，自从开封陷没之后，明廷在河南就再也没有一个强固的据点。千里中州的易手，使李自成起义军获得了战略上的主动地位，而明廷则由于咽喉被扼，腹心内溃，处于半瘫痪状态了。</strong></li>\n<li><strong>“守土不流” 局面的出现，是双方军事力量对比改变的结果，不能单纯地归结为义军领导人在政策上的变化。历史早已证明，当客观条件还不具备的时候，即使在理论上设想出最完美的政策，也只能是无济于事的空谈。</strong></li>\n<li>统一号令是义军实现统一的一个重大步骤，但是，统一的过程并不是一帆风顺的，需要克服农民阶级的狭隘性和保守性。</li>\n<li>封建社会中的原来互不统属的各支起义军走向统一的时候，不可能按照近代的民主方式来实现，而往往是依据实力的大小、采取火并的方式来解决问题。</li>\n<li><strong>历来维护统治者利益的史家及文人，对于起义人民所做的利国利民的好事总是噤若寒蝉，竭力抹杀，甚至颠倒黑白。只是在他们的内部谈论到革命风暴之可畏，需要采取对策的时候，才偶尔透露一点他们所掌握的情报。</strong></li>\n<li>起义军建立的农民革命政权是非常注意恢复社会生产、重视解决民生疾苦的。</li>\n<li><strong>李自成部义军郏县战役的胜利，给了明政府所留下的最精锐的部队 —— 陕西兵以摧毁性的打击，为推翻明王朝的罪恶统治奠定了基础。</strong></li>\n<li>明崇祯十七年，清顺治元年（1644）旧历正月初一日，李自成在西安建国，国号大顺，改元永昌。</li>\n<li>大顺建国时采取的各项措施，虽然在主导方面是维护农民利益的，但是也显示出了这个农民革命政权向封建政权转化的明显迹象。</li>\n<li>按崇祯皇帝的本意是自己逃亡南方，但一要大臣襄赞，二要顾全面子。</li>\n<li>按史籍记载，朱由检大搞捐助，所得不过二十万两而已。对比大顺军进城之后，没收皇帝内帑和对勋戚、太监、百官追赃助饷，一共弄到七千万两以上的白银，明朝统治集团的贪婪鄙吝也就可想而知了。</li>\n<li>自己的命运都已完全掌握在革命人民手中之时，朱由检还摆出一副宽大为怀的模样，高唱赦罪安民的调子，真好比骷髅买俏，徒在历史上增加一点笑料而言。</li>\n<li>朱由检欲战不能，欲和不愿，只有坐待灭亡。</li>\n<li>一六四四年农历三月十九日，大顺农民军占领了北京，宣告了明王朝反动统治的覆灭。</li>\n<li><strong>历史是公正无私的，它不允许用阶级偏见和主观臆测来代替事实真相。</strong></li>\n<li><strong>大顺政权后期有一个明显的不足，是缺少一批对全国形势有真知灼见，能够统筹全局，提出恰当战略方针的人物。</strong></li>\n<li>大顺政权在北京期间，规定了文官受武将节制的制度，只注意让出身于起义农民的领导居于支配地位，却没有发挥降官的作用，这不能不说是策略上的一个重大错误。</li>\n<li>如果不是很快就爆发了吴三桂叛乱和清兵入关，大顺政权完全可以进一步稳定局势，并且以对社会生产最小的破坏为代价实现全国的统一。</li>\n<li><strong>山海关战役是大顺和清争夺天下的抗衡中，具有关键意义的一战，它决定着究竟是大顺朝廷还是清王朝能建立对全国的统治。</strong></li>\n<li>一方是对迫在眉睫的危险视若无睹，一方是处心积虑以求一逞。在这种情况下，前者的惨败和后者的大获全胜就是必然的了。</li>\n<li>因此，在大顺和清争夺天下的抗衡中，具有关键意义的却是汉族官绅地主的动向。</li>\n<li>他们的胜利当中就潜藏着巨大的危险，或者说隐藏着失败的因素。</li>\n<li><strong>历史又一次的证明，任何政权如果没有一个大体上稳固的后方，要在前线取得胜利是非常困难的。</strong></li>\n<li>“天下未乱蜀先乱，天下已定蜀后定。”</li>\n<li>川北一战标志着张献忠同李自成两大农民军公开决裂。</li>\n<li>在历史上身居权力顶点的人物，一旦走上了错误的道路是很难迷途知返的，他们往往在谬误的斜坡上越滑越远，张献忠的悲剧正在于此。</li>\n<li>它确实明白无误地反映了张献忠的变态心理：对封建统治阶级的仇恨拓展成了对人的厌恶。</li>\n<li>自古以来，任何一支队伍想要战胜敌人，必须有两个基本条件，即自身的团结一致和争取最低限度的同盟者。</li>\n<li>社会矛盾由原先的汉民族内部的阶级对抗和辽东地区的满汉之间的民族对抗演变为全国性的阶级矛盾和民族矛盾相交织呈现出极其错综纷杂的局面。</li>\n<li>可是，朱由崧等人出于反人民的立场，在战略上仍然认定农民军是自己的主要敌人，对清方的步步紧逼却一味退让，唯恐得罪。</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>看到大顺军兵败如山倒的结局，我有点想要落泪，看着他们在大明的清剿中坚持，一步步击溃大明，却在吴三桂的叛变和清军的攻击下一败涂地，令人扼腕。他们是怎么一步步走到这一步的呢？一方面不懂得团结投降官僚，在登基后仍采用旧时的追赃助饷的政策，虽然快意恩仇，惩罚了那些鱼肉百姓的官僚，但是却把他们推到自己的对立面。在羽翼未丰时，适当的妥协是更好的方法，正如共产党在不同的形势下，对待地主、富农、中农和贫农实施不同的政策。这些官僚在大顺军的威慑下，虽然暂时服从，但时刻想着如何反抗，这也导致大顺军很难利用好他们的力量，虽然官僚存在腐败问题，但是他们在朝堂工作多年，掌握很多第一手情报，其中领袖人物对天下大势有着战略眼光。大顺正是缺失这样一批对天下大势有着清晰认识的人才，才忽视了清军的威胁。因此我们想要成就一番事业的话，一定要注重团结可以团结的人。同时亲不亲，阶级分，对于上层人物而言，民族不是关键因素，关键是否能够成为利益集团，清政权正是由满清军事集团和汉族官僚集团组合而成的统治集团。清军对汉族人才的招揽和对地主阶级的拉拢使他们能够牢牢地控制中国。因此可见其他都不是关键因素，只有利益，即使是清军这么落后的政权，这么残暴的政权，只要给统治阶级足够的利益，足够的武力照样能统治中国这么多年。有时想想正义不一定能战胜邪恶，还是需要利益去驱动其他人和你一起做大蛋糕，才能够长久。另外明朝后期的百姓的生活悲惨情况令我震惊，吃人已经成为一件习以为常的事情。</p>\n",
            "tags": [
                "历史",
                "政治",
                "明朝"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF_%E5%BD%93%E5%B9%B4%E6%98%8E%E6%9C%88_91/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF_%E5%BD%93%E5%B9%B4%E6%98%8E%E6%9C%88_91/",
            "title": "明朝那些事儿_当年明月_91",
            "date_published": "2023-10-12T10:49:32.995Z",
            "content_html": "<ol>\n<li>在元朝，老百姓如果不能上学和当官就没有名字，只能以父母年龄相加或者出生的日期命名。</li>\n<li>莫道石人一只眼，挑动黄河天下反。</li>\n<li>敲开那扇门可能意味着侮辱，但不敲那扇门就会饿死。</li>\n<li>生命的尊严和生存的压力，哪个更重要？</li>\n<li><strong>只有失去一切，你才能明白自己的力量和伟大。</strong></li>\n<li>长期的困难生活，最能磨炼一个人的意志。有很多人在遇到困难后，只能怨天尤人，得过且过，而另外一些人虽然也不得不在困难面前低头，但他们的心从未屈服，他们不断努力，相信一定能够取得最后的胜利。</li>\n<li><strong>转变的关键在于心。因为心的强大，才是真正的强大。</strong></li>\n<li>当愤怒和不满超过了限度，当连像狗一样生存下去都成为一种奢望的时候，反抗是唯一的道路。</li>\n<li><strong>知道可能面对的困难和痛苦，在死亡的恐惧中不断挣扎，而仍然能战胜自己，选择这条道路，是真正的勇气。</strong></li>\n<li>在活不下去时，那些农民被迫以自己的鲜血和生命去推动封建社会的发展，直至它的死亡。</li>\n<li>一个人要展示自己的力量，从来不是靠暴力，挑战这一准则的人必然被历史从强者的行列中淘汰，历来如此。</li>\n<li>高筑墙，广积粮，缓称王。</li>\n<li><strong>但人们往往忽视了这样一个事实，这个世界上还存在着有用的坏人和无用的好人。</strong></li>\n<li>以颤抖之身追赶，以敬畏之心挑战。</li>\n<li>军事和经济的发展往往是脱离的。</li>\n<li>天道好还，中国有必伸之理，人心效顺，匹夫无不报之仇。</li>\n<li><strong>那些最优秀的人能够从失败中爬起来，去挑战那个多次战胜自己的人，这才是坚强！</strong></li>\n<li>将欲取之，必先予之。不为小利，必有大谋。</li>\n<li>皇权的无限扩大性与皇帝的精力有限性的矛盾，必然导致丞相制度的产生。</li>\n<li>最强大的军队是一支沉默的军队。</li>\n<li><strong>仇恨往往比爱更有生命力。</strong></li>\n<li><strong>他可以影响少数人于永远，也可以影响多数人于暂时，但他无法影响多数人于永远。</strong></li>\n<li>历史是一个好客的主人，但却从不容许客人取代它的位置。</li>\n<li>历史也从来不是一个人或者几个人可以支配创造的。</li>\n<li><strong>简单的占有是小聪明，暂时的放弃才是大智慧。</strong></li>\n<li>坚强的意志和决心可以战胜一切困难。</li>\n<li>执着的信念和无畏的心灵才是最强大的武器。</li>\n<li>要么不做，要么做绝。</li>\n<li>战争的胜负往往就决定在于那 “再坚持一下” 的努力之中。</li>\n<li>我相信，真相是永远无法掩埋的。</li>\n<li><strong>宽容从来都不是软弱。</strong></li>\n<li>不要做你不擅长的事。</li>\n<li><strong>说话者说出了自己的诺言，最终变成了谎言。不说话者沉默，却用行动实现了自己心中的语言。</strong></li>\n<li>悲剧，还是荣耀，只取决于你，取决于你是否坚强。</li>\n<li>西方人来到我们面前时，手中拿着圣经，我们手中有黄金。后来就变成了，他们手中有黄金，我们手上拿着圣经。</li>\n<li>权力在带给人们尊严的同时，也会带给了他们自私。</li>\n<li>盲目的自信往往比自卑更可怕。</li>\n<li><strong>这就是我所认为真正的英雄 —— 畏惧并战胜畏惧的人。</strong></li>\n<li><strong>辩论和演讲从来不能解决问题，因为这个世界是靠实力说话的。</strong></li>\n<li>人有时候必须有舍弃生命的觉悟，才能找到生路。</li>\n<li>人生中最难的不是忍而是等。</li>\n<li>只有内心的坚韧和顽强才是真正的勇敢。</li>\n<li>当一个人不得不走向死亡时，自杀代表着尊严和抗争。</li>\n<li><strong>屈辱的活着比悲壮的死去更需要勇气。</strong></li>\n<li>夺走你的一切，只因为我要给你的更多。</li>\n<li>在暴力和死亡威胁面前，沉默的永远是大多数。</li>\n<li>嚎哭而来，欢笑而去，人生本该如此。</li>\n<li><strong>观点斗争是假的，方向斗争也是假的，只有权力斗争才是真的。</strong></li>\n<li><strong>勇敢，注定是要付出代价的。</strong></li>\n<li>权力的膨胀就意味着加速地灭亡。</li>\n<li>骄狂的开始，就意味着胜利的终结。</li>\n<li>无论何时何地，在最终胜负呈现之前，绝不能押上所有的筹码。</li>\n<li><strong>可是人生最痛苦的地方就在于，明明已经无法忍受，却还要忍受下去。</strong></li>\n<li>不经历黑暗的人，是无法懂得光明的。</li>\n<li>所谓事可以做绝，话不能说绝。</li>\n<li>即使卑躬屈膝，即使刻意逢迎，也绝不接受失败，绝不轻言放弃。</li>\n<li>不知死而死，是为无知，知死而死，是为无畏。</li>\n<li>只有经历过磨难的人，才能够走得更远。</li>\n<li>在封建时代，就做封建时代的事，说封建时代的话，别指望人家有多高的觉悟。</li>\n<li>同行共济 —— 同床异梦 —— 同室操戈 —— 同归于尽</li>\n<li>我并不愤怒，恰恰相反，我理解他们，在生存的压力和生命的尊严之间，他们选择了前者，仅此而已，虽不合法，却很合理。</li>\n<li>良知和理想是不会消失的，不因富贵而逝去，不因权势而凋亡。</li>\n<li>互相限制，互相制约固然是一种民主的方式，但是民主是需要成本的。</li>\n<li>所有的英雄，都是平凡的人。</li>\n<li><strong>人生很漫长，但关键处只有几步。</strong></li>\n<li>人民，只有人民，能公正地评价一个人。</li>\n<li>要让对方绝望，必先给他希望。</li>\n<li>最好的攻击点，不是最弱的位置，而是对方想象不到的位置。</li>\n<li>国民党之所以战败，是因为都想吃肉；而共产党的军队之所以战胜，是因为有人愿意啃骨头。</li>\n<li>用黑暗的暴力维护了光明的正义。</li>\n<li><strong>主战者未必勇，主和主未必怯。</strong></li>\n<li>犯上是一定的，直言是不一定的。因为在那些直言背后，往往隐藏着不可告人的目的。</li>\n<li><strong>批评总是容易的，做事总是不容易的。</strong></li>\n<li>决定政治动向的最终标准是利益，以及利益的平衡。</li>\n<li>征服的荣光背后，是无数者的悲鸣和哀嚎。</li>\n<li>在这个世界上，最优秀的老师，是生存。</li>\n<li><strong>正义和道德不能当饭吃，不能当衣服穿，更不可能掌控政权，因为掌控政权的唯一方式，就是斗争。</strong></li>\n<li>道德文章固然有趣，却是无法解决问题的。</li>\n<li>历史很无趣，因为在绝大多数情况下，历史没有正恶，只有成败。</li>\n<li>战场之上，求生者死，求死者生。</li>\n<li>政治的最高技巧，不是你死我活，而是妥协。</li>\n<li>不要以为渺小的，就没有力量，不要以为卑微的，就没有尊严。</li>\n<li>弱者和强者唯一的差异，只在信念是否坚定。</li>\n<li>所有的生命，都是平等的，任何人都没有无故剥夺的权力。</li>\n<li><strong>懂得暴力的人，是强大的，懂得克制暴力的人，才是真正强大的。</strong></li>\n<li><strong>很多时候，愤怒者往往是弱者。</strong></li>\n<li>无耻的人读过书后，往往会变得更无耻。</li>\n<li>时代进步了，社会文明了，道理还一样。</li>\n<li>什么样的屠夫，最终也只是懦夫。</li>\n<li>张牙舞爪的人，往往是脆弱的，因为真正强大的人，是自信的，自信就会温和，温和就会坚定。</li>\n<li>几具有名的尸体躺在无数具尸体上，所谓霸业，如此而已。</li>\n<li>有人这样告诉我们，是因为他们希望我们这样认为。</li>\n<li>在百花缭乱的历史评论背后，还是只有两字 —— 利益。</li>\n<li><strong>在这世上，只要是人，都复杂，不复杂的，都不是人。</strong></li>\n<li>事实上，无论叛徒，或是英雄，他都从未变过，变的，只是我们。</li>\n<li>成大器者的唯一要诀，是能吃亏。</li>\n<li>可做可不做的好事，最好做，可做可不做的坏事，最好不做。</li>\n<li><strong>成功只有一个 —— 按照自己的方式，去度过人生。</strong></li>\n<li>可信的人，未必可靠。</li>\n<li><strong>无论这个世界多么混乱，坚持自己的信念。</strong></li>\n<li>不妥协，坚持虽然不现实，很没好处，却是正确的。</li>\n<li><strong>其实很多时候，群众是好说话的，因为他们所需要的并非特权，而是公平。</strong></li>\n</ol>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4-[%E7%BE%8E]%E6%91%A9%E5%B0%94-95/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4-[%E7%BE%8E]%E6%91%A9%E5%B0%94-95/",
            "title": "批判性思维-[美]摩尔-95",
            "date_published": "2023-10-12T10:49:32.993Z",
            "content_html": "<h1 id=\"摘抄\"><a class=\"markdownIt-Anchor\" href=\"#摘抄\">#</a> 摘抄</h1>\n<ol>\n<li><strong>人们往往会忽视重要的因素，会无视和我们所持的观点相抵触的思想。</strong></li>\n<li>得出结论的时候也就是形成信念的时候。</li>\n<li>客观断言的特征是：它的真或假不依赖于思考者认为它是真的还是假的。</li>\n<li>可以支持结论的前提是必须是真的。</li>\n<li>可以支持结论的前提必须是和结论相关的，而且必须是和结论的 “真” 相关的。</li>\n<li><strong>“没有人会喜欢 X 的！” 比 “大家都喜欢 Y” 更加能让人们支持 Y。是消极偏见 —— 人们相信消极信息多于积极信息的倾向。</strong></li>\n<li>人们往往更愿意避免损失而不是积累收入，即损失规避。</li>\n<li><strong>人与人之间并不需要多少共同点就能构建出一个组群的身份和归属感。</strong></li>\n<li><strong>不幸的是，证据显示就算人们已经了解到高于平均水平错觉的存在，他们仍旧认为自己比大多数人更能够不被这种错觉影响。</strong></li>\n<li>对于任何人，无论何时何地，在缺乏充分证据的时候贸然相信都是不明智的。</li>\n<li>演绎论证之可靠与否，丝毫不决定于人们是否真的被他说服了。</li>\n<li><strong>人类常常对有理有据的观点表示中立而对最差的论证引起共鸣。</strong></li>\n<li>直到试图追求精确的时候，你才会发现所有的事情都在一定程度上是模糊的。</li>\n<li>整体的特征未必为构成整体的各独立部分所具有。</li>\n<li>评估可信度要从两个不同层面着手：第一是断言本身，第二是断言的来源。</li>\n<li>要在相信利益相关方之前相信利益无关方。</li>\n<li>衡量专家资质的最可靠的声誉是在所从事的领域里其他专家心目中的声誉。</li>\n<li>从某个来源发布的信息的质量不会优于该来源本身。</li>\n<li><strong>广告是尽力抑制人类智力从中牟利的科学。</strong></li>\n<li>修辞力可能影响人的心理，但它本身并不能确认什么。</li>\n<li>在影响人的态度方面，委婉语起着重要作用。</li>\n<li>运用暗示的手法使我们不必实际指明就可以委婉曲折地表达对人，对事的反对意见。</li>\n<li>仅仅取笑别人的立场并不等于提出对该立场的反对意见。</li>\n<li>夸张可以使一个不该有那么强说服力的判断更具说服力。</li>\n<li>要警惕用百分比变化来表达的比较。</li>\n<li>人们有时也会用 “显而易见” 引出一个绝非显而易见的判断。</li>\n<li>替代证明知识替代品，它们并不是真正的证明或证据。</li>\n<li><strong>宣传的本质就是要简要并不断重复。</strong></li>\n<li>信念源于证据和论证。</li>\n<li>要意识到虽然多数人打算善意地告诉你它的确相信的，但想愚弄你的也大有人在。</li>\n<li><strong>我们越来越难以发现在重大问题上的严肃讨论，而煽动情绪，促成条件反射的修辞技巧则越来越充斥于言谈。</strong></li>\n<li><strong>但愤怒只是一种情绪，并不是任何其他事件的证据。</strong></li>\n<li>由一件事所引起的愤怒可能会影响我们对另一无关事物的评价。</li>\n<li>当愤怒或恐惧的时候，人们就不会清晰地思考了。他们会陷入盲从。</li>\n<li>一厢情愿的思维具有强大的影响力，有时候它能让我们不再努力去理性行事。</li>\n<li><strong>大多数人相信某件事是事实，但并不能成为它就是事实的证据。</strong></li>\n<li>人们乐于接受别人都接受的观点，而不是停下来思考是否的确有理由支持该观点。</li>\n<li>错误的行为之间并不会相互抵消从而使其中一种错误消失。</li>\n<li>我们不能把提出某断言的主体的特征与该断言本身的特征混为一谈。</li>\n<li><strong>在还有其他选项时，却局限于两种极端的选择，就犯了虚假的两难境地的谬误。</strong></li>\n<li>划界谬误指，在事实上并未必要精确划线的场合，坚持认为要爱某个精确的点上画这样一条线。</li>\n<li><strong>滑坡论证相当有影响力，因为在心理上，一件事确实常常会引起另一件事，即使在逻辑上并非如此。</strong></li>\n<li>不恰当地将举证责任分配给争论的某一方，就是错置举证责任。</li>\n<li>乞题：把正在争论中的假定为真，貌似给出论证。</li>\n<li>民意调查不可靠的一个主要来源就是对问题的提法。</li>\n<li><strong>用泛泛的名称来描述各具特色的个体，所起的作用除了表明态度之外，并没有提供任何实质信息。</strong></li>\n<li>适当的解释不能是过于复杂的、不一致的、与已知理论和事实不相容的以及不可检验的。</li>\n<li>错误的根源在于没有排除巧合、潜在原因、混淆因果等。</li>\n<li>一致性原则：同样的个案必须同等对待，同等对待的个案必须情况相同。</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>这是批判性思维课老师推荐的书，在书架上放了 3 年，终于把这本书看完了。感觉到有点可惜，应该早点看这本书的。里面说的很多道理在我吃了很多思维上的亏才领悟过来，早点看这本书也许就少去很多迷茫的时间，少做错误的决定了。我常对自己的想法有中迷之信任，按照批判性思维的方式来审视自己的想法，其实存在着很多有问题的地方。就我个人而言，我最常犯的错误应该是无视与自己观点相抵触的事实，常常会先得到结论，后寻找论据，习惯性无视一些不能理解的事实。而且经过最近的诺佩西访台时间，我对自己的思维的复盘，发现在这件事上犯了很多书中的错误。起初我并没怎么关注这件事，因为我认为这件事并不能改变台海局势，只能恶心中国，然后随着内宣和知乎上人们的群情激奋，貌似收复台湾成为了一个可选项。</p>\n<p>而事实是佩洛西成功访台，一群人，包括我在内都被破防了。那天晚上我很难受，睡都睡不好，但当我经过一个晚上的冷静，思考了一个问题，我为什么会相信会收复台湾？支撑我的理由有内宣和知友们群情激奋的回答，还有其他理由吗？我问自己，好像没有了，我开始意识到我怎么这么轻易就相信了一个观点并为其产生了情感的波动。<strong>大多数人相信某件事是事实，但并不能成为它就是事实的证据。<strong>而且有大量有理有据的回答是讲述其他方案的，论证现在不太可能收复台湾。但我却没有相信有理有据的回答，而是相信那些诉诸情感的回答。令我难受的是我们越来越难以发现在重大问题上的严肃讨论，而煽动情绪，促成条件反射的修辞技巧则越来越充斥于言谈。令我更难受的是，我居然没有识别出其中的问题，而任由情绪控制我的思维。仔细想想，他们的回答中充满着逻辑漏洞，例如</strong>虚假的两难境地</strong>：要不收复台湾，要不屈服于美国的压力。但正如中国后续的动作，证明现实不只这两种选项，还有很多处理方案。还有<strong>滑坡谬误</strong>：只要在诺佩西访台上让步后，然后就会一直向美国让步。事实并非如此，只是双方互相切香肠罢了。还有其他错误，其实只要认真思考，不难发现其中的逻辑漏洞，我只是一厢情愿的相信我们能收复台湾，因为这个是我们新中国建立后的一块心病，可能是这种朴素的情感让我去相信。这也提醒我自己的理性的有限，对应重大问题，应该思考更多。</p>\n<p>批判性思维对我们的思考和日常生活有着巨大的帮助，可以帮助我们分辨现实生活中各种是似而非的观点。尤其是这个信息大爆炸的时代，如何分辨有价值的信息变得尤为重要。要意识到虽然多数人打算善意地告诉你它的确相信的，但想愚弄你的也大有人在。还是有很多不怀好意的人打算利用这个来割韭菜的。本书唯一令我不太喜欢的是演绎推理的部分，因为有点绕，而且这种真值推理激起了我离散数学的 PTSD，其他部分的可读性都很强，不用担心有什么阅读门槛。</p>\n",
            "tags": [
                "心理学"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%BE%B7%E5%9B%BD%E4%BA%BA%E7%9A%84%E6%88%98%E4%BA%89_[%E8%8B%B1]%E5%B0%BC%E5%8F%A4%E6%8B%89%E6%96%AF.%E6%96%AF%E5%9B%BE%E5%8A%A0%E7%89%B9_75/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%BE%B7%E5%9B%BD%E4%BA%BA%E7%9A%84%E6%88%98%E4%BA%89_[%E8%8B%B1]%E5%B0%BC%E5%8F%A4%E6%8B%89%E6%96%AF.%E6%96%AF%E5%9B%BE%E5%8A%A0%E7%89%B9_75/",
            "title": "德国人的战争_[英]尼古拉斯.斯图加特_75",
            "date_published": "2023-10-12T10:49:32.992Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>人们互相打招呼时想必会像一战时期那样，更爱用 “上帝惩罚英国” 这个口号，并非 “希特勒万岁” 这个官方词语。</li>\n<li>强权就是公理，必须采取最严厉的手段。</li>\n<li>看来这是想追随俄罗斯人，想灭绝（波兰）的知识阶层。</li>\n<li>纳粹政权知道，让德国人吃饱，并且一碗水端平，是军事胜利和政治延续的关键。</li>\n<li><strong>不管播出什么节目，都不要太沉闷，别把自己期许的态度随随便便表达出来，不要觉得每天夜里播放雷鸣般的军队进行曲最符合民族政府的要求。</strong></li>\n<li>如果这是神的旨意，那么因善而受苦，总强于因行恶而受苦。</li>\n<li>占领巴黎后不久，又一部从斯图卡轰炸机座舱的角度拍摄的敦刻尔克战役的新闻影片震撼了观众。</li>\n<li>德国人流传的段子说：“他们也撒谎，我们也撒谎。”</li>\n<li>但镜头拍完后，他们直奔妓院，轰开大门。</li>\n<li><strong>这些地方的学校还不得正确讲述德语语法，以防 “波兰人把自己伪装成德国人。”</strong></li>\n<li>在此后的战争期间，纳粹党和 SS 激进分子没敢主动再和教会公开较量。</li>\n<li><strong>为了认识一切，面对一切，你不得不见识一切。</strong></li>\n<li>德国炮兵开始开玩笑，称他们通过削减平民人口，正在 “养活这座城市”。</li>\n<li>很多红军战俘不得不用军帽当作饭盒，领大约半份稀汤。</li>\n<li>我日益强烈感受到人类的低劣和罪恶，它们根植在每个人的内心。</li>\n<li>个体由于担心受到孤立和处罚，当感觉自己是少数派，潜在成员在减少时，倾向于保持沉默，同时，“多数派” 的观点由媒体报道出来后，其道德地位得到增强和巩固。</li>\n<li>这样就营造出一种 “不知而知” 的感觉，人们不需要公开承诺，不用表态肯定，不会有道德责任感。</li>\n<li>德国人早在 1942 年 12 月就开始用俘虏干支援性工作，甚至一些战斗单位也使用了俘虏。</li>\n<li>德国占领期间，仅在 1943 年就修缮和开放了 150 座清真寺和 100 座临时祈祷寺。</li>\n<li>德军成了种族和宗教混合的多语言军队。</li>\n<li>与阵亡战友之间的情谊是他们继续战斗的另一个原因。</li>\n<li><strong>“他们死去，德国才能生存。”</strong></li>\n<li>戈培尔和戈林精心炮制的 “英雄史诗” 引发了一场无与伦比的公关灾难。</li>\n<li>自从战争开始后，我们的宣传走了如下的错误道路：战争第一年：我们已经获胜。战争第二年：我们将会获胜。战争第三年：我们必定获胜。战争第四年：我们不会战败。</li>\n<li>政治宣传和大众娱乐越来越两极分化，前者因为戈培尔强调失败的危险而变得日益艰难暗淡，后者却更为轻佻无聊。</li>\n<li>“和平，一种不适合人类的生存方式，1939 年被废除。”</li>\n<li>德国人只是想从空袭的痛苦中解脱出来；乐观者想加倍报复英国，使他们的影响力进一步受到削弱。</li>\n<li>大主教和路德教都认为空袭的苦难不是由敌人造成的，而是不敬畏神的唯物主义和傲慢的世俗主义导致的。</li>\n<li>战略轰炸的最大作用总是产生在心理上和政治上；“它” 使失败主义进一步扩展，并使纳粹政权面临崩溃。</li>\n<li>相反，疏散经历尤其会在德国社会中制造新的冲突。</li>\n<li>他们为了承受沉重的压力，在文化遗产中翻箱倒柜。</li>\n<li>在大后方，帝国保安总局担心的不再是社会革命，而是性骚动。</li>\n<li>在很多人看来，问题只是在英美或苏联两方中，看谁先侵入德国。</li>\n<li>暴力活动之所以出现上升，原因是他们的无助感和恐惧感越来越强。</li>\n<li>“美国人和俄罗斯人碰在一起后，他们会打起来吗？”</li>\n<li>一些妇女为了防止受到强奸，把水管里的铜栓拆下来塞进阴道。非礼者如果强行与她们发生性关系，阴茎会被铜栓割伤。</li>\n<li>这既不是长久以来期望的和平，也不是可怕的毁灭。</li>\n<li>“时间过得好快，起先他们都是纳粹分子，现在突然成为了共产党员。”</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>我要在波兰人的腿上写一个 “惨” 字，波兰人实在太惨了。先被苏联搞了个卡廷惨案，然后被德国人屠杀，还专门杀知识阶层和不让孩子学习，这是想要完全毁掉波兰人的节奏。相比而言，以色列的犹太人可谓是会宣传，明明自己的损失在当时的二战中并不算最惨，而楞是给他塑造出最大的牺牲者的样子出来。说到牺牲，有谁比得过苏联和中国，谈到民族受到的伤害，波兰和乌克兰被杀，被活活饿死的人不计其数。反倒是这些抗战中不出力，抗战结束后却舔着个脸出来说自己是被迫害最深的。真的让我深深的感受到，有话语权真的是太好了。传媒的影响力被我大大的低估了。而且没想到德国的宣传工作做得这么到位，战机实战拍摄影片是我没有想到的，还有各种各样的宣传工作，例如大力发展军人和家人的书信往来等，这也使我知道德国能坚持这么久不是没有理由的。还有没有想到当时的反共思潮这么强烈，居然还会觉得英美会和德国一起反共，这也太异想天开了吧。还有没想到的是教会的权力之大，不得不说，教会还是做了不少好事的，尽管后期向纳粹妥协了，但是还是延缓了纳粹对于弱势群体的屠杀。最后想说一下的是这本书太啰嗦了，又长又臭，而且还写的很平淡，味同嚼蜡，真的是被封面给骗了。</p>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%B0%98%E5%9F%83%E8%90%BD%E5%AE%9A_%E9%98%BF%E6%9D%A5_88/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%B0%98%E5%9F%83%E8%90%BD%E5%AE%9A_%E9%98%BF%E6%9D%A5_88/",
            "title": "尘埃落定_阿来_88",
            "date_published": "2023-10-12T10:49:32.990Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>是的，上天叫我看见，叫我听见，叫我置身其中，又叫我超然物外。</strong></li>\n<li>我看到这张脸，被仇恨，被胆怯，被严寒所折磨，变得比月亮还苍白，比伤口还敏感。</li>\n<li>住口吧，人只能毁在自己手里。</li>\n<li>同得到了东西的悲伤相比，得不到时的悲伤根本算不上是悲伤。</li>\n<li>宽广的空间给人时间也无边无际的感觉。</li>\n<li>夜越来越深，星光就在头顶闪耀，下面，凡尘里的人们在苦中作乐。</li>\n<li>人们吐出的口水是那么丰富，许多的苍蝇被淹死在正慢慢肿胀的死人脸上。</li>\n<li>百姓们有时确实想说些什么，但这些人一直要等到死了，才会讲点什么。</li>\n<li>那个很深很黑暗的地方，给一束光照耀了一下，等我想仔细看看里面的情景时，那光就熄灭了。</li>\n<li>在薄薄的月光下，淡淡的花香里，我笑了。</li>\n<li>那些想要说些什么的舌头已经烂掉了。</li>\n<li><strong>总而言之，我们那个时代订下的规矩是叫人向下的而不是叫人向上的。</strong></li>\n<li><strong>要使自由人不断变成奴隶那也十分简单，只要针对人类容易犯下的错误订立一些规矩就可以了。</strong></li>\n</ol>\n<h1 id=\"读后感\"><a class=\"markdownIt-Anchor\" href=\"#读后感\">#</a> 读后感</h1>\n<p>本书以傻子少爷为男主，他虽然是一个公认的傻子，也是被认为是彻底失去了竞争土司之位的资格，但是他却常常作出一些反常但是在事后又被证明是正确的事情，例如在边境开集市，停止种罂粟而种植大小麦，这样的行为为本书增添不少的神秘性。也使得原本确定的土司之位忽然变得扑朔迷离了。权利使得原本亲密的两兄弟之间的关系，父子关系产生了微妙的变化，在哥哥上了 “我” 的妻子和父亲装病时，矛盾达到了高潮。直至哥哥被复仇的杀手杀死，这段插曲才告一段落。可是土司们美好的日子再也过不下去了，国共内战结束，土司们的灭亡就只是时间的问题了。最终，土司们投降的投降，死亡的死亡，一切都尘埃落定，只留下空荡荡的人间。</p>\n<p>这本书最优秀的地方在于刻画了一群个性鲜明的角色，例如被割掉舌头的传教士，冷酷的行刑人，好色又好战的哥哥，美艳的妻子，还有那些神秘的西藏风俗和优美的自然风光，这些都使得本书在原有的基础上增色不少。而在其中最令人着迷的是那些汹涌到极致的生命力，女人身上散发着那种草原，牛奶和野性的气味使得 “我” 这个傻子流连忘返，“我” 也在女人的怀里逐渐成熟。而在 “我” 这个傻子少爷的快乐生活之下，是百姓们的痛苦，到底是什么样压迫和驯化，才使得这群人在饿死的边缘仍不敢去拿粮仓里的小麦，只敢在外面苦苦的等候。努力的劳作只换来愈加低下的地位。</p>\n<p>也许时代的大潮并不会因少数人的反抗而变更，土司忙着去争地盘，抢粮食，抢一切有价值的东西，可是这个时代已不属于他们了，他们注定要成为旧社会的产物，被像垃圾一样扫进时代的垃圾桶里了。这使得小说平添了一种无力感，作为时代中的一份子，又怎能对抗这汹涌的大潮呢？</p>\n",
            "tags": [
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%9C%A8%E8%B7%AF%E4%B8%8A_[%E7%BE%8E]%E6%9D%B0%E5%85%8B.%E5%87%AF%E9%B2%81%E6%8B%89%E5%85%8B_88/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%9C%A8%E8%B7%AF%E4%B8%8A_[%E7%BE%8E]%E6%9D%B0%E5%85%8B.%E5%87%AF%E9%B2%81%E6%8B%89%E5%85%8B_88/",
            "title": "在路上_[美]杰克.凯鲁拉克_88",
            "date_published": "2023-10-12T10:49:32.988Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>在这条路上走下去，我知道会有女人，会有幻象，会有一切，在这条路上走下去，明珠会交到我手中。</li>\n<li>我并不惊恐，之觉得自己仿佛是另一个人，一个陌生人，我一生困顿，过着幽灵般的生活。</li>\n<li>我花了无数雨天时光，一面喝咖啡，一面涂涂画画。</li>\n<li><strong>这就是美国的现实，每个人都干着自己认为是应该干的事情。</strong></li>\n<li>老手是教不会唱新调的。</li>\n<li>天哪，我离家三千英里，来这里干吗呀？我为什么来这里？</li>\n<li>我原谅了所有的人，我放弃了一切，我喝醉了。</li>\n<li>此后的一个星期里，我听到的总是它 —— 明天，一个可爱的词，这个词也许意味着天堂。</li>\n<li>我们终究要找个地方安顿下来，找点事情做做。</li>\n<li>除了我自己的混乱以外，我没有什么可以提供给任何人的东西。</li>\n<li><strong>有时我们整夜躺在床上，我把我的梦想讲给她听。</strong></li>\n<li>我领悟到正因为心灵的坚定，这些生与死的涟漪才想微风拂过平静如镜的水面。</li>\n<li>黄昏时，我信步走去。觉得自己像是这个凄凉的红色地表上的一个斑点。</li>\n<li>他属于世界，却对世界无能为力。</li>\n<li>Holy Goof</li>\n<li>他独自一人在门口，注视街上。苦涩，反责，劝告，道德，悲哀 —— 一切都已抛到脑后，他前面是单纯的生存的狂喜。</li>\n<li><strong>我们还有更长的路要走。不过没有关系，道路就是生活。</strong></li>\n<li>他们找到了，他们失去了，他们拼命寻找，他们也找到了，他们欢笑，他们呻唤。</li>\n<li>这一切都在即没有结束，也没有开始的空虚之中。可悲的无知的形式。</li>\n</ol>\n<h1 id=\"读后感\"><a class=\"markdownIt-Anchor\" href=\"#读后感\">#</a> 读后感</h1>\n<p>有时我并不明白为什么他们总是在路上或者在准备出发的路上，他们是在逃避什么吗？逃避生活中的琐碎，去寻找一些不一样的刺激，但是生活并不会这样就放过他们，永远有一堆琐碎在前方等待着他们。他们可能也知道这一点，也知道路上并没有他们想要的快乐，但是他们还是一次次的踏上旅途，因为他们 需要这样来缓解他妈的渴望。我认为他们是因为想象和现实不符，而自己又无力改变的幻灭感，又因为世俗眼光的压迫，他们就愈发的想要逃离，这样，他们便一次又一次的踏上旅途。也许他们生来就是为了在路上的，他们不愿停留在原地，永远有一个随时可以带走的行李箱，永远可以毫不留恋的离开生活已久的地方，抛弃自己的妻女，永远在路上。</p>\n<p>放纵并不能带来快乐。迪安一生放纵只得个众人嫌弃的结局。是啊，真的有快乐而不用承担责任的好事吗？年少的放纵往往意味着晚年的凄凉。当迪安回想往事，是否会有一丝悔恨，会不会想要对那些他伤害过的人说声对不起。<br>\n最令我可惜的是萨尔和那位墨西哥少妇的相遇，他们本应好好的生活在一起，可是萨尔永远都停不下来，偏要周游世界，将她抛弃在原地，独自离开。</p>\n",
            "tags": [
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A_%E4%BD%99%E5%8D%8E_95/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A_%E4%BD%99%E5%8D%8E_95/",
            "title": "在细雨中呼喊_余华_95",
            "date_published": "2023-10-12T10:49:32.986Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>记忆超越了尘世的恩怨之后，独自来到了。</li>\n<li>王跃进：“你们看，她多下流。”，冯玉青父亲：“我女儿都让你睡过啦。”，冯玉青不再关心正在进行着的婚礼，她开始为自己的命运迷惑不解。</li>\n<li><strong>我们并不是生活在土地上，事实上我们生活在时间里。</strong></li>\n<li><strong>时间将我们推移向前或向后，并且改变着我们的模样。</strong></li>\n<li>他一旦脱离时间便固定下来，我们则在时间的推移下继续前行。</li>\n<li>生者将死者埋葬以后，死者便永远躺在那里。</li>\n<li>活着的人是无法看清太阳的，只有临死之人的眼睛才能穿越光芒看清太阳。</li>\n<li>母亲忍受了长时间的屈辱之后，终于爆发，所得到的依旧是屈辱。</li>\n<li>我看到了哥哥的眼睛里流露出来的空虚与悲哀。孙光平触景生情地想到了自己命运的最后那部分。</li>\n<li>浑浊的眼睛使我父亲的脸想一只蝴蝶一样花里胡哨，青黄的鼻涕挂在嘴层，不停的抖动。</li>\n<li><strong>我不再装模作样的拥有很多朋友，而是回到孤单之中，以真正的我开始独自的生活。</strong></li>\n<li><strong>有时我也会因为寂寞而难以忍受空虚的折磨，但我宁愿以这样的方式来维护自己的自尊，也不愿以耻辱为代价去换取那种表面的朋友。</strong></li>\n<li>我那时候的年龄，已经无法让所有的一切都按照被认为正确的准则行事，内心的欲望开始静悄悄地主持了我一部分言行。</li>\n<li><strong>黑夜的宁静总是给予我宽容和安慰。</strong></li>\n<li>我的生命在白昼和黑夜展开了两个部分。</li>\n<li>她的声音向我展示了她正陶醉于滔滔不绝之中。</li>\n<li><strong>正是那一刻，生活第一次向我展示了和想象完全不一样的容貌。</strong></li>\n<li>当我们恶狠狠地对待这个世界时，这个世界突然变得温文尔雅了。</li>\n<li>那时候我已离开家乡，命运终于向我流露出令我感激的微笑。</li>\n<li>祖父：“老天爷，你下屌吧，操死我吧。”</li>\n<li>生命在面对消亡时，展现了对往昔的无限依恋。</li>\n<li>我忽然明白了逃跑的意义，它使惩罚变得遥远，同时又延伸了快乐。</li>\n<li>我们争论的是科学，他却给了我们政治的回答。</li>\n<li>我用恶的方式，得到的却是一种美好。</li>\n<li>除了生命本身，我再也找不出活下去的理由了。</li>\n<li>先是一种空荡荡的感觉，里面如同深夜的胡同一样寂寞，有着风吹来吹去似的虚无。</li>\n<li>我看到翻滚的乌云和通红的晚霞正逐渐融为一体，一轮红日已经贴在远处的地平线上，开始了它光芒四射的下沉。</li>\n</ol>\n<h1 id=\"读后感\"><a class=\"markdownIt-Anchor\" href=\"#读后感\">#</a> 读后感</h1>\n<blockquote>\n<p>余华：“时间将我推移向前或向后，并且改变着我们的模样。”</p>\n</blockquote>\n<p>本书的顺序是打乱的，以主角孙光林一人为视角，讲述了两个家庭的故事，淘气的弟弟孙光明救人被淹死，哥哥孙光平和父亲孙广才却想利用这个机会进北京，这个注定失败的计划让爷俩恼羞成怒，导致进了监狱；出狱的父亲扬言报复，却走进了寡妇的家中。好强的哥哥逐渐褪去了自己的光芒，慢慢地明白了自己的无能和家庭的破败，唯一的希望 —— 一个好女孩愿意和他在一起 —— 也被父亲破坏了。可恨的父亲还强暴了他的妻子，天天讲家中的东西送给寡妇。他终于忍无可忍了，挥刀讲父亲的耳朵割掉。最终进了监狱两年。好色的苏杭试图强暴一名七十岁的老奶奶；坚强的王立强出轨身败名裂，用一颗手榴弹炸死了告密者，用另一颗毁掉了自己。冯玉清褪去自己的美丽，变成了一个妓女，却有一个好儿子不离不弃。勇敢的国庆失去了自己的父亲，却不放弃，自己生活，却因为过度的早熟而导致了一系列的悲剧。聪明的苏宇指导了我的成长，却还是逃不掉别人的无端指责。最后是大流氓 —— 孙广才，这个亲手毁掉自己儿子未来的人。</p>\n<p>时间真是一个奇妙的东西，它把人们变得面目全非。在那个混乱年代，人们也许也只能以这种方式，被别人随手毁掉自己的未来，最后不得不面对自己的破碎人生。也许下一代总会嫌弃自己的上一代，上一代人培养下一代人去反抗他们，这有点 2 西方神话中的 “弑父情结”。孙广才是个不折不扣的坏蛋，他给这个家庭带来的只有屈辱，贫穷和暴力，他亲手毁掉了自己儿子的未来。希望下一代不要再犯下上一代的错误了。</p>\n",
            "tags": [
                "书籍",
                "阅读",
                "余华"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%90%8D%E4%BA%BA%E5%90%8D%E8%A8%80%E6%91%98%E6%8A%84/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%90%8D%E4%BA%BA%E5%90%8D%E8%A8%80%E6%91%98%E6%8A%84/",
            "title": "名人名言摘抄",
            "date_published": "2023-10-12T10:49:32.984Z",
            "content_html": "<ol>\n<li>《韩非子》：不为最先，不耻最后。</li>\n<li>《圣经》：你们不要论断人，免得你们被别人论断。</li>\n<li>司马迁：然此可为智者道，难为俗人言。</li>\n<li><strong>汤园林：一个人狭隘起来多么可怕，不相信任何美好的事，也就不会有任何希望，想冬天的草，只能慢慢枯萎。</strong></li>\n<li><strong>马丁。路德。金：我们这一代人终将感到悔恨，不仅因为坏人可憎的言行，更因为好人可怕的沉默。</strong></li>\n<li><strong>马丁。路德。金：我们看到真相却一言不发之时，便是我们走向死亡之日。</strong></li>\n<li>谚语：没有一滴雨会认为自己引起了洪灾。</li>\n<li>王勃：关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。</li>\n<li>王维：寒山远火，明灭林外，深苍寒犬，吠声如豹。</li>\n<li>李白：夫天地者，万物之逆旅也；光阴者，百代之过客也。</li>\n<li><strong>保罗：但当你排斥差异时候，你不仅将失败的可能性排除在外，也将获得高利润的可能性排除在外。</strong></li>\n<li>保罗：最令人暴跳如雷的话语，就是被认为说出了真相的言论。</li>\n<li><strong>保罗：他们接受流行，不是因为想要与众不同，而是害怕与众不同。</strong></li>\n<li>保罗：如果你想要清晰地思考，就必须远离人群。</li>\n<li>保罗：如果你遇到两个选择，就选择较难的一个。</li>\n<li><strong>保罗：人们注意到你的时候，不是第一眼看到你站在那里，而是发现过了这么久你还在那里。</strong></li>\n<li>陆游：胡未灭，鬓先秋，泪空流。此生难料，心在天山，身老沧州。</li>\n<li>杜牧：秦人不暇自哀，而后人哀之，后人哀之而不鉴之，亦使后人而复哀后人也。</li>\n<li>李白：仰天大笑出门去，我辈岂是蓬蒿人。</li>\n<li><strong>托马斯。曼：一个充实而有趣的时间内容能使一小时，甚至一天的光阴飞逝而去。可是它却赋予了时间进程以重量，宽容和坚实性。</strong></li>\n<li>托马斯。曼：他们为你端来午餐的肉汤，就像昨天也端过来一样，明天亦是如此；这种感觉向你袭来，可是你却无从得知它是什么时候来的，看到这些肉汤被人端上来，你不禁感到头晕目眩。</li>\n<li>VS. 奈保尔：你会发现你一旦得到自以为喜欢的东西，你就不会再珍惜它们了。</li>\n<li>《菜根谭》：冷眼观人，冷耳听雨，冷情当感，冷心思理。</li>\n<li>《菜根谭》：宁受一时之寂寞，毋取万古之凄凉。</li>\n<li><strong>张载：为天地立心，为生民立命，为往圣继绝学，为万世开太平。</strong></li>\n<li>欧。亨利：任凭人们怎样喧闹，喊骂，这座大城市始终是沉默，冷酷和宏大的。</li>\n<li>马克。李维：预知深爱的人的未来，其实并不一定快乐。</li>\n<li>胡塞尼：我暗下决心，在夏天结束之前一定要跟她搭讪，但学校开学了，叶子变红，变黄，掉落，冬天的雨水纷纷洒洒，折磨爸爸的手腕，树叶上吐出新芽，而我依旧没有勇气，没有胆量，甚至不敢直望她的眼睛。</li>\n<li>韩松落：我们似乎总会在某一年爆发性的长大，爆发性地知道某个真相，让原本没有什么重要意义的时间刻度，成了一道分界线。</li>\n<li><strong>加缪：不要走到我的后面，因为我可能不会引路；不要走到我的前面，因为我可能不会跟随；请走在我的身边，做我的朋友。</strong></li>\n<li>村上春树：不管用什么语言，我们的人生总会有解释起来太困难的事。</li>\n<li>王安石：天命不足畏，祖宗不足法，人言不足恤。</li>\n<li>卡尔维诺：但现在我却在白天的，无所不在的，几乎看不到阴影的光亮之中看到了比黑夜更加黑暗的黑暗。</li>\n<li>徐天新：靠生理学的自然规律来改变国家的命运，是苏联社会主义制度的悲哀。</li>\n<li><strong>顾城：花开如火，也如寂寞。</strong></li>\n<li>卡尔维诺：过去的一切生活都要连接成一个整体的生活，连接成我现在在这里的生活。</li>\n<li>林则徐：苟利国家生死以，岂因祸福避趋之。</li>\n<li>岳飞：壮志饥餐胡虏肉，笑谈渴饮匈奴血。</li>\n<li>岳飞：靖康耻，犹未雪，臣子恨，何时灭。</li>\n<li>文天祥：以身徇道不苟生，道在光明照千古。</li>\n<li>顾炎武：松柏后凋于岁寒，鸡鸣不已于风雨，保天下者，匹夫之贱与有责焉耳矣。</li>\n<li><strong>泰戈尔：当我们真正热爱这世界时，我们才真正生活在世上。</strong></li>\n<li>泰戈尔：生命是不断的创造，因为在它内部蕴含着过剩的精力，它不断流溢，越出时间和空间的界限。它不断地追求，以形形色色的自我形式表现出来。</li>\n<li>萧伯纳：人生不是一支短短的蜡烛，而是一支暂时由我们拿着的火炬。我们一定要把它燃得十分光明灿烂，然后交给下一代的人们。</li>\n<li>汪国真：我不去想未来是平坦还是泥泞，只要热爱生活，一切，尽在意料之中。</li>\n<li>雨果：人间如果没有爱，太阳也会灭。</li>\n<li>孟子：君子莫大于与人为善。</li>\n<li>海明威：我期望理解，但是也，慢慢地感受到一种责任，给予比接受伟大，去爱比被爱伟大。</li>\n<li>塞缪尔。厄尔曼：岁月悠悠，衰微只及肌肤，热忱抛却，颓废必致灵魂。</li>\n<li>艾丽丝门罗：灵魂里的一滴仇恨，会扩散开来毁掉所有的色彩，就像白牛奶里的一滴黑墨水。</li>\n<li><strong>叔本华：普通的人只想到如何度过时间，有才能的人设法利用时间。</strong></li>\n<li>魏源：志士惜年，贤人惜日，圣人惜时。</li>\n<li>范蠡：得时无怠，时不再来。</li>\n<li>高尔基：在生活里，我们命中碰到的一切美好的东西，都是以秒计算的。</li>\n<li><strong>伏尔泰：最长的莫过于时间，因为它永远无穷无尽，最短的也莫过于时间，因为我们的所有计划都来不及完成。</strong></li>\n<li>沈复：世事茫茫，光阴有限，算来何必奔忙？人生碌碌，竟短论长，却不道荣格有数，得失谁量。</li>\n<li><strong>塞涅卡：如果一个人不知道他要驶向何方，那么如何风都不是顺风。</strong></li>\n<li><strong>萧伯纳：真正的闲暇并不是说什么事都不做，而是能够自由地做自己感兴趣的事。</strong></li>\n<li>哈代：人的生命就是不断适应再适应。</li>\n<li>林语堂：人本过客来无处，休说故里在何方，随遇而安无不可，人间到处有花香。</li>\n<li><strong>乔治马丁：权力存于人心，信则有，不信则无。惑人的把戏如浮影游墙，即使是矮小之人，也能投影出巨大的影子。</strong></li>\n<li>波德莱尔：一旦堕入笑骂由人的尘世，威猛有力的羽翼却寸步难行。</li>\n<li>叔本华：一定的忧愁，痛苦或烦恼，对每个人都是时时必须的。</li>\n<li><strong>叔本华：生命就是一团欲望，欲望不满便痛苦，满足便无聊。人生就在痛苦和无聊之间摇摆。</strong></li>\n<li>王国维：最是人间留不住，朱颜辞镜花辞树。</li>\n<li>史铁生：人有时只需静静地看，悲伤也成享受。</li>\n<li>梁实秋：树与人早晚都是同一个命运，都要倒下来，只有一点不同，树担心的是外在的险厄，人烦虑的是内心的风波。</li>\n<li>海德格尔：最不抱希望的时刻，痛苦是意外的宽慰。</li>\n<li><strong>尼采：不能听命于自己者，就要受制于人。</strong></li>\n<li>叔本华：每一个人首先是并且实际上确实是寄居在自身的皮囊，他并不是活在他人的见解之中的。</li>\n<li>马尔克斯：生活逼迫人一次又一次地脱胎换骨。</li>\n<li>老舍：生活是一种律动，须有光有影，有左右有，有情有雨，滋味就在这变而不猛的曲折里。</li>\n<li>罗伊马丁纳：我生命里的最大突破之一，就是我不再为别人对我的看法而担忧。只有在我们不需要外来的赞许时，我们才会变得自由。</li>\n<li><strong>尼采：一个人知道自己为什么而活，就可以忍受任何一种生活。</strong></li>\n<li>三毛：学会主宰自己的生活，即使孑然一身也不算一个太坏的局面。</li>\n<li>路遥：生活不能等待别人来安排，要自己去争取和奋斗，而不论结果是喜是悲，但可以慰藉的是，你总不枉在这世界活了一场。</li>\n<li>梵高：未来有某种伟大的东西，即使有时我会意志消沉，我们的心灵也要快乐起来。</li>\n<li>北岛：一个人的行走范围就是他的世界。</li>\n<li><strong>罗伯怀特：无论情况多么糟糕，你应当努力去支配你的环境，把自己从黑暗中拯救出来。</strong></li>\n<li>莫洛亚：思想的形成首先是意志的形成。</li>\n<li>李大钊：今是生活，今是动力。</li>\n<li><strong>约翰列侬：当我们正为生活疲于奔命时，生活已离我们而去。</strong></li>\n<li>伽利略：生活如铁毡，愈被敲打，愈能发出火花。</li>\n<li>梭罗：唯有我们觉醒之际，天才会破晓。</li>\n<li><strong>歌德：阳光越是强烈的地方，阴影越是深邃。</strong></li>\n<li>夏目漱石：一切安乐，无不来自困苦。</li>\n<li>司马光：正心以为本，修身以为基。</li>\n<li><strong>路遥：人，不仅要战胜失败，而且还要超越胜利。</strong></li>\n<li>刘禹锡：石以砥焉，化钝为利。</li>\n<li>德鲁巴里摩尔：生命的有趣还在于，你昨日的最大痛楚，极可能造就你明日的最大力量。</li>\n<li><strong>米兰昆德拉：人一旦迷醉于自己的软弱，便会一味地软弱下去，会在众人的目光下倒在街头，倒在地上，倒在比地面更低的地方。</strong></li>\n<li>泰戈尔：有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了，有一个早晨我扔掉了所有的明天，从此我的脚步就轻盈了。</li>\n<li>特德姜：成熟意味着看到差异，但又意识到差异不重要。</li>\n<li>王尔德：执着是缺乏想象力之人最后的遁词。</li>\n<li>歌德：未曾哭过长夜的人，不足以语人生。</li>\n<li>布莱克：生活的地平线是随着心灵的开阔而变得宽广的。</li>\n<li><strong>尼采：谦逊基于力量，高傲基于无能。</strong></li>\n<li><strong>海明威：优于别人，并不高贵，真正的高贵应该是优于过去的自己。</strong></li>\n<li><strong>康德：世界上只有两样东西是值得我们深深敬仰的，一是我们头上的灿烂星空，另一个是我们心中的道德律。</strong></li>\n<li>别林斯基：一切真正和伟大的东西，都是纯朴而谦逊的。</li>\n<li>欧里庇得斯：世上只有一件东西，能始终经受住生活的冲击，一颗宁静的心。</li>\n<li>庄子：一尺之锤，日取其半，万世不竭。</li>\n<li>尼采：谁终将声震人间，必长久深自缄默，谁终将点燃闪电，必长久如云漂泊。</li>\n<li>李斯：是以太山不让土壤，故能成其大，海河不择细流，故能就其深。</li>\n<li>芥川龙之介：放弃一切东西比人们想象的要更容易些，困难在于开始。</li>\n<li>老子：天下难事，必作于易：天下大事，必作于细。</li>\n<li>卡夫卡：人的主罪有二；其余皆由此而来：急躁和懒散。</li>\n<li>曾国藩：天可补，海可填，南山可移。日月既往，不可复追。</li>\n<li>高尔基：志在顶峰的人，绝不会因留恋半山腰的奇花异草而停止攀登的步伐。</li>\n<li>杨绛：有些人之所以不断成长，就绝对是有一种坚持下去的力量。</li>\n<li>波德莱尔：不要把一个阶段幻想得很好，而又去幻想等待后的结果，那样的生活只会充满依赖。</li>\n<li><strong>屠格列夫：幸福没有明天，也没有昨天，它不怀念过去，也不向往未来，它只有现在。</strong></li>\n<li>卢梭：成功的秘诀，在于永不改变既定的目标。</li>\n<li>惠特思：当我活着时，我要做生命的主宰，而不做它的奴隶。</li>\n<li><strong>陈寅恪：独立之精神，自由之思想。</strong></li>\n<li>赫尔岑：因为真理是灿烂的，只要有一个缝隙，就能照亮整个田野。</li>\n<li>冯友兰：人对外部世界应当尽力而为，只有在竭尽所能之后，才能沉静接受人力所无法改变的部分。</li>\n<li>路遥：生活包含着更广阔的意义，而不在于我们实际得到了什么；关键是我们的心灵是否充实。</li>\n<li><strong>木心：很多人的失落，是违背了自己少年时的立志。</strong></li>\n<li>列夫托尔斯泰：所谓人生，是一刻也不停变化着的。就是肉体生命的衰弱和灵魂生命的强大，扩大。</li>\n<li>曾国藩：天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败。</li>\n<li>托马斯伯恩哈德：人之不幸在于他们不想走自己的路；总想走别人的路。</li>\n<li>宋教仁：白眼观天下，丹心报国家。</li>\n<li>《论衡》：知屋漏者在宇下，知政失者在草野。</li>\n<li>杨绛：人世间得到功勋的人，都有赖无数默默无闻的人，为他们做出贡献。</li>\n<li><strong>阴多尼斯：舌头由于说话太多而生锈，眼睛由于梦想太少而生锈。</strong></li>\n<li>龙应台：你明明可以到深海中游泳，但是你却愿望全身浸泡在沙滩上的泡沫里。</li>\n<li><strong>菲茨杰拉德：生活改变人很少是通过重打击，却几乎总是通过腐蚀。</strong></li>\n<li><strong>尼采：每一个不曾起舞的日子，都是对生命的辜负。</strong></li>\n<li><strong>尼采：在自己身上，克服这个时代。</strong></li>\n<li>《古兰经》：山不过来，我就过去。</li>\n<li>卡尔维诺：要把地面上的人看清楚，就要和地面保持距离。</li>\n<li>王尔德：爱自己是终生浪漫的开始。</li>\n<li>纪伯伦：一个人有两个我，一个在黑暗中醒着，一个在光明中睡着。</li>\n<li><strong>萨特：我是个百依百顺的孩子，至死不变，只顺从我自己。</strong></li>\n<li>林肯：力量能征服一切，却是短暂的。</li>\n<li>海伦凯勒：爱使我们心灵得到真正的自由。</li>\n<li>易卜生：你最大的责任，就是把你这块材料锻造成器。</li>\n<li>《天与地》：和谐，不是一百个人发出同一种声音，而是一百个人发出一百个声音时，他们同时彼此尊重。</li>\n<li>胡适：管他什么真理无穷，进一寸有一寸的欢喜。</li>\n</ol>\n",
            "tags": [
                "名言警句"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%85%AB%E6%AC%A1%E5%8D%B1%E6%9C%BA_%E6%B8%A9%E9%93%81%E5%86%9B_89/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%85%AB%E6%AC%A1%E5%8D%B1%E6%9C%BA_%E6%B8%A9%E9%93%81%E5%86%9B_89/",
            "title": "八次危机_温铁军_89",
            "date_published": "2023-10-12T10:49:32.983Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>决定政府以何种体制运作的核心是财政税收。</strong></li>\n<li>政府之服务于资本，只是这个阶段上层建筑派生于并服从于经济基础的一般内涵。</li>\n<li>中国是在几乎不具备工业化内外部条件的条件下进入工业化的。</li>\n<li><strong>城市工业化的危机代价会对乡村转移，是在城市实现 “软着陆” 的条件。</strong></li>\n<li>任何在资本极度稀缺条件下追求工业化的后发国家都不得不采行事实上的 “亲资本” 政策。</li>\n<li>在高通胀导致下的市场风险打击下的小农经济更加趋向 “风险厌恶” 而采取 “去货币化” 行为。</li>\n<li>“要饭的也得有根打狗棍。”</li>\n<li>中国的 “三农” 在这种重复发作的社会运动中，至少 3 次默默无闻地承载了集中于城市的国家资本主义体制的周期性经济危机造成的巨大代价。</li>\n<li><strong>1994 年三大宏观领域改革：人民币大幅贬值，汇率 “一步并轨”，实现了外汇市场化；中央与地方政府 “分税制” 改革。</strong></li>\n<li>但在宏观经济领域的制度成本之一，就表现为此后多次危机都只能在城里 “硬着陆”。</li>\n<li>中国的经济体制改革本来就源于政府在经济危机时做出的调整政策。</li>\n<li>一个社会在没有外部资源输入的情况下，根本不可能既是高积累的，又是高消费的。</li>\n<li><strong>“责任中央承担，收益地方占有。”</strong></li>\n<li>长期以来，城市利益代表在坐落于城市的政府及其决策中的影响力，远远大于乡村而已。</li>\n<li><strong>在财政收支刚性的压力下，土地成为地方最短期内可变现的也是最主要的收入来源，“以地生财” 也就成为分税制后满足地方政府刚性需求的普遍做法。</strong></li>\n<li>“在推进重大财政改革时，必须要取得地方政府的强有力支持。”</li>\n<li>政府部门绝口不提 10 年前指令国企打开大门吸纳待业青年的危机应对措施是造成国家冗员充斥的前因。</li>\n<li>医疗和教育两个领域，则具有信息绝对不对称，且具有可以被个体垄断获暴利的特征。</li>\n<li>进入新世纪之后，跨国公司几乎控制了中国全部的高附加值产业及其出口，并成为主要获利者。</li>\n<li><strong>每一次外资运作内容和结果类似 —— 引进国外设备和技术，伴生两次经济危机。</strong></li>\n<li>由国家资本，官僚资本而不是民间资本作为主导力量推动中国 100 多年的现代化进程，有着历史必然性。</li>\n<li>中央政府因必须维护集中体制而不得不承担地方和企业（主要是国有企业）引资造成的债务责任，而这种分权改革中的权责分野，必然使其和地方政府的关系更加复杂化。</li>\n<li><strong>这种改革的成败，客观上不仅在于制度收益被那些既得利益集团获取，而在于制度成本如何被获益的利益集团成功的转嫁出去。</strong></li>\n<li>一段时间内关于某种主题的政策出台频率，一定程度上与社会上该问题的严重程度成正比。</li>\n<li>从资金依赖到市场依赖，再到金融依赖，这反映了中国与世界经济联系方式的变动过程。</li>\n<li><strong>在这种失衡的结构下，中国经济实际上在由两匹桀骜不驯的 “野马”（投资和出口）拖着 “一匹瘦驴”（国内消费需求）极不协调地快速行进。</strong></li>\n<li><strong>公司化地方政府 “以地套现”：城市化主导的 “高投资 + 高负债 = 高增长” 的发展模式逐渐形成。</strong></li>\n<li>中国必须跟从美国的战略意图，只有继续对没输出廉价商品和资本，中国才能在美国主导的地缘战略中得到生存空间。</li>\n<li>与国家战略相比，经济利益还是第二位的。</li>\n<li><strong>政党政治正在出现内涵性变化，其趋势将是政党自身的代表性不清楚而和国家利益越来越一致，即政党 “去政治化” 和政党 “国家化”。</strong></li>\n<li>地方治理结构的黑社会化与经济领域的收入灰色化，实际上是相辅相成的。</li>\n<li>政改需 “减压”，减压靠 “还账”。</li>\n<li>资本的力量已经走出经济领域，走入社会领域，发挥这越来越大的作用，成为具有很强的支配性的力量。</li>\n</ol>\n<h1 id=\"感想\"><a class=\"markdownIt-Anchor\" href=\"#感想\">#</a> 感想</h1>\n<p>刚接触政治的人容易有一种误解，那就是中央的政令可以完全得以贯彻，对地方如臂使指。我当时也是这样想的，但是越了解越明白央地矛盾才是最大的矛盾，中央和地方都在不断的摩擦中调整自己的位置。现在房地产问题也是中央收回财政大权，分税制改革等多方面改革是地方政府 all in 卖地的因素之一。中央的经验不是先验的，没人能准确预测政策可能导致的结果，很多时候是按下葫芦浮起瓢，为解决一个问题的改革却导致下一个问题的出现。以前经常宣传我们的发展没有通过殖民的血腥掠夺获取第一桶金，因此我们的发展道路是正大光明的。当时的我为此感到自豪，但同时也有一个疑问，那就是我们是通过什么途经去弥补这第一桶金的？换句话说，我们的第一桶金从何而来？现在我明白了，我们的第一桶金来自三农，来自政府的剪刀差，我们确实没有收割国外人民，我们收割的是国内的农民。农民为我国的工业化付出的惨痛的代价，并承载了多次城市危机。现在还有大量城市人歧视农民，污名化农民，这实在是不应该。作为一个在城乡结合部长大的孩子，小时候的我一直不能理解村里老人对政府的信任感，觉得他们是被害妄想症。国内的发展太快，每代人面对的环境都产生了极大的变化，这也启示我要思考更深层次的问题，事出必有因，毛主席曾经说过没有无缘无故的爱，也没有无缘无故的恨。我认为国家应该弥补三农曾经的付出，提高农村的待遇，这样才是真正的贯彻共产主义思想。最后就是我感觉现在人们对事件的反应逐渐圣母化，许多在网上引起极大节奏的事情，放在以前来说都是小事。感觉现在人们割裂的越来越严重，也可能是因为网络的存在让我看到了更多的想法，横向的比较，我国环境改善速度简直飞快。还有就是经济基础决定上层建筑，现在有些政策和行为不由决策者的主观决定，而是由经济基础决定的，所以少点阴阳怪气，多点思考背后的原因才是正道，多点思考社会问题有助于我们避免成为政策的牺牲品，把个人的发展融入到社会发展大潮中。毕竟一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的进程。</p>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%80%9A%E5%A4%A9%E5%B1%A0%E9%BE%99%E8%AE%B0_%E9%87%91%E5%BA%B8_87/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E5%80%9A%E5%A4%A9%E5%B1%A0%E9%BE%99%E8%AE%B0_%E9%87%91%E5%BA%B8_87/",
            "title": "倚天屠龙记_金庸_87",
            "date_published": "2023-10-12T10:49:32.981Z",
            "content_html": "<h1 id=\"读后感\"><a class=\"markdownIt-Anchor\" href=\"#读后感\">#</a> 读后感</h1>\n<p>由于李连杰的《倚天屠龙记》电影给童年的我留下了深刻的印象，加之周围的同学一直推荐我阅读这本书，所以在一个明媚的早晨，我翻开了这本书，下面是我对这本书的一些感悟。</p>\n<p>复杂的情况下，是否有双赢的选择？现在很多人都说世界不是 “零和” 游戏，要双赢，一开始我也认为这句话很有道理，但是现在我感觉这句话是不太现实的。因为有时候大家的核心利益是有冲突的，比如书中的宝物 —— 屠龙刀，大家都想要它，从而可以号令天下。而这个时候大家的核心利益就产生了冲突，谁都不会就此让步，就更谈不上双赢了。又比如金毛狮王谢逊的问题，他为了逼成昆出现，不惜杀害无辜的人，他们的亲人都渴望为无辜的人们复仇，而张无忌一心要保护他的义父谢逊，这样的情况又怎样达到双赢呢？所以说，双赢谈何容易，在没有核心利益冲突的时候，谈双赢很容易，做到双赢也很容易，但是在核心利益产生冲突的时候，双赢只是为了自己获取更大的利益的幌子罢了，毕竟谁又愿意把自己的利益无偿的让渡给别人。</p>\n<p>爱不是乞讨回来的。以前总是听到有人调侃宋青书是 “终极舔狗”，一开始我还不很相信，知道我看了书，才发现这个称号真的太贴切了。同时我也有点可怜宋青书，宋青书可能是书中最爱周芷若的人了，为了她，宋青书破了规矩去偷看她，导致失手杀掉七叔，放弃了唾手可得的武当派掌门的位置，甚至愿意去毒杀自己的师傅和父亲等同门师兄弟。可以说，他为了周芷若放弃自己的美好前程。同时我们也可以看出宋青书已经为了所爱放弃了自我，已经变得正邪不辨，是非不分了。他想用自己的牺牲去换取周芷若的爱，这多么可悲。但在我们嘲笑宋青书的时候，有没有反思过自己的行为，有没有陷入自我感到的怪圈中，诸如分手割腕，下跪，终日以泪洗面，或者不分好坏就替 Ta 做事等做法，这些不是都和宋青书无异吗？以为感动了全世界，觉得自己很深情，但是在大家眼中只是一个傻子的自娱自乐。可别忘了，周芷若从未对宋青书产生过一点爱意，有的只是一丝丝的愧疚。如果大家真的想要心爱的人喜欢自己，就不要再走宋青书的旧路了，而是应该像张无忌一样努力成长，用自身的魅力去吸引到属于你自己的 “周芷若”。</p>\n<p>一股正气在心中。看这本书，最大的感觉就是充满了浩然正气，那种古代的侠客精神。侠士做事也许会不拘小节，但是在大是大非面前从不含糊，民族大义和正义是他们心中最重要的东西。在郡主赵敏的各种阴谋诡计下，五大派依旧没有弯下他们的脊梁骨，即使力不能及，也依然要决一死战。为了心中的信念，即使是死亡也不能让我感到恐惧。“他强由他强，清风拂山岗；他横任他横，明月照大江。” 在书中，我最喜欢的就是武当七侠，他们的侠气和品行令人敬佩。一股正气在心中，无惧艰难，无惧险阻，只有死亡才能阻止我对理想的追逐。这样一股浩然正气就是这本书带给我的最大收获。</p>\n<p>什么是好人，什么是坏人？在这种复杂的情况下，也诞生了许多难以界定好坏的人。其中最突出的就是金毛狮王谢逊，他原本内心善良，只因成昆的设计下，一时冲动而错杀了许多无辜的人，从这点看，谢逊无疑是一个坏人；但同样的，他悉心照料张无忌，大仇得报后自费武功，任由无辜者家属报仇，最终大彻大悟，遁人空门，似乎他也是个好人。书中优秀处就在于刻画了这些复杂的人物，正如赵敏，正如周芷若，正如殷素素，她们都有着残忍的一面，也有柔情的一面。没有纯粹的好人，也没有纯粹坏人，人都是复杂的，她们都有着自己的黑暗面，有着光明面。也许我们在生活中也应该全面的去看待一个人，不要仅仅以好人或坏人来简单的概括一个人，而且人也是在不断变化的，不能以静止的观念去看待一个人。像灭绝师太，即使张无忌全心全意的救助五大派，但是她还是死死的认定眀派的人都是坏人，最终宁死也不愿意接受张无忌的帮助。这无疑是是武林的一大损伤，如果灭绝师太愿意去了解眀派，了解张无忌，去放弃固有印象，也许她会有更大的成就。</p>\n<p>人总需要为自己的行为付出代价。不管怎么说，我依旧不能接受殷素素和赵敏，我依旧认为殷素素和赵敏太过于心狠手辣了，殷素素残杀无辜，栽赃嫁祸给张翠山，虽然她一直爱着张翠山，而且也愿意改过自新了，但是我还是难以接受她和张翠山在一起。最终殷素素自杀于武当山，虽然我感到有些感伤，但是这也许是最符合她的归宿了。如果她做了那么多的坏事后，还可以幸福安康的过完一辈子，那些惨死在她掌下的无辜冤魂就太惨了。没有人可以代表别人原谅自己，自己犯下的错就应该为此而付出代价，除非别人愿意原谅你。正如谢逊，他心甘情愿的接受别人的报复，只为了洗清自己所犯下的罪孽。另外想吐槽一下，为什么里面的男人都喜欢那些 “坏女人”，明明知道她心狠手辣，只因她能说会道就轻易爱上她，未免太儿戏了。这也是我认为书中不够好的地方。我是真的不明白张无忌最爱的人是赵敏，赵敏也太功于心计了，中原高手差点被她一锅端，各种阴谋诡计，不知道为什么张无忌会对她死心塌地，明明有更好的女孩在等待他，论深情，小昭和阿朱都不逊于赵敏，而且还心地善良。在书中，我最喜欢的女孩就是小昭了，可惜不太能言善辩的小昭自然无法得到男主的选择，这不得不说是一个遗憾。</p>\n<p>在帮助他人之前先保护好自己。在书中，善良的张无忌经常会去帮助别人，但有时候也会遇到一些别有用心的人利用这一点来陷害张无忌，而张无忌屡次从坏人手中逃脱也使得我们这些读者大呼过瘾。但是转念一想，如果想是我们这些普通人，大概早已经没了。所以我们在帮助他人的时候，一定要带有防人之心，保护好自己，毕竟我们都不是张无忌，没有高超的能力，没有逢凶化吉的运气。张无忌也是书中最仁慈的人了，无论多么大的仇恨，他都愿意去宽恕，，但其实我不太认可这种无选择的宽恕，我认为只能宽恕那些值得原谅的人，只有足够的诚意，才真正的值得宽恕，那些虚伪的道歉并不值得的被原谅，而且可以被轻易的被原谅，他们会更加的变本加厉。<br>\n这些便是我对这本书的一些想法，感想这本书，填补了我人生中的一段时光，给予我惊喜与感动。</p>\n",
            "tags": [
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%BF%84%E5%9B%BD%E9%9D%A9%E5%91%BD_%E5%A7%9A%E6%B5%B7_86/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%BF%84%E5%9B%BD%E9%9D%A9%E5%91%BD_%E5%A7%9A%E6%B5%B7_86/",
            "title": "俄国革命_姚海_86",
            "date_published": "2023-10-12T10:49:32.979Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>靠生理学的自然规律改变国家的命运，是苏联社会主义制度的悲哀！</strong></li>\n<li>恩格斯：“我们已经看到，在历史上活动的许多单个愿望在大多数场合下所得到的完全不是预期的结果，往往是恰好相反的结果，因而它的动机对全部结果来说同样地只有从属的意义。”</li>\n<li><strong>马克思：“历史报应的规律就是，锻造报应的工具的，并不是被压迫者，而是压迫者自己。”</strong></li>\n<li>早在 20 世纪 60 年代，苏联官方史学著作就已经明确指出，在彼得格勒武装起义的整个过程中，总共死 6 人，伤 50 人。</li>\n<li>在二月事件中，他们发动起义的主要目的之一是因为不愿离开 “温暖的营房”，被整编为战斗部队派往前线。</li>\n<li><strong>在旧的权威已经崩溃，新的权威尚未形成之时，不是政党领导群众，而是群众推动政党。</strong></li>\n<li>与同时期的西方相比，俄国历史发展的一个最基本独特性就是落后。</li>\n<li>于是出现了一个悲剧性的现象：在俄国政权第一次以非暴力方式实行历史上空前广泛和深刻的结构性改革之时，革命恐怖主义也在迅速发展，以至改革的推动者亚历山大二世最终遇刺身亡。</li>\n<li><strong>日俄战争引发了第一次俄国革命，但引起革命的真正原因是农民要求解决土地分配问不均和资产阶级要求分享政治权力的问题。</strong></li>\n<li>在经过 1914 年 - 1916 年的战争之后，较有战斗力的近卫军、哥萨克和基层军官，军士遭受的损失巨大，几乎全部作战部队的主要人员构成实际上就是穿上军装的农民，充任基层指挥官的大多是原先的预备役军官。</li>\n<li>罗将柯稍有迟疑，还是直言道：“是的，殿下，22 年来您是走在错误的道路上。”</li>\n<li>彼得格勒 1917 年头三个月的平均温度达到摄氏 - 26.5 度，比上一年低了 10 度。</li>\n<li>出乎意料的天气变化对于那些日子里发生的历史性事件有着不小的影响。</li>\n<li><strong>从政权安全的角度来说，沙皇政权把大量的后备部队放在首都是干了一件蠢事。</strong></li>\n<li>革命是在没有革命者的情况下开始的。</li>\n<li>军队主要将领在促使尼古拉二世退位问题上起了决定性作用。</li>\n<li>二月时间是在 “打倒战争” 而不是 “打倒沙皇” 的口号声中发展起来的。</li>\n<li>《马赛曲》成了革命的标志。</li>\n<li><strong>随着政治进程的日益戏剧化，真正的戏剧则变得越来越政治化了。</strong></li>\n<li>作为二月革命中心的塔夫利达宫也成为了革命的标志物。</li>\n<li>“杜马及其机构实行的所有措施，反映了杜马自由主义者从反对派转变为资产阶级革命者的过程。”</li>\n<li>27 日，国家杜马事实上成为了起义的指挥所。</li>\n<li>克伦斯基在实行革命逮捕方面起来重要作用。</li>\n<li>最初的逮捕可能是偶然的，但杜马领袖很快就开始试图利用逮捕作为同自己的敌人斗争的适当手段。</li>\n<li>孟什维克首先依靠的是 “工人知识分子”—— 最有文化的、倾向于民主主义和社会主义的那部分无产阶级分子。</li>\n<li>恐怖活动是社会革命党的主要思想，也是社会革命党内为数不多的没有争议的问题之一。</li>\n<li>在 1917 年 8 月布尔什维克第六次代表大会选出的 29 名中央委员和候补委员中，没有一人在二月革命期间在革命的中心彼得格勒！</li>\n<li>有一号命令开始的 “军队民主化”，实际上就是俄国军队的无政府主义化。</li>\n<li>临时政府的成立声明，俄国资产阶级自由政党掌握了国家政权。</li>\n<li>地方自治机关是自由派的重要阵地，培养了众多的资产阶级政治和社会活动家。</li>\n<li>“在勃利科夫勇敢地庄严地向全俄罗斯宣告新政权建立时，事实上还不存在任何政权。”</li>\n<li>“电报革命” 的核心内容，是二月革命政权延伸到外省，在各地普遍实现了政权的重组。</li>\n<li><strong>对于彼得格勒以外的地方而言，革命的消息的传播具有决定性的意义。</strong></li>\n<li>因此，德国政府为实现东线停火，促进俄国的反战革命运动，搞垮俄国临时政府是一个必要条件。</li>\n<li>“打倒列宁！滚回德国去！” 成为 4 月中旬的热门口号。</li>\n<li>布哈林后来也曾经说过，当时党的一部分组织把列宁的提纲看作是对于普遍承认的马克思主义的背叛。</li>\n<li>孟什维克和社会革命党以及苏维埃的领导人坚决拒绝列宁《四月提纲》中提出是思想。</li>\n<li><strong>在彼得格勒和莫斯科的党委这一层反对列宁的提纲，但多数区组织和所有的基层组织都拥护。</strong></li>\n<li>但是看来只有米留可夫清楚地意识到，“不割地不赔款的和平” 只是一个面具。它掩盖了对协约国的背叛和同德奥的单独媾和。</li>\n<li>立宪会议选择准备工作的进展和速度与群众的期待之间存在很大距离。</li>\n<li>但在革命时期，以月计算的时间已经是群众不能接受的，他们希望的是立即，马上解决问题。</li>\n<li>临时政府是一个充满政治理想主义的政府。</li>\n<li>临时政府是一个缺乏执行力的政府，它缺少既有权威，又有魄力，还能审时度势的领导人。</li>\n<li>社会各阶层急切的希望很快转变为极度的失望，社会心态的恶化成为二月后俄国动荡和混乱的精神背景。</li>\n<li>四月革命对临时政府的直接影响是米留可夫和古契柯夫的辞职。</li>\n<li>临时政府和苏维埃协力平息事态，意味着双重权力现象的终结。</li>\n<li>临时政府在前线发动的攻势遭受失败是七月事件的重要背景。</li>\n<li>临时政府任命的西南战线政治委员费多尔。林德被暴动士兵杀害，成为军队彻底瓦解的标志性事件。</li>\n<li>卡列金的发言是具有象征意义的，它代表了俄国右翼越来越强硬地要求采取措施恢复秩序的情绪和纲领。</li>\n<li>科尔尼洛夫的告俄国居民书是对临时政府的宣战书。</li>\n<li>对科尔尼洛夫和克伦斯基都很了解的萨文科夫说，科尔尼洛夫 “热爱自由… 但对他来说俄罗斯是第一位的，自由是第二位的。而对克伦斯基来说… 自由，革命是第一位的，俄罗斯是第二位的。”</li>\n<li><strong>立宪民主党部分党的领导人对科尔尼洛夫军事政变的态度，加快了立宪民主党乃至整个自由主义运动走向政治衰落的过程。</strong></li>\n<li>米留可夫无可奈何地承认 “现在王牌掌握在布尔什维克手中，政治钟摆急剧地转向左边。”</li>\n<li>结束事件的理由并不是不存在德国经费问题，而是布尔什维克通过参与平息科尔尼洛夫军事政变改变了自己的政治处境。</li>\n<li>文件显示，布尔什维克政权很重视彻底消除德国经费的痕迹。</li>\n<li>没有证据证明布尔什维克被德国经费收买，但德国经费问题是存在的。</li>\n<li>列宁对政治局势和党的任务的认识促使布尔什维克迅速调整策略，加快了布尔什维克党以及追随它的力量进一步的进化。</li>\n<li>新口号使布尔什维克的力量得到了显著加强。</li>\n<li><strong>“布尔什维克在众目睽睽下丢掉了选票，拿起了步枪。”</strong></li>\n<li>布尔什维克控制苏维埃主席团，这是苏维埃历史上的一个转折。</li>\n<li>布尔什维克直接地认真地走上了进行国家政变的道路。</li>\n<li><strong>“被压迫的阶级不得不承认，宁可战斗失败，也不能不战而降。”</strong></li>\n<li>但在布尔什维克党内，对应是否立即举行起义的争论远未结束。</li>\n<li>事实上，当时布尔什维克准备起义不是阴谋而是 “阳谋”。</li>\n<li>因为在这个时候，政治局势已经完全不取决与预备议会的少多数，甚至预备议会本身也已经无足轻重。</li>\n<li>据布尔什维克官方资料，在起义过程中一共死 6 人，伤 50 人。</li>\n<li>这时，孟什维克，社会革命党的代表站起来向出口走去，在嘲笑声和谩骂声退出了大会。</li>\n<li>发生在 1917 年 10 月 26 日 1 点左右发生的这一幕，展示了俄国社会主义者之间的决裂，也证明不同社会主义政党或派别在对俄国革命的理解和信念，对俄国未来道路的选择上，存在着根本性的差异。</li>\n<li>事实上，大多数社会革命党领导人不相信布尔什维克会驱散立宪会议。</li>\n<li>最根本的原因是，俄国还缺乏立宪会议所代表的民主制度能够依靠的牢固社会基础，还没有形成比较成熟的支持这种制度的社会阶层。</li>\n</ol>\n<h1 id=\"感想\"><a class=\"markdownIt-Anchor\" href=\"#感想\">#</a> 感想</h1>\n<ol>\n<li>皇帝对军队并没有完全的掌控力。党指挥枪这个看似合理的措施实际上并不是很多地方能够实行，也许我们才是特殊的一个。</li>\n<li>刺杀活动在俄罗斯简直是家常便饭。</li>\n<li>“党指挥枪” 是我们中国人的共识，但并没有我们想象中的轻松，不知道付出了多大的代价才得以将其贯彻下基层。</li>\n<li>俄国共产党是城市为主的思想，深耕农村反而是社会革命党。</li>\n</ol>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%BB%96%E6%94%B9%E5%8F%98%E4%BA%86%E4%B8%AD%E5%9B%BD_[%E7%BE%8E]_%E5%BA%93%E6%81%A9_85/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%BB%96%E6%94%B9%E5%8F%98%E4%BA%86%E4%B8%AD%E5%9B%BD_[%E7%BE%8E]_%E5%BA%93%E6%81%A9_85/",
            "title": "他改变了中国_[美]库恩_85",
            "date_published": "2023-10-12T10:49:32.977Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li>就像在世界上许许多多的地方一样，很多中国人渴望像美国人一样地生活，尽管他们同时憎恨在他们看来美国所强加在他们头上的强权。</li>\n<li><strong>如果不理解有关江主席的三件事，你就无法理解江主席：他的家庭传统、他的文化根基以及他的革命背景。</strong></li>\n<li>芮说：“我们不能让工人和学生联合起来。否则上海就要陷入混乱并将波及全国其他地区。”</li>\n<li>在稳定与混乱之间没有中间地带。</li>\n<li><strong>媒体应是政府用来贯彻之间政策的工具，而不是评估其有效性的一种检查手段。</strong></li>\n<li>江认为，学术自由是重要的，但没有共产党的领导权那么重要。</li>\n<li>他想成为母校上海交通大学的教授。</li>\n<li>江泽民是独自一人，而且并不是高高在上。</li>\n<li><strong>他知道，实际上每一个人，在北京的内部圈子到国外研究中国的学者，都认为他是个过渡领导人，一个临时看管职位的人。</strong></li>\n<li>我们的年轻人不善于跨时间作纵向比较。要意识到中国前进了多少，人们就必须意识到我们过去有多落后，必须意识到所有这些年我们的道路有多艰难。</li>\n<li>当江对莫斯科说再见时，他告别的是哪个旧时代。</li>\n<li>在每 5 个工作日中，要有 4 天与军队高层待在一起。</li>\n<li>他担任总书记多年，可能是世界上经验最丰富的国家领导人，但是在中国还是有很多事情他无法控制的。</li>\n<li><strong>民主对中国来说是个有价值的目标，但中国当前还承受不起。</strong></li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>作为一个喜欢玩梗的人，一直以来对他的认识都比较肤浅，直到看完这本书才对其有了更深刻的认识。可惜受限于题材，有很多我感兴趣的内容都一步带过，一些很琐碎的事情却说个没完，而且个人偏见太多，这也是我对这本书评价较低的原因。一本很平庸的书，配不上他的题目。不过好处就是填补了对江主席的描述，对其生活有了一个轮廓式的了解，个人还是希望能有更多此类的书籍填补当前国内的市场。</p>\n",
            "tags": [
                "历史政治",
                "人物传记"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94_%E8%8F%B2%E8%8C%A8.%E6%9D%B0%E6%8B%89%E5%BE%B7_87/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94_%E8%8F%B2%E8%8C%A8.%E6%9D%B0%E6%8B%89%E5%BE%B7_87/",
            "title": "了不起的盖茨比_菲茨.杰拉德_87",
            "date_published": "2023-10-12T10:49:32.975Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>每当你想要批评别人的时候，要牢记这个世界上的所有人，并不是都拥有你曾经拥有的那些优越条件。</strong></li>\n<li>我既身处其中，又身在其外，对人生的变幻和五彩斑斓，既感到陶醉又感到厌恶。</li>\n<li>于是，我们努力的向前划，逆流而上的小舟，不停的被浪潮推回到过去。</li>\n</ol>\n<h1 id=\"读后感\"><a class=\"markdownIt-Anchor\" href=\"#读后感\">#</a> 读后感</h1>\n<blockquote>\n<p>“得不到的永远在骚动，被宠爱的有恃无恐。”</p>\n</blockquote>\n<p>在盖茨比未遇黛西的时候，黛西就如那盏绿灯，神秘而又令人向往。可是当他们重逢之时，绿灯灭了，他发现她并没有他所向往的那样美好。这无可厚非，再好的人，也比不过在心中的想象。沉溺于过去和过于神话别人，这个为盖茨比的悲剧埋下了伏笔。人是会变的，不能永远的停留在过去，黛西已经变了，不是那位一袭长裙的纯情少女，而是做作，老于世故的骚货。也许她没变，她一直都是这样，只是盖茨比一直没有发现而已。而盖茨比还深信自己可以用金钱改变她，就像他用金钱所改变的其他事情一样。可这已经不可能了，也许之前可以，可现在是行不通了。她已经习惯了，习惯了现在的这种纸醉金迷的生活。于是，悲剧发生了，汤姆的情妇威尔逊被黛西开车撞死。而汤姆和黛西却策划栽赃给盖茨比，而盖茨比还傻傻的守护着黛西，生怕她受到伤害。在盖茨比惨死在威尔逊的枪下后，黛西没有去送盖茨比一程，甚至没有一句询问。之前与盖茨比来往的人的反应也令人心寒，没有人愿意掺和进来，关于盖茨比的流言蜚语也在一阵喧闹中归于平静，就像一粒小石子落入平静的湖面，曾溅起一点点的波澜，但不久就归于平静了。就连最亲密的父亲，对儿子财富的赞叹居然压过了对儿子死亡的伤痛。人走茶凉，人死灯灭，可人们的冷淡还是出乎我的意料，曾经热闹的宴会冷落下来，仿佛从来没有发生过。盖茨比的死丝毫没有影响到他们的夜夜笙歌。</p>\n<p>就这样，一个最无辜的人遭受了最猛烈的打击，而真正的凶手却依旧逍遥快活。可我想盖茨比也并不像我们所想的那般正直，他也同样不是那位年轻的军官了。试想一下，一个穷小子如何在几年之内赚取巨额的财富，而且他的那位 “朋友” 不是什么好人，盖茨比大概率也和他们一样。金钱真是万能，它可以让你住上昂贵的房子，让你的家中夜夜笙歌，甚至可以赢回你的爱人；没有金钱真是万万不能，它会让你失去你的爱人，得不到你心爱的东西，遭受别人的白眼，甚至连生活也难以为继。所以盖茨比在这样的环境下沦落也就成了理所当然了。当你处于盖茨比的位置时，也许你就是下一个盖茨比了。处于这种状态的人，总会有一种迷幻的感觉，一种 “既陶醉又厌恶” 的感觉。</p>\n<p>是否我们真的只能如 “逆流而上的小舟，不停被浪潮推回过去”，一遍又一遍的犯着之前的错误，兜兜转转回到原来的位置。这似乎难以接受，但很可惜，事实就是如此。所以我们才要擦亮眼睛，不被表面优秀的人所蒙蔽，去寻找真正想要的。每个人对其他人来说都是毫不足道的，一些你自以为重要的事情，于别人，于自己都可能没那么重要。每个人都是环境的产物，所以不要轻易的批评别人，因为别人所处的环境也许比你差很多。不要在自己的脑海里想象别人的美好，因为无论多好的人都禁不起想象，到想象破碎的时候，你的心也会跟着破碎。</p>\n",
            "tags": [
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%B9%A1%E5%9C%9F%E4%B8%AD%E5%9B%BD_%E8%B4%B9%E5%AD%9D%E9%80%9A_88/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%B9%A1%E5%9C%9F%E4%B8%AD%E5%9B%BD_%E8%B4%B9%E5%AD%9D%E9%80%9A_88/",
            "title": "乡土中国_费孝通_88",
            "date_published": "2023-10-12T10:49:32.973Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>规矩不是法律，规则是 “习” 出来的礼俗。</strong></li>\n<li>“这不是见外了么？” 乡土社会里从熟悉得到信任。</li>\n<li><strong>乡土社会的信用并不是对契约的重视，而是发生于对一种行为的规矩熟悉到不假思索时的可靠性。</strong></li>\n<li><strong>陌生人所组成的现代社会是无法用乡土社会的风俗来应付的。</strong></li>\n<li>在面对面的社群里一起生活的人是不必要通名报信的。</li>\n<li><strong>文字所能传的情，达的意是不完全的。</strong></li>\n<li>语言只能在一个社群所有相同经验的一层上发生。</li>\n<li><strong>所以在乡土社会中，不但文字是多余的，连语言都并不是传情达意的唯一象征体系。</strong></li>\n<li><strong>历史对于个人并不是点缀的饰物，而是实用的，不能或缺的生活基础。</strong></li>\n<li>我们只看见我们所注意的，我们的视线有焦点，焦点依着我们的注意而移动。</li>\n<li>乡土社会中不怕忘，而且忘的舒服。</li>\n<li><strong>他们个别的经验，就等于世代的经验。经验无需不断积累，只需老是保存。</strong></li>\n<li>每个人在某以时间某一地点所动用的圈子是不一定相同的。</li>\n<li>在西洋社会里争的是权，而在我们却是攀关系，讲交情。</li>\n<li>社会结构格局的差别引起了不同的道德观念。</li>\n<li>一个差序格局的社会，是由无数私人关系搭成的网络。</li>\n<li>中国的道德和法律，都因之得看所施的对象和 “自己” 的关系而加以程序上的伸缩。</li>\n<li>乡下，有说有笑，有情有意的是同性和同年龄的集中。</li>\n<li>感情常常发生在新反应的尝试和旧反应的受阻情形中。</li>\n<li>稳定社会关系的力量，不是感情，而是了解。</li>\n<li><strong>对生活的态度是以克己来迁就外界，那就是改变自己去适应外在的秩序。</strong></li>\n<li><strong>社会秩序范围着个性，为了秩序的维持，一切足以引起破坏秩序的要素都被抑制着。</strong></li>\n<li>礼是社会公认的合式的行为规范。</li>\n<li>礼治的可能必须以传统可以有效的应生活问题为前提。</li>\n<li>长期的教育已把外在的规则化为内在的习惯。</li>\n<li><strong>现行的司法制度在乡间发生了很特殊的副作用，它破坏了原有的礼治秩序，又不能有效地建立起法治秩序。</strong></li>\n<li>法治秩序的建立不能单靠制定若干法律条文和设立若干法庭，重要的还得看人民怎样去应用这些设备。</li>\n<li>人们喜欢的是从权力得到的利益。</li>\n<li>一个只有生产他生存他生活必需的消费品的人并没有资格做奴隶的。</li>\n<li>在这里我们可以看到的是乡土社会里的权力结构，虽然名义上可以说是 “专制”，“独裁”，但是除了自己不想持的末代皇帝之外，在人民的实际生活中看，是松弛和微弱的，是持名的，是无为的。</li>\n<li>在变迁中，习惯是适应的障碍，经验等于顽固和落伍。</li>\n<li>缺乏变动的文化里，长幼之间发生了社会的差次，年长的对年幼的具有强制的权力。</li>\n<li>血缘社会就是想用生物上的新陈代谢作用 —— 生育，去维持社会结构的稳定。</li>\n<li>所以我们可以说籍贯只是 “血缘的空间投影”。</li>\n<li><strong>亲密的血缘关系限制着若干社会活动，最主要的是冲突和竞争。</strong></li>\n<li><strong>社会生活愈发达，人和人之间的往来也愈繁重，单靠人情不易维持相互间权利和义务的平衡。</strong></li>\n<li>商业是在血缘之外发展的。</li>\n<li>从整个社会上看，一个领导的阶层文化如果能追得上社会变迁的速率，这社会也可以避免因社会变迁而发生的混乱。</li>\n<li><strong>注释的变动方式可以引起名实之间发生极大的分离。</strong></li>\n<li>在长老权力下，传统的形式是不准反对的，但是只要表面上承认这一形式，内容却可以经注释而改变。</li>\n<li>虚伪在这种情境中不但是无可避免而且是必需的。</li>\n<li>不能反对而不切实用的教条或命令只有加以歪曲，只留一个面子。</li>\n<li>名实之间的距离跟着社会变迁速率而增加。</li>\n<li>欲望 —— 紧张 —— 动作 —— 满足 —— 愉快，那就是人类活动的过程。</li>\n<li>欲望是什么呢？食色性也，那是深入生物基础的特性。</li>\n<li>淘汰作用的力量并不限于文化之内，也有在文化之外的，是自然的力量。</li>\n<li>鬼有没有是不紧要的，恐惧却得驱除。</li>\n</ol>\n",
            "tags": [
                "历史政治"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%B8%89%E4%BD%93-%E5%88%98%E6%85%88%E6%AC%A3-95/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%B8%89%E4%BD%93-%E5%88%98%E6%85%88%E6%AC%A3-95/",
            "title": "三体-刘慈欣-95",
            "date_published": "2023-10-12T10:49:32.971Z",
            "content_html": "<h1 id=\"三体-95\"><a class=\"markdownIt-Anchor\" href=\"#三体-95\">#</a> 三体 - 95</h1>\n<ol>\n<li>那你的生活是一种偶然，世界有这么多变幻莫测的因素，你的人生却没什么变故。</li>\n<li>是的，整个人类历史也是偶然，从石器时代到今天都没什么重大变故，真幸运。但既然是幸运，总有结束的一天；现在我告诉你，结束了，做好心理准备吧。</li>\n<li><strong>在中国，任何超脱飞扬的思想都会砰然坠地，现实的引力太沉重了。</strong></li>\n<li>人类可以将太阳作为一个超级天线，通过它向宇宙中发射电波，这种电波是以恒星级的能量发出的，它的功率比地球上能够使用的全部发射功率还要大上亿倍。</li>\n<li>物种共产主义，这是我创立的一个学说，也可以说是一个信仰，它的核心理念就是：地球上的所有生命物种，生来平等。</li>\n<li>在宇宙间，一个技术文明等级的重要标志，是它能够控制和使用的微观维度。</li>\n<li>把人类看作虫子的三体人似乎忘记了一个事实：虫子从来就没有被真正战胜过。</li>\n<li><strong>碑是那么小，与其说是为了纪念，更像是为了忘却。</strong></li>\n</ol>\n<h1 id=\"三体黑暗森林-97\"><a class=\"markdownIt-Anchor\" href=\"#三体黑暗森林-97\">#</a> 三体黑暗森林 - 97</h1>\n<ol>\n<li><strong>面壁者所承担的，将是人类历史上最艰难的使命，，他们是真正的独行者，将对整个世界甚至整个宇宙，彻底关闭自己的心灵，他们所能倾述和交流的、他们在精神上唯一的依靠，只有他们自己。他们将肩负着这伟大的使命孤独地走过漫长的岁月，在这里，让我代表人类社会向他们表达深深的敬意。</strong></li>\n<li>仇恨，这比黄金和钻石都宝贵的财富，这世界上最犀利的武器。</li>\n<li>斩尽杀绝，这是对一个文明最高的重视。</li>\n<li><strong>给岁月以文明，而不是给文明以岁月。</strong></li>\n<li>逃离是事实，但我没有背叛。</li>\n<li><strong>我不需要思想钢印，我是自己信念的主人。</strong></li>\n<li>而你们，却被回光返照的低级技术蒙住了眼睛，你们躺在现代文明的温床中安于享乐，对即将到来的决定人类命运的终极决战完全没有思想上的准备。</li>\n<li>同为军人，知道我们之间最大的区别在哪里吗？你们按照可能的结果来决定自己的行动；而我们，不管结果如何，必须尽责任，这是唯一的机会，所以我就做了。</li>\n<li>无尽的太空就这样在它黑暗的怀抱中哺育出了黑暗的新人类。</li>\n<li>两艘黑暗之船与黑暗的太空融为一体，隔着太阳系渐行渐远。它们承载着人类的全部思想和记忆，怀抱这地球所有的光荣与梦想，默默地消失在永恒的夜色中。</li>\n<li>他知道有些事情确实发生过，细节历历在目，但感觉已消失得无影无踪了。过去就像是攥在手中的一把干沙，自以为攥得很紧，其实早就从指缝中流光了。</li>\n<li><strong>宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都小心翼翼… 他必须小心，因为林中到处都有与他一样潜行的猎人。</strong></li>\n<li>我有一个梦，也许有一天，灿烂的阳光能照进黑暗森林。</li>\n</ol>\n<h1 id=\"三体死神永生-93\"><a class=\"markdownIt-Anchor\" href=\"#三体死神永生-93\">#</a> 三体死神永生 - 93</h1>\n<ol>\n<li><strong>大自然真的是自然的吗？</strong></li>\n<li>她将度过怎样的一生呢？但愿她能记得，茫茫星海中，有一颗星是属于她的。</li>\n<li><strong>前进！前进！！不择手段的前进！！！</strong></li>\n<li>把一个人类送入敌人的心脏。</li>\n<li>“这个非常时代没有无名小辈。” 维德说，“任何普通人都可能随时被委以重任，任何显要人物也可能随时被取代。”</li>\n<li>“你会把你妈卖给妓院吗？” 维德问。</li>\n<li>“不要返航，这里不是家！”</li>\n<li>人们发现威慑纪元是一个很奇怪的时代，一方面，人类社会达到空前的文明程度，民主和人权得到前所未有的尊重；另一方面，整个社会却笼罩在一个独裁者的阴影下。</li>\n<li><strong>人类不感谢罗辑。</strong></li>\n<li>引力波宇宙广播系统无法恢复，黑暗森林威慑终止。</li>\n<li>这种恐惧归根结底还是对黑暗森林威慑本身的恐惧，最终威慑的特点：威慑这和被威慑这对威慑有着相同的恐惧。</li>\n<li><strong>生存本来就是一种幸运，过去的地球上是如此，现在这个冷酷的宇宙中也到处如此。但不知道从什么时候起，人类有了一种幻觉，认为生存成了唾手可得的东西，这就是你们失败的根本原因。</strong></li>\n<li>在飞船位面，时空的薄膜在引力波中泛起一片涟漪，像风吹皱了暗黑中的湖面，对两个世界的死亡判决以光速传向整个宇宙。</li>\n<li>三个世纪前他送给了程心一颗星星，三个世纪后他又带给人类一个希望。</li>\n<li>死亡是唯一一座永远亮着的灯塔，不管你向哪里航行，最终都得转向它指引的方向。一起都会逝去，只有死神永生。</li>\n<li><strong>失去人性，失去很多；失去兽性，失去一切。</strong></li>\n<li><strong>弱小和无知不是生存的障碍，傲慢才是。</strong></li>\n<li>真正的力量在时间手里，留下脚印比创造世界更难，在这文明的尽头，他们也只能做远古的婴儿时代做过的事情。</li>\n<li>很简单：攻击者首先改造自己，把自己改造为低维生物，比如由四维生命改造成三维生命，当然也可以由三维改造成二维，当整个文明进入低维后，就像敌人发起降维打击，肆无忌惮，在超大规模上疯狂攻击，不需要任何顾及。</li>\n<li>回归运动声明：我们宇宙的总质量减少至临界值以下，宇宙将由封闭转变为开放，宇宙将在永恒的膨胀中死去，所有的生命和记忆都将死去。请归还你们拿走的质量，只把记忆体送往新宇宙。</li>\n</ol>\n<h1 id=\"书评\"><a class=\"markdownIt-Anchor\" href=\"#书评\">#</a> 书评</h1>\n<p>在三体的三部曲中，我个人最喜欢黑暗森林，其次是三体第一部，最后的死神永生。最喜欢黑暗森林是因为面壁计划实在是太酷了，四个面壁者将封闭自己的心灵，与三体世界和 ETO 组织对抗。面壁者和破壁者的对抗实在太巧妙了，每次悬念揭晓的时候都直呼大刘太强了。对于黑暗森林的公理还有猜疑链和技术爆炸理论，我不敢说这一定是对的，但是起码可以自圆其说。还有章北海这个充满魅力的人，“自然选择，前进四”，太燃了，一辈子的准备只为这一次，还有最后 “没关系，都一样的” 的豁达，这是一个真正以人类存活为己任的，伟大的，大写的人。还有史强，这是两部里面我都很喜欢的人。</p>\n<p>第一部的三体游戏铺垫和古筝计划也很棒，把世界观展开出来了，然后在视网膜倒计时，科学家离奇死亡和宇宙为你闪烁，让人感受到了巨大的压迫感，我都在想已经没机会，最后史强说出：” 虫子从来没有被战胜过 “，太棒了。</p>\n<p>第三部的格局是最大的，云天明的跨越世纪的爱太浪漫了，直戳我们这些理科男的心窝。只是这温暖是给程心的，就很难受，程心是我无论看多少遍，我都接受不了的人物，总是妇人之仁，完全不看未来，最终因为她的短视，毁掉了整个人类。客观来说，程心是个很不错的人，只是去到了一个错误的位置，圣母心太重了。以前我觉得有点扯淡，不会有这么傻白甜的人，但是看看现在舆论的圣母化程度，我真的开始怀疑了。然后死神永生的四维空间，关于整个宇宙的讨论也挺有意思的，大自然真的是自然 的吗？但是有点晦涩难懂，虽然大刘已经；努力描述了，但是我还是很难理解四维空间、死线等一系列的概念，而且这一部也有点太碎了，读起来没前两部那么连贯。但总的来说还是很棒的。</p>\n",
            "tags": [
                "科幻",
                "小说"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%9D%91%E5%BA%84_%E5%88%98%E4%BA%AE%E7%A8%8B_92/",
            "url": "http://example.com/2023/10/12/%E4%B9%A6%E7%B1%8D/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%9D%91%E5%BA%84_%E5%88%98%E4%BA%AE%E7%A8%8B_92/",
            "title": "一个人的村庄_刘亮程_92",
            "date_published": "2023-10-12T10:49:32.969Z",
            "content_html": "<h1 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h1>\n<ol>\n<li><strong>无论乖好与否，在我卑微的一生中，都免不了驴一样般被人使唤，放弃自己想做的事，想住的房子，想爱的人乃至想说的话。</strong></li>\n<li><strong>夜再黑，夜空是晴朗的。</strong></li>\n<li>我感到我的喉管里埋着一千匹马的嘶鸣，四肢涌动着一万只马蹄的奔腾声。而我，只是低下头，轻轻的叹息了一声。</li>\n<li>许多事情都一样，开始干的人很多，到了最后，便成了我一个人的。</li>\n<li>它是件太小的事情，只能发生在一个人的心里。</li>\n<li><strong>谁在一声虫鸣里醒来，一声狗吠中睡去。一片叶子落下谁的一生。一粒尘土飘起谁的一世。</strong></li>\n<li>多少年来我天天见的一街人，却一个也不认识。</li>\n<li>每个人，每件事物，都会看见自己的影子在阳光下缓缓伸长，伸到看不见的遥远处，再慢慢返回到自己脚跟。</li>\n<li>那些人家的生活，简直过不下去的生活，也都一天天地过了下去。房子依旧破烂地撑着，人依旧贫穷地活着。什么事都不会发生。房子，人，草木和牲畜，都在无望中苦挨苦等。</li>\n<li><strong>我不可能走到每个角落，死亡却遍布每一寸土。</strong></li>\n<li><strong>在我的一生中，我至少会守着一朵花开谢，我放下别的事情，放下往前走的路。春天过去，秋天过去，所有人离开，我留下。为我最喜欢的一朵花。我想。</strong></li>\n<li><strong>生活中最大的负担在人的思想里。</strong></li>\n<li>一辈子里的某一天，人淹没在庄稼和草中，无声地挥动锄头，风吹草低时露出一个头顶，腰背酸痛时咳嗽两声。另外一天人不在了，剩下许多个早晨，太阳映照着空房子。</li>\n<li>一个看清了一生事业的人，总是笼罩在众人的黑暗中单独地开始了行动。</li>\n<li>我的亲人们说我是很冷的人，不是的，我把仅有的温暖全给了你们。</li>\n<li>冬天总是一年一年地要冷一个人，先是一条腿，一块骨头，一副表情，一种心境… 而后整个人生。</li>\n<li>她的音容笑貌，她的青春，一切的一切，都在一场风中飘散。结束吧，世间还有另一些事情，等着发生呢。</li>\n<li>人的行为被工具限制，而不是理智。</li>\n<li><strong>人像草一样，一茬子一茬子长起来，又一茬子一茬子老掉。</strong></li>\n</ol>\n",
            "tags": [
                "散文"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%85%B6%E4%BB%96/%E8%A5%BF%E5%AE%89%E6%B8%B8%E8%AE%B0/",
            "url": "http://example.com/2023/10/12/%E5%85%B6%E4%BB%96/%E8%A5%BF%E5%AE%89%E6%B8%B8%E8%AE%B0/",
            "title": "西安游记",
            "date_published": "2023-10-12T10:49:32.965Z",
            "content_html": "<h1 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\">#</a> day1</h1>\n<p><strong>路线：陕西省博物馆 - 钟楼 - 鼓楼 - 城墙 - 回民街</strong></p>\n<p>作为一个有点恐高的人而言，第一次坐飞机有点紧张，其实飞机很平稳，上升过程中就像是坐车一样。而且从飞机上俯瞰地面的感觉很奇妙，是一种很特殊的感觉，后面到一定高度之后就被云层遮挡了。偶尔遇到气流有点颠簸的时候还是有点紧张的。然后一下飞机就把身份证弄丢了（囧），当时还是很紧张的，毕竟到了一个陌生的地方把身份证弄不见了，怕影响后面的旅游，也由于这个小插曲导致凌晨两点才到的酒店。不过西安还是很不错的，可以通过报身份证号 + 面部识别来解决，不用太担心。不过回到家我就马上去补办身份证了，身份证还是很重要的，大家要注意存放。</p>\n<p>然后 8 点起来，然后去吃了个胡辣汤，感觉还行，只是不太喜欢里面的木薯粉。后来被告知这个是河南口味的胡辣汤，西安的胡辣汤和河南的胡辣汤最大的区别就在于河南的是肉片，而西安的是肉丸，其实风味和原料也挺大差别。河南口味的可以吃逍遥镇的，西安的话推荐邢老三，个人觉得河南口味可以更容易接受，虽然我更喜欢西安口味的。早晨吃完就准备去逛省博，省博里面还是非常有意思的，逛前面三个馆把全部历史进程看一遍就好，剩下的馆要不是要钱的，要不在维护。要钱的馆如果有兴趣的话，也可以逛一下，我们逛了一个，其实和前 3 个免费的馆差不多，感觉不是很值的逛。而且逛完一个馆基本就半天时间了，其实也挺累的，所以个人推荐逛前三个馆即可。然后我们是在馆内的餐厅吃了一顿，还行。</p>\n<p>然后回去酒店休息，休息完了就去逛钟鼓楼，就普通的历史建筑，个人推荐晚上观赏，灯亮起来会好看很多。然后就去城墙，多亏了缺德导航，本来一个地铁站的距离，硬是带着我们逛了一个小时，真的服啦。城墙真的很壮观，我们在上面逛了很久才走了一小部分，感觉这才是真正的城墙，可以租个单车骑，这样会轻松一点。接着去回民街找吃的，本来想吃羊肉泡馍的，阴差阳错整了个小炒泡馍，真的吃不惯，这个辣的很奇怪，是一种浑浊的辣，辣味混合了馍的淀粉感，总之就是吃不惯。然后还尝了马军的爆辣牛筋丸，老板问爆辣还是微辣，同伴直接说爆辣，一颗直接给我辣哭了，感觉我的舌头在燃烧，头皮发麻，一瓶怡宝顿顿顿地灌。本来还想再逛逛回民街的，想了想还是直接会酒店休息了。半夜还流鼻血了，难顶，酒店的被子都滴上鼻血了。本来酒店还要我们赔钱的，后来清理干净了，又不用了，省了一笔钱。</p>\n<h1 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\">#</a> day2</h1>\n<p><strong>路线：兵马俑 - 华清宫 - 骊山 - 长恨歌</strong></p>\n<p>早早起床搭车去兵马俑，这个一定要去找解说，不然会很无聊的，毕竟兵马俑你不了解的话，他就是一个土块。而且解说也不贵，通常是一个团的形式，所以一定要找解说。兵马俑一定要去看一次，感受一下历史的厚重感和感受古人的智慧，不过一次就够了。逛完还会带了去一个买蓝田玉的地方，真假我就不知道，本来想买一个给我妈，但我妈担心我被骗就没买了。然后就去吃饭，去了魏家凉皮，就跟 KFC 和麦当劳一样的连锁店，买西安小吃的，味道不错，结果也不是很贵。这天比较难绷的是逛完兵马俑就一直流鼻血，可能是天气太干燥了，一直停不下来，搞得我吃了一个凉皮花了一个小时。然后去逛华清宫，个人不推荐逛，挺无聊的，就是普通的地方，没什么特色。然后搭车逛骊山，刚好日落时分，从骊山拍照还真的很不错，挺好看的，骊山号称西安秋名山，山上还有个藤原豆腐店和汽车模型，蛮要意思的。然后下山去看长恨歌，就是和长恨歌内容对应的歌舞表演和灯光秀，个人感觉还行，票有点贵，对这个不感兴趣的可能会觉得有点亏。然后同伴亲戚带我们去吃海鲜烧烤，真不错，很特别，吃得很开心。</p>\n<h1 id=\"day3day4\"><a class=\"markdownIt-Anchor\" href=\"#day3day4\">#</a> day3&amp;day4</h1>\n<p><strong>路线：华山 - 大雁塔 - 大唐不夜城 - 串串</strong></p>\n<p>睡到自然醒就起来，由于前两天逛得太厉害了，而且昨晚又是两点才睡，本来以为能够顶得住的，还是太高估自己和低估华山的难度了。可以先坐地铁到北客站，然后搭高铁到华山北，可以搭黑车到华山，不用绕路，我们搭公交绕的有点远。终于到达华山后，就是漫长的爬山过程，太累了，可是爬上去之后往后看自己走过的路的感觉还是很奇妙的。如果想看日出的话，推荐下午 4 点开始爬，这个时候温度比较低，爬起来比较舒服，如果可以接受夜爬的话，可以 7 点开始爬，刚好上到东峰就可以看到日出了。当时爬了一段时间后就开始很累了，这时就觉得有点不对劲了，到晚上 11 点都还是没有爬到东峰，而且听说东峰风很大，所以我们就近租了个帐篷先休息一下，准备凌晨 3 点起床继续爬。从帐篷往外望还是很好看的，可以看到繁星点点。睡完一觉后舒服了不少，洗个脸就进行爬，然后流鼻血了，麻了。只好继续待在帐篷内等日出了，不敢继续往上爬了，担心身体受不了。幸好在这个地方观赏日出也不错，看着太阳缓慢的从云层中穿出是一种很不错的体验。然后就去西峰坐索道下山，从索道看华山又是不一样的体验，完全值回票价。比较遗憾的是没能登上东峰，没有去看看长空栈道，还是挺可惜的。建议爬华山前一天好好休息，养好精神，而且平时运动较少的不推荐爬华山，因为对体能要求还挺高的。下山后第一个念头就是赶紧会酒店休息，真的太 TM 累了，回到酒店直接从中午 2 点睡到下午 6 点，然后去看大雁塔和音乐喷泉，还不错，然后逛了逛大唐不夜城，值得一逛。然后同伴亲戚带我们去吃串串，我觉得跟火锅差不多，就是把菜提前串号，然后算签数来算钱。比较特别的是油碗没有酱油可选，还挺惊讶的。吃完就回酒店了。</p>\n<h1 id=\"day5\"><a class=\"markdownIt-Anchor\" href=\"#day5\">#</a> day5</h1>\n<p>最后一天是闲逛的一天，去吃西安口味的胡辣汤，然后会酒店休息和收拾东西，准备回家。中午去赛格逛了一下，吃了毛笔酥，还行。感觉逛赛格挺无聊，就看一下瀑布，里面买的东西都没啥兴趣，不过我平时也不太喜欢逛商场。然后去逛了一些小雁塔和西安博物馆，跟陕西博物馆还是有很多不一样的地方，如果比较闲的话可以逛一下。然后去书院门买手信，没有挑到喜欢的，决定还是买点吃的算了。然后继续逛街，吃搅团和鱼鱼，完全吃不习惯，太怪了。还去尝了一些羊肉泡馍，羊肉很好吃，但是还是吃不惯泡馍。买了黄桂柿子饼、biangbiang 面、油泼辣子和凉皮作为特产就回去了。</p>\n<p>感觉西安是个好地方，以后有机会的话还会再去一遍，希望能爬上东峰，体验一下长空栈道。感觉西安的传统小吃可能不太符合我们南方人的口味，不过对与旅游，我一向是秉持着” 宁愿吃难吃但正宗的，不吃好吃但不正宗的 “，毕竟旅游就是体验不同的地方嘛。</p>\n",
            "tags": [
                "游记"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%94%B5%E5%AD%90%E4%B9%A6/%E7%A0%81%E5%86%9C%E7%BF%BB%E8%BA%AB/",
            "url": "http://example.com/2023/10/12/%E7%94%B5%E5%AD%90%E4%B9%A6/%E7%A0%81%E5%86%9C%E7%BF%BB%E8%BA%AB/",
            "title": "码农翻身-刘欣",
            "date_published": "2023-10-12T10:49:32.961Z",
            "content_html": "<ol>\n<li>最好的办法是：把日志、安全、事务、性能统计这样的非功能性代码和业务逻辑完全隔离开来！因为它们关注点和业务代码完全不同，它们之间应该是正交的。</li>\n<li>CAS 本质上就是一个认证中心的 cookie，加上多个子系统的 cookie 而已。</li>\n<li>计算机行业的所有问题都可以通过增加一个抽象层来解决，我看我们就在应用程序和数据库之间增加一个抽象层 —— 缓存。</li>\n<li>框架是一个半成品，是无法独立运行的，必须由开发人员按照它定义的规则，把项目的代码放置到指定的位置，由框架整合起来，这才是一个完整的应用程序。</li>\n<li>大部分人只会抱怨项目很无趣、没有挑战，遇到问题也只会安于现状。只有少数人会发现工作中的 “痛点”，并且真正动手解决它，给公司带来价值。这是提高自己，让自己和别人区分开来的重要方法。</li>\n<li>只要遵循路径的约定，大家就不用费心费力地指定各种路径了，一切由工具自动完成。这样一来，Build 脚本就可以极大地简化，只需寥寥数行。</li>\n<li>这就是程序员辛苦的地方：需要把复杂，容易产生歧义的人类语言翻译成精确的计算机语言指令。</li>\n<li>对于性格内向的程序员，很多时候你认为基本准备好了其实就够了，凡事必先骑上虎背，勇敢地迈出去，努力地争取一下，你就会发现自己登上了更高一层的台阶。</li>\n<li>指令集是对 CPU 的抽象，文件是对输入 / 输出设备的抽象，虚拟存储器是对程序存储的抽象，进程是对一个正在运行的程序的抽象，而虚拟机是对整个计算机 (包括操作系统，处理器和程序) 的抽象。</li>\n<li>停下来，思考，才是进步的本质。</li>\n<li>写作会逼着你去思考，梳理知识体系，防止自己被碎片化所填满。</li>\n</ol>\n",
            "tags": [
                "书籍",
                "电子书"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%94%B5%E5%AD%90%E4%B9%A6/%E4%B8%8A%E4%BA%A4%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/",
            "url": "http://example.com/2023/10/12/%E7%94%B5%E5%AD%90%E4%B9%A6/%E4%B8%8A%E4%BA%A4%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/",
            "title": "上交生存手册",
            "date_published": "2023-10-12T10:49:32.959Z",
            "content_html": "<ol>\n<li>平庸的生活方式是麻醉药。他只会束缚你，让你没有作为，甚至没有出息地度过大学的四年。</li>\n<li>一般来说，一项任务的价值，取决于它在时间尺度上的作用效率。花同样的功夫，我们应该尽量多做那些对整个人生都产生正面影响的事情，少做对中期的未来产生影响的事情，不做那些只对近期产生影响的事情。当然，产生负面影响的事是最应该避免的。</li>\n<li>事务对我们都会有影响，其价值必须定量，而非定性地讨论。</li>\n<li>成功的人在不同的地方有不同的成功方式，但是失败的人在不同的地方会有完全相同的失败方法。</li>\n<li>某个环境的条件如何如何之好并不是你去到某个环境中的理由，你能从这个环境中获得什么样的成就，才是你前往某个环境的原因。</li>\n<li>一个事实是，设置博士学位的唯一目的是培养顶尖科研人才。这个学位不考虑你的就业前景，不考虑你精神所能承受的压力，它唯一考虑的，是你在某一个领域做出了多大的开创性贡献。</li>\n<li>人生本来就是如此的不公平，一个人的家庭比你多一点钱可以让他读硕士实在不算什么大不了的事，有太多太多的人根本不需要读硕士，甚至根本不需要读书，就可以坐拥万贯家产，一辈子都比你过得好。所以大家只要尽自己能力去努力，好好规划自己的人生，能够过上自己能达到的最好的生活，也就可以了。</li>\n<li>对于一名研究者而言，摆在你面前的是一片开阔的汪洋大海，仅靠毅力闭着眼睛向前冲是很难看到新大陆的。</li>\n<li>在研究中，知道做什么比知道怎样做更为重要。</li>\n<li>一个成熟的研究人员必须学会习惯失败。</li>\n<li>我们在研究起步阶段，应该仔细阅读该领域的权威教科书。一般来讲，知识会随着时间而沉淀，在一代代人的努力下变得精炼而富有结构性。一本好的教科书则可以很好地总结记录这样的结构。</li>\n<li>真正能断定一个理论是不是垃圾，有多大价值，要看他会不会被后人记住。真正好的理论往往会引发人们广泛而深刻的探讨，甚至是争论。</li>\n<li>越复杂的理论越有可能是堆砌着补丁的伪装 —— 其内在思想却是肤浅的。</li>\n<li>我们这个社会的浮躁之处就在于：太多的目光汇聚在那万里挑一的成功经验上，而失败的人甚至连发言权都没有。</li>\n<li>在同等工作量的前提下，明智的进度控制应该是把自己的全部工作平均分配在各次课上提交。即便你已经做完了更多，也必须像说评书一样娓娓道来，说一半藏一半，不要一股脑呈现完。</li>\n<li>读研，充其量只是一种缓冲 —— 当你不知道做什么好的时候，或者你知道了做什么好但是时间已经不足以让你获得理想的结果的时候，你没有更多的选择，于是才继续读硕士，寄希望于给自己一段可以继续努力的时间。</li>\n<li>努力提升实力才是解决之道。在国内生存，你最缺的不是户口，而是实力。</li>\n<li>突击备考的一个必要前提是，我们把时间用来做了更重要的事情。</li>\n<li>你需要时刻牢记，你的分数在你毕业之后都已作废，分数的确是通往更高平台的通行证，但是与你本身的能力却是无关的。</li>\n<li>毕竟大学是一个自由度很高的地方，到了大学没人会告诉你应该做什么，也没有说什么选择一定是对的，而恰好高考的应试教育最失败的地方就是没有让中国学生想清楚高中结束之后你到底要做什么，不过大学四年有充裕的时间让你想明白这件事情。</li>\n<li>一定不要质疑自己的努力和上限，不要贱卖自己的未来。</li>\n<li>我有持有幼稚观点的权力，而且持有这种 “愚蠢” 的观点常常让我感觉良好。</li>\n<li>任何程度的工作都有它的价值，要敢于表达出来和团队成员多交流形成正反馈，让更多的人知道你在做什么。存在感在团队中很重要。</li>\n<li>工作起来时间会过得很快。大部分时候我们会埋在工作中无暇考虑其他，但更多时候选择比努力更重要，设立一个时间节点能够帮助你判断自己的路有没有走偏。</li>\n</ol>\n",
            "tags": [
                "电子书"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "url": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "title": "数据库系统概述-91",
            "date_published": "2023-10-12T10:49:32.954Z",
            "content_html": "<h1 id=\"绪论\"><a class=\"markdownIt-Anchor\" href=\"#绪论\">#</a> 绪论</h1>\n<p>数据库的特点之一是数据的共享，严格地讲，这里的数据共享是指多种应用、多种语言、多个用户互相覆盖地使用数据集合。</p>\n<p>数据库 DB、数据库系统 DBS 和数据库管理系统 DBMS 之间的关系是 DBS 包括 DB 和 DBMS。</p>\n<p>在数据管理技术的发展过程中，经历了文件系统、人工管理和数据库系统阶段。</p>\n<h2 id=\"数据库系统概述\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统概述\">#</a> 数据库系统概述</h2>\n<h3 id=\"四个基本概念\"><a class=\"markdownIt-Anchor\" href=\"#四个基本概念\">#</a> 四个基本概念</h3>\n<h4 id=\"数据\"><a class=\"markdownIt-Anchor\" href=\"#数据\">#</a> 数据</h4>\n<p>数据是数据库中存储的基本对象，数据的定义是描述事物的符号记录。</p>\n<p>数据的含义称为数据的含义，数据与其语义是不可分的。</p>\n<p>数据是有结构的：记录是计算机存储数据的一种格式或一种方法。</p>\n<h4 id=\"数据库\"><a class=\"markdownIt-Anchor\" href=\"#数据库\">#</a> 数据库</h4>\n<p><strong>数据库 (Database，简称 DB) 是长期存储在计算机内、有组织的、可共享的大量数据的集合。</strong></p>\n<h5 id=\"数据库的基本特征\"><a class=\"markdownIt-Anchor\" href=\"#数据库的基本特征\">#</a> 数据库的基本特征</h5>\n<ul>\n<li>数据按一定的数据模型组织、描述和存储</li>\n<li>可为各种用户共享、冗余度较小、易扩展</li>\n<li>数据独立性较高</li>\n</ul>\n<h4 id=\"数据库管理系统\"><a class=\"markdownIt-Anchor\" href=\"#数据库管理系统\">#</a> 数据库管理系统</h4>\n<p>数据库管理系统 (DBMS) 位于用户应用与操作系统之间的一层数据管理软件，是基础软件，是一个大型复杂的软件系统。</p>\n<h5 id=\"主要功能\"><a class=\"markdownIt-Anchor\" href=\"#主要功能\">#</a> 主要功能</h5>\n<ol>\n<li>数据定义功能，提供数据定义语言 (DDL) 和定义数据库中的数据对象</li>\n<li>数据组织、存储和管理\n<ul>\n<li>分类组织、存储和管理各种数据</li>\n<li>确定数据在存储级别上的结构和存取方式</li>\n<li>实现数据之间的联系</li>\n<li>提供多种存取方式提高存取效率</li>\n</ul>\n</li>\n<li>数据操纵功能，提供数据操纵语言 (DML)，实现对数据库的基本操作</li>\n<li>数据库的事务管理和运行管理，由数据库管理系统统一管理和控制，保证事务正确运行</li>\n<li>数据库的建立和维护功能，提供实用程序和工具完成数据库数据批量装载，数据库转储，介质故障恢复，数据库的重组织和性能监视等</li>\n<li>其他功能\n<ul>\n<li>数据库管理系统与网络中其他软件系统的通信</li>\n<li>数据库管理系统之间的数据转换</li>\n<li>异构数据库之间的互访和互操作</li>\n</ul>\n</li>\n</ol>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/1d1c6e6b37a025b0d05c4af995e17427.jpg\"\n                      alt=\"数据库在计算机系统中的位置.jpg\" style=\"zoom:50%;\" \n                >\n<h4 id=\"数据库系统\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统\">#</a> 数据库系统</h4>\n<p>数据库系统 (DBS) 是指在计算机系统中引入数据库后的系统构成，在不引起混淆的情况下常常把数据库系统简称为数据库。</p>\n<p><strong>数据库系统的构成包括数据库，数据库管理系统及其应用开发工具、应用程序和数据库管理员 (DBA)。</strong></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/4c59c7cbd6fbffe4f187f1d35b6104eb.png\"\n                      alt=\"数据库系统\" style=\"zoom:50%;\" \n                >\n<h3 id=\"数据库管理技术的产生和发展\"><a class=\"markdownIt-Anchor\" href=\"#数据库管理技术的产生和发展\">#</a> 数据库管理技术的产生和发展</h3>\n<p><strong>数据管理对数据进行分类、组织、编码、存储、检索和维护。</strong></p>\n<p>数据库系统管理相比于文件管理系统的优点是：程序员不需要关注记录的存储和不同表之间的联系，开发速度快。</p>\n<p>数据库的数据独立性高，拥有物理独立性，当数据的物理存储改变不影响应用程序，也拥有逻辑独立性，数据的逻辑结构改变不影响应用程序。</p>\n<h2 id=\"数据模型\"><a class=\"markdownIt-Anchor\" href=\"#数据模型\">#</a> 数据模型</h2>\n<p><strong>数据模型是对现实世界数据特征的抽象，通俗来讲数据模型就是对现实世界的模拟，是数据库系统的核心和基础。</strong></p>\n<p>数据模型分为两类：概念模型，也称信息模型，是按用户的观点对数据和信息建模，用于数据库设计；逻辑模型和物理模型，逻辑模型按计算机系统的观点对数据建模，用于 DBMS 实现，物理模型描述在系统内 (磁盘上) 的表示方式和存取方法。</p>\n<p><strong>数据模型由三部分组成：数据结构，用于描述系统的静态特性；数据操作，用于描述系统的动态特性；完整性约束。</strong></p>\n<h3 id=\"概念模型\"><a class=\"markdownIt-Anchor\" href=\"#概念模型\">#</a> 概念模型</h3>\n<h4 id=\"信息世界中的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#信息世界中的基本概念\">#</a> 信息世界中的基本概念</h4>\n<ol>\n<li>实体 (entity)：客观存在并可相互区别的事物。</li>\n<li>属性 (attribute)：实体所具有的某一特性称为属性，一个实体可以由多个属性来刻画。</li>\n<li>码 (key)：唯一标志实体的属性。</li>\n<li>实体型 (entity type)：用实体名及其属性名集合来抽象和刻画同类实体称为实体型。</li>\n<li>实体集 (entity set)：同一类型实体的集合称为实体集。</li>\n<li>联系 (relationship)：现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。</li>\n</ol>\n<h3 id=\"常用的逻辑模型\"><a class=\"markdownIt-Anchor\" href=\"#常用的逻辑模型\">#</a> 常用的逻辑模型</h3>\n<ol>\n<li>层次模型，为格式化模型，使用树形结构来表示各类实体已经实体间的联系。</li>\n<li>网状模型，为格式化模型</li>\n<li>关系模型，目前最常见的模型，</li>\n<li>面向对象数据模型，</li>\n<li>对象关系数据模型</li>\n<li>半结构化数据模型，如 XML</li>\n<li>非结构化数据模型，图模型</li>\n</ol>\n<h2 id=\"数据库系统的结构\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统的结构\">#</a> 数据库系统的结构</h2>\n<p>从数据库应用开发人员角度看，数据库系统采用三级模式结构，是数据库系统内部的系统结构。</p>\n<p>从数据库最终用户角度看有：单用户结构、主从式结构、分布式结构、客户 - 服务器、浏览器 - 应用服务器 / 数据库服务器。</p>\n<h3 id=\"三级模式结构\"><a class=\"markdownIt-Anchor\" href=\"#三级模式结构\">#</a> 三级模式结构</h3>\n<p>数据库系统模式分为外模式，模式 (逻辑模式) 和内模式。</p>\n<p>逻辑模式是数据库系统模式的中心，与数据的物理存储细节和硬件环境无关，与具体的应用程序、开发工具及高级程序设计语言无关。</p>\n<p>外模式，也称子模式或用户模式，是数据库用户使用的局部数据的逻辑结构和特征的描述，通常是逻辑模式的子集，一个模式可以有多个外模式，反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求。</p>\n<p>内模式，也称存储模式，是数据物理结构和存储方式的描述，一个数据库一般只有一个内模式。</p>\n<p><strong>通过二级映像可以保证数据的物理独立性和逻辑独立性。</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/f07dad2a314607f6018151359fa25d93.png\"\n                      alt=\"数据库三级模式.png\"\n                ></p>\n<h1 id=\"关系数据库\"><a class=\"markdownIt-Anchor\" href=\"#关系数据库\">#</a> 关系数据库</h1>\n<p>基数的大小等于各个域的大小相乘。</p>\n<p>分量必须取原子值。</p>\n<p>关系模式是型，关系是值，关系模型是对关系法描述。</p>\n<p>关系的三类完整性约束：实体完整性，参照完整性，用户定义的完整性。前两者是关系模型必须满足的完整性约束条件，称为关系的两个不变性，应由关系系统自动支持。</p>\n<p>实体完整性是指关系的主属性不能取空值。</p>\n<p>参照完整性是指外码一定要是存在的值。比如学生所选课程号是外码，该课程一定要实际存在。此时学生关系是参照关系，课程关系是被参照关系或目标关系。</p>\n<p>‍关系代数中的连接操作是由选择和笛卡尔积操作组合而成。</p>\n<p>关系数据模型的基本数据结构是关系，而不是关系模式。</p>\n<p>在参照完整性规则中，参照关系 R 中的外码与被参照关系 S 中的主码可以不同名，但应取自同一值域。</p>\n<h3 id=\"关系代数\"><a class=\"markdownIt-Anchor\" href=\"#关系代数\">#</a> 关系代数</h3>\n<p><strong>关系代数是一种抽象的查询语言，它使用对关系的运算来表达查询。</strong></p>\n<p>选择运算是从关系 R 中选取使逻辑表达式 F 为真的元祖，是从行的角度进行的运算。</p>\n<p>投影操作是从 R 中选择出若干属性列组成新的关系，主要是从列的角度进行运算，投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组 (避免重复行)。</p>\n<p>连接是从两个关系的笛卡尔积中选取属性间满足一定条件的元组。</p>\n<p>两个关系 R 和 S 再做自然连接时，关系 R 中某些元组有可能在 S 中不存在公共属性上值相等的元组，这些被舍弃的元组被称为悬浮元组。可以通过外连接保留左边或者右边的悬浮元组，其他属性上填空值。</p>\n<p><strong>除法首先找出 R 和 S 关系中相同的属性，即 Y 属性。被除关系 R 中与 S 中不相同的属性是 X，做取消重复值的投影。然后求关系 R 中 X 属性对应的象集 Y。最后判断包含关系，判断关系 R 中 X 各个值的象集是否包含关系 S 中属性 Y 的所有值，如果包含则为所求。</strong></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/t_1007/article/details/53036082\" >除运算应用实例 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/f71e0b776d2f094e3aa8450af51872ad.png\"\n                      alt=\"关系代数\" style=\"zoom:50%;\" \n                >\n<h3 id=\"关系演算\"><a class=\"markdownIt-Anchor\" href=\"#关系演算\">#</a> 关系演算</h3>\n<p>关系演算是以数理逻辑中的谓语演算为基础，可以按谓词变元不同分为两类：以 ALPHA 语言为代表的以元组变量作为基本对象，和以 QUE 为代表的以域变量作为基本对象。</p>\n<p>ALPHA 语句格式： <code>GET 工作空间名(定额) (表达式1)[:条件][DOWN|UP 表达式2]</code> 。例如查询选修 2 号课程的学生名字： <code>RANGE sc x GET W(Student.Sname):∃X(X.Sno=Suudent.Sno∧X.Cno='2'</code> 。</p>\n<p>QBE 是基于屏幕表格的查询余姚，以填写表格的方式构造查询，使用示例元素 (域变量) 来表示查询结果可能的情况，查询结果以表格形式显示。分为示例变量，打印操作符 P 和查询条件。</p>\n<h1 id=\"关系数据库标准语言sql\"><a class=\"markdownIt-Anchor\" href=\"#关系数据库标准语言sql\">#</a> 关系数据库标准语言 SQL</h1>\n<p><strong>SQL 集数据定义语言 (DDL)，数据操纵语言 (DML)，数据控制语言 (DCL) 功能于一体，可以独立完成数据库生命周期中的全部活动。</strong></p>\n<p>SQL 高度非过程化，存取路径的选择以及 SQL 的操作过程由系统自动完成。</p>\n<p>定义模式实际上定义了一个命名空间，或者说是目录。</p>\n<p>空值是一个很特殊的值，含有不确定性，对关系运算带来特殊的问题，需要做特殊的处理。</p>\n<p>更新视图的限制，一些视图是不可更新的，因为对这些视图的更新不能唯一地有意义地转换成对相应基本表的更新。</p>\n<h1 id=\"数据库安全性\"><a class=\"markdownIt-Anchor\" href=\"#数据库安全性\">#</a> 数据库安全性</h1>\n<p>数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。</p>\n<p>数据库的一大特点是数据可以共享，数据共享必然带来数据库的安全性问题。</p>\n<h3 id=\"数据库的不安全因素及安全措施\"><a class=\"markdownIt-Anchor\" href=\"#数据库的不安全因素及安全措施\">#</a> 数据库的不安全因素及安全措施</h3>\n<ol>\n<li>非授权用户对数据库的恶意存取和破坏。安全措施主要包括用户身份识别、存取控制和视图等技术。</li>\n<li>数据库中重要或敏感的数据被泄露。安全措施主要由强制存取控制、数据加密存储和加密传输等。</li>\n<li>安全环境的脆弱性。建立一套可信计算机系统的概率和标准。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/d60cdd4a5b0d034082aa8f133c477c18.png\"\n                      alt=\"安全标准\"\n                ></p>\n<h2 id=\"数据库安全控制\"><a class=\"markdownIt-Anchor\" href=\"#数据库安全控制\">#</a> 数据库安全控制</h2>\n<p><strong>数据库安全技术有：用户身份鉴别、存取控制、自主存取控制方法、数据库角色、强制存取控制方法。</strong></p>\n<p>自主存取控制 (DAC)：用户对不同的数据对象有不同的存取权限，不同的用户对同一对象也有不同的存取权限，用户还可以将其拥有的存取权限转授给其他用户。</p>\n<p>** 在收回用户权限的时候可以选择级联回收或受限回收，前者会将该用户传播出去的权限也进行回收，而后者不会。如果运行循环授权的话，级联回收会导致死循环，因此不允许级联回收。** 一个用户可能从多个用户处获得同一个权限，级联回收只回收直接或间接从此处获得权限，不影响从其他用户处获得的权限。</p>\n<p><strong>数据库角色是被命名的一组与数据库操作相关的权限，简单来说角色是权限的集合，可以为一组具有相同权限的用户创建一个角色。</strong></p>\n<p>自主存取控制缺点是可能存在数据的 “无意泄露”，例如读取到机密的数据后将其写入到其他没有限制的数据库中，数据本身没有安全性标志。而强制存取控制 (MAC) 则保证了更高程度的安全性。</p>\n<p>强制存取控制对于主体和客体，DBMS 为它们每个实例 (值) 指派一个敏感度标记 (Label)，主体的敏感度标记称为许可证，客体的敏感度标记称为密级。仅当主体的许可证级别大于或等于客体的密级时， 该主体才能读取相应的客体；仅当主体的许可证级别小于或等于客体的密级时， 该主体才能写相应的客体。</p>\n<p>可以利用视图机制实现授予用户查询某些行的权限。</p>\n<p>审计启动一个专用的审计日志，将用户对数据库的所有操作记录在上面。审计的事件包括服务器事件、系统权限、语句事件和模式对象事件。</p>\n<p>推理控制处理强制存取控制未处理的问题，避免用户利用能够访问的数据推知更高密级的数据。</p>\n<p>隐蔽信道处理强制存取控制未解决的问题，高安全等级用户按事先约定方式主动向低安全等级用户传输信息，从而导致高安全敏感信息泄露。例如每列有唯一的序号，低等级用户通过插入试探高等级用户是否有插入该位置的数据。</p>\n<h3 id=\"安全层次\"><a class=\"markdownIt-Anchor\" href=\"#安全层次\">#</a> 安全层次</h3>\n<ul>\n<li>系统根据用户标识鉴定用户身份，合法用户才准许进入计算机系统。</li>\n<li>数据库管理系统进行存取控制，只允许用户执行合法操作。</li>\n<li>操作系统有自己的保护措施。</li>\n<li>数据以密码形式存储到数据库中。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/c5870f665e46f11af68e67ec086f3863.png\"\n                      alt=\"安全层次\"\n                ></p>\n<h1 id=\"数据库完整性\"><a class=\"markdownIt-Anchor\" href=\"#数据库完整性\">#</a> 数据库完整性</h1>\n<p>数据库的完整性是指数据的正确性和数据的相容性，包括实体完整性、参照完整性和用户定义的完整性。</p>\n<p>数据库的完整性是防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据。</p>\n<p>完整性和安全性的区别在于：完整性是阻止<strong>合法用户</strong>通过<strong>合法操作</strong>向数据库中加入<strong>不正确的数据</strong>；安全性防范的是<strong>非法用户</strong>和<strong>非法操作</strong>存取数据库中的<strong>正确数据</strong>。</p>\n<p>为了避免对基本表进行全表扫描，RDBMS 核心一般都会在主码上自动建立一个 UNIQUE 索引。</p>\n<p>使用断言可以指定更具一般性的约束，可以定义涉及多个表的或聚集操作的比较复杂的完整性约束。</p>\n<p>触发器只能定义在基本表上，不能定义在视图上。</p>\n<p>空值的字段上可以定义主键约束。</p>\n<p>‏实体完整性规则检查的内容包括检查主码的各个属性值是否为空，只要有一个为空就拒绝插入或修改；检查主码值是否唯一，如果不唯一就拒绝插入或修改。</p>\n<h3 id=\"完整性小结\"><a class=\"markdownIt-Anchor\" href=\"#完整性小结\">#</a> 完整性小结</h3>\n<table>\n<thead>\n<tr>\n<th>实体完整性</th>\n<th>参照完整性</th>\n<th>用户定义的完整性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>定义方法</td>\n<td>create table</td>\n<td>create table</td>\n<td>create table</td>\n</tr>\n<tr>\n<td>检查时机</td>\n<td>执行插入和修改操作</td>\n<td>参照表：插入 / 修改；被参照表：删除 / 修改</td>\n<td>执行插入和修改操作</td>\n</tr>\n<tr>\n<td>违约操作</td>\n<td>拒绝执行</td>\n<td>拒绝执行 / 级联操作 / 设置为空值</td>\n<td>拒绝执行</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"关系数据理论\"><a class=\"markdownIt-Anchor\" href=\"#关系数据理论\">#</a> 关系数据理论</h1>\n<p>用规范化理论改造关系模式，消除其中不合适的数据依赖。</p>\n<p>数据依赖的主要类型：函数依赖 (FD)、多值依赖 (MVD) 和连接依赖。数据依赖会导致插入异常、删除异常、更新异常和数据冗余问题。</p>\n<p>函数依赖：设 R (U) 是一个属性集 U 上的关系模式，X 和 Y 是 U 的子集。若对于 R (U) 的任意一个可能的关系 r，r 中不可能存在两个元组在 X 上的属性值相等，而在 Y 上的属性值不等则称 &quot;X 函数确定 Y&quot; 或 &quot;Y 函数依赖于 X&quot;，记为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo lspace=\"0em\" rspace=\"0em\">→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X{\\rightarrow}Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>。还可以根据 X 的真子集是否确定 Y 来判断是 &quot;Y 完全函数依赖于 X，记为&quot;<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo><mover><mo><mo>⟶</mo></mo><mi>F</mi></mover></mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\stackrel{F}{\\longrightarrow}Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3003em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2893em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.711em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> 还是 &quot;Y 部分函数依赖于 X，记为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo><mover><mo><mo>⟶</mo></mo><mi>P</mi></mover></mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\stackrel{P}{\\longrightarrow}Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3003em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2893em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.711em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>&quot;。</p>\n<p>设 K 为关系模式 R&lt;U,F&gt; 中的属性或属性组合，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo><mover><mo><mo>⟶</mo></mo><mi>F</mi></mover></mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">K\\stackrel{F}{\\longrightarrow}U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3003em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2893em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.711em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>，则称 K 为 R 的一个候选码；如果是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo><mover><mo><mo>⟶</mo></mo><mi>P</mi></mover></mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">K\\stackrel{P}{\\longrightarrow}U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3003em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2893em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.711em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>，则称 K 为 R 的一个超码。若关系模式 R 有多个候选码，则选择其中一个为主码。</p>\n<p>包含在任意一个候选码中的属性，称为主属性，否则称为非主属性或非码属性。整个属性组是码，称为全码。</p>\n<p>Armstrong 公理系统中包含自反律、增广律和传递律。</p>\n<p>如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mo>+</mo></msup><mo>=</mo><msup><mi>F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">G^+=F^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>，就说函数依赖集 F 覆盖 G，或 F 与 G 等价，两个函数依赖集等价是指它们的闭包等价。</p>\n<h2 id=\"范式\"><a class=\"markdownIt-Anchor\" href=\"#范式\">#</a> 范式</h2>\n<p>各种范式之间的联系：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>2</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>3</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>4</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>5</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">1NF\\supset 2NF\\supset 3NF\\supset BCNF\\supset 4NF\\supset 5NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">5</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，关系属于 n 范式，可以记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mi>n</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}nNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>。</p>\n<p>低级别的关系模式可以通过模式分解转换为若干个高一级的范式的关系模式的集合，这个过程被称为规范化。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>：如果一个关系模式 R 的所有属性都是不可分的数据项，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>。如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，则会出现插入异常、删除异常、修改复杂和数据冗余度大的问题。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">2NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>：若关系模式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，并且每一个非主属性都完全依赖于 R 的主码，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}2NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>。如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}2NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，仍会出现插入异常、删除异常、修改复杂和数据冗余度大的问题，但是相比于 1NF 的情况得到缓解。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">3NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>：关系模式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\langle}U,F\\rangle{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，若 R 中不存在这样的码<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mtext>、属性组</mtext><mi>Y</mi><mtext>及非主属性</mtext><mi>Z</mi><mo stretchy=\"false\">(</mo><mi>Y</mi><mo>⊉</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">X、属性组Y及非主属性Z(Y{\\not\\supseteq}Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord cjk_fallback\">、属性组</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord cjk_fallback\">及非主属性</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">⊇</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span>)，使得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo lspace=\"0em\" rspace=\"0em\">→</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo lspace=\"0em\" rspace=\"0em\">→</mo><mi>Z</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo>↛</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X{\\rightarrow}Y,Y{\\rightarrow}Z,Y{\\not\\rightarrow}X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord\"><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> 成立，则称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>3</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\langle}U,F\\rangle{\\in}3NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，简而言之即不存在非主属性传递函数依赖于候选码。如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>3</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}3NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，仍会出现插入异常、删除异常、修改复杂和数据冗余度大的问题，但是相比于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">2NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span> 的情况得到缓解。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">BCNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span></span></span></span>：设关系模式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\langle}U,F\\rangle{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，如果对于 R 的每个函数依赖<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo lspace=\"0em\" rspace=\"0em\">→</mo><mi>Y</mi><mtext>，且</mtext><mi>X</mi><mo>⊅</mo><mi>Y</mi><mtext>时</mtext></mrow><annotation encoding=\"application/x-tex\">X{\\rightarrow}Y，且X{\\not\\supset}Y时</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord cjk_fallback\">，且</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">⊃</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord cjk_fallback\">时</span></span></span></span>，X 必含有码，那么<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}BCNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span></span></span></span>。即在关系模型 R 中，每个决定因素都包含码。3NF 出现问题是因为存在主属性 J 部分依赖于码<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(S,T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span>，因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">BCNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span></span></span></span> 的关系模式中要求没有任何属性对码的部分函数依赖和传递函数依赖。</p>\n<p>如果一个关系数据库中的所有关系模式都属于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">BCNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span></span></span></span>，那么在函数依赖范畴内，它已实现模式的彻底分解，达到了最高的规范化程度，消除了操作异常等诸多问题。</p>\n<p><strong>1NF 消除非主属性对码的部分函数依赖满足 2NF，2NF 消除非主属性对码的传递函数依赖满足 3NF，3NF 消除主属性对码的部分和传递函数依赖满足 BCNF，BCNF 消除非平凡且非函数依赖的多值依赖满足 4NF。</strong></p>\n<h2 id=\"模式分解\"><a class=\"markdownIt-Anchor\" href=\"#模式分解\">#</a> 模式分解</h2>\n<p>记<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><msub><mi>U</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mn>1</mn></msub><mo stretchy=\"false\">⟩</mo><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>R</mi><mi>n</mi></msub><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><msub><mi>U</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">⟩</mo><mo stretchy=\"false\">}</mo><mtext>是</mtext><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mtext>的一个分解，若对</mtext><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mtext>的任何一个关系</mtext><mi>r</mi><mtext>均有</mtext><mi>r</mi><mo>=</mo><mi>r</mi><mtext>在</mtext><mi>ρ</mi><mtext>中各关系模式上的投影的自然连接成立，则称分解</mtext><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">{\\rho}=\\{R_1{\\langle}U_1,F_1\\rangle,\\dots,\\{R_n{\\langle}U_n,F_n\\rangle\\}是R{\\langle}U,F\\rangle的一个分解，若对R{\\langle}U,F\\rangle的任何一个关系r均有r=r在\\rho中各关系模式上的投影的自然连接成立，则称分解\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩}</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord cjk_fallback\">的一个分解，若对</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord cjk_fallback\">的任何一个关系</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">均有</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord mathnormal\">ρ</span><span class=\"mord cjk_fallback\">中各关系模式上的投影的自然连接成立，则称分解</span><span class=\"mord mathnormal\">ρ</span></span></span></span> 具有无损连接性，简称无损分解。<a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/151039521\" >无损分解算法 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>记<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><msub><mi>U</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mn>1</mn></msub><mo stretchy=\"false\">⟩</mo><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>R</mi><mi>n</mi></msub><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><msub><mi>U</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">⟩</mo><mo stretchy=\"false\">}</mo><mtext>是</mtext><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mtext>的一个分解，若</mtext><mi>F</mi><mtext>所逻辑蕴含的函数依赖一定也为分解后所有的关系模式中的函数依赖</mtext><msub><mi>F</mi><mi>i</mi></msub><mtext>所逻辑蕴含，即</mtext><msup><mi>F</mi><mo>+</mo></msup><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>F</mi><mn>1</mn></msub><mo lspace=\"0em\" rspace=\"0em\">∪</mo><msub><mi>F</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">∪</mo><mo>…</mo><mo lspace=\"0em\" rspace=\"0em\">∪</mo><msub><mi>F</mi><mi>n</mi></msub><msup><mo stretchy=\"false\">)</mo><mo>+</mo></msup><mtext>，则称关系模式</mtext><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">{\\rho}=\\{R_1{\\langle}U_1,F_1\\rangle,\\dots,\\{R_n{\\langle}U_n,F_n\\rangle\\}是R{\\langle}U,F\\rangle的一个分解，若F所逻辑蕴含的函数依赖一定也为分解后所有的关系模式中的函数依赖F_i所逻辑蕴含，即F^+=(F_1{\\cup}F_2{\\cup}\\dots{\\cup}F_n)^+，则称关系模式R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩}</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord cjk_fallback\">的一个分解，若</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord cjk_fallback\">所逻辑蕴含的函数依赖一定也为分解后所有的关系模式中的函数依赖</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">所逻辑蕴含，即</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">∪</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">∪</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\">∪</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，则称关系模式</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> 的这个分解是保持函数依赖的。</p>\n<table>\n<thead>\n<tr>\n<th>无损连接</th>\n<th>保持依赖</th>\n<th>达到的范式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>3NF，不一定 BCNF</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>Y</td>\n<td>3NF，不一定 BCNF</td>\n</tr>\n<tr>\n<td colspan=\"2\">Y</td>\n<td>4NF</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"数据库设计\"><a class=\"markdownIt-Anchor\" href=\"#数据库设计\">#</a> 数据库设计</h1>\n<p><strong>数据库设计分为 6 个阶段：需求分析、概念结构设计、逻辑结构设计、物理结构设计、数据库实施、数据库运行和维护。</strong></p>\n<p>数据项是数据的最小组成单位，若干个数据项可以组成一个数据结构。</p>\n<p>数据流是数据结构在系统内部传输的路径。</p>\n<p>把参与联系的实体型的数目称为联系的度。</p>\n<p>E-R 模型使用方框代表实体，菱形代表联系，实体之间的联系可以分为 1 对 1、1 对多和多对多。</p>\n<p>E-R 模型三种主要的扩展：ISA 联系 (父类 - 子类联系，表示 is a)、基数约束和 PART-OF 联系。</p>\n<p>ISA 联系又被称作父类 - 子类联系，表示 is a，符号表示为三角形。叉号 X 表示不相交约束，即一个父类的实体最多属于一个子类实体集。完备性约束则是描述父类中的一个实体是否必须是某个子类的实体，如果是则叫做完全特化，否则称为部分特化。</p>\n<p>基数约束是实体型中的任何一个实体可以在联系中出现的最小次数和最多次数。</p>\n<p>Part-of 联系是描述某个实体型是另外一个实体型的一部分。当整体实体被破坏，部分实体仍然可以存在，则称为非独占联系，否则称为独占联系。</p>\n<p>概念结构设计要解决属性冲突、命名冲突和结构冲突。</p>\n<p>关系数据库物理设计的内容是为关系模式选取存取方法和为关系、索引、日志、备份等数据库文件选择物理存储结构。</p>\n<p>为了提高某个属性 (或属性组) 的查询速度，把这个 (或这些) 属性上具有相同值的元组集中存放在连续的物理块中成为聚簇。</p>\n<p>聚簇的局限性在于一个基本表最多只能建立一个聚簇索引，且建立与维护聚簇的开销相当大。对已有关系建立聚簇，将导致关系中元组的物理存储位置移动，并使此关系上原有的索引无效，必须重建。</p>\n<p>数据库的重组织是指物理层面的，重构造是指逻辑层面的，根据新环境调整数据库的模式和内模式。</p>\n<p>‎在 E-R 图向关系模型转换的过程中，无论是一个 1:1 的联系，一个 1：n 的联系，还是一个 m：n 的联系，都可以转换为一个独立的关系模式。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/ba464d37c4370ec918c7e38bd5bb6cd8.jpg\"\n                      alt=\"数据库设计.jpg\"\n                ></p>\n<h1 id=\"数据库编程\"><a class=\"markdownIt-Anchor\" href=\"#数据库编程\">#</a> 数据库编程</h1>\n<h2 id=\"技术方案\"><a class=\"markdownIt-Anchor\" href=\"#技术方案\">#</a> 技术方案</h2>\n<ol>\n<li>利用高级语言的表达能力：嵌入式 SQL。</li>\n<li>拓展 SQL 语言对应过程控制的表达能力：过程化 SQL。</li>\n<li>在一个更大的视野上，将数据库看作是一类数据源：ODBC 编程。</li>\n</ol>\n<h2 id=\"嵌入式sql\"><a class=\"markdownIt-Anchor\" href=\"#嵌入式sql\">#</a> 嵌入式 SQL</h2>\n<p>当指示变量 &lt; 0 时，将对应的属性值置为空值，可以用作新增学生但成绩尚未获取时，将成绩属性通过指示变量置为空值。</p>\n<p><strong>游标是数据库系统为用户开设的一个数据缓冲区，存放 SQL 语句的执行结果。每个游标区都有一个名字，可以理解为该数据区的指针。</strong></p>\n<p>使用游标的原因是 SQL 语言与主语言具有不同的数据处理方式。SQL 语言是面向集合的，一条 SQL 语句原则上可以产生或处理多条记录；而主语言是面向记录的，一组主语言只能存放一条记录。</p>\n<h2 id=\"过程化sql\"><a class=\"markdownIt-Anchor\" href=\"#过程化sql\">#</a> 过程化 SQL</h2>\n<p>过程化 SQL 是对 SQL 的扩展，基本结构是块，块可以嵌套 (调用)，每个块可以完成一个逻辑操作；增加了变量、常量等的定义语句；增加了变量赋值语句和流程控制语句。</p>\n<p>存储过程是由过程化 SQL 语句书写的一段程序，经编译和优化后，命名并存储在数据库服务器中，使用时只要调用即可。</p>\n<p>函数和存储过程的异同：都是持久性存储模块，但函数必须指定返回的类型。</p>\n<h1 id=\"odbc\"><a class=\"markdownIt-Anchor\" href=\"#odbc\">#</a> ODBC</h1>\n<p><strong>句柄 (handle) 是 32 位整数值，代表一个指针，可分为：环境句柄、连接句柄、语句句柄和描述符句柄。</strong></p>\n<p>每个 ODBC 应用程序需要建立一个 ODBC 环境，分配一个环境句柄，存取数据的全局性背景，如环境状态、当前环境状态判断、当前在环境上分配的连接句柄等。一个环境句柄可以建立多个连接句柄，每个连接句柄实现与一个数据源之间的连接。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/ba6672642863f1d2fb36c5034f0c05bb.png\"\n                      alt=\"ODBC的工作流程.png\" style=\"zoom:50%;\" \n                >\n<h1 id=\"关系查询处理和查询优化\"><a class=\"markdownIt-Anchor\" href=\"#关系查询处理和查询优化\">#</a> 关系查询处理和查询优化</h1>\n<p>有效性检查：检查语句中的数据库对象，如关系名、属性名是否存在和有效，会根据数据字典中有关的模式定义信息进行检查。</p>\n<p>视图转换：如果查询是对视图的操作，则要用视图消解法把对视图的操作转换成对基本表的操作。</p>\n<p><strong>查询优化的选择依据：基于规则、基于代价和基于语义。</strong></p>\n<h2 id=\"代数优化\"><a class=\"markdownIt-Anchor\" href=\"#代数优化\">#</a> 代数优化</h2>\n<p>连接、笛卡尔积交换律：设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是关系代数表达式，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> 是连接关系运算的条件，则有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo lspace=\"0em\" rspace=\"0em\">×</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">≡</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">×</mo><msub><mi>E</mi><mn>1</mn></msub><mo separator=\"true\">;</mo><msub><mi>E</mi><mn>1</mn></msub><mo lspace=\"0em\" rspace=\"0em\">⋈</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">≡</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">⋈</mo><msub><mi>E</mi><mn>1</mn></msub><mo separator=\"true\">;</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo lspace=\"0em\" rspace=\"0em\">▹</mo><mi>F</mi></msub><mo lspace=\"0em\" rspace=\"0em\">◃</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">≡</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo lspace=\"0em\" rspace=\"0em\">▹</mo><mi>F</mi></msub><mo lspace=\"0em\" rspace=\"0em\">◃</mo><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_1{\\times}E_2{\\equiv}E_2{\\times}E_1;E_1{\\bowtie}E_2{\\equiv}E_2{\\bowtie}E_1;E_1{\\triangleright}_F{\\triangleleft}E_2{\\equiv}E_2{\\triangleright}_F{\\triangleleft}E_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">×</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">≡</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">×</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">⋈</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">≡</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">⋈</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">▹</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">◃</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">≡</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">▹</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">◃</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。也有类似的结合律。</p>\n<p>此外还有选择与投影操作、笛卡尔、并、差、自然连接都有分配率，投影与笛卡尔积、并的分配律。</p>\n<h3 id=\"代数优化步骤\"><a class=\"markdownIt-Anchor\" href=\"#代数优化步骤\">#</a> 代数优化步骤</h3>\n<ol>\n<li>从查询<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> 出发，按照事先约定的规则对 Q 进行变换，获得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Q</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">Q_1，Q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 必须与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> 等价。</li>\n<li>确保<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">Q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的执行代价比<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> 的执行代价低。</li>\n<li>直到找不到执行代价更小的等价表达式，结束。存在的问题是找到的不一定是全局最优解，而是局部最优解。</li>\n</ol>\n<h3 id=\"典型的启发式规则\"><a class=\"markdownIt-Anchor\" href=\"#典型的启发式规则\">#</a> 典型的启发式规则</h3>\n<ul>\n<li><strong>选择运算应尽可能先做，这是优化策略中最重要、最基本的一条。</strong></li>\n<li>把投影运算和选择运算同时进行。</li>\n<li>把投影同其前或其后的双目运算结合起来，没有 必要为了去掉某些字段而扫描一遍关系。</li>\n<li>把某些选择同在它前面要执行的笛卡尔积结合起 来成为一个连接运算，连接特别是等值连接运算要比 同样关系上的笛卡尔积省很多时间。</li>\n<li>找出公共子表达式，进行计算后存储结果。</li>\n</ul>\n<h2 id=\"数据库恢复技术\"><a class=\"markdownIt-Anchor\" href=\"#数据库恢复技术\">#</a> 数据库恢复技术</h2>\n<p><strong>事务的 ACID 特性：原子性 (Atomicity)、一致性 (Comsistency)、隔离性 (Isolation)、持续性 (Durability)。</strong></p>\n<p>故障的种类：事务内部的故障、系统故障、介质故障、计算机病毒。</p>\n<p>系统故障的恢复需要做两件事情：撤销所有未完成的事务和重做所有己提交的事务。</p>\n<p>转储方法：静态转储和动态转储、海量转储和增量转储。</p>\n<p>事务分为以记录为单位和以块为单位。</p>\n<p>以记录为单位的日志文件内容 ：各个事务的开始标记 (BEGIN TRANSACTION) 、各个事务的结束标记 (COMMIT 或 ROLLBACK) 、各个事务的所有更新操作。</p>\n<p>以块为单位的日志文件内容：事务标识和被更新的数据块。</p>\n<p>为保证数据库是可恢复的，登记日志文件时必须遵循两条原则 ：登记的次序严格按并发事务执行的时间次序 ；必须先写日志文件，后写数据库。</p>\n<p><strong>事务故障的恢复：UNDO；系统故障的恢复：UNDO+REDO；介质故障的恢复；重装后援副本 + REDO。</strong></p>\n<p><strong>检查点的出现是为了解决两个问题：搜索整个日志将耗费大量时间；UNDO 操作重新执行，浪费了大量时间。</strong></p>\n<p>具有检查点 (checkpoint) 的恢复技术：在日志文件中增加检查点记录 (checkpoint)；增加重新开始文件；恢复子系统在登录日志文件期间动态地维护日志。</p>\n<p>检查点记录的内容：建立检查点时刻所有正在执行的事务清单和这些事务最近一个日志记录的地址。事务会形成一条链表，因此记录地址可以更快对事务进程处理。</p>\n<p>重新开始文件记录每个检查点记录在日志文件中的地址。</p>\n<h3 id=\"检查点步骤\"><a class=\"markdownIt-Anchor\" href=\"#检查点步骤\">#</a> 检查点步骤</h3>\n<ol>\n<li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上</li>\n<li>在日志文件中写入一个检查点记录</li>\n<li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中</li>\n<li>把检查点记录在日志文件中的地址写入一个重新开始文件</li>\n</ol>\n<h1 id=\"并发控制\"><a class=\"markdownIt-Anchor\" href=\"#并发控制\">#</a> 并发控制</h1>\n<p>并发控制的主要技术：封锁 (Locking)、时间戳 (Timestamp)、乐观控制法和多版本并发控制 (VCC)。</p>\n<h2 id=\"封锁协议\"><a class=\"markdownIt-Anchor\" href=\"#封锁协议\">#</a> 封锁协议</h2>\n<p>封锁协议的区别主要在于读操作的申请封锁和释放锁的时机。</p>\n<ol>\n<li>一级封锁协议：事务 T 在<strong>修改数据</strong> R 之前必须先对其加 X 锁，直到事务结束才释放。事务结束是指正常结束 (commit) 或非正常结束 (rollback)。一级封锁协议可防止丢失修改，并保证事务 T 是可恢复的。</li>\n<li>二级封锁协议：<strong>一级封锁协议</strong>加上事务 T 在<strong>读取数据</strong> R 之前必须先对其加 S 锁，<strong>读完</strong>后即可释放 S 锁。解决读脏数据问题。</li>\n<li>三级封锁协议：<strong>一级封锁协议</strong>加上事务 T 在<strong>读取数据</strong> R 之前必须先对其加 S 锁，直到<strong>事务结束</strong>才释放。解决不可重复读问题。</li>\n</ol>\n<h2 id=\"串行化\"><a class=\"markdownIt-Anchor\" href=\"#串行化\">#</a> 串行化</h2>\n<p>执行结果等价于串行调度的调度也是正确的，称为可串行化调度。一个给定的并发调度，当且仅当它是可串行化的才认为是正确调度。</p>\n<p>冲突操作：是指<strong>不同</strong>的事务对<strong>同一</strong>数据的<strong>读写</strong>操作和<strong>写写</strong>操作。涉及同一个数据库对象，并且至少有一个是写操作。</p>\n<p>不能交换的动作：同一事务的两个操作和不同事务的冲突操作。</p>\n<p>一个调度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 在保证冲突操作的次序不变的情况下，通过交换两个事务不冲突操作的次序得到另一个调度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><msub><mi>S</mi><mi>c</mi></msub><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup></mrow><annotation encoding=\"application/x-tex\">{S_c}^{&#x27;}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1657em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0157em;\"><span style=\"top:-3.0157em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, 如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><msub><mi>S</mi><mi>c</mi></msub><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup></mrow><annotation encoding=\"application/x-tex\">{S_c}^{&#x27;}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1657em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0157em;\"><span style=\"top:-3.0157em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> 是串行的，称调度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是冲突可串行化的调度。</p>\n<p>冲突可串行化调度是可串行化调度的充分条件，不是必要条件。</p>\n<h2 id=\"两段锁协议\"><a class=\"markdownIt-Anchor\" href=\"#两段锁协议\">#</a> 两段锁协议</h2>\n<p>两段锁协议指所有事务必须分两个阶段对数据项加锁和解锁：在对任何数据进行读、写操作之前，事务首先要获得对该数据的封锁；在释放一个封锁之后，事务不再申请和获得任何其他封锁。</p>\n<p>两段锁协议的含义是指将事务分为两个阶段，第一阶段是获得封锁，也称为扩展阶段，事务可以申请获得任何数据项上的任何类型的锁，但是不能释放任何锁。第二阶段是释放封锁，也称为收缩阶段，事务可以释放任何数据项上的任何类型的锁，但是不能再申请任何锁。</p>\n<p>遵守两段锁协议，则一定是一个可串行化调度。事务遵守两段锁协议是可串行化调度的充分条件，而不是必要条件。</p>\n<p>遵守两段锁协议的事务可能会发生死锁。</p>\n<h2 id=\"封锁的粒度\"><a class=\"markdownIt-Anchor\" href=\"#封锁的粒度\">#</a> 封锁的粒度</h2>\n<p>封锁粒度与系统的并发度和并发控制的开销密切相关。</p>\n<p>对任一结点加基本锁，必须先对它的上层结点加意向锁。</p>\n<p>具有意向锁的多粒度封锁方法在申请封锁时应该按自上而下的次序进行，释放封锁时则应该按自下而上的次序进行。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/360%E6%88%AA%E5%9B%BE20221105113011248.jpg\"\n                      alt=\"数据锁的相容矩阵\"\n                ></p>\n",
            "tags": [
                "计算机基础",
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E9%A2%98%E7%9B%AE/",
            "url": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E9%A2%98%E7%9B%AE/",
            "title": "蓝桥杯国赛题目",
            "date_published": "2023-10-12T10:49:32.922Z",
            "content_html": "<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_43919497/article/details/110011722?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162261625316780264075413%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=162261625316780264075413&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-110011722.pc_search_result_before_js&amp;utm_term=%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AFpython%E7%BB%84%E5%9B%BD%E8%B5%9B%E7%AD%94%E6%A1%88&amp;spm=1018.2226.3001.4187\" >CSDN 题解 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ol>\n<li>美丽的 2<br>\n 遍历即可，然后使用 str 和 count 函数就可以查找数字是否含有 2</li>\n<li>合数个数<br>\n使用埃氏算法，就可以找到所有合数，然后使用 count 计算个数即可<br>\n使用埃氏算法要小心一点，它是用于判断 n 以内的素数的，所以要注意是否需要加一。</li>\n<li>阶乘约数<br>\n使用唯一分解定理：<br>\n一个大于 1 的正整数 N，如果它的标准分解式为 N=p1a1+p2a2+…+pnan，那么它的正因数为（a1+1)(a2+1)…(an+1),<br>\n 其中 pi 为素数（1 不为素数）<br>\n我们首先将 2 到 100 中含有的素数找出来，然后存储在字典中，设置值为 1，然后由于 100 的阶乘太大了，我们从 2 开始到 100，分别用素数去尝试是否能够整除，可以的话就将字典对应的值加一，然后遍历字典的值，乘起来就是答案了。</li>\n<li>本质上升序列<br>\n我们使用动态规划求解该题，后面开始遍历<br>\n我们先将字符串翻转，使用 nums 记录以该字母开头的所有组合，然后我们遍历数组，如果是‘z’的话，将 nums [-1]=1，否则我们 nums [idx]=sum (nums [idx+1:]+1, 意思就是与该字母后面的所有有效的字母开头进行组合，加一是因为自己一个也可以作为一个序列。<br>\n最后我们 sum（nums）即得答案</li>\n<li>玩具蛇<br>\n使用深度优先遍历，设定 dfs 函数和 VIS 矩阵判断该点是否被访问过。如果被访问过就直接返回，没有则先判断长度是否已经足够，是的话直接计数器加一，返回，否则将该位置的访问位置置为 1，然后再向四个位置进行深度优先访问，全部完成后再将 VIS 矩阵对应位置置为 0（这一步很关键）。而且要注意在 Python 的子函数中加入 global 关键字修饰 ans 和 VIS 矩阵 global ans,vis; 然后遍历每个起点位置进行深度遍历即可。</li>\n<li>天干地支<br>\n使用数组存储天干和地支，推出第 0 个元素是什么后，然后天干使用与 10 取余，地支与 12 取余即可，然后使用该索引即可</li>\n<li>重复字符串<br>\n无法重复的情况只有一种：当字符串长度无法被 K 整除时。此时我们返回 - 1，其他情况我们直接根据 K 将其分组，然后在对应位置的统计元素个数，然后将其他不相同的元素改为出现次数最多的元素。使用这种贪心算法，我们就可以得到答案了。但是要注意 k=1 的时候直接将元素个数减去出现最多的元素出现个数即可。</li>\n<li>答疑<br>\n看上去很麻烦，但其实，只要存储（离开 - 进入，发信息 - 进入）两个信息，然后使用贪心算法即可。</li>\n<li>补给<br>\n不会</li>\n<li>蓝跳跳<br>\n不会</li>\n</ol>\n",
            "tags": [
                "Python",
                "编程",
                "算法"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91-%E4%B9%94%E6%81%A9.%E6%9C%AC%E7%89%B9%E5%88%A9-85/",
            "url": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91-%E4%B9%94%E6%81%A9.%E6%9C%AC%E7%89%B9%E5%88%A9-85/",
            "title": "编程珠玑-乔恩.本特利-85",
            "date_published": "2023-10-12T10:49:32.920Z",
            "content_html": "<ol>\n<li>减少程序的空间也会减少其运行时间。</li>\n<li>设计者确定其设计已经达到了完美的标准，不是不能再增加任何东西，而是不能再减少东西。</li>\n<li>他不能解决问题，是因为他企图解决错误的问题。问题的解决，是通过打破他的概念壁垒，进而去解决一个较简单的问题而实现的。</li>\n<li>恰当的数据视图实际上决定了程序的结构。</li>\n<li>程序员在考虑该问题时受到了语言的限制。</li>\n<li>正确性分析是自下而上进行的：从每个独立的代码行开始，检查它们是如何协同运作并解决问题的。</li>\n<li>总是保持对代码的正确理解，不要理会那种 “只要让程序工作，怎么改都行” 的催促。</li>\n<li>当他们编写程序的时候，“困难” 的部分第一次就可以正确运行，而那些 “容易” 的部分往往会出毛病。</li>\n<li>有时候，良好的问题定义可以避免用户对问题需求的过高估计。</li>\n<li>如果仅需要较小的加速，就对效果最佳的层面做改进。如果需要较大的加速，就对多个层面做改进。</li>\n<li>在进行粗略估算的时候，要切记爱因斯坦的名言：任何事都应尽量简单，但不宜过于简单。</li>\n<li>算法设计技术：保存状态，避免重复计算。将消息预处理至数据结构中，累加数组。</li>\n<li>C 程序员经常需要在性能和正确性之间折中，而 C++ 程序员却可以享受鱼与熊掌兼得的快乐。</li>\n<li>对于现代的计算机来说，将循环展开有助于避免管道阻塞，减少分支，增加指令级的并行性。</li>\n<li>代码调优的最重要原理就是尽量少用它。不成熟的优化是大量编程灾害的根源，它会危及程序的正确性、功能性以及可维护性。</li>\n<li>简单性可以延伸出功能性、健壮性以及速度和空间。</li>\n<li>使用指针来共享大型对象 (比如长文本字符串) 可以消除存储同一对象的众多副本所需的开销，但是程序员在修改共享对象时必须小心谨慎地确保该对象的所有拥有者都希望更改。</li>\n<li>一般来说，如果要从 r 个剩余的整数中选出 5 个，我们以概率 s/r 选择下一个数。</li>\n<li>很多程序员很快就发现问题的 “解决方案”，他们只愿意花 1 分钟的时间思考，然后花一天的时间来写代码，而不是先花 1 小时来思考，再用 1 小时来写代码。</li>\n<li>存储预先计算好的结果。对于开销较大的函数，可以只计算一次，然后将计算结果存储起来以减少开销。</li>\n<li>在数据结构的边界上放一个哨兵以减少测试是否已搜索结束的开销。</li>\n<li>在组织逻辑测试时，应该将低开销的、经常成功的测试放在高开销的，很少成功的测试前面。</li>\n</ol>\n",
            "tags": [
                "计算机基础",
                "算法"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "url": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "title": "算法常用技巧",
            "date_published": "2023-10-12T10:49:32.918Z",
            "content_html": "<h1 id=\"数学\"><a class=\"markdownIt-Anchor\" href=\"#数学\">#</a> 数学</h1>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">等差数列求和：Sn=(a1+an)*n/2;Sn=n*a1+d*(n-1)*n/2</span><br><span class=\"line\">等比数列求和：Sn=a1*(1-qn)/(1-q);Sn=(a1-an*q)/(1-q)</span><br><span class=\"line\">组合数学：A(n,m)=(n!)/(n-m)!;C(n,m)=A(n,m)/m!=(n!)/((n-m)!*m!</span><br></pre></td></tr></table></figure></div>\n<p><strong>唯一分解定理</strong></p>\n<p>一个大于 1 的正整数 N，如果它的标准分解式为 N=p1a1+p2a2+…+pnan，那么它的正因数为（a1+1)(a2+1)…(an+1),<br>\n 其中 pi 为素数（1 不为素数）</p>\n<p><strong>斐波那契数公式</strong></p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    sqrt5 = <span class=\"number\">5</span>**<span class=\"number\">0.5</span></span><br><span class=\"line\">    fibN = ((<span class=\"number\">1</span> + sqrt5) / <span class=\"number\">2</span>) ** n - ((<span class=\"number\">1</span> - sqrt5) / <span class=\"number\">2</span>) ** n</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">round</span>(fibN / sqrt5)</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"做题小技巧\"><a class=\"markdownIt-Anchor\" href=\"#做题小技巧\">#</a> 做题小技巧</h1>\n<p>综合利用哈希表和前缀和可以解决连续子数组的问题。</p>\n<p>有时候通过将问题的值进行变换，可以将问题转化为一个我们已知的问题或较为简单的问题，例如将 0 替换成 - 1，这样就可以使用通过前缀和的知识点来解决子数组中有相同 0 和 1 的问题。</p>\n<p>子函数内使用 global 全局函数关键字</p>\n<p><strong>遍历的小技巧</strong></p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, w <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(servers)：i表示索引，w为实际从server中取出来的值</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"常用函数\"><a class=\"markdownIt-Anchor\" href=\"#常用函数\">#</a> 常用函数</h1>\n<h2 id=\"集合\"><a class=\"markdownIt-Anchor\" href=\"#集合\">#</a> 集合</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set1=set()</td>\n<td>创建集合</td>\n</tr>\n<tr>\n<td>set1.add(6)</td>\n<td>增加元素</td>\n</tr>\n<tr>\n<td>set1.remove(5)</td>\n<td>删除元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>find(sub)</td>\n<td>检测 sub 是否存在于字符串中，有则返回索引值，无则返回 - 1</td>\n</tr>\n<tr>\n<td>count(sub)</td>\n<td>判断 sub 在字符串中出现的次数</td>\n</tr>\n<tr>\n<td>isalnum()</td>\n<td>如果字符串至少有一个字符并且所有的字符都是字母或数字则返回 True，否则返回 False。</td>\n</tr>\n<tr>\n<td>isalpha()</td>\n<td>如果字符串至少有一个字符而且所有字符都是字母则返回 True，否则返回 false</td>\n</tr>\n<tr>\n<td>isdigit()</td>\n<td>如果字符串只包含数字则返回 True，否则返回 false</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>以字符串为分隔符，插入到 sub 中所有的字符之间 n=“”.join (n)</td>\n</tr>\n<tr>\n<td>replace(old,new[,count])</td>\n<td>把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次</td>\n</tr>\n<tr>\n<td>split(sep=None,maxsplit=-1)</td>\n<td>分隔字符串，默认按照空格作为分隔符切片字符串</td>\n</tr>\n<tr>\n<td>splitlines()</td>\n<td>按照 “\\n” 分隔，返回一个包含各行作为元素的列表</td>\n</tr>\n<tr>\n<td>strip([chars])</td>\n<td>删除字符串前边和后边的所有空格，chars 参数可以定制删除的字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>copy.deepcopy()</td>\n<td>深复制，真正的新建一个数组进行赋值，而不是传引用。使用前需要 import copy。</td>\n</tr>\n<tr>\n<td>clear()</td>\n<td>清空列表中的元素，留下一个空列表。</td>\n</tr>\n<tr>\n<td>append()</td>\n<td>向列表添加元素</td>\n</tr>\n<tr>\n<td>extend()</td>\n<td>使用一个列表来拓展一个列表</td>\n</tr>\n<tr>\n<td>remove（sub）</td>\n<td>删除 sub 元素</td>\n</tr>\n<tr>\n<td>insert（num,index）</td>\n<td>在 index 处插入一个 num</td>\n</tr>\n<tr>\n<td>pop（index）</td>\n<td>弹出 index 处元素</td>\n</tr>\n<tr>\n<td>count（）</td>\n<td>计算出现次数</td>\n</tr>\n<tr>\n<td>index（）</td>\n<td>返回元素位置</td>\n</tr>\n<tr>\n<td>reverse（）</td>\n<td>翻转列表</td>\n</tr>\n<tr>\n<td>sort（）</td>\n<td>排序</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"math库\"><a class=\"markdownIt-Anchor\" href=\"#math库\">#</a> Math 库</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>math.pow(x, y)</td>\n<td>返回 x 的 y 次方</td>\n</tr>\n<tr>\n<td>math.ceil(x)</td>\n<td>返回不小于 x 的整数</td>\n</tr>\n<tr>\n<td>math.fabs(x)</td>\n<td>返回 x 的绝对值</td>\n</tr>\n<tr>\n<td>math.floor(x)</td>\n<td>返回不大于 x 的整数</td>\n</tr>\n<tr>\n<td>math.fsum([x, y, …])</td>\n<td>返回无损精度的和</td>\n</tr>\n<tr>\n<td>math.sqrt(x)</td>\n<td>返回 x 的平方根</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\">#</a> 其他</h1>\n<h2 id=\"datatime\"><a class=\"markdownIt-Anchor\" href=\"#datatime\">#</a> datatime</h2>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date.isocalendar()        <span class=\"comment\">#返回结果是三元组(年号，第几周，第几天)</span></span><br><span class=\"line\">date.strftime(<span class=\"string\">&quot;%j&quot;</span>)        <span class=\"comment\">#计算输入的日期是一年中的第几天</span></span><br><span class=\"line\">end=datetime.datetime(year=<span class=\"number\">2020</span>,month=<span class=\"number\">10</span>,day=<span class=\"number\">1</span>)</span><br><span class=\"line\">dela=datetime.timedelta(days=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> start.day==<span class=\"number\">1</span> <span class=\"keyword\">or</span> start.weekday()==<span class=\"number\">0</span>:<span class=\"comment\">#月初或周一</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"优先队列\"><a class=\"markdownIt-Anchor\" href=\"#优先队列\">#</a> 优先队列</h2>\n<p>优先队列是按照递增进行排列的，弹出的数据是最小的元素，如果想让其递减的排列，可以在前面乘一个 - 1.</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq     %导入库函数</span><br><span class=\"line\">heapq.heapify(nums)     %将数组转化为优先队列</span><br><span class=\"line\">heapq.heappush(nums,<span class=\"number\">7</span>)     %往优先队列中插入元素</span><br><span class=\"line\">num=heapq.heappop(nums)     %从优先队列中取出元素</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"类的声明\"><a class=\"markdownIt-Anchor\" href=\"#类的声明\">#</a> 类的声明</h2>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Potato</span>:<span class=\"comment\">#声明类名</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):<span class=\"comment\">#声明构造方法，self用于在类中传递各种属性</span></span><br><span class=\"line\">          self.name=name</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">kick</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我叫%s。&quot;</span>%self.name);</span><br></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Python",
                "编程",
                "算法"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0/",
            "url": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0/",
            "title": "数据库练习",
            "date_published": "2023-10-12T10:49:32.916Z",
            "content_html": "<h2 id=\"牛客\"><a class=\"markdownIt-Anchor\" href=\"#牛客\">#</a> 牛客</h2>\n<p><strong>like 表示模糊查找</strong></p>\n<p>浮点数的平均值可能小数点位数很多，按照示例保存一位小数，用 round 函数</p>\n<p>多个条件进行分组： <code>group by university,gender;</code></p>\n<p>where 在 group by 前执行，所以需要用 having，而 order by 在 group by 后，所以可以不用 having。</p>\n<p>每张表都需要有别名</p>\n<p>多个条件判断： <code>case when then</code></p>\n<p>日期函数 day () 取日，month () 取月份，datediff 求两个日期之间的差</p>\n<h3 id=\"常见例题\"><a class=\"markdownIt-Anchor\" href=\"#常见例题\">#</a> 常见例题</h3>\n<p>年龄在 20 到 23 之间： <code>SELECT device_id,gender,age from user_profile where age between 20 and 23</code></p>\n<p>用 where 过滤空值练习： <code>select device_id,gender,age,university from user_profile where age is not null;</code></p>\n<p>查看学校名称中含北京的用户： <code>select device_id,age,university from user_profile where university like '%北京%';</code></p>\n<p>统计每个学校的答过题的用户的平均答题数：首先构造出一张以 device_id 为分组的表，然后以该表为主表，进行链接，然后根据学校进行分组，使用 sum 和 count（1）即可，或者  <code>(count(question_id)/count(distinct(qpd.device_id)))</code>  直接使用 count<br>\nSELECT DISTINCT Company FROM Orders： distinct 关键字表示只取一次，去重<br>\n结果不去重只需 union all 将两张表连接在一起。</p>\n<p>选取文本中的最右的元素： <code>substring_index(profile,',',-1)</code></p>\n<p>查找倒数第二个元素需要两层： <code>SUBSTRING_INDEX(SUBSTRING_INDEX(profile,',',-2),',',1)AS age;</code></p>\n<h2 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\">#</a> day1</h2>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<p>verchar 和 char 的区别：verchar 存储时变长，最多容纳 65535 个字节；char 固定长度，最多容纳 255 个字符。</p>\n<p>在配置文件（my.cnf）中加入如下配置： <code>sql-mode=&quot;NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</code>  保存并重启即可进入非严格模式</p>\n<p>长的文本：text</p>\n<p>创建表： <code>create table L3(id int not null primary key auto_increment,name varchar(5),depart char(3))default charset=utf8;</code></p>\n<p>插入元素： <code>insert into L3(name,depart) values(&quot;alex&quot;,&quot;sb&quot;);</code></p>\n<h3 id=\"增删改查\"><a class=\"markdownIt-Anchor\" href=\"#增删改查\">#</a> 增删改查</h3>\n<p>新增数据： <code>insert into L2(salary) values(5.289);</code></p>\n<p>删除数据： <code>delete from L3 where name=&quot;alex&quot; and id=1;</code>  。删除 name=alex 的数据，and 链接多个条件</p>\n<p>更新数据： <code>update L2 set salary=1.99 where id=1;</code> 。 <code>update L3 set name=concat(name,&quot;3&quot;) where id=2；</code>  。PS：concat 函数用于拼接字符串</p>\n<p>查找数据： <code>select id,name from L3 where id=2;</code></p>\n<p>显示一列标题为 age 的 111： <code>select id,name,111 as age from L3;</code></p>\n<h3 id=\"小数\"><a class=\"markdownIt-Anchor\" href=\"#小数\">#</a> 小数</h3>\n<p>decimal (8,2) 表示数字位有 8 位（不包含负号），小数位保留 2 位。</p>\n<p>小数位数过多会自动四舍五入，整数部分超过会报错</p>\n<p>插入元素： <code>insert into L2(salary) values(5.289);</code></p>\n<p>新建表： <code>create table L2(id int not null primary key auto_increment,salary decimal(8,2))default charset=utf8;</code></p>\n<h3 id=\"时间\"><a class=\"markdownIt-Anchor\" href=\"#时间\">#</a> 时间</h3>\n<p>timestamp 和 datetime 相比：除了表示的范围更小外，所存储的方式也不同，是根据当前时区再进行转换，而 datetime 是直接存储。</p>\n<p>此外还有 date 和 time</p>\n<p>创建表： <code>create table L5(id int not null primary key auto_increment,dt datetime,tt timestamp)default charset=utf8;</code></p>\n<p>插入表： <code>insert into L5(dt,tt) values(&quot;2025-11-11 11:11:14&quot;,&quot;2025-11-11 11:11:14&quot;);</code></p>\n<h3 id=\"今日总结\"><a class=\"markdownIt-Anchor\" href=\"#今日总结\">#</a> 今日总结</h3>\n<p>修改表： <code>alter table L6 add amount decimal(10,2) default 0 not null;</code></p>\n<p>删除表： <code>alter table L6 drop aaa;</code></p>\n<p>插入记录： <code>insert into L6(name,password,gender,email,crime,amount) values(&quot;xiqin4&quot;,&quot;dsasa&quot;,0,&quot;7444545@qq.com&quot;,&quot;2020-7-1 11:11:14&quot;,100);</code></p>\n<p>更新记录： <code>update L6 set gender=1 where id&gt;3;</code></p>\n<p>查看： <code>select * from L6 where amount&gt;1000;</code></p>\n<p>更新： <code>update L6 set amount=amount+1000;</code></p>\n<p>删除： <code>delete from L6 where gender=1;</code></p>\n<p>创建表：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table L6(</span><br><span class=\"line\">    id int not null primary key auto_increment,</span><br><span class=\"line\">    name varchar(32) not null,</span><br><span class=\"line\">    password varchar(64) not null,</span><br><span class=\"line\">    gender char(2) check(gender in (0,1)),</span><br><span class=\"line\">    email varchar(64),</span><br><span class=\"line\">    crime datetime</span><br><span class=\"line\">)default charset=utf8;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\">#</a> day2</h2>\n<h3 id=\"左右连表\"><a class=\"markdownIt-Anchor\" href=\"#左右连表\">#</a> 左右连表</h3>\n<p>以 info 作为主表，将 depart 进行左链接，根据 depart.id 进行： <code>select * from info left outer join depart on info.depart_id = depart.id;</code></p>\n<p>指定选中的数据进行展示： <code>select info.id,info.name,info.email,depart.title from info left outer join depart on info.depart_id = depart.id;</code></p>\n<p>将 left 改成 right 就是右链接： <code>select info.id,info.name,info.email,depart.title from info right outer join depart on info.depart_id = depart.id;</code></p>\n<p>从表 right outer join 主表 on <a class=\"link\"   href=\"http://xn--tiq313l.x=%E4%BB%8E%E8%A1%A8.id\" >主表.x = 从表.id <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>当主表中存在从表中没有的信息，则会产生区别；</p>\n<p>简写 outer 可以省略</p>\n<p>内链接：两张表进行链接，没有分主从，根据条件进行匹配：select * from info inner join depart on info.depart_id = <a class=\"link\"   href=\"http://depart.id\" >depart.id <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>;</p>\n<h3 id=\"指定列映射\"><a class=\"markdownIt-Anchor\" href=\"#指定列映射\">#</a> 指定列（映射）</h3>\n<p>帮 name 写别名 NM，并新增一列 123： <code>select id,name as NM,123 from info ;</code></p>\n<p>条件语句： <code>select id,name,case when age&lt;18 then &quot;少年&quot; when age&lt;30 then &quot;青年&quot; else &quot;老年&quot; end v6 from info;</code></p>\n<h3 id=\"用户授权管理\"><a class=\"markdownIt-Anchor\" href=\"#用户授权管理\">#</a> 用户授权管理</h3>\n<p><strong>用户</strong></p>\n<ul>\n<li>查看用户信息： <code>select user,authentication_string,host from mysql.user;</code></li>\n<li>查看用户和权限信息： <code>desc mysql.user;</code></li>\n<li>新建用户： <code>create user '用户名'@'连接者的IP地址' identified by '密码'</code>  。PS：'' 号可加可不加</li>\n<li><code>create user xiqin@127.0.0.1 identified by '159123zxc'</code>  。解析：127.0.0.%：% 意味可以匹配任何值；地址为 % 意味所有地址都可以</li>\n<li>删除用户： <code>drop user xiqin@127.0.0.1;</code></li>\n<li>修改用户： <code>rename user 'xiqin'@'127.0.0.1' to 'huangyuqin'@'localhost';</code></li>\n<li>修改密码： <code>set password for 'huangyuqin'@'localhost'=Password('123123');</code></li>\n</ul>\n<p><strong>授权</strong></p>\n<ul>\n<li>grant 权限 on 数据库。表 to ‘用户’@‘IP 地址’;</li>\n<li>给用户 huangyuqin 用有数据库 day26db 中 info 表的查找和插入权限： <code>grant select,insert on day26db.info to 'huangyuqin'@'localhost';</code></li>\n<li>给用户 huangyuqin 拥有数据库的所有权限： <code>grant all privileges on *.* to 'huangyuqin'@'localhost';</code></li>\n<li>此时还没有真正生效，输入： <code>flush privileges;</code>  。将数据读入内存，从而立即生效。</li>\n<li>选择不同的用户进行登录： <code>&quot;C:\\Program Files\\mysql-5.7.31-winx64\\bin\\mysql.exe&quot; -h 127.0.0.1 -P 3306 -u huangyuqin -p</code></li>\n<li>查看授权： <code>show grants for 'huangyuqin'@'localhost';</code></li>\n<li>取消授权： <code>revoke INSERT on day26db.info from 'huangyuqin'@'localhost';</code></li>\n<li>需要在管理员权限下使用</li>\n</ul>\n<h3 id=\"通配符\"><a class=\"markdownIt-Anchor\" href=\"#通配符\">#</a> 通配符</h3>\n<p>通配符主要用于模糊查找：</p>\n<p>% 号表示 n 个字符，可以为 0 个： <code>select * from info where name like &quot;%明%&quot;;</code> _号表示一个字符： <code>select * from info where name like &quot;_明%&quot;;</code></p>\n<p>注意：数据少时可以使用，数据量大时不要使用，因为效率很低。</p>\n<h3 id=\"上下连表和取部分\"><a class=\"markdownIt-Anchor\" href=\"#上下连表和取部分\">#</a> 上下连表和取部分</h3>\n<p><code>select id,title from depart union select id,name from info;</code></p>\n<p>列数需相同，会自动去重。union all 则不去重</p>\n<p>获取前五条数据：select * from info limit 5;</p>\n<p>从位置 2 开始，向后获取前 5 条数据： <code>select * from info limit 3 offset 2;</code></p>\n<p>可以用于分页显示</p>\n<h3 id=\"排序和分组\"><a class=\"markdownIt-Anchor\" href=\"#排序和分组\">#</a> 排序和分组</h3>\n<p>desc 倒序排列，顺序排列，通常是得到结果再进行排序</p>\n<p>优先按照 age 从小到大，age 相等则 id 从大到小： <code>select * from info order by age asc,id desc;</code></p>\n<p>将 age 相同的进行分组，遇到需要取舍的时候，选择 ID 更大的，同理还可以替换成 max (id),min (id),count (id),sum (id),avg (id)：select age,count (1) from info group by age;</p>\n<p>对已经分组的数组，取其中 2 个以上的分组： <code>select depart_id,count(id) from info group by depart_id having count(id)&gt;2;</code></p>\n<h3 id=\"表关系\"><a class=\"markdownIt-Anchor\" href=\"#表关系\">#</a> 表关系</h3>\n<p>约束 depart_id 和 depart 中的 id，用于初始化的时候： <code>constraint fk_info_depart foreign key (depart_id) reference depart(id);</code></p>\n<p>表结构已创建，额外增加外键： <code>alter table info add constraint fk_info_depart foreign key info(depart_id) references depart(id);</code></p>\n<p>删除外键： <code>alter table info drop foreign key fk_info_depart;</code></p>\n<h3 id=\"sql语句优先级\"><a class=\"markdownIt-Anchor\" href=\"#sql语句优先级\">#</a> SQL 语句优先级</h3>\n<p>优先级从高到低：join-&gt;on-&gt;where-&gt;group by-&gt;having-&gt;order by-&gt;limit</p>\n<p>例子： <code>select age,count(id) from info where id&gt;2 group by age having count(id)&gt;1 order by age desc limit 1;</code></p>\n<h2 id=\"day3\"><a class=\"markdownIt-Anchor\" href=\"#day3\">#</a> day3</h2>\n<h3 id=\"表的数据的导入和导出\"><a class=\"markdownIt-Anchor\" href=\"#表的数据的导入和导出\">#</a> 表的数据的导入和导出</h3>\n<p>先判断是否存在，再进行删除： <code>drop database if exist day27db;</code></p>\n<p>导入文件：注意斜杠： <code>source /Users/86136/Desktop/数据库/第三天/day27db.sql;</code></p>\n<p>只能导入数据表，不能插入数据，不知道是什么问题，可能是主键导致的问题，暂时先不处理</p>\n<p>查询姓李的老师个数： <code>select * from teacher where tname like '李%';</code></p>\n<p>查询男生和女生的人数： <code>select gender,count(1) from student group by gender;</code></p>\n<p>查询 “三年二班” 的所有学生： <code>select * from student left join class on student.class_id = class.cid where class.caption='三年二班';</code></p>\n<p>查询每个班级的班级名称、班级人数： <code>select class.caption,count(1) from student left join class on student.class_id=class.cid group by class.caption;</code></p>\n<p>查询平均成绩大于 60 的所有学生的学号、平均成绩、姓名： <code>select student_id,avg(num) from score group by student_id having avg(num)&gt;60;</code></p>\n<p>查询成绩小于 60 分的同学学号、姓名、成绩、课程名称：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname,score.num,course.cname from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">where num&lt;60;</span><br></pre></td></tr></table></figure></div>\n<p>查询各科成绩的总分、最高分、最低分、平均分，显示课程 ID、课程名称、总分、最高分、最低分：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select course_id,course.cname,sum(num),max(num),min(num),avg(num) from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">group by course_id </span><br><span class=\"line\">order by avg(num) desc;</span><br></pre></td></tr></table></figure></div>\n<p>查询各科成绩的平均分和及格率，显示：课程 ID、课程名称、平均分、及格率：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select course_id,course.cname,avg(num),count(1) as total,</span><br><span class=\"line\">sum(case when score.num &gt; 60 then 1 else 0 end) as jige from score </span><br><span class=\"line\">left join course on score.course_id =course.cid </span><br><span class=\"line\">group by course_id;</span><br><span class=\"line\"></span><br><span class=\"line\">select course_id,course.cname,avg(num),</span><br><span class=\"line\">sum(case when score.num &gt; 60 then 1 else 0 end)/count(1)*100 as prescent from score </span><br><span class=\"line\">left join course on score.course_id =course.cid </span><br><span class=\"line\">group by course_id;</span><br></pre></td></tr></table></figure></div>\n<p>三个表依次连在一起：查询 “三年二班” 每个学生的学号、姓名、总成绩、平均成绩：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student_id,sname,sum(num),avg(num) from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">left join class on class.cid=student.class_id </span><br><span class=\"line\">where class.caption=&#x27;三年二班&#x27; </span><br><span class=\"line\">group by student_id;</span><br></pre></td></tr></table></figure></div>\n<p>查询学过 “波多” 老师课的同学的学号，姓名：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join teacher on course.teacher_id=teacher.tid </span><br><span class=\"line\">where teacher.tname=&#x27;波多&#x27;;</span><br></pre></td></tr></table></figure></div>\n<p>查询没学过’波多’老师课的同学的学号，姓名（应该是选择先查询选过的同学的 ID，再进行排除，而不是直接使用！=）：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from student </span><br><span class=\"line\">where sid not in(select student.sid from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join teacher on course.teacher_id=teacher.tid </span><br><span class=\"line\">where teacher.tname=&#x27;波多&#x27;);</span><br></pre></td></tr></table></figure></div>\n<p>查询选修‘苍空’老师所授课程的学生中，成绩最高的学生姓名及其成绩（考虑并列）不考虑并列只需使用到 order by 和 limit：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join student on score.student_id =student.sid </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join teacher on course.teacher_id=teacher.tid </span><br><span class=\"line\">where teacher.tname=&#x27;苍空&#x27; </span><br><span class=\"line\">and score.num=(select max(num) from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join teacher on course.teacher_id=teacher.tid </span><br><span class=\"line\">where teacher.tname=&#x27;苍空&#x27;);</span><br></pre></td></tr></table></figure></div>\n<p>查询选修了所有课程的学生的学号，姓名：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">group by student_id having count(1)=(select count(1) from course);</span><br></pre></td></tr></table></figure></div>\n<p>查询选修了 “生物” 和 “物理” 课程的所有学生学号，姓名：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">where course.cname in (&#x27;生物&#x27;,&#x27;物理&#x27;) </span><br><span class=\"line\">group by student_id having count(1)=2;</span><br></pre></td></tr></table></figure></div>\n<p>查询至少有一门课与学号为 1 的学生所选的课程相同的其他学生学号和姓名：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student.sid,student.sname from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">left join student on score.student_id=student.sid </span><br><span class=\"line\">where score.course_id in (select course_id from score where student_id=1) and score.student_id!=1 </span><br><span class=\"line\">group by student_id having count(1)&gt;1;</span><br></pre></td></tr></table></figure></div>\n<p>查询 “生物” 比 “物理” 成绩高的所有学生的学号：PS：这里好像有点问题，存在没有该课成绩的情况，应该先选出同时有生物和物理成绩的同学</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select student_id,max(case cname when &quot;生物&quot; then num else -1 end) as sw,</span><br><span class=\"line\">max(case cname when &quot;物理&quot; then num else -1 end) as wl from score </span><br><span class=\"line\">left join course on score.course_id=course.cid </span><br><span class=\"line\">where cname in (&quot;生物&quot;,&quot;物理&quot;) </span><br><span class=\"line\">group by student_id having sw&gt;wl;</span><br></pre></td></tr></table></figure></div>\n<p>将一张表中的数据插入到另一张表中：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into sc select * from score;</span><br><span class=\"line\">insert into sc (student_id,course_id,num) </span><br><span class=\"line\">select sid,2,80 from student </span><br><span class=\"line\">where sid not in (select student_id from score where course_id=2);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"day4\"><a class=\"markdownIt-Anchor\" href=\"#day4\">#</a> day4</h2>\n<h3 id=\"执行计划\"><a class=\"markdownIt-Anchor\" href=\"#执行计划\">#</a> 执行计划</h3>\n<p>MySQL 中提供了执行计划，让你能够预判 SQL 的执行（只能给到一定的参考，不一定完全能预判准确）。</p>\n<p>explain 关键字</p>\n<p>主要看输出结果中的 type,all 表示进行了全表扫描，而 ref 则是通过索引进行查找</p>\n<p>性能从低到高排序：all &lt; index &lt; range &lt; index_merge &lt; ref_or_null &lt; ref &lt; eq_ref &lt; system/const</p>\n<h3 id=\"无法命中索引的情况\"><a class=\"markdownIt-Anchor\" href=\"#无法命中索引的情况\">#</a> 无法命中索引的情况</h3>\n<p>类型不一致：例如数据库中是字符串类型，却传入数字进行查找；主键比较特殊，即使类型不一致也不影响</p>\n<p>使用了不等于，特殊的主键 or，当 or 条件要未建立的列时失效，但当后面有 and 有建立索引的列时比较生效</p>\n<p>排序，当根据索引排序时候，选择的映射如果不是索引，则不走索引。特殊的主键 like 进行模糊匹配，只有在通配符在最后面才有效</p>\n<p>联合索引要满足最左前缀</p>\n<p>使用函数，例如 reverse（）, 放在后面才可以，例如</p>\n<ul>\n<li>未命中： <code>select * from big where reverse(name) = &quot;wupeiqi&quot;;</code></li>\n<li>命中： <code>select * from big where name = reverse(&quot;wupeiqi&quot;);</code></li>\n</ul>\n<h3 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h3>\n<p>使用索引是为了加速查找，为什么可以加速查找是因为索引是按照 B + 树的方式进行存储的</p>\n<p>引擎的不同会对索引的产生区别：myisam 是数据和索引结构分开存储；innodb 是数据和主键索引结构存储在一起</p>\n<p>建表时可以进行指定 engine=myisam</p>\n<p>查看数据表引擎类型： <code>show create table class;</code></p>\n<p>innodb 是默认索引，使用更为方便</p>\n<p>常见索引</p>\n<ol>\n<li>主键索引：加速查找、不能为空不能重复。</li>\n<li>唯一索引：加速查找，不能重复，可以为空，但只能一个为空，不然会视为重复。</li>\n<li>普通索引：加速查找。都可以进行联合索引</li>\n<li>联合索引的意思是多列连接起来作为一个键</li>\n</ol>\n<p>主键索引</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">primary key关键字</span><br><span class=\"line\">create table 表名(</span><br><span class=\"line\">    id int not null auto_increment,</span><br><span class=\"line\">    name varchar(32) not null,</span><br><span class=\"line\">    primary key(列1,列2)          -- 如果有多列，称为联合主键（不常用且myisam引擎支持）</span><br><span class=\"line\">);</span><br><span class=\"line\">新增主键索引：alter table 表名 add primary key(列名);</span><br><span class=\"line\">删除主键索引：alter table 表名 drop primary key;</span><br><span class=\"line\">自增列一定要是键，即索引，索引删除时可能会报错，此时改为使用alter table 表 change id id int not null;</span><br></pre></td></tr></table></figure></div>\n<p>唯一索引：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unique关键字</span><br><span class=\"line\">create table 表名(</span><br><span class=\"line\">    id int not null auto_increment,</span><br><span class=\"line\">    name varchar(32) not null,</span><br><span class=\"line\">    unique (列1,列2)               -- 如果有多列，称为联合唯一索引。</span><br><span class=\"line\">);</span><br><span class=\"line\">新建create unique index 索引名 on 表名(列名);</span><br><span class=\"line\">删除drop unique index 索引名 on 表名;</span><br></pre></td></tr></table></figure></div>\n<p>普通索引：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index</span><br><span class=\"line\">create table 表名(</span><br><span class=\"line\">    id int not null auto_increment primary key,</span><br><span class=\"line\">    name varchar(32) not null,</span><br><span class=\"line\">    email varchar(64) not null,</span><br><span class=\"line\">    index ix_email (name,email)     -- 如果有多列，称为联合索引。</span><br><span class=\"line\">);</span><br><span class=\"line\">新增create index 索引名 on 表名(列名);</span><br><span class=\"line\">删除drop index 索引名 on 表名;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"视图\"><a class=\"markdownIt-Anchor\" href=\"#视图\">#</a> 视图</h3>\n<p>视图其实是一个虚拟表（非真实存在），其本质是【根据 SQL 语句获取动态的数据集，并为其命名】，用户使用时只需使用【名称】即可获取结果集，并可以将其当作表来使用，类似使用一个 temp 变量方便使用。</p>\n<p>创建视图： <code>create view v1 as select id,name from d1 where id&gt;1;</code>  。然后可以当作一张表进行使用</p>\n<p>修改视图： <code>alter view v1 as SQL语句</code></p>\n<p>基于视图只能查询，针对视图不能执行 增加、修改、删除。 如果源表发生变化，视图表也会发生变化。</p>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h3>\n<p>字符串拼接： <code>select concat('alex','sb');</code></p>\n<p>休眠 1 秒： <code>select sleep(1);</code></p>\n<p>自定义函数：先将‘;’转换为美元符号，放在遇到；就自动结束了</p>\n<p>执行函数： <code>select f1(11,22);</code>  。 <code>select f1(11,id),name from d1;</code></p>\n<p>删除函数： <code>drop function f1;</code></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $$</span><br><span class=\"line\">create function f1(</span><br><span class=\"line\">    i1 int,</span><br><span class=\"line\">    i2 int)</span><br><span class=\"line\">returns int</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    declare num int;</span><br><span class=\"line\">    declare maxId int;</span><br><span class=\"line\">    select max(id) from big into maxId;</span><br><span class=\"line\">    set num = i1 + i2 + maxId;</span><br><span class=\"line\">    return(num);</span><br><span class=\"line\">END $$</span><br><span class=\"line\">delimiter ;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"存储过程\"><a class=\"markdownIt-Anchor\" href=\"#存储过程\">#</a> 存储过程</h3>\n<p>事务，成功都成功，失败都失败。</p>\n<p>存储过程，是一个存储在 MySQL 中的 SQL 语句集合，当主动去调用存储过程时，其中内部的 SQL 语句会按照逻辑执行。</p>\n<p>rollback 进行回滚</p>\n<p>创建存储过程</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $$</span><br><span class=\"line\">create procedure p1()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    select * from d1;</span><br><span class=\"line\">END $$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\">执行存储过程：call p1();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"触发器\"><a class=\"markdownIt-Anchor\" href=\"#触发器\">#</a> 触发器</h3>\n<p>对某个表进行【增 / 删 / 改】操作的前后如果希望触发某个特定的行为时，可以使用触发器。</p>\n<p>NEW 表示新数据，可以在里面直接进行使用。同理，old 表示原来的数据。</p>\n<p>创建触发器</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create trigger</span><br><span class=\"line\">例句：</span><br><span class=\"line\">CREATE TRIGGER tri_before_insert_tb1 BEFORE INSERT ON tb1 FOR EACH ROW</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    ...</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"day5\"><a class=\"markdownIt-Anchor\" href=\"#day5\">#</a> day5</h2>\n<h3 id=\"锁\"><a class=\"markdownIt-Anchor\" href=\"#锁\">#</a> 锁</h3>\n<p>MySQL 中自带了锁的功能，可以帮助我们实现开发过程中遇到的同时处理数据的情况。</p>\n<p>MYISAM 支持表锁，不支持行锁；InnoDB 引擎支持行锁和表锁。</p>\n<p>在 innodb 引擎中，update、insert、delete 的行为内部都会先申请锁（排它锁），申请到之后才执行相关操作，最后再释放锁。</p>\n<p>select 默认不加锁，需要配合事务 + 特殊语法进行加锁</p>\n<p>对于数据库中的锁，从锁的范围来讲有：</p>\n<ul>\n<li>表级锁，即 A 操作表时，其他人对整个表都不能操作，等待 A 操作完之后，才能继续。</li>\n<li>行级锁，即 A 操作表时，其他人对指定的行数据不能操作，其他行可以操作，等待 A 操作完之后，才能继续。</li>\n<li>for update 排他锁：<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin; </span><br><span class=\"line\">    select * from L1 where name=&quot;武沛齐&quot; for update;    -- name列不是索引（表锁）</span><br><span class=\"line\">commit;</span><br><span class=\"line\">select * from L1 where id=1 for update;              -- id列是索引（行锁）</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>lock in share mode 共享锁，其他可读但不可写<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin; </span><br><span class=\"line\">    select * from L1 where name=&quot;武沛齐&quot; lock in share mode;    -- 假设name列不是索引（表锁）</span><br><span class=\"line\">commit;</span><br><span class=\"line\">使数据按字典格式cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<p>四大特性：原子性、一致性、隔离性、持久性。</p>\n<p>开启事务：begin; 或者 start transaction;</p>\n<p>提交事务：commit;</p>\n<p>回滚：rollback;</p>\n",
            "tags": [
                "数据库",
                "MySQL"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91/",
            "url": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91/",
            "title": "微信云开发",
            "date_published": "2023-10-12T10:49:32.914Z",
            "content_html": "<h1 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\">#</a> day1</h1>\n<h2 id=\"增删查改\"><a class=\"markdownIt-Anchor\" href=\"#增删查改\">#</a> 增删查改</h2>\n<p>今天学会了在微信开发中如何对数据库进行增删改查，和进行页面之间的跳转，还有数据之间的传递。</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"property\">cloud</span>.<span class=\"title function_\">database</span>().<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;goods&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">name</span>:goodname,</span><br><span class=\"line\">                    <span class=\"attr\">price</span>:price</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"id传递\"><a class=\"markdownIt-Anchor\" href=\"#id传递\">#</a> ID 传递</h2>\n<p>data-id 与后面获取的变量名 id 相对应</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&#x27;goDetail&#x27;</span> <span class=\"attr\">data-id</span>=<span class=\"string\">&quot;&#123;&#123;item._id&#125;&#125;&quot;</span>&gt;</span>商品名：&#123;&#123;item.name&#125;&#125;,价格：&#123;&#123;item.price&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;点击了跳转商品详情&quot;,event.currentTarget.dataset.id)</span><br></pre></td></tr></table></figure></div>\n<p><strong>在 app.json 中的 pages 新增页面，页面的次序是有影响的</strong></p>\n<h2 id=\"返回结果\"><a class=\"markdownIt-Anchor\" href=\"#返回结果\">#</a> 返回结果</h2>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"property\">cloud</span>.<span class=\"title function_\">database</span>().<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;goods&#x27;</span>).<span class=\"title function_\">get</span>()</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;成功&#x27;</span>,res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;失败&#x27;</span>,err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<hr>\n<br/>\n<h1 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\">#</a> day2</h1>\n<p>通过封装方法，使用 this 进行调用，在使用<strong> this 时要注意所在的作用域</strong>。</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>()</span><br></pre></td></tr></table></figure></div>\n<p>使用全局变量来传递值，可以使用 let，也可以使用 var 变量</p>\n<p>可以在 updated 中的 status 中看出是否有更新成功，在对数据库进行操作时要注意权限问题</p>\n<p>使用 return 截断错误，方便调试</p>\n<p><strong>接受数字小心是字符串，可以通过是否变蓝看出，可以使用 parseInt (price) 来进行强制转换</strong></p>\n<p>可以使用变量接收数据库对象，来方便操作</p>\n<p>限制返回的数据条数 <code>.limit(3)</code></p>\n<p>跳过若干条数据，用于分页 <code>.skip(1)</code></p>\n<p><strong>要注意套餐所给的量，小心写，不然用完就要开新的套餐。数据库的读写次数是有限制的</strong></p>\n<h2 id=\"快捷键使用\"><a class=\"markdownIt-Anchor\" href=\"#快捷键使用\">#</a> 快捷键使用</h2>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+B</td>\n<td>编译</td>\n</tr>\n<tr>\n<td>Ctrl+z</td>\n<td>撤销操作</td>\n</tr>\n<tr>\n<td>Ctrl+s</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>shift+Alt + 方向键</td>\n<td>向对应方向复制当前行</td>\n</tr>\n<tr>\n<td>Ctrl+ALT+l</td>\n<td>格式化代码</td>\n</tr>\n<tr>\n<td>shift+Alt+f</td>\n<td>全局搜索</td>\n</tr>\n<tr>\n<td>Ctrl+f</td>\n<td>当前页面搜索</td>\n</tr>\n<tr>\n<td>Ctrl+h</td>\n<td>查找并替换</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"绑定事件\"><a class=\"markdownIt-Anchor\" href=\"#绑定事件\">#</a> 绑定事件</h2>\n<p>前端界面绑定方法，bindtap 点击事件，bindinput 输入事件，然后在后端函数中获取值</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前端页面</span></span><br><span class=\"line\">&lt;input bindinput=<span class=\"string\">&quot;getPrice&quot;</span>&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"comment\">// 后端页面</span></span><br><span class=\"line\"><span class=\"title function_\">getPrice</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">        price = event.<span class=\"property\">detail</span>.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"弹窗提示确认是否删除\"><a class=\"markdownIt-Anchor\" href=\"#弹窗提示确认是否删除\">#</a> 弹窗提示确认是否删除</h2>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">cancelColor</span>: <span class=\"string\">&#x27;cancelColor&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">title</span>:<span class=\"string\">&quot;是否确定删除&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">content</span>:<span class=\"string\">&quot;您再仔细想一想，是否真的要删除，删除后不可恢复&quot;</span>,</span><br><span class=\"line\">          <span class=\"title function_\">success</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(res.<span class=\"property\">confirm</span>==<span class=\"literal\">true</span>)&#123;<span class=\"comment\">//用户点击了确认</span></span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;点击确定&#x27;</span>,res)</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res.<span class=\"property\">cancel</span>==<span class=\"literal\">true</span>)&#123;<span class=\"comment\">//用户点击了取消</span></span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;点击取消&#x27;</span>,res)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"页面跳转\"><a class=\"markdownIt-Anchor\" href=\"#页面跳转\">#</a> 页面跳转</h2>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/pages/demo1/demo1&#x27;</span>,</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"升序排列\"><a class=\"markdownIt-Anchor\" href=\"#升序排列\">#</a> 升序排列</h2>\n<p>asc 表示升序，desc 为降序，前面是关键字</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.orderBy(&quot;price&quot;,&#x27;asc&#x27;)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"command命令筛选\"><a class=\"markdownIt-Anchor\" href=\"#command命令筛选\">#</a> command 命令筛选</h2>\n<p>可以在微信开放文档<a href=\"https://\"> https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Command.html</a> 中查看具体，常见的有 gt 大于，lt 小于，gte 大于等于</p>\n<p>还可以使用 and 关键字设置多个查找条件，要注意格式 and ([]),[] 中用 {} 包裹筛选条件</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">where</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">price</span>:db.<span class=\"property\">command</span>.<span class=\"title function_\">gt</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 组合查找</span></span><br><span class=\"line\">.<span class=\"title function_\">where</span>(_.<span class=\"title function_\">and</span>([&#123;</span><br><span class=\"line\">            <span class=\"attr\">price</span>: _.<span class=\"title function_\">gt</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;, <span class=\"comment\">//大于10</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">price</span>: _.<span class=\"title function_\">lt</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">        &#125;, <span class=\"comment\">//小于20</span></span><br><span class=\"line\">    ]))</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"云函数\"><a class=\"markdownIt-Anchor\" href=\"#云函数\">#</a> 云函数</h2>\n<h3 id=\"初始化云函数\"><a class=\"markdownIt-Anchor\" href=\"#初始化云函数\">#</a> 初始化云函数</h3>\n<p>新增的文件夹一定要与 pages 平级，可以先点击与 pages 平级的文件，再点击新增文件夹，命名为 cloud，或者在云函数列表中右键新增 node.js 云函数</p>\n<p>在 project.config.json 文件顶部配置云函数所在目录为 cloud，可以根据喜欢换名字，只要能对应起来就可以</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;cloudfunctionRoot&quot;</span>:<span class=\"string\">&quot;/cloud&quot;</span>,</span><br></pre></td></tr></table></figure></div>\n<p>保存成功，此时 cloud 文件夹会出现云朵标志，代表初始化成功</p>\n<h3 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<p>要注意云函数的环境要和小程序的环境对应</p>\n<p>文件夹右键选择新建 node.js 文件</p>\n<h3 id=\"云函数的调用\"><a class=\"markdownIt-Anchor\" href=\"#云函数的调用\">#</a> 云函数的调用</h3>\n<p>使用 callFunction, 在 name 处填写需要调用的云函数名称</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//云函数的调用</span></span><br><span class=\"line\"><span class=\"comment\">//传统写法</span></span><br><span class=\"line\">wx.<span class=\"property\">cloud</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;getData&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">success</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;请求云函数成功&#x27;</span>,res)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">fail</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;请求云函数失败&#x27;</span>,res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 建议写法</span></span><br><span class=\"line\">wx.<span class=\"property\">cloud</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;getData&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;成功&#x27;</span>, res)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 传递值</span></span><br><span class=\"line\">        <span class=\"attr\">openid</span>: res.<span class=\"property\">result</span>.<span class=\"property\">openid</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;失败&#x27;</span>, err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"云函数获取数据\"><a class=\"markdownIt-Anchor\" href=\"#云函数获取数据\">#</a> 云函数获取数据</h3>\n<p>云函数只要有变动，就要重新部署，否则云函数不生效</p>\n<p>部署选择上传并部署：云端安装依赖 (不上传 node_modules)</p>\n<p>如果只改变了 js 文件，可点击对应的 js 文件，右键选择云函数增量上传：更新文件</p>\n<p>而且在云函数中操作数据库时，不再需要写 wx，wx 只在本地编写的时候才需要写</p>\n<p><strong>有多个云开发环境的时候，需要指定环境，或者使用 DYNAMIC_CURRENT_ENV 指定为当前环境（提倡写法）</strong></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cloud.<span class=\"title function_\">init</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">env</span>: cloud.<span class=\"property\">DYNAMIC_CURRENT_ENV</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<hr>\n<h1 id=\"day3\"><a class=\"markdownIt-Anchor\" href=\"#day3\">#</a> day3</h1>\n<p>文件可以导出为 json 格式，可以使用记事本进行打开</p>\n<p>导入的时候可以选择 insert 和 upsert 模式，使用 insert 时注意不要有多个 id 相同的情况出现，否则会报错。建议使用 upsert 模式。</p>\n<p>云函数一次最多可返回 100 条数据，本地一次最多可返回 20 条数据。</p>\n<p><strong>云函数中 console 在云端打印，我们在调试器中只能看到本地的 console。</strong></p>\n<h2 id=\"向云函数传递值\"><a class=\"markdownIt-Anchor\" href=\"#向云函数传递值\">#</a> 向云函数传递值</h2>\n<p>在 data 中传递值，在云函数中使用 event 接收对应的值</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"property\">cloud</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;update0129&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>:id,</span><br><span class=\"line\">        <span class=\"attr\">price</span>:<span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 云函数</span></span><br><span class=\"line\">event.<span class=\"property\">id</span>和event.<span class=\"property\">price</span></span><br></pre></td></tr></table></figure></div>\n<hr>\n<h1 id=\"day4\"><a class=\"markdownIt-Anchor\" href=\"#day4\">#</a> day4</h1>\n<p>在编写云函数时，要注意先保存再上传到云端。</p>\n<p>创建云函数不难，相当于把本地的代码移到云函数，去掉 wx</p>\n<p>可以导入源码，但是如果使用别人的源码需要改开发者 ID</p>\n<h2 id=\"选择文件接口\"><a class=\"markdownIt-Anchor\" href=\"#选择文件接口\">#</a> 选择文件接口</h2>\n<p><strong>用户选择文件接口（api)</strong></p>\n<p><a href=\"https://\">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMedia.html</a></p>\n<p>也可以选择 chooseImage 接口</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">chooseImg</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//上传图片的第一步</span></span><br><span class=\"line\">    wx.<span class=\"title function_\">chooseImage</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">1</span>, <span class=\"comment\">//可以选择多少张图片</span></span><br><span class=\"line\">        <span class=\"attr\">sizeType</span>: [<span class=\"string\">&#x27;original&#x27;</span>, <span class=\"string\">&#x27;compressed&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">sourceType</span>: [<span class=\"string\">&#x27;album&#x27;</span>, <span class=\"string\">&#x27;camera&#x27;</span>], <span class=\"comment\">//设置图片来源</span></span><br><span class=\"line\">        <span class=\"attr\">success</span>:<span class=\"function\"><span class=\"params\">res</span>=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">uploadImg</span>(res.<span class=\"property\">tempFilePaths</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"文件上传\"><a class=\"markdownIt-Anchor\" href=\"#文件上传\">#</a> 文件上传</h2>\n<p>然后就可以对获取到的文件进行上传</p>\n<p><a href=\"https://\">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html</a></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">uploadImg</span>(<span class=\"params\">temfile</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;要上传图片的临时路径&#x27;</span>,temfile)</span><br><span class=\"line\">    wx.<span class=\"property\">cloud</span>.<span class=\"title function_\">uploadFile</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">cloudPath</span>: <span class=\"string\">&#x27;西芹1.png&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">filePath</span>: temfile, <span class=\"comment\">// 文件路径</span></span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;上传成功&#x27;</span>,res)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">fail</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;上传失败&#x27;</span>,err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>点击预览即可在手机上体验使用小程序上传图片</p>\n<h1 id=\"day5\"><a class=\"markdownIt-Anchor\" href=\"#day5\">#</a> day5</h1>\n<p>存储图片路径，使用存储中的下载地址，复制的时候注意不要复制问号后面的东西，因为是时间戳，可能导致图片失效。</p>\n<h2 id=\"上传视频\"><a class=\"markdownIt-Anchor\" href=\"#上传视频\">#</a> 上传视频</h2>\n<p><a href=\"https://\">https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html</a></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">chooseVideo</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">sourceType</span>: [<span class=\"string\">&#x27;album&#x27;</span>,<span class=\"string\">&#x27;camera&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">maxDuration</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">  <span class=\"attr\">camera</span>: <span class=\"string\">&#x27;back&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">success</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">tempFilePath</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<p>上传视频有时候比较慢，需要耐心等待。</p>\n<p>通过 type 值判断是上传视频还是图片</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;image <span class=\"attr\">wx</span>:<span class=\"keyword\">if</span>=<span class=\"string\">&quot;&#123;&#123;showImg&#125;&#125;&quot;</span> src=<span class=\"string\">&quot;&#123;&#123;imgUrl&#125;&#125;&quot;</span>&gt;&lt;/image&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;showVideo&#125;&#125;&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;videoUrl&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"上传word和pdf文件\"><a class=\"markdownIt-Anchor\" href=\"#上传word和pdf文件\">#</a> 上传 Word 和 PDF 文件</h2>\n<p><a href=\"https://\">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html</a></p>\n<p>从客户端会话选择文件。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.chooseMessageFile(&#123;</span><br><span class=\"line\">  count: 10,</span><br><span class=\"line\">  type: &#x27;image&#x27;,</span><br><span class=\"line\">  success (res) &#123;</span><br><span class=\"line\">    // tempFilePath可以作为img标签的src属性显示图片</span><br><span class=\"line\">    const tempFilePaths = res.tempFiles</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"文件下载\"><a class=\"markdownIt-Anchor\" href=\"#文件下载\">#</a> 文件下载</h2>\n<p><a href=\"https://\">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/downloadFile/client.downloadFile.html</a></p>\n<p>从云存储空间下载文件</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"property\">cloud</span>.<span class=\"title function_\">downloadFile</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">fileID</span>: <span class=\"string\">&#x27;a7xzcb&#x27;</span></span><br><span class=\"line\">&#125;)&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载成功&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"day6\"><a class=\"markdownIt-Anchor\" href=\"#day6\">#</a> day6</h1>\n<p>vue 文件中，data 初始化需要使用的数据，生命周期函数写在 methods 外面，而自定义的函数写在 methods 内。</p>\n<p><strong>传递值不需要 setdata，只需要 this. 变量名 = 值即可。</strong></p>\n<h2 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\">#</a> 目录结构</h2>\n<table>\n<thead>\n<tr>\n<th>目录名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pages</td>\n<td>页面存放目录</td>\n</tr>\n<tr>\n<td>static</td>\n<td>静态文件目录</td>\n</tr>\n<tr>\n<td>APP.vue</td>\n<td>应用入口文件，和小程序 app.js 类似</td>\n</tr>\n<tr>\n<td>main.js</td>\n<td>应用入口文件，注册 vue 等</td>\n</tr>\n<tr>\n<td>manifest.json</td>\n<td>项目配置</td>\n</tr>\n<tr>\n<td>pages.json</td>\n<td>页面配置</td>\n</tr>\n<tr>\n<td>common</td>\n<td>存放共用的文件</td>\n</tr>\n<tr>\n<td>components</td>\n<td>自定义组件目录</td>\n</tr>\n<tr>\n<td>store</td>\n<td>vuex 目录</td>\n</tr>\n<tr>\n<td>unpackage</td>\n<td>编译后的文件目录</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端控制语句\"><a class=\"markdownIt-Anchor\" href=\"#前端控制语句\">#</a> 前端控制语句</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-bind</td>\n<td>可以简写为：，组件属性要使用 data 中定义的数据变量，或者组件属性使用表达式，要使用 v-bind 指定</td>\n</tr>\n<tr>\n<td>v-on</td>\n<td>可以简写为 @绑定事件</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>数据双向绑定，例如根据输入值动态改变 data 中的值</td>\n</tr>\n<tr>\n<td>v-if</td>\n<td>条件判断，决定某个内容或者区块是否挂载</td>\n</tr>\n<tr>\n<td>v-show</td>\n<td>条件判断，是否显示</td>\n</tr>\n<tr>\n<td>v-for</td>\n<td>列表渲染，遍历循环，可以使用 index 获取序号，可以使用 value 和 key 获取对象中的对应关系</td>\n</tr>\n</tbody>\n</table>\n<p>onclick 事件也能够通过写表达式改变值，.stop 可以阻止事件穿透</p>\n<h2 id=\"生命周期\"><a class=\"markdownIt-Anchor\" href=\"#生命周期\">#</a> 生命周期</h2>\n<h3 id=\"应用的生命周期appvue\"><a class=\"markdownIt-Anchor\" href=\"#应用的生命周期appvue\">#</a> 应用的生命周期（APP.vue)</h3>\n<table>\n<thead>\n<tr>\n<th>周期名</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onLaunch</td>\n<td>应用初始化完成执行，全局只执行一次，通常做登录的处理</td>\n</tr>\n<tr>\n<td>onShow</td>\n<td>应用显示时执行，或者从后台进入前台</td>\n</tr>\n<tr>\n<td>onHide</td>\n<td>应用隐藏时执行，或者从前台进入后台</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"页面的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#页面的生命周期\">#</a> 页面的生命周期</h3>\n<p>onReady 在 onShow 之后触发，因为要等待数据</p>\n<table>\n<thead>\n<tr>\n<th>周期名</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onLoad</td>\n<td>页面加载时触发</td>\n</tr>\n<tr>\n<td>onReady</td>\n<td>页面初次完成渲染时触发</td>\n</tr>\n<tr>\n<td>onShow</td>\n<td>页面显示时触发</td>\n</tr>\n<tr>\n<td>onUnload</td>\n<td>页面卸载时触发</td>\n</tr>\n<tr>\n<td>onHide</td>\n<td>页面隐藏时触发</td>\n</tr>\n</tbody>\n</table>\n<p><strong>在写完云函数之后，一定要先停止在模拟器上运行，在编译一次才可以的，然后上传到云端，就可以进行使用了</strong></p>\n<p><strong>v-model 真的是神器，省去了很多获取值的麻烦操作</strong></p>\n",
            "tags": [
                "云开发",
                "微信小程序"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E5%B0%9A%E7%A1%85%E8%B0%B7Git/",
            "url": "http://example.com/2023/10/12/%E7%BC%96%E7%A8%8B/%E5%B0%9A%E7%A1%85%E8%B0%B7Git/",
            "title": "尚硅谷Git",
            "date_published": "2023-10-12T10:49:32.912Z",
            "content_html": "<h1 id=\"git使用\"><a class=\"markdownIt-Anchor\" href=\"#git使用\">#</a> Git 使用</h1>\n<p><code>C:\\\\Users\\\\86136\\\\git.config</code>  是 Git 的配置文件。</p>\n<p>按住 ctrl 键，滑动鼠标中键可以放大和缩小字体大小。</p>\n<p>使用 init 命令创建库成功后，会在该文件夹下创建一个.git 文件夹，默认是隐藏的，可以通过显示隐藏项目进行查看。</p>\n<p>红色代表该文件只存在于工作区，绿色代表文件已经上传到暂存区。</p>\n<p>只有将暂存区的文件提交到本地库，才会形成本地的历史记录。</p>\n<p>git 是以行的作为维护的，所以在原来的行上修改，会先删除改行，然后重新写入修改后的行。</p>\n<p>在.git 文件夹下的 refs 的 heads 目录的 main 文件可以查看当前版本号。</p>\n<p><strong>合并分支时，两个分支在同一个文件的同一个位置上有两套完全不同的修改，Git 无法替我们决定使用哪一个，必须人为决定新代码内容。</strong></p>\n<p><strong>首先使用 vim 命令对内容进行合并，然后将文件提交到暂存区，最后执行提交 (注意此时使用 git commit 命令时不能带文件名)。此时修改的只是当前分支，合并进来的分支的文件不会被修改。</strong></p>\n<p>各个分支其实都是指向具体版本的指针，当前所在的分支其实是由 HEAD 指针决定的，所以创建分支的本质就是多创建一个指针。</p>\n<p>clone 操作会进行如下操作：1、拉取代码。2、初始化本地仓库。3、创建别名。</p>\n<p>fork 别人代码后进行修改完成后，可以通过点击 pull request 想对方发送请求。对方可以在 pull request 查看，如果可以的话点击 Merge pull request 进行合并。</p>\n<h1 id=\"git常用命令\"><a class=\"markdownIt-Anchor\" href=\"#git常用命令\">#</a> Git 常用命令</h1>\n<table>\n<thead>\n<tr>\n<th>命令名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git config --global <a class=\"link\"   href=\"http://user.name\" >user.name <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 用户名</td>\n<td>设置用户签名</td>\n</tr>\n<tr>\n<td>git config --global user.email 邮箱</td>\n<td>设置用户邮箱</td>\n</tr>\n<tr>\n<td>git init</td>\n<td>初始化本地库</td>\n</tr>\n<tr>\n<td>git status</td>\n<td>查看本地库状态</td>\n</tr>\n<tr>\n<td>git add 文件名</td>\n<td>添加到暂存区</td>\n</tr>\n<tr>\n<td>git commit -m “日志信息” 文件名</td>\n<td>提交到本地库</td>\n</tr>\n<tr>\n<td>git reflog</td>\n<td>查看历史记录</td>\n</tr>\n<tr>\n<td>git reset --hard 版本号</td>\n<td>版本穿梭，版本号为 reflog 命令的七位随机码</td>\n</tr>\n<tr>\n<td>git add 文件名</td>\n<td>将文件加入到暂存区</td>\n</tr>\n<tr>\n<td>git rm --cached 文件名</td>\n<td>删除暂存区中的文件</td>\n</tr>\n<tr>\n<td>git commit -m “日志信息” 文件名</td>\n<td>将暂存区的文件提交到本地库中</td>\n</tr>\n<tr>\n<td>git reflog</td>\n<td>查看版本信息</td>\n</tr>\n<tr>\n<td>git log</td>\n<td>查看详细版本信息</td>\n</tr>\n<tr>\n<td>git branch 分支名</td>\n<td>创建分支</td>\n</tr>\n<tr>\n<td>git branch -v</td>\n<td>查看分支</td>\n</tr>\n<tr>\n<td>git checkout ‘分支名’</td>\n<td>切换分支</td>\n</tr>\n<tr>\n<td>git merge 分支名</td>\n<td>把指定的分组合并到当前分支上</td>\n</tr>\n<tr>\n<td>git remote -v</td>\n<td>查看当前所有远程地址别名</td>\n</tr>\n<tr>\n<td>git remote add 别名 远程地址</td>\n<td>起别名</td>\n</tr>\n<tr>\n<td>git push 别名 分支</td>\n<td>推送本地分支上的内容到远程仓库</td>\n</tr>\n<tr>\n<td>git clone 远程地址</td>\n<td>将远程仓库的内容克隆到本地</td>\n</tr>\n<tr>\n<td>git pull 远程库地址别名 远程分支名</td>\n<td>将远程仓库对应分支最新内容拉下来后与当前本地分支直接合并</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"linux常用命令\"><a class=\"markdownIt-Anchor\" href=\"#linux常用命令\">#</a> Linux 常用命令</h1>\n<table>\n<thead>\n<tr>\n<th>命令名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ll</td>\n<td>显示当前目录下的文档详细信息，加上 - a 可以查看隐藏信息</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>当前目录的文档名</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>复制当前行，需要退出编辑状态</td>\n</tr>\n<tr>\n<td>p</td>\n<td>粘贴当前行，需要退出编辑状态</td>\n</tr>\n<tr>\n<td>i 或 insert</td>\n<td>进入编辑状态</td>\n</tr>\n<tr>\n<td>:wq!</td>\n<td>退出编辑状态</td>\n</tr>\n<tr>\n<td>cat 文件名</td>\n<td>查看对应文件</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>清除当前界面的命令行</td>\n</tr>\n</tbody>\n</table>\n<p>使用 vim 命令创建新文件时，需要按 i 键或 insert 键进入编辑状态。退出编辑状态则是按 esc 键，然后输入 <code>:wq!</code>  回车退出。</p>\n<h1 id=\"git集成idea\"><a class=\"markdownIt-Anchor\" href=\"#git集成idea\">#</a> Git 集成 IDEA</h1>\n<p>创建忽略规则文件 <code>xxx.ignore</code> ，来屏蔽不需要的文件，因为这些文件与项目的实际功能无关，不参与服务器部署运行，把它们忽略掉能够屏蔽 IDE 工具之间的差异。配置文件后在.gitconfig 文件中设置引用该文件。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//git.ignore文件配置，写上需要忽略的文件后缀</span><br><span class=\"line\"># Compiled class file</span><br><span class=\"line\">*.class</span><br><span class=\"line\"></span><br><span class=\"line\"># Log file</span><br><span class=\"line\">*.log</span><br><span class=\"line\"></span><br><span class=\"line\"># BlueJ files</span><br><span class=\"line\">*.ctxt</span><br><span class=\"line\"></span><br><span class=\"line\"># Mobile Tools for Java (J2ME)</span><br><span class=\"line\">.mtj.tmp/# Package Files #</span><br><span class=\"line\">*.jar</span><br><span class=\"line\">*.war</span><br><span class=\"line\">*.nar</span><br><span class=\"line\">*.ear</span><br><span class=\"line\">*.zip</span><br><span class=\"line\">*.tar.gz</span><br><span class=\"line\">*.rar</span><br><span class=\"line\"></span><br><span class=\"line\">hs_err_pid*</span><br><span class=\"line\"></span><br><span class=\"line\">.classpath</span><br><span class=\"line\">.project</span><br><span class=\"line\">.settings</span><br><span class=\"line\">target</span><br><span class=\"line\">.idea</span><br><span class=\"line\">*.iml</span><br><span class=\"line\">//.gitconfig文件</span><br><span class=\"line\">[core]</span><br><span class=\"line\">  excludesfile = git.ignore文件所在路径，记得将反斜线(/)改为斜线(\\)</span><br></pre></td></tr></table></figure></div>\n<p>idea 则是在设置的 Version Control 下的 Git，并设置路径为 Git 安装目录的 C:\\Program Files\\Git\\bin\\git.exe。</p>\n<p>设置完成后还需要完成初始化，在 VCS (Version Control Setting) 下选择 import into Version Control 下的 Create Git Repository 才算真正完成初始化，此时 Git 接管了该项目。</p>\n<p>蓝色的代表之前已经被追踪过，可以不用 add，直接 commit 到本地库。</p>\n<p>如果想要将本地代码库推送到远程库，一定要保证本地库的版本要比远程库的版本高。因此一共成熟的程序员在动手改本地代码之前，一定会先检查远程库和本地库代码的区别。</p>\n",
            "tags": [
                "java学习路线",
                "计算机基础"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%8A%9E%E5%85%AC/Premiere%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2023/10/12/%E5%8A%9E%E5%85%AC/Premiere%E7%AC%94%E8%AE%B0/",
            "title": "Premiere笔记",
            "date_published": "2023-10-12T10:49:32.908Z",
            "content_html": "<h2 id=\"常用技巧\"><a class=\"markdownIt-Anchor\" href=\"#常用技巧\">#</a> 常用技巧</h2>\n<ol>\n<li>新建字幕：新建 -&gt; 旧版标题。</li>\n<li>工程文件也需要预览，绿色的是字，红色的是视频。</li>\n<li>To EDIT 是用于替换的地方，SHOT 是视频，TEXT 是文本。</li>\n<li>效果 -&gt; 点击已有的效果可以更加详细的调整效果。</li>\n<li>可以设置暂存盘，最好是 C 盘以外。</li>\n<li>编辑 -&gt; 首选项 -&gt; 时间轴，可以调整导入的东西的持续时间。</li>\n<li>窗口 -&gt; 基本图形 -&gt; 编辑，调整字体大小。</li>\n<li>PS 蒙版的使用</li>\n<li>图像大小和移动，点击编辑 -&gt; 效果控件，用里面的位置和缩放即可。</li>\n<li>AVI 格式更清晰，Quicktime。</li>\n<li>关键帧点击位置和旋转。</li>\n<li>设置字体背景的不透明度为 0 就不会影响视频文件。</li>\n<li>视频过渡 -&gt; 渐变擦除，可以用 PS 生成灰度图自定义转场。</li>\n<li>可以在效果控件中消除，复制和粘贴视频效果。</li>\n<li>新建一个图层可以增加一个共有的效果。</li>\n<li>模板是 mogrt 文件。</li>\n<li>窗口 -&gt; 基本图形 -&gt; 导入，当作时间轴拖入。</li>\n<li>要先按回车进行渲染，再播放，不然会很卡。</li>\n<li>蓝色的模板是不要渲染，而红色的需要。</li>\n<li>字体问题直接忽略，或者可以去下载字体库。</li>\n<li>工程文件模板在每个素材那里替换即可。</li>\n</ol>\n<h2 id=\"快捷键\"><a class=\"markdownIt-Anchor\" href=\"#快捷键\">#</a> 快捷键</h2>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>寻找剪辑点</td>\n<td>寻找剪辑点时，我们可以按下空格键 Space 播放和暂停。大致找到后，细找帧</td>\n</tr>\n<tr>\n<td>Left Right 键</td>\n<td>向前向后一帧 （比较细致，可以一直按，这样速度快一点）</td>\n</tr>\n<tr>\n<td>shift+Left Right 键</td>\n<td>向前向后五帧（这个比较快）</td>\n</tr>\n<tr>\n<td>J</td>\n<td>左穿梭 / 倒放</td>\n</tr>\n<tr>\n<td>K</td>\n<td>停止穿梭</td>\n</tr>\n<tr>\n<td>L</td>\n<td>右穿梭 / 正放</td>\n</tr>\n<tr>\n<td>Shift + L</td>\n<td>慢速右穿梭</td>\n</tr>\n<tr>\n<td>Shift + J</td>\n<td>慢速左穿梭，穿梭键如果连按，可以加速，K 和 Space 都可以停止播放</td>\n</tr>\n<tr>\n<td colspan=\"2\">时间线窗口中时间帧的管理</td>\n</tr>\n<tr>\n<td>End</td>\n<td>跳转到序列 - 素材结束点</td>\n</tr>\n<tr>\n<td>Home</td>\n<td>跳转到序列 - 素材开始点</td>\n</tr>\n<tr>\n<td>Shift + End</td>\n<td>跳转到所选素材结束点</td>\n</tr>\n<tr>\n<td>Up</td>\n<td>跳转上一个编辑点</td>\n</tr>\n<tr>\n<td>Down</td>\n<td>跳转下一个编辑点</td>\n</tr>\n<tr>\n<td>Ctrl+D</td>\n<td>添加转场效果，效果直接拖到转场处即可</td>\n</tr>\n<tr>\n<td>alt</td>\n<td>复制视频</td>\n</tr>\n<tr>\n<td colspan=\"2\">剪辑开始</td>\n</tr>\n<tr>\n<td>i</td>\n<td>设置入点</td>\n</tr>\n<tr>\n<td>o</td>\n<td>设置出点</td>\n</tr>\n<tr>\n<td>Shift + I</td>\n<td>跳转入店</td>\n</tr>\n<tr>\n<td>Shift + O</td>\n<td>跳转出点</td>\n</tr>\n<tr>\n<td>‘</td>\n<td>提取</td>\n</tr>\n<tr>\n<td>，</td>\n<td>插入</td>\n</tr>\n<tr>\n<td>.</td>\n<td>覆盖</td>\n</tr>\n<tr>\n<td>M</td>\n<td>标记点</td>\n</tr>\n<tr>\n<td>shift+M</td>\n<td>移动点</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"直接剪辑\"><a class=\"markdownIt-Anchor\" href=\"#直接剪辑\">#</a> 直接剪辑</h3>\n<ol>\n<li>剃刀 D，不建议用，一个是慢一个是不准确</li>\n<li>用 “添加编辑” 功能，因为常用，我把他重设了快捷键，大家可以在快捷键面板上搜索，一按此键，就可以在时间帧处切开</li>\n<li>Q 把时间帧前面的素材切掉，W 把时间帧后面的素材切掉，补充说明切掉的素材指此段素材，不是说时间帧之前到开头的都没有了</li>\n</ol>\n",
            "tags": [
                "Premiere",
                "视频剪辑"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/%E5%8A%9E%E5%85%AC/Excel/",
            "url": "http://example.com/2023/10/12/%E5%8A%9E%E5%85%AC/Excel/",
            "title": "Excel操作技巧",
            "date_published": "2023-10-12T10:49:32.906Z",
            "content_html": "<h2 id=\"01-excel入门\"><a class=\"markdownIt-Anchor\" href=\"#01-excel入门\">#</a> 01 Excel 入门</h2>\n<p>跨列居中：对齐方式 - 水平对齐 - 选定 “跨列居中”（Office365 版本）</p>\n<h3 id=\"自动调整栏宽\"><a class=\"markdownIt-Anchor\" href=\"#自动调整栏宽\">#</a> 自动调整栏宽</h3>\n<ul>\n<li>单栏调整：双击间隔线。</li>\n<li>多栏同宽调整：选定栏数，拖动任一栏宽度调整。（调整列亦同）。</li>\n</ul>\n<h3 id=\"日期输入\"><a class=\"markdownIt-Anchor\" href=\"#日期输入\">#</a> 日期输入</h3>\n<ul>\n<li>输入使用斜线格式，方便 excel 函数等功能计算使用</li>\n<li>使用 “右键单元格格式 - 数字 - 日期” 更换日期格式显示</li>\n<li>更换后日期栏显示 “#######”，表示日期文字过长，调整栏宽即可</li>\n<li>“Ctrl+；” 输入今日日期，向下拖动自动填充往后日期，拖动后方框右下角图标可设置填充格式，向下输入选项，有重复内容，右键 - 从下拉列表中选择，可从已输入选项中选择输入</li>\n</ul>\n<h3 id=\"计算总金额\"><a class=\"markdownIt-Anchor\" href=\"#计算总金额\">#</a> 计算总金额</h3>\n<ol>\n<li>\n<p>在结果栏输入 “=”，无需输入数值坐标，直接选定条件数值，输入运算符号，回车自动显示结果</p>\n</li>\n<li>\n<p>复制计算结果，粘贴到需计算的第二栏，直接得出第二栏计算结果</p>\n</li>\n<li>\n<p>选择结果，向下拖动，自动计算</p>\n</li>\n<li>\n<p>添加货币格式</p>\n<p>a 选定数值，在数字功能区选择货币格式，功能区内可选择增减小数点。</p>\n<p>b 添加后，可复制该区域，使用格式刷将货币格式粘贴到另一区域</p>\n</li>\n</ol>\n<h2 id=\"02-表格设计\"><a class=\"markdownIt-Anchor\" href=\"#02-表格设计\">#</a> 02 表格设计</h2>\n<h3 id=\"表格框线设计\"><a class=\"markdownIt-Anchor\" href=\"#表格框线设计\">#</a> 表格框线设计</h3>\n<ol>\n<li>\n<p>打印前预览，默认网格线不被打印，需自行添加设计表格框线（预览符号：快速访问工具栏，没有可在工具栏小箭头内添加）</p>\n</li>\n<li>\n<p>添加表格框线</p>\n<p>a 页面布局 -&gt; 工作表选项 -&gt; 网格线 -&gt; 打印（样式呆板）;</p>\n<p>b 手动设计：开始 -&gt; 字体 -&gt; 框线（选择颜色和样式）</p>\n</li>\n<li>\n<p>画框方式</p>\n<p>a 画笔（两种，绘制外框，绘制内框，按 Shift 切换橡皮功能，按 esc 退出）;</p>\n<p>b 选取范围，套用类型</p>\n</li>\n</ol>\n<h3 id=\"背景设计\"><a class=\"markdownIt-Anchor\" href=\"#背景设计\">#</a> 背景设计</h3>\n<ul>\n<li>excel 背景（背景无法打印，仅设计表格时美观用）：页面布局 -&gt; 页面设置 -&gt; 背景</li>\n<li>设计表格背景：开始 -&gt; 字体 -&gt; 油漆 -&gt; 选择颜色</li>\n<li>隐藏网格线：页面布局 -&gt; 工作表选项 -&gt; 网格线 -&gt; 查看（取消勾选）</li>\n</ul>\n<h2 id=\"03-冻结窗格与分割视图\"><a class=\"markdownIt-Anchor\" href=\"#03-冻结窗格与分割视图\">#</a> 03 冻结窗格与分割视图</h2>\n<p>冻结窗格：选定需冻结窗格的下一栏 / 列 -&gt; 视图 -&gt; 窗口 -&gt; 冻结窗格 -&gt; 冻结窗格</p>\n<p>拆分视窗：选定需拆分的大小 -&gt; 选定那一栏 -&gt; 视图 -&gt; 窗口 -&gt; 拆分</p>\n<h2 id=\"04-资料排序\"><a class=\"markdownIt-Anchor\" href=\"#04-资料排序\">#</a> 04 资料排序</h2>\n<p>单栏排序：选取排序栏中任一存储格（划重点）–排序与筛选–升序或降序（中文排序依照笔画多少）</p>\n<p>多栏排序：选取表格内任一存储格 -&gt; 排序与筛选 -&gt; 自订排序 -&gt; 先指定第一层排序 -&gt; 新增层级 -&gt; 指定第二层排序</p>\n<p>自订清单（依照用户自己设定的顺序来排列资料）：排序与筛选 -&gt; 自定排序 -&gt; 选择要排列的栏位 -&gt; 顺序选定为自订清单 -&gt; 清单项目 -&gt; 输入自己想要的顺序。PS：自订清单可以按照自己设定的顺序自动完成内容填充</p>\n<p>删除清单：删除清单 -&gt; 选择建立的清单 -&gt; 删除</p>\n<h2 id=\"05-资料筛选\"><a class=\"markdownIt-Anchor\" href=\"#05-资料筛选\">#</a> 05 资料筛选</h2>\n<p>筛选：点选表格内任一存储格–排序与筛选–筛选–类别栏–按条件筛选。PS：可同时在多个栏位中进行筛选，筛选时可按正序／倒序排序</p>\n<p>模糊比对功能：类别栏–文字筛选–开始于–“李”。PS：以 “李” 姓业务员为例</p>\n<p>色彩筛选 + 排序：上色（按住 control 不放并选取）-&gt; 依色彩排序 -&gt; 自订排序 -&gt; 选择要排序的栏位 -&gt;“值” 为储存格色彩</p>\n<h3 id=\"移除筛选\"><a class=\"markdownIt-Anchor\" href=\"#移除筛选\">#</a> 移除筛选</h3>\n<ol>\n<li>类别栏–清除筛选</li>\n<li>还原表格–排序与筛选–清除／直接点选筛选</li>\n</ol>\n<h2 id=\"06-格式化为表格交叉分析筛选器\"><a class=\"markdownIt-Anchor\" href=\"#06-格式化为表格交叉分析筛选器\">#</a> 06 格式化为表格 &amp; 交叉分析筛选器</h2>\n<p>表格生成方式（自动侦测表格大小）：页面布局 -&gt; 色彩 -&gt; 可更换多种配色</p>\n<p>取消表格：表格样式 -&gt; 套用无 -&gt; 清除表格样式</p>\n<h3 id=\"合计列汇总行\"><a class=\"markdownIt-Anchor\" href=\"#合计列汇总行\">#</a> 合计列（汇总行）</h3>\n<ul>\n<li>最后一栏会自动进行加总，也可以切换其他计算公式（存储格右侧三角形）</li>\n<li>可以将此栏位公式向左套用（拖动存储格右下角黑十字）</li>\n</ul>\n<h3 id=\"添加行或列\"><a class=\"markdownIt-Anchor\" href=\"#添加行或列\">#</a> 添加行或列</h3>\n<ul>\n<li>添加行：选取汇总行上一行最后一列，按 tab 键</li>\n<li>添加列：输入新一列列名，在此格内按下 enter 键</li>\n<li>套用第一行公式直接拉右下角十字即可</li>\n</ul>\n<h3 id=\"交叉分析筛选器切片器\"><a class=\"markdownIt-Anchor\" href=\"#交叉分析筛选器切片器\">#</a> 交叉分析筛选器（切片器）</h3>\n<ul>\n<li>表格 -&gt; 插入交叉分析筛选器（切片器）-&gt; 勾选想筛选的栏位 -&gt; 生成面板</li>\n<li>面板可调整大小、栏位，按 delete 可删除，右上角可清除筛选条件</li>\n<li>同时显示多个项目：按住 control 不放选择</li>\n<li>多重筛选：选取其他面板内的选项</li>\n</ul>\n<h2 id=\"07-设置格式化的条件\"><a class=\"markdownIt-Anchor\" href=\"#07-设置格式化的条件\">#</a> 07 设置格式化的条件</h2>\n<p>更改／删除条件：选取要更改的列 -&gt; 条件格式 -&gt; 管理规则 -&gt; 编辑规则 -&gt; 可重新指定条件</p>\n<p>数据条／色阶／图标集 -- 显示更有趣</p>\n<p>清除规则：条件格式 -&gt; 清除规则 -&gt; 清除整个工作表的规则</p>\n<h3 id=\"设定格式化\"><a class=\"markdownIt-Anchor\" href=\"#设定格式化\">#</a> 设定格式化</h3>\n<ul>\n<li>选取想筛选的栏位所在列–功能区右上角 “条件格式”–自行设定条件和突出显示样式</li>\n<li>栏位下方单元格新增突出显示的内容会自动填充显示样式</li>\n</ul>\n<h2 id=\"08-工作表设定合并汇算\"><a class=\"markdownIt-Anchor\" href=\"#08-工作表设定合并汇算\">#</a> 08 工作表设定 &amp; 合并汇算</h2>\n<p>工作表复制（不同 excel 文件之间）：打开两个 excel 文件 -&gt; 点选工作表右键 -&gt; 移动／复制 -&gt; 选取移动路径<br>\n -&gt; 表格位置 -&gt; 建立副本</p>\n<p>工作组：按住 control 不放生成工作组</p>\n<h3 id=\"合并计算\"><a class=\"markdownIt-Anchor\" href=\"#合并计算\">#</a> 合并计算</h3>\n<ul>\n<li>在需要计算的表格之外建立新的空白工作表 -&gt; 功能区 -&gt; 数据 -&gt; 合并计算</li>\n<li>选取表格范围 -&gt; 如顶端列、最左栏无数字 -&gt; 勾选则不计算 -&gt;“+” 增加范围</li>\n<li>挨个添加工作表需要计算的范围 -&gt; 勾选 “创建指向原数据的链接”-&gt; 可查看数据来源</li>\n</ul>\n<h2 id=\"09-图表制作\"><a class=\"markdownIt-Anchor\" href=\"#09-图表制作\">#</a> 09 图表制作</h2>\n<p>表格制作步骤：框选整个表格（必须包含行、列标题）-&gt; 插入 -&gt; 选择表格样式</p>\n<p>图表移动：图表设计栏右上角 -&gt; 移动图表 -&gt; 可选择移动到另一工作表／将图表生成全新工作表</p>\n<p>图表內添加文字或项目：图表设计 -&gt; 添加图表元素 -&gt; 选取要添加的内容</p>\n<p>表格变化与图表变化同步：新增表格内容后 -&gt; 点选图表 -&gt; 出现框选部分 -&gt; 将新增内容框选进范围内 -&gt; 表格变化</p>\n<p>直方图点击直方就可以进行选择填充的图像，比如说可以添加我们增加想要的图像。</p>\n<p>点击图像可以调整选择的数据范围。</p>\n<p>圆形图可以双击图形，并将想要突出的部分分离出来。</p>\n<p>点击图形后可以通过设计按钮对图形进行自定义操作。比如切换行列。</p>\n<p>框选空白位置，点击插入按钮选择迷你图，在选择数据范围即可画出走势图。</p>\n<p>散点图可以点击 + 按钮选择趋势线对图形进行简单分析。</p>\n<p>组合图可以用于实现不同数量级的数据的展示。</p>\n<h2 id=\"10-枢纽分析表\"><a class=\"markdownIt-Anchor\" href=\"#10-枢纽分析表\">#</a> 10 枢纽分析表</h2>\n<p>建立：点选表格内任一存储格 -&gt; 插入 -&gt; 数据透视表 -&gt; 可选范围和位置。PS：勾选想要显示的栏位标题 -&gt; 拖拽标题至不同位置会在数据透视表发生相应变化。</p>\n<p>排序：点选数据透视表內任意一格 -&gt; 右键 -&gt; 排序</p>\n<p>查看数据来源：点选数据透视表内某格 -&gt; 左键 ×2</p>\n<p>设置值的显示方式：选择要设定的选项 -&gt; 数据透视表字段 -&gt; 汇总方式、数据显示方式</p>\n<h3 id=\"筛选\"><a class=\"markdownIt-Anchor\" href=\"#筛选\">#</a> 筛选</h3>\n<ul>\n<li>现有列筛选：右侧三角（清除 -&gt; 选单内下拉）</li>\n<li>筛选器筛选：勾选筛选项拖拽至筛选器内</li>\n</ul>\n<h3 id=\"资料分组\"><a class=\"markdownIt-Anchor\" href=\"#资料分组\">#</a> 资料分组</h3>\n<ul>\n<li>按住 cotrol 不放点选对象 -&gt; 右键 -&gt; 组成群组</li>\n<li>取消 -&gt; 选择群组 -&gt; 右键 -&gt; 取消</li>\n</ul>\n<h2 id=\"11-列印分页设定\"><a class=\"markdownIt-Anchor\" href=\"#11-列印分页设定\">#</a> 11 列印分页设定</h2>\n<p>通过分页线调整打印页面范围</p>\n<p>页面布局可在打印时出现网格线和标题</p>\n<p>设定页面宽度和高度可以自动缩放</p>\n<p>只需打印几行资料 -&gt; 框选内容 -&gt; 设定打印范围</p>\n<h2 id=\"12-页首页尾设计浮水印制作\"><a class=\"markdownIt-Anchor\" href=\"#12-页首页尾设计浮水印制作\">#</a> 12 页首，页尾设计 &amp; 浮水印制作</h2>\n<p>点击视图 -&gt; 页面布局，就可以看到出现了页眉和页脚等信息，点击所选位置即可进行操作。</p>\n<p>点击页眉和页脚处还可以选择想要的格式。</p>\n<p>浮水印的利用图片即可，在图片处按 enter 键可以将图片往下移动。</p>\n<p>点击设置图片格式可以对图片进行更深一步的处理。</p>\n<h2 id=\"13-逻辑函数if\"><a class=\"markdownIt-Anchor\" href=\"#13-逻辑函数if\">#</a> 13 逻辑函数 IF</h2>\n<p>普通 IF 函数结构 (标点符号为英文)：缺点：只能判断两个条件 = IF（条件，“条件成立”，“条件不成立”）</p>\n<p>巢状 IF 函数 (EXCEL2016 版本后 IFS 函数)：缺点：如需叠加层级过多，则公式过于复杂 = IF（条件，成立，IF（条件，成立，不成立））</p>\n<h2 id=\"14-vlookup函数f4绝对参照\"><a class=\"markdownIt-Anchor\" href=\"#14-vlookup函数f4绝对参照\">#</a> 14 VLOOKUP 函数 &amp; F4 绝对参照</h2>\n<h3 id=\"vlookup函数\"><a class=\"markdownIt-Anchor\" href=\"#vlookup函数\">#</a> VLOOKUP 函数</h3>\n<ul>\n<li>公式 = VLOOKUP (关键字，资料范围，列数，查询模式)</li>\n<li>列数是指需要传回的是左起第几列的资料</li>\n<li>参照表格需采用 “递增方式” 排列（最后一排数字最大）</li>\n<li>查询模式：模糊比对：TRUE；精确比对：FALSE</li>\n</ul>\n<h3 id=\"绝对引用\"><a class=\"markdownIt-Anchor\" href=\"#绝对引用\">#</a> 绝对引用</h3>\n<ul>\n<li>通常情况下，VLOOKUP 函数无法自动填充，需将 “资料范围” 设定为固定区域；<br>\n否则 “资料范围” 会因为 “相对引用” 规则，随 “关键字” 一行下移；</li>\n<li>方法：选定公式中的资料范围 -&gt; 笔记本（FN+F4）/ 电脑 F4-&gt; 出现货币符号</li>\n</ul>\n<h2 id=\"15-iferror函数资料验证\"><a class=\"markdownIt-Anchor\" href=\"#15-iferror函数资料验证\">#</a> 15 IFERROR 函数 &amp; 资料验证</h2>\n<p>公式 = IFERROR（要检查的公式，公式错误的讯息）</p>\n<p>验证：选择存储格 -&gt; 数据 -&gt; 验证 -&gt; 设置待验证内容和报错信息</p>\n<h2 id=\"16-countifssumifs函数应用\"><a class=\"markdownIt-Anchor\" href=\"#16-countifssumifs函数应用\">#</a> 16 COUNTIFS&amp;SUMIFS 函数应用</h2>\n<p>SUMIFS 函数公式 = SUMIFS（加总范围，范围 1，条件 1，范围 2，条件 2，…）</p>\n<h3 id=\"countif函数\"><a class=\"markdownIt-Anchor\" href=\"#countif函数\">#</a> COUNTIF 函数</h3>\n<ul>\n<li>公式 = COUNTIF（资料范围，条件）</li>\n<li>注意：文本资料一定要加双引号</li>\n<li>小技巧： 条件可以指定为某空白存储格，便于随时修改</li>\n</ul>\n<h3 id=\"countifs函数\"><a class=\"markdownIt-Anchor\" href=\"#countifs函数\">#</a> COUNTIFS 函数</h3>\n<ul>\n<li>公式 = COUNTIFS (范围 1，条件 1，范围 2，条件 2，…)</li>\n<li>涉及金额的筛选 = COUNTIFS (范围 1，条件 1，范围 2，“&gt;”&amp; 存储格)</li>\n<li>存储格内金额可随时修改，符号根据需求选择</li>\n<li>涉及日期的筛选：如需筛选特定两个日期间的资料 = COUNTIFS (范围 1，条件 1，范围 2，“&gt;2018/5/15”，范围 2，“&lt;2018/6/3”)</li>\n<li>如需筛选特定月份资料：\n<ol>\n<li>利用 MONTH 函数建立辅助列，归纳出每笔资料所处的月份；</li>\n<li>建立 COUNTIF 函数，筛选范围设定为新建的月份列</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"17-定义名称indirect函数下拉选单设定\"><a class=\"markdownIt-Anchor\" href=\"#17-定义名称indirect函数下拉选单设定\">#</a> 17 定义名称 &amp; INDIRECT 函数 &amp; 下拉选单设定</h2>\n<p>定义名称：框选资料范围（不含标题）-&gt; 公式 -&gt; 定义名称</p>\n<p>INDIRECT 函数：以线索中的文字为媒介，取得目标存储格的内容。线索可以来自于两个不同的存储格，以 “&amp;” 连接</p>\n<h2 id=\"18-让你事半功倍的12个小技巧\"><a class=\"markdownIt-Anchor\" href=\"#18-让你事半功倍的12个小技巧\">#</a> 18 让你事半功倍的 12 个小技巧</h2>\n<p>资料剖析：框选需要剖析的单元格 -&gt; 数据 -&gt; 分列 -&gt; 分隔符号 -&gt; 勾选分隔符号<br>\n或分列 -&gt; 固定宽度 -&gt; 在数据预览处手动拖动分栏线。</p>\n<p>插入多个空白列：选取想要插入的列数 -&gt; 鼠标右键 -&gt; 插入。F4：重复前面的操作</p>\n<p>移除重复资料：框选单元格 -&gt; 数据 -&gt; 删除重复值 -&gt; 勾选</p>\n<p>表格转置：框选单元 -&gt; 复制 -&gt; 选择性粘贴 -&gt; 勾选转置</p>\n<p>贴上运算值：输入操作值 -&gt; 框选单元格 -&gt; 选择性粘贴 -&gt; 运算处点选操作</p>\n<p>显示公式：公式 -&gt; 显示公式</p>\n<p>目标搜寻：数据 -&gt; 模拟分析 -&gt; 单变量求解 -&gt; 填入对应值。PS：目标单元格内一定要有公式</p>\n<p>表格对角线：开始 -&gt; 边框 -&gt; 绘制边框 -&gt; 手动绘制所需边框或右键 -&gt; 设置单元格格式 -&gt; 边框 -&gt; 选择所需边框</p>\n<p>储存格内换行：ALT+enter</p>\n<p>插入图片注解：选取单元格 -&gt; 右键 -&gt; 插入批注 -&gt; 删除注释框中的名字 -&gt; 在边框处点击右键 -&gt; 设置批注格式 -&gt; 颜色与线条 -&gt; 颜色 -&gt; 填充效果 -&gt; 图片 -&gt; 选择图片。PS：只有在边框处点击右键才会有颜色与线条选项</p>\n<h3 id=\"快速选取资料\"><a class=\"markdownIt-Anchor\" href=\"#快速选取资料\">#</a> 快速选取资料</h3>\n<ul>\n<li>Ctrl + 键盘方向键：选取框移动到表格的四个角落</li>\n<li>Ctrl+shift + 键盘方向键：选取对应的范围</li>\n<li>标题列左上角：选取整张表格</li>\n</ul>\n<h3 id=\"储存格选取框\"><a class=\"markdownIt-Anchor\" href=\"#储存格选取框\">#</a> 储存格选取框</h3>\n<ul>\n<li>选取需要移动的单元格 -&gt; 鼠标移至单元格边框 -&gt; 拖动单元格</li>\n<li>移动时按住 Ctrl，复制内容</li>\n<li>移动时按住 shift，插入移动处，而不发生覆盖</li>\n</ul>\n<h2 id=\"19-表格数值格式\"><a class=\"markdownIt-Anchor\" href=\"#19-表格数值格式\">#</a> 19 表格数值格式</h2>\n<p>开始 -&gt; 数字右边的按钮 -&gt; 数字 -&gt; 自定义 -&gt; 类型下面的输入框或快捷键 Ctrl+！</p>\n<p>可以添加符号，或者在开头或末尾添加文字。PS：添加文字资讯时记得加上””</p>\n<p>示例：0.00;(0.00);(0.00);@代表正值；负值；零值；文字</p>\n<p>添加颜色：[所选颜色]，添加到所选区域前即可。只有 8 种颜色或 [颜色 + 色彩编号]，例如 [颜色 33]</p>\n<p>若语法结构内某类型没有格式，那么将会隐藏该类型<br>\n可以在格式中加入判断语句，例如 [&gt;90]，一个语法最多有两个判断语句若想有多个判断语句：开始 -&gt; 设定格式化条件</p>\n<p>点选格式后再点选自定义格式即可看到它的语法结构</p>\n<h3 id=\"符号表\"><a class=\"markdownIt-Anchor\" href=\"#符号表\">#</a> 符号表</h3>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>#</td>\n<td>遇到无意义的 0 将不会显示</td>\n</tr>\n<tr>\n<td>?</td>\n<td>遇到无意义的 0 将会空一格作为显示</td>\n</tr>\n<tr>\n<td>0</td>\n<td>强制显示每一个指定的位数</td>\n</tr>\n<tr>\n<td>@</td>\n<td>预留文字位置</td>\n</tr>\n<tr>\n<td>*</td>\n<td>重复 * 后面的符号</td>\n</tr>\n<tr>\n<td>,</td>\n<td>千</td>\n</tr>\n<tr>\n<td>,</td>\n<td>百万</td>\n</tr>\n<tr>\n<td>_</td>\n<td>预留一个_后面符号的宽度</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"20-时间格式工龄与工时计算\"><a class=\"markdownIt-Anchor\" href=\"#20-时间格式工龄与工时计算\">#</a> 20 时间格式 &amp; 工龄与工时计算</h2>\n<p>Datadif (开始日期，结束日期，计算单位）计算单位用”y”,”m”。PS：找不到这个函数，但是可以直接输入使用</p>\n<p>Networkdays（开始日期，结束日期，假日）</p>\n<p>Networkdays.intl (开始日期，结束日期，自定周末，假日)。自定周末输入对应的数字即可</p>\n<h3 id=\"符号表-2\"><a class=\"markdownIt-Anchor\" href=\"#符号表-2\">#</a> 符号表</h3>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[DBNUM1]</td>\n<td>将阿拉伯数字转换为中文数字</td>\n</tr>\n<tr>\n<td>aaaa</td>\n<td>以星期的方式显示</td>\n</tr>\n<tr>\n<td>Ctrl+；</td>\n<td>插入现在的日期</td>\n</tr>\n<tr>\n<td>Ctrl+shift+；</td>\n<td>插入现在的时间</td>\n</tr>\n<tr>\n<td>Today（）</td>\n<td>实时日期</td>\n</tr>\n<tr>\n<td>Now（）</td>\n<td>实时时间，按 F9 或点击单元格时更新</td>\n</tr>\n<tr>\n<td>[h]</td>\n<td>计算已经过的小时数</td>\n</tr>\n<tr>\n<td>[m]</td>\n<td>计算已经过的分钟数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"21-如何计算成绩排名\"><a class=\"markdownIt-Anchor\" href=\"#21-如何计算成绩排名\">#</a> 21 如何计算成绩排名</h2>\n<p>rank.eq (主体，比较范围，排序方式)</p>\n<p>比较范围注意要使用 F4 来作为绝对参照</p>\n<p>排序方式默认以降序排序，需要升序排序时在排序方式内填入 1 即可</p>\n<p>rank.avg () 与 rank.eq 类似，只是当成绩相同时，rank.avg 采用排名的平均值</p>\n<h2 id=\"22-提取表格内信息\"><a class=\"markdownIt-Anchor\" href=\"#22-提取表格内信息\">#</a> 22 提取表格内信息</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Left（资料位置，捉取字数）</td>\n<td>捉取数据左侧的数据</td>\n</tr>\n<tr>\n<td>Right（资料位置，捉取字数）</td>\n<td>捉取数据右侧的数据</td>\n</tr>\n<tr>\n<td>mid（资料位置，开始位置，捉取字数）</td>\n<td>捉取数据中间的数据</td>\n</tr>\n<tr>\n<td>Find（要搜寻的文字，资料来源，搜寻起点）</td>\n<td>查找文字所在位置</td>\n</tr>\n<tr>\n<td>Len（资料）</td>\n<td>计算储存格中的字数和空格</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"23-indexmatch\"><a class=\"markdownIt-Anchor\" href=\"#23-indexmatch\">#</a> 23 index+match</h2>\n<p>hlookup 与 vlookup 类似</p>\n<p>Index（栏 / 列范围，顺位）或 index（资料范围，列数，栏数）</p>\n<p>Match（查找对象，查找范围，比对方式）</p>\n<p>综合运用例子 INDEX (C3:F10,MATCH (I2,D3:D10,0),MATCH (H3,C2:F2,0))</p>\n<h2 id=\"24-保护表格\"><a class=\"markdownIt-Anchor\" href=\"#24-保护表格\">#</a> 24 保护表格</h2>\n<p>可供修改的单元格：框选单元格 -&gt; 右键 -&gt; 设置单元格格式 -&gt; 保护 -&gt; 取消勾选锁定。</p>\n<p>隐藏单元格公式：框选单元格 -&gt; 右键 -&gt; 设置单元格格式 -&gt; 保护 -&gt; 勾选隐藏</p>\n<p>隐藏：选定行或列 -&gt; 右键 -&gt; 隐藏</p>\n<p>允许编辑范围：审阅 -&gt; 允许编辑范围 -&gt; 新建 -&gt; 设定标题、范围、密码 -&gt; 确认密码 -&gt; 确认</p>\n<p>PS：以上操作需取消保护工作表，开启保护工作表后效果才会出现</p>\n<p>保护工作表：审阅 -&gt; 保护工作表 -&gt; 输入密码 -&gt; 确定密码</p>\n<p>保护工作簿与保护工作表类似</p>\n<h3 id=\"excel表设置密码\"><a class=\"markdownIt-Anchor\" href=\"#excel表设置密码\">#</a> Excel 表设置密码</h3>\n<ul>\n<li>文件 -&gt; 信息 -&gt; 保护工作簿 -&gt; 用密码进行加密 -&gt; 设定密码 -&gt; 确认密码</li>\n<li>另存为 -&gt; 工具 -&gt; 常规选项 -&gt; 设定密码</li>\n</ul>\n<h2 id=\"25-重复内容\"><a class=\"markdownIt-Anchor\" href=\"#25-重复内容\">#</a> 25 重复内容</h2>\n<p>删除重复信息：框选单元格 -&gt; 数据 -&gt; 删除重复值 -&gt; 勾选选项 -&gt; 确定</p>\n<p>防止重复内容：选定行或列 -&gt; 数据 -&gt; 数据验证 -&gt; 允许中选定自定义 -&gt; 填入公式 -&gt; 确定。公式例子：=countif (A:A,A1)=1</p>\n<h3 id=\"标注重复信息\"><a class=\"markdownIt-Anchor\" href=\"#标注重复信息\">#</a> 标注重复信息</h3>\n<ul>\n<li>框选单元格 -&gt; 开始 -&gt; 条件格式 -&gt; 突出显示单元格规则 -&gt; 重复值 -&gt; 确定</li>\n<li>框选单元格 -&gt; 开始 -&gt; 条件格式 -&gt; 新建规则 -&gt; 使用公式确定要设置格式的单元格 -&gt; 输入公式 -&gt; 修改后一参数值为相对参照 -&gt; 格式 -&gt; 填充 -&gt; 选择颜色 -&gt; 确定</li>\n<li>公式例子：=countif ($E<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">2:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span></span></span>E<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>14</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">14,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">14</span><span class=\"mpunct\">,</span></span></span></span>E2)&gt;1</li>\n</ul>\n<h2 id=\"26-随机函数的使用\"><a class=\"markdownIt-Anchor\" href=\"#26-随机函数的使用\">#</a> 26 随机函数的使用</h2>\n<h3 id=\"常见函数\"><a class=\"markdownIt-Anchor\" href=\"#常见函数\">#</a> 常见函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Randbetween (最小值，最大值)</td>\n<td>从最小值和最大值的范围内产生一个整数</td>\n</tr>\n<tr>\n<td>Choose (序号，可供选择的选项)</td>\n<td>根据序号选择对应选项</td>\n</tr>\n<tr>\n<td>Rand()</td>\n<td>产生 0 到 1 的随机数</td>\n</tr>\n<tr>\n<td>Roundup (数值，位数)</td>\n<td>无条件进位函数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常见例子\"><a class=\"markdownIt-Anchor\" href=\"#常见例子\">#</a> 常见例子</h3>\n<ul>\n<li>=INDEX(C3:C14,RANDBETWEEN(1,12))</li>\n<li>=CHOOSE (RANDBETWEEN (1,2),“A 卷”,“B 卷”)</li>\n<li>=CHOOSE(ROUNDUP(RANK(D3,$D<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">3:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span></span></span>D$14)/4,0),“A 组”,“B 组”,“C 组”)</li>\n<li>=INDEX($C<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">3:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span></span></span>C<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>14</mn><mo separator=\"true\">,</mo><mi>R</mi><mi>A</mi><mi>N</mi><mi>K</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mn>3</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">14,RANK(D3,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">14</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span></span></span></span>D<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">3:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span></span></span>D$14))</li>\n</ul>\n<h2 id=\"27-进度追踪表\"><a class=\"markdownIt-Anchor\" href=\"#27-进度追踪表\">#</a> 27 进度追踪表</h2>\n<p>勾选框块：功能区空白处点击右键 -&gt; 自定义功能区 -&gt; 勾选开发工具 -&gt; 确定 -&gt; 开发工具 -&gt; 插入 -&gt; 选择勾选框块</p>\n<p>完成格与状态的信息传输：框块右键 -&gt; 设置控件格式 -&gt; 选择单元格</p>\n<p>进度栏函数设置：=IF (I3=TRUE,1,IF ($C$3&gt;=G3,0,“🕒”))。PS：时钟符号可以：1.win10：wins+；2.UNICHAR (128336)</p>\n<p>添加刻度：点击饼图 -&gt; 设计 -&gt; 选择数据 -&gt; 添加 -&gt; 系列值输入对应数值的 1（如 ={1,1,1,1,1,1,1,1,1,1,1}）-&gt; 更换图表类型 -&gt; 勾选次坐标轴 -&gt; 选择未完成部分的饼图 -&gt; 填充选择无填充</p>\n<h2 id=\"28-甘特图\"><a class=\"markdownIt-Anchor\" href=\"#28-甘特图\">#</a> 28 甘特图</h2>\n<p>插入 -&gt; 堆积条形图 -&gt; 设计 -&gt; 选择数据 -&gt; 图例项选择 “开始日期” 和 “天数”-&gt; 水平轴标签框选 “任务名称”-&gt; 点击右侧条形 -&gt; 设置数据系列格式 -&gt; 填充 -&gt; 无填充 -&gt; 点击任务名称 -&gt; 坐标轴设定 -&gt; 勾选逆序刻度值 -&gt; 点击日期标识 -&gt; 坐标轴设定 -&gt; 最小值（设定为对应数值，可通过设定单元格格式的通用格式查看）-&gt; 单位的大选项为间距设定 -&gt; 点击右侧条形 -&gt; 点击 + 号 -&gt; 勾选误差线 -&gt; 更多选项 -&gt; 选择正偏差、无线端 -&gt; 自定义选择对应数列 -&gt; 填充 -&gt; 实线 -&gt; 调整宽度</p>\n<h2 id=\"29-sumproduct\"><a class=\"markdownIt-Anchor\" href=\"#29-sumproduct\">#</a> 29 sumproduct</h2>\n<p>Sumproduct（A，B）：将 A，B 分别相乘后相加</p>\n<p>=SUMPRODUCT((C3:C9=C11)*(D3:D9=D11)*F3:F9)</p>\n<p>=SUMPRODUCT(C3:C8,D3:D8)</p>\n<p>规则管理设定规则时需要加上一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>来锁定</mtext><mo>=</mo><mi>O</mi><mi>R</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mi>N</mi><mi>D</mi><mo stretchy=\"false\">(</mo></mrow><annotation encoding=\"application/x-tex\">来锁定\n=OR(AND(</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">来锁定</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">OR</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span></span></span></span>E3&gt;1000,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mn>3</mn><mo>&gt;</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">D3&gt;5),</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span></span></span></span>C3=“有”)</p>\n",
            "tags": [
                "Excel",
                "office",
                "日常办公"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/java/Linux-%E9%9F%A9%E9%A1%BA%E5%B9%B3/Linux-%E9%9F%A9%E9%A1%BA%E5%B9%B3/",
            "url": "http://example.com/2023/10/12/java/Linux-%E9%9F%A9%E9%A1%BA%E5%B9%B3/Linux-%E9%9F%A9%E9%A1%BA%E5%B9%B3/",
            "title": "Linux-韩顺平",
            "date_published": "2023-10-12T10:49:32.902Z",
            "content_html": "<h1 id=\"基础篇\"><a class=\"markdownIt-Anchor\" href=\"#基础篇\">#</a> 基础篇</h1>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"F:%5Cblog%5Cmyblog%5Csource%5C_posts%5Cjava%5CLinux-%E9%9F%A9%E9%A1%BA%E5%B9%B3%5C186662223856814ec6f2295c8a23c346.png\"\n                      alt=\"截图\"\n                ></p>\n<p>Linux 分区一般分为：boot 分区、交换分区和根分区。</p>\n<p>虚拟系统安装好后，它的本质就是文件。</p>\n<p>虚拟机克隆：如果你已经安装了一台 liux 操作系统，你还想再更多的，使用虚拟机克隆即可。方式 1，直接拷贝一份安装好的虚拟机文件。然后在 VM 上点击打开对应的 vmx 文件即可。方式 2，使用 vmware 的克隆操作，右键点击管理，后选择克隆即可。注意，克隆时，需要先关闭 linux 系统。</p>\n<p>虚拟机快照：如果你在使用虚拟机系统的时候，你想回到原先的某个状态，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常运行的状态，vmware 也提供了这样的功能，就叫快照管理。</p>\n<p>vmtools 安装后可以让我们在 Windows 下更好的管理 VM 虚拟机，可以设置 Windows 和 centos 的共享文件夹。在设置中开启共享文件夹后，可以在主文件夹 -&gt; 其他位置 -&gt;mnt-&gt;hgfs 下找到该文件夹。</p>\n<p>Windows 和 centos 就可以共享文件了，但是在实际开发中，文件的上传下载是需要使用远程方式完成的。</p>\n<p>使用 tab 键可以实现自动补全。</p>\n<p><strong>在 Linux 世界里，一切皆文件。</strong></p>\n<p>三种网络连接模式：桥接模式：虚拟系统可以和外部系统通讯，但是容易导致 IP 冲突。NAT 模式：网络地址转换模式，虚拟系统可以和外部系统通讯，不造成 IP 冲突。主机模式：独立的系统，不与外部系统通讯。</p>\n<p>使用 ifconfig 查看虚拟机的 inet 地址，然后使用 xshell 进行远程连接。</p>\n<h2 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\">#</a> 目录结构</h2>\n<ol>\n<li>/bin (usr/bin、/usr/local/bin) 是 Binary 的缩写，这个目录存放着最经常使用的命令。</li>\n<li>/sbin (/usr/sbin/usr/local/sbin) s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。</li>\n<li>/home 存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名。</li>\n<li>/root 该目录为系统管理员，也称作超级权限者的用户主目录。</li>\n<li>/Iib 系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所 有的应用程序都需要用到这些共享库。</li>\n<li>/lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li>\n<li>/etc 所有的系统管理所需要的配置文件和子目录，比如安装 mysq 数据库 my.conf</li>\n<li>/usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录。</li>\n<li>/boot 存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li>\n<li>/poc 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。不能轻易修改，否则会导致系统崩溃。</li>\n<li>/srv service 缩写，该目录存放一些服务启动之后需要提取的数据。</li>\n<li>/sys 这是 Iinux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs。</li>\n<li>/tmp 这个目录是用来存放一些临时文件的。</li>\n<li>/dev 类似于 windows 的设备管理器，把所有的硬件用文件的形式存储。</li>\n<li>/media linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。</li>\n<li>/mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在 /mnt/ 上，然后进入该目录就可以查看里的内容了。例如 d:/myshare。</li>\n<li>/opt 这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空。</li>\n<li>/usr/Iocal 这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。</li>\n<li>/var 这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。</li>\n<li>/selinux [security-enhanced linux] SELinux 是一种安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置。</li>\n</ol>\n<h1 id=\"linux实操篇\"><a class=\"markdownIt-Anchor\" href=\"#linux实操篇\">#</a> Linux 实操篇</h1>\n<h2 id=\"vi和vim\"><a class=\"markdownIt-Anchor\" href=\"#vi和vim\">#</a> vi 和 vim</h2>\n<h3 id=\"vi和vim的三种模式\"><a class=\"markdownIt-Anchor\" href=\"#vi和vim的三种模式\">#</a> vi 和 vim 的三种模式</h3>\n<ol>\n<li>正常模式：以 vim 打开一个档案就直接进入一般模式（这是默认的，模式）。在这个模式中，你可以使用方向按键来移动光标，使用删除字符或删除整行来处理档案内容，也可以使用复制、粘贴来处理文件数据。</li>\n<li>编辑模式：按下 i、I、o、O、a、A、r、R 等任何一个字母之后才会进入编辑模式，一般是按 i。</li>\n<li>命令行模式：输入 esc 后再输入：。在该模式下，可以提供相关指令完成读取、存盘、替换、离开 vim、显示行号等动作。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"F:%5Cblog%5Cmyblog%5Csource%5C_posts%5Cjava%5CLinux-%E9%9F%A9%E9%A1%BA%E5%B9%B3%5C209330823b8a08dcde2343614bf23ba0.png\"\n                      alt=\"无标题-2023-02-20-1711.png\"\n                ></p>\n<h3 id=\"快捷键使用\"><a class=\"markdownIt-Anchor\" href=\"#快捷键使用\">#</a> 快捷键使用</h3>\n<ol>\n<li>拷贝当前行 yy, 拷贝当前行向下的 5 行 5yy, 并粘贴（输入 P)。 注意不要使用小键盘的数字，否则会进入编辑模式。</li>\n<li>删除当前行 dd, 删除当前行向下的 5 行 5dd。</li>\n<li>在文件中查找某个单词 [命令行下输入 / 关键字，回车查找，输入 n 就是查找下一个]</li>\n<li>设置文件的行号，取消文件的行号。[命令行下:set nu 和:set nonu) 。</li>\n<li>编辑 /etc/profile 文件，在一般模式下使用快捷键到该文档的最末行 [G] 和最首行 [gg]。注意是区分大小写的。</li>\n<li>在一个文件中输入 &quot;hello”, 然后又撤销这个动作 u。</li>\n<li>编辑 /etc/profile 文件，在一般模式下，并将光标移动到，输入 20，再输入 20 行 shift+g。</li>\n</ol>\n<h2 id=\"关机-重启和用户登录注销\"><a class=\"markdownIt-Anchor\" href=\"#关机-重启和用户登录注销\">#</a> 关机、重启和用户登录注销</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>shutdown -h now</td>\n<td>立刻关机</td>\n</tr>\n<tr>\n<td>shutdown -h 1</td>\n<td>1 分钟后关机，shutdown 默认结果</td>\n</tr>\n<tr>\n<td>shutdown -r now</td>\n<td>立即重启计算机</td>\n</tr>\n<tr>\n<td>halt</td>\n<td>关机</td>\n</tr>\n<tr>\n<td>reboot</td>\n<td>重启</td>\n</tr>\n<tr>\n<td>sync</td>\n<td>把内存中的数据同步到磁盘</td>\n</tr>\n</tbody>\n</table>\n<p>不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。目前的 shutdown/reboot/halt 等命令均已经在关机前进行了 sync。</p>\n<p>登录时尽量少用 root 帐号登录，因为它是系统管理员，拥有最大的权限，避免操作失误。可以利用 普通用户登录，登录后再用”su - 用户名’命令来切换成系统管理员身份.。</p>\n<p>在提示符下输入 logout 即可注销用户，logout 注销指令在图形运行级别无效，在运行级别 3 下有效。</p>\n<h2 id=\"用户管理\"><a class=\"markdownIt-Anchor\" href=\"#用户管理\">#</a> 用户管理</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>useradd milan</td>\n<td>添加用户，默认该用户的家目录在 /home/milan</td>\n</tr>\n<tr>\n<td>useradd -d 指定目录 新用户名</td>\n<td>给新创建的用户指定家目录</td>\n</tr>\n<tr>\n<td>passwd 用户名</td>\n<td>修改用户的密码</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>显示当前用户所在目录</td>\n</tr>\n<tr>\n<td>userdel 用户名</td>\n<td>删除用户，但保留用户主目录</td>\n</tr>\n<tr>\n<td>userdel -r 用户名</td>\n<td>删除用户及其主目录</td>\n</tr>\n<tr>\n<td>id 用户名</td>\n<td>查询用户信息</td>\n</tr>\n<tr>\n<td>su - jack</td>\n<td>切换到 jack 用户</td>\n</tr>\n<tr>\n<td>who am i</td>\n<td>查询第一次登录的用户名</td>\n</tr>\n<tr>\n<td>whoami</td>\n<td>显示当前操作的用户名</td>\n</tr>\n</tbody>\n</table>\n<p>使用 su 切换用户时，从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。当需要返回到原来用户时，使用 exit/logout: 指令。</p>\n<p>在新建用户时，如果没有为其指定组，会默认创建一个与用户名同名的组，并进行绑定。</p>\n<h3 id=\"用户和组相关文件\"><a class=\"markdownIt-Anchor\" href=\"#用户和组相关文件\">#</a> 用户和组相关文件</h3>\n<p>/etc/passwd 文件：用户 (user) 的配置文件，记录用户的各种信息。每行的含义：用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录 Shell。</p>\n<p>/etc/shadow 文件：口令的配置文件。每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志。</p>\n<p>/etc/group 文件：组 (group) 的配置文件，记录 Linux 包含的组的信息。每行的含义：组名：口令：组标识号：组内用户列表。</p>\n<h2 id=\"实用指令\"><a class=\"markdownIt-Anchor\" href=\"#实用指令\">#</a> 实用指令</h2>\n<h3 id=\"文件目录类\"><a class=\"markdownIt-Anchor\" href=\"#文件目录类\">#</a> 文件目录类</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>init [0123456]</td>\n<td>切换不同的运行级别</td>\n</tr>\n<tr>\n<td>systemctl get-default</td>\n<td>查看当前运行级别</td>\n</tr>\n<tr>\n<td>systemctl set-default [multi-user.target,graphical.target]</td>\n<td>前者类似运行级别 3，后者类似运行级别 5</td>\n</tr>\n<tr>\n<td>man [命令或配置文件]</td>\n<td>功能描述，获得帮助信息，使用空格键可以往下翻</td>\n</tr>\n<tr>\n<td>help</td>\n<td>获得 shell 内置命令的帮助信息</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>显示当前工作目录的绝对路径</td>\n</tr>\n<tr>\n<td>ls [选项] [目录或文件]</td>\n<td>-a：显示当前目录的所有文件和目录，包括隐藏的。-l：以列表的方式显示信息</td>\n</tr>\n<tr>\n<td>cd ~</td>\n<td>回到自己的家目录</td>\n</tr>\n<tr>\n<td>cd …</td>\n<td>回到当前目录的上一级目录</td>\n</tr>\n<tr>\n<td>mkdir 目录名</td>\n<td>创建目录，-p 创建多级目录</td>\n</tr>\n<tr>\n<td>rmdir 目录名</td>\n<td>删除空目录</td>\n</tr>\n<tr>\n<td>rm 目录名</td>\n<td>移除文件或目录，-r：递归删除整个文件夹，-f：强制删除不提示</td>\n</tr>\n<tr>\n<td>touch 文件名称</td>\n<td>创建空文件</td>\n</tr>\n<tr>\n<td>cp 要复制的文件名或文件夹 目录名</td>\n<td>拷贝文件到指定目录，-r：递归复制整个文件夹，\\cp 是强制覆盖不提示</td>\n</tr>\n<tr>\n<td>mv oldName newName</td>\n<td>重命名文件</td>\n</tr>\n<tr>\n<td>mv /temp/movefile /targetFolder</td>\n<td>移动文件与目录</td>\n</tr>\n<tr>\n<td>cat 文件名</td>\n<td>查看文件内容，-n：显示行号</td>\n</tr>\n<tr>\n<td>echo 输出内容</td>\n<td>输出内容到控制台</td>\n</tr>\n<tr>\n<td>head -n 5 文件名</td>\n<td>查看文件开头 5 行</td>\n</tr>\n<tr>\n<td>tail 文件名</td>\n<td>输出文件尾部的内容默认显示前 10 行；-n：指定行数；-f：实时追踪该文档的所有更新。使用 - f 时可以使用 ctrl+C 退出浏览。</td>\n</tr>\n<tr>\n<td>ln -s 原文件或目录 软链接名</td>\n<td>给原文件创建一个软链接，相当于快捷方式</td>\n</tr>\n<tr>\n<td>history</td>\n<td>查看历史命令</td>\n</tr>\n</tbody>\n</table>\n<p>基本介绍运行级别说明：0: 关机；1: 单用户，可以用来找回丢失密码； 2: 多用户状态没有网络服务；3: 多用户状态有网络服务；4：系统未使用保留给用户；5：图形界面 6: 系统重启。常用运行级别是 3 和 5，也可以指定默认运行级别。</p>\n<p>在 Linux 中，隐藏文件是以 &quot;.&quot; 开头。</p>\n<p>cat 只能浏览文件，而不能修改文件，为了浏览方便，通常加上管道命令 | more。</p>\n<p><code>&gt;输出重定向和&gt;&gt;追加指令</code> ，重定向是改变默认的输出位置。</p>\n<h4 id=\"more指令交互\"><a class=\"markdownIt-Anchor\" href=\"#more指令交互\">#</a> more 指令交互</h4>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>空白键 (space)</td>\n<td>向下翻一页</td>\n</tr>\n<tr>\n<td>Enter</td>\n<td>向下翻一行</td>\n</tr>\n<tr>\n<td>q</td>\n<td>立即离开 more，不再显示该文件内容</td>\n</tr>\n<tr>\n<td>Ctrl+F</td>\n<td>向下翻动一屏</td>\n</tr>\n<tr>\n<td>Ctrl+B</td>\n<td>返回上一屏</td>\n</tr>\n<tr>\n<td>=</td>\n<td>输出当前行的行号</td>\n</tr>\n<tr>\n<td>:f</td>\n<td>输出文件名和当前行的行号</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"less指令交互\"><a class=\"markdownIt-Anchor\" href=\"#less指令交互\">#</a> less 指令交互</h4>\n<p>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。Iess 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>空白键</td>\n<td>向下翻动一页</td>\n</tr>\n<tr>\n<td>pagedown</td>\n<td>向下翻动一页</td>\n</tr>\n<tr>\n<td>pageup</td>\n<td>向上翻动一页</td>\n</tr>\n<tr>\n<td>/ 字符串</td>\n<td>搜寻子串；n：向下查找；N：向上查找</td>\n</tr>\n<tr>\n<td>? 字符串</td>\n<td>搜寻子串；n：向上查找；N：向下查找</td>\n</tr>\n<tr>\n<td>q</td>\n<td>离开 less 程序</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"时间日期类\"><a class=\"markdownIt-Anchor\" href=\"#时间日期类\">#</a> 时间日期类</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>date</td>\n<td>显示当前日期</td>\n</tr>\n<tr>\n<td>date -s 字符串时间</td>\n<td>设置系统时间</td>\n</tr>\n<tr>\n<td>cal</td>\n<td>查看日历</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"搜索查找类\"><a class=\"markdownIt-Anchor\" href=\"#搜索查找类\">#</a> 搜索查找类</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>find 搜索范围 选项</td>\n<td>从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。有 name、user 和 size 三种查找选项。</td>\n</tr>\n<tr>\n<td>locate 搜索文件</td>\n<td>快速定位文件路径</td>\n</tr>\n<tr>\n<td>which</td>\n<td>可以查看指令的路径</td>\n</tr>\n<tr>\n<td>grep 选项 查找内容 源文件</td>\n<td>过滤查找。-n：显示匹配行及行号；-i：忽略字母大小写</td>\n</tr>\n</tbody>\n</table>\n<p>locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locatel 数据库。由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库。</p>\n<p><strong>管道符号 “|”，表示将前一个指令的处理结果输出传递给后面的指令处理。</strong></p>\n<h3 id=\"压缩和解压缩类\"><a class=\"markdownIt-Anchor\" href=\"#压缩和解压缩类\">#</a> 压缩和解压缩类</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gzip 文件名</td>\n<td>压缩文件</td>\n</tr>\n<tr>\n<td>gunzip 文件名.gz</td>\n<td>解压文件</td>\n</tr>\n<tr>\n<td>zip</td>\n<td>压缩文件或文件夹。-r：递归压缩，即压缩目录</td>\n</tr>\n<tr>\n<td>unzip</td>\n<td>解压文件或文件夹。-d：指定解压后文件的存放目录 -</td>\n</tr>\n<tr>\n<td>tar 选项 文件名.tar.gz 打包的内容</td>\n<td>将文件夹打包。-c：产生.tar 打包文件；-v：显示详细信息；-f：指定压缩后的文件名；-z：打包同时压缩；-x：解包 tar 文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"组管理和权限管理\"><a class=\"markdownIt-Anchor\" href=\"#组管理和权限管理\">#</a> 组管理和权限管理</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ls -ahl</td>\n<td>查看文件的所有者</td>\n</tr>\n<tr>\n<td>chown 用户名 文件名</td>\n<td>修改文件所有者，-R：如果是目录，则使其下所有子文件或目录递归生效</td>\n</tr>\n<tr>\n<td>chgrp 组名 文件名</td>\n<td>修改文件所在的组，-R：如果是目录，则使其下所有子文件或目录递归生效</td>\n</tr>\n<tr>\n<td>groupadd 组名</td>\n<td>新增组</td>\n</tr>\n<tr>\n<td>groupdel 组名</td>\n<td>删除组</td>\n</tr>\n<tr>\n<td>useradd -g 用户组 用户名</td>\n<td>增加用户的时候直接加上组</td>\n</tr>\n<tr>\n<td>usermod -g 用户组 用户名</td>\n<td>修改用户的组</td>\n</tr>\n<tr>\n<td>chmod u=rwx,g=rx,o=x 文件或目录名</td>\n<td>给文件或目录的所有者读写执行的权限，给所在组读执行权限，给其他组执行权限。+ 增强权限，- 减少权限，= 赋予权限。u 所有者，g 所在组，o 其他组，a 全部用户。</td>\n</tr>\n<tr>\n<td>chmod 751 文件或目录名</td>\n<td>通过数字变更权限，r=4,w=2,x=1，相加得到数字，u=7=4+2+1=rwx,g=5=4+1=rx,o=1=x。因此相当于 chmod u=rwx,g=rx,o=x 文件或目录名。</td>\n</tr>\n</tbody>\n</table>\n<p>在 linux 中的每个用户必须属于一个组，不能独立于组外。在 Linux 中每个文件有所有者、所在组、其它组的概念。</p>\n<p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组。</p>\n<h4 id=\"权限基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#权限基本介绍\">#</a> 权限基本介绍</h4>\n<ol>\n<li>第 0 位确定文件类型 (d,-,I,c,b)：I 是链接，相当于 windows 的快捷方式；- 是普通文件；d 是目录，相当于 windows 的文件夹；c 是字符设备：文件，鼠标，键盘；b 是块设备，比如硬盘。</li>\n<li>第 1-3 位确定所有者（该文件的所有者）拥有该文件的权限。</li>\n<li>第 4-6 位确定所属组（同用户组的）拥有该文件的权限。</li>\n<li>第 7-9 位确定其他用户拥有该文件的权限。</li>\n</ol>\n<p><strong>rwx 作用到文件：[r] 代表可读 (read): 可以读取，查看。[w] 代表可写 (write)：可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件。[x] 代表可执行 (execute): 可以被执行.</strong></p>\n<p><strong>rwx 作用到目录：[r] 代表可读 (read): 可以读取，Is 查看目录内容。[w] 代表可写 (write)：可以修改，对目录内创建 + 删除 + 重命名目录。[x] 代表可执行 (execute): 可以进入该目录。</strong></p>\n<p><strong>权限更新会有延时性，系统记录的是你刚开始登录的所在组，需要更新或者重新登录来更新自己的组。</strong></p>\n<h2 id=\"任务调度\"><a class=\"markdownIt-Anchor\" href=\"#任务调度\">#</a> 任务调度</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>crontab</td>\n<td>-e：编辑定时任务；-l：查询任务；-r：删除所有任务</td>\n</tr>\n<tr>\n<td><code>*/1 * * * * ls -l /etc/ &gt; /tmp/to.txt</code></td>\n<td>每小时的每分钟执行一次后面的指令。</td>\n</tr>\n<tr>\n<td>at 选项 时间</td>\n<td>一次性定时任务，输入 ctrl+d 结束 at 命令的输入</td>\n</tr>\n<tr>\n<td>atrm 编号</td>\n<td>删除编号的 at 任务</td>\n</tr>\n</tbody>\n</table>\n<p>任务调度是指系统在某个时间执行的特定的指令或程序。</p>\n<p>at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行。默认情况下，atd 守护进程每 60 秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。 at 命令是一次性定时计划任务，执完一个任务后不再执行此任务了。在使用 at 命令的时候，一定要保证 atd 程的启动，可以使用相关指令 <code>ps -ef | grep atd</code>  来查看。</p>\n<h3 id=\"crontab\"><a class=\"markdownIt-Anchor\" href=\"#crontab\">#</a> crontab</h3>\n<h4 id=\"5个占位符\"><a class=\"markdownIt-Anchor\" href=\"#5个占位符\">#</a> 5 个占位符</h4>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>含义</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一个 *</td>\n<td>一小时当中的第几分钟</td>\n<td>0-59</td>\n</tr>\n<tr>\n<td>第二个 *</td>\n<td>一天中的第几小时</td>\n<td>0-23</td>\n</tr>\n<tr>\n<td>第三个 *</td>\n<td>一个月当中的第几天</td>\n<td>1-31</td>\n</tr>\n<tr>\n<td>第四个 *</td>\n<td>一年当中的第几月</td>\n<td>1-12</td>\n</tr>\n<tr>\n<td>第五个 *</td>\n<td>一周当中的星期几</td>\n<td>0-7（0 和 7 都代表星期日）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"特殊符号\"><a class=\"markdownIt-Anchor\" href=\"#特殊符号\">#</a> 特殊符号</h4>\n<table>\n<thead>\n<tr>\n<th>特殊符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>代表任何时间。比如第一个 “*” 就代表一小时中每分钟都执行一次的意思。</td>\n</tr>\n<tr>\n<td>,</td>\n<td>代表不连续的时间。比如 “ <code>0 8,12,16 * * *</code>  命令”，就代表在每天的 8 点 0 分，12 点 0 分，16 点 0 分都执行一次命令。</td>\n</tr>\n<tr>\n<td>-</td>\n<td>代表连续的时间范围。比如 “ <code>0 5 * * 1-6</code>  命令”，代表在周一到周六的凌晨 5 点 0 分执行命令。</td>\n</tr>\n<tr>\n<td>*/n</td>\n<td>代表每隔多久执行一次。比如 “ <code>*/10 * * * *</code>  命令”，代表每隔 10 分钟就执行一遍命令。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"at命令\"><a class=\"markdownIt-Anchor\" href=\"#at命令\">#</a> at 命令</h3>\n<h4 id=\"at命令选项\"><a class=\"markdownIt-Anchor\" href=\"#at命令选项\">#</a> at 命令选项</h4>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-m</td>\n<td>当指定的任务被完成后，将给用户发送邮件，即使没有标准输出</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>atq 的别名</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>atrm 的别名</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示任务将被执行的时间</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>打印任务的内容到标准输出</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>显示版本信息</td>\n</tr>\n<tr>\n<td>-q &lt;队列&gt;</td>\n<td>使用指定的队列</td>\n</tr>\n<tr>\n<td>-f &lt;文件&gt;</td>\n<td>从指定文件读入任务而不是从标准输入读入</td>\n</tr>\n<tr>\n<td>-t &lt;时间参数&gt;</td>\n<td>以时间参数的形式提交要运行的任务</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"at时间定义\"><a class=\"markdownIt-Anchor\" href=\"#at时间定义\">#</a> at 时间定义</h4>\n<ol>\n<li>接受在当天的 hh:mm (小时：分钟) 式的时间指定。假如该时间已过去，那么就放在第二天执行。例如： 04:00。</li>\n<li>使用 midnight (深夜)，noon (中午)，teatime (饮茶时间，一般是下午 4 点) 等比较模糊的词语来指定时间。</li>\n<li>采用 12 小时计时制，即在时间后面加上 AM (上午) 或 PM (下午) 来说明是上午还是下午。例如：12pm。</li>\n<li>指定命令执行的具体日期，指定格式为 month day (月 日) 或 mm/dd/yy (月 / 日 / 年) 或 dd.mm.yy（日。月. 年)，指定的日期必须跟在指定时间的后面。例如：04:00 2021-03-1。</li>\n<li>使用相对计时法。指定格式为：now+count time-units,now 就是当前时间，time-units 是时间单位，这里能够是 minutes (分钟)、hours (小时)、days (天)、weeks (星期)。count 是时间的数量，几天，几小时。例如：now+5 minutes。</li>\n<li>直接使用 today (今天)、tomorrow (明天) 来指定完成命令的时间。</li>\n</ol>\n<h2 id=\"磁盘分区与挂载\"><a class=\"markdownIt-Anchor\" href=\"#磁盘分区与挂载\">#</a> 磁盘分区与挂载</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lsblk</td>\n<td>查看磁盘分区情况，-f 可以查看更详细的信息</td>\n</tr>\n<tr>\n<td>fdisk /dev/sdb</td>\n<td>对 sdb 硬盘进行分区</td>\n</tr>\n<tr>\n<td>mkfs -t 分区类型 /dev/sdb1</td>\n<td>格式化 sdb1 磁盘</td>\n</tr>\n<tr>\n<td>mount 磁盘名 文件夹名</td>\n<td>将磁盘挂载到文件夹上</td>\n</tr>\n<tr>\n<td>umount 磁盘名或文件夹名</td>\n<td>取消挂载</td>\n</tr>\n<tr>\n<td>df -h</td>\n<td>查询系统整体磁盘使用情况</td>\n</tr>\n<tr>\n<td>du -h 目录名</td>\n<td>查询指定目录的磁盘占用情况</td>\n</tr>\n<tr>\n<td>tree 目录名</td>\n<td>以树状显示目录结构，可能需要使用 yum install tree 安装该指令</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"增加硬盘的步骤\"><a class=\"markdownIt-Anchor\" href=\"#增加硬盘的步骤\">#</a> 增加硬盘的步骤</h3>\n<ol>\n<li>虚拟机添加硬盘：在【虚拟机】菜单中，选择【设置】，然后设备列表里添加硬盘，然后一路【下一步】，中间只有选择磁盘大小的地方需要修改，直到完成。然后重启系统（才能识别）！</li>\n<li>分区：开始分区后输入 n，新增分区，然后选择 p，分区类型为主分区。两次回车默认剩余全部空间。最后输入 w 写入分区并退出，若不保存退出输入 q。</li>\n<li>格式化。</li>\n<li>挂载：用命令行挂载是临时的，重启后会失效。永久挂载通过修改 /etc/fstab 文件实现挂载，添加完成后执行 mount -a 立即生效。</li>\n</ol>\n<h2 id=\"网络配置\"><a class=\"markdownIt-Anchor\" href=\"#网络配置\">#</a> 网络配置</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ifconfig</td>\n<td>查看 Linux 的网络配置</td>\n</tr>\n<tr>\n<td>ipconfig</td>\n<td>查看 Windows 的网络配置</td>\n</tr>\n<tr>\n<td>ping 目的主机</td>\n<td>测试当前服务器是否可以连接目的主机</td>\n</tr>\n<tr>\n<td>service network restart</td>\n<td>重启网络服务</td>\n</tr>\n</tbody>\n</table>\n<p>指定 IP 地址：直接修改配置文件来指定 IP, 并可以连接到外网。编辑 vim /etc/sysconfig/network-scripts/ifcfg-ens33。修改后重启网络服务或重启系统生效。</p>\n<p>通过 vim /etc/hostname 修改主机名，修改后重启生效。</p>\n<p>主机名与 hosts 映射。Windows 端：在 C:\\Windows\\System32\\drivers\\etc\\hosts 文件指定。Linux 端：在 /etc/hosts 文件指定。</p>\n<h2 id=\"进程管理\"><a class=\"markdownIt-Anchor\" href=\"#进程管理\">#</a> 进程管理</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ps</td>\n<td>查看目前系统中，有哪些正在执行，以及执行情况。-a：显示当前终端的所有进程信息；-u：以用户的格式显示进程信息；-x：显示后台程序运行的参数。</td>\n</tr>\n<tr>\n<td>kill 选项 进程号</td>\n<td>通过进程号终止进程。-9 表示强制进程立即停止。</td>\n</tr>\n<tr>\n<td>killall 进程名称</td>\n<td>通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用。</td>\n</tr>\n<tr>\n<td>pstree 选项</td>\n<td>查看进程树。-p：显示进程的 PID；-u：显示进程的所属用户。</td>\n</tr>\n<tr>\n<td>service 服务名 选项</td>\n<td>管理服务</td>\n</tr>\n<tr>\n<td>setup</td>\n<td>查看所有系统服务，带 * 的会自启动</td>\n</tr>\n<tr>\n<td>chkconfig</td>\n<td>给服务的各个运行级别设置自启动或关闭，需要重启后生效。</td>\n</tr>\n<tr>\n<td>systemctl 选项 服务名</td>\n<td>管理服务</td>\n</tr>\n<tr>\n<td>firewall-cmd --permanent --add-port = 端口号 / 协议</td>\n<td>打开端口，改为–remove=port 则是关闭端口</td>\n</tr>\n<tr>\n<td>firewall-cmd --reload</td>\n<td>重新载入后才能生效</td>\n</tr>\n<tr>\n<td>firewall-cmd --permanent --query-port = 端口号 / 协议</td>\n<td>查询端口是否开放</td>\n</tr>\n<tr>\n<td>top 选项</td>\n<td>用于动态更新正在执行的进程</td>\n</tr>\n<tr>\n<td>netstat 选项</td>\n<td>查看系统网络情况。-an：按一定顺序排列输出；-p：显示哪个进程在调用</td>\n</tr>\n<tr>\n<td>ping 对方 ip</td>\n<td>网络检测工具</td>\n</tr>\n</tbody>\n</table>\n<p>ps 指令依次显示进程执行用户、进程号、占用 CPU 的百分比、占用虚拟内存的百分比、占用物理内存的百分比、终端信息、当前运行状态、开始时间、占用的 CPU 时间和执行该进程的指令。</p>\n<p>PPID 是父进程 ID。</p>\n<p>服务 (service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如 (mysqld,sshd 防火墙等)，因此我们又称为守护进程，是 Linux 中非常重要的知识点。</p>\n<p>systemctl 指令关闭或者启用防火墙后，立即生效。但这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。如果希望设置某个服务自启动或关闭永久生效，要使用 systemctl 的 enable 和 disable 选项。</p>\n<p>service 管理的指令可以在 /etc/init.d 查看。</p>\n<p>systemctl 指令管理的服务在 /usr/Iib/systemd/system 查看。</p>\n<p>使用 dism /Online/Enable-Feature /FeatureName:TelnetClient 指令在 Windows 安装 Telnet 指令。</p>\n<h2 id=\"rpm和yum\"><a class=\"markdownIt-Anchor\" href=\"#rpm和yum\">#</a> RPM 和 YUM</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rpm -qa</td>\n<td>查询已安装的 RPM 列表</td>\n</tr>\n<tr>\n<td>rpm -q firefox</td>\n<td>查询软件是否安装</td>\n</tr>\n<tr>\n<td>yum list</td>\n<td>查询可以安装的软件</td>\n</tr>\n<tr>\n<td>yum install 包名</td>\n<td>按照指定的 yum 包</td>\n</tr>\n</tbody>\n</table>\n<p>rpm 用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有.RPM 扩展名的文件。RPM 是 RedHat Package Manager (RedHats 软件包管理工具) 的缩写，类似 windows 的 setup.exe，这一文件格式名称虽然打上了 RedHat 的标志，但理念是通用的。</p>\n<p>可以在光盘的 package 文件夹中找需要按照的 rpm 包。</p>\n<p>yum 是一个 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p>\n<h1 id=\"提高篇\"><a class=\"markdownIt-Anchor\" href=\"#提高篇\">#</a> 提高篇</h1>\n<h2 id=\"java\"><a class=\"markdownIt-Anchor\" href=\"#java\">#</a> java</h2>\n<p>安装 jdk 要注意写入环境变量，并在写入后更新文件。</p>\n<p>安装 Tomcat 要注意打开防火墙的端口。</p>\n<p>安装 idea 要注意在图像界面启动.sh 文件，因为安装时需要图形界面。</p>\n<p>安装 MySQL 时，centos7.6 自带的类 mysql 数据库是 mariadb，会跟 mysql 冲突，要先删除。</p>\n<h2 id=\"shell\"><a class=\"markdownIt-Anchor\" href=\"#shell\">#</a> shell</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set</td>\n<td>显示当前 shell 中的所有变量</td>\n</tr>\n<tr>\n<td>变量 = 值</td>\n<td>定义变量</td>\n</tr>\n<tr>\n<td>unset 变量</td>\n<td>撤销变量</td>\n</tr>\n<tr>\n<td>readonly 变量</td>\n<td>声明静态变量，不能 unset</td>\n</tr>\n<tr>\n<td>export 变量名 = 变量值</td>\n<td>将 shell 变量输出为环境变量 / 全局变量</td>\n</tr>\n<tr>\n<td>source 配置文件</td>\n<td>刷新配置文件使其生效</td>\n</tr>\n<tr>\n<td>echo $ 变量名</td>\n<td>输出变量的值</td>\n</tr>\n<tr>\n<td>:&lt;&lt;! 内容！</td>\n<td>多行注释，注释符号需要分行</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>当前进程的进程号 (PID)</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的进程号 (PID)</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0 则证明上一个命令执行不正确。</td>\n</tr>\n<tr>\n<td><code>$((运算符))</code>  或 <code>$[运算式]</code>  或 expr 运算式</td>\n<td>算术运算，expr 运算符间要有空格且乘法需要 / 转义符号</td>\n</tr>\n<tr>\n<td>[ condition ]</td>\n<td>条件判断，condition 前后有空格，非空返回 true</td>\n</tr>\n<tr>\n<td>read 选项 参数</td>\n<td>读取用户的输入。-p 设置提示信息；-t 设置等待时间。</td>\n</tr>\n<tr>\n<td>basename pathname suffix</td>\n<td>返回完整路径最后的 / 的部分，常用于获取文件名，suffix 选择是否去掉该后缀</td>\n</tr>\n<tr>\n<td>dirname</td>\n<td>返回完整路径最后的 / 的前面的部分，常用于获取路径部分。</td>\n</tr>\n</tbody>\n</table>\n<p>Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序。用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。</p>\n<p>脚本需要以 #!/bin/bash 开头，还需要有可执行权限。</p>\n<p>Linux Shellr 中的变量分为，系统变量和用户自定义变量。系统变量： <code>$HOME、$PWD、$SHELL、$USER</code>  等等。</p>\n<h3 id=\"定义变量的规则\"><a class=\"markdownIt-Anchor\" href=\"#定义变量的规则\">#</a> 定义变量的规则</h3>\n<ol>\n<li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头。5A=200 这样是错误的。</li>\n<li>等号两侧不能有空格变量。</li>\n<li>名称一般习惯为大写。</li>\n<li>将命令的返回值赋给变量：A= <code>date</code>  反引号，运行里面的命令，并把结果返回给变量 A。A=$(date) 等价于反引号。</li>\n</ol>\n<h3 id=\"位置参数变量\"><a class=\"markdownIt-Anchor\" href=\"#位置参数变量\">#</a> 位置参数变量</h3>\n<p>当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量。比如：./myshell.sh100 200，这个就是一个执行 shell 的命令行，可以在 myshell 脚本中获取到参数信息。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$n</td>\n<td>n 为数字， <code>$0</code>  代表命令本身， <code>$1</code> - <code>$9</code>  代表第一到第九个参数，十以上的参数需要用大括号包含，如 <code>$&#123;10&#125;</code> 。</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>这个变量代表命令行中所有的参数，$* 把所有的参数看成一个整体。</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>这个变量也代表命令行中所有的参数，不过 $@把每个参数区分对待。</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>这个变量代表命令行中所有参数的个数。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h3>\n<div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> -ge 60 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;及格了&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$1</span> -lt 60 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span> </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;不及格&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;周一&quot;</span></span><br><span class=\"line\">;;</span><br><span class=\"line\"><span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;周二&quot;</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&quot;$*&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;num is <span class=\"variable\">$i</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">SUM=0</span><br><span class=\"line\">i=0</span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$i</span> -le <span class=\"variable\">$1</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    SUM=$[<span class=\"variable\">$SUM</span>+<span class=\"variable\">$i</span>]</span><br><span class=\"line\">    i=$[<span class=\"variable\">$1</span>+1]</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"自定义函数\"><a class=\"markdownIt-Anchor\" href=\"#自定义函数\">#</a> 自定义函数</h3>\n<h2 id=\"ubuntu\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu\">#</a> Ubuntu</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sudo apt-get update</td>\n<td>更新源</td>\n</tr>\n<tr>\n<td>sudo apt-get install package</td>\n<td>安装包</td>\n</tr>\n<tr>\n<td>sudo apt-get remove package</td>\n<td>删除包</td>\n</tr>\n<tr>\n<td>sudo apt-cache show package</td>\n<td>获取包的相关信息</td>\n</tr>\n<tr>\n<td>sudo apt-get source package</td>\n<td>下载包的源代码</td>\n</tr>\n<tr>\n<td>ssh 用户名 @IP</td>\n<td>在 Linux 上远程连接其他 Linux</td>\n</tr>\n</tbody>\n</table>\n<p>apt 是 Advanced Packaging Tool 的简称，是一款安装包管理工具。在 Ubuntu 下，我们可以使用 apt 命令进行软件包的安装、删除、清理等，类似于 Windows 中的软件管理工具。在 /etc/apt/sources.list 文件中有服务器地址（美国 APT），由于网络问题，通常我们将其改为国内的镜像站。</p>\n<p>和 CentOS 不一样，Ubuntu 默认没有安装 SSHD 服务（使用 netstat 指令查看：apt install net-tools)，因此，我们不能进行远程登录。</p>\n<h2 id=\"日志\"><a class=\"markdownIt-Anchor\" href=\"#日志\">#</a> 日志</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cron</td>\n<td>系统定时任务相关的日志</td>\n</tr>\n<tr>\n<td>lastlog</td>\n<td>系统中所有用户最后一次的登录时间的日志</td>\n</tr>\n<tr>\n<td>message</td>\n<td>系统重要消息的日志。这个日志文件中会记录 Linux 系统的绝大多数重要信息。如果系统出现问题，首先要检查的应该就是这个日志文件。</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>记录验证和授权方面的信息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh 的登录、su 的切换用户， sudo 的授权，甚至添加用户和修改用户密码都会记录在这个日志文件中。</td>\n</tr>\n<tr>\n<td>ulmp</td>\n<td>记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。这个文件不能用 vi 查看，而要使用 w、who、users 等命令查看</td>\n</tr>\n<tr>\n<td>journalctl</td>\n<td>查看内存日志，重启清空</td>\n</tr>\n</tbody>\n</table>\n<p>系统日志文件的保存位置是 /var/log/。</p>\n<p>在文件 /etc/rsyslog.conf 在可以查看日志的服务。</p>\n<p>由日志服务 rsyslog 记录的日志文件的格式包含以下 4 列：事件产生的时间；产生事件的服务器的主机名；产生事件的服务名或程序名和事件的具体信息。</p>\n<p>/etc/logrotate.conf 记录全局的日志轮替策略，当然也可以单独给某个日志文件指定策略。也可以把某个日志的轮替规则写到 /etc/logrotate.d 目录上。</p>\n<h2 id=\"定制自己的linux系统\"><a class=\"markdownIt-Anchor\" href=\"#定制自己的linux系统\">#</a> 定制自己的 Linux 系统</h2>\n<h3 id=\"linux启动流程\"><a class=\"markdownIt-Anchor\" href=\"#linux启动流程\">#</a> Linux 启动流程</h3>\n<ol>\n<li>Linux 要通过自检，检查硬件设备有没有故障。</li>\n<li>如果有多块启动盘的话，需要在 BIOS 中选择启动磁盘。</li>\n<li>启动 MBR 中的 bootloader 引导程序。</li>\n<li>加载内核文件。</li>\n<li>执行所有进程的父进程、老祖宗 systemd。</li>\n<li>欢迎界面。</li>\n</ol>\n<h2 id=\"源码阅读\"><a class=\"markdownIt-Anchor\" href=\"#源码阅读\">#</a> 源码阅读</h2>\n<table>\n<thead>\n<tr>\n<th>文件夹</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boot</td>\n<td>存放与系统引导相关的代码</td>\n</tr>\n<tr>\n<td>fs</td>\n<td>存放 Linux 支持的文件系统代码</td>\n</tr>\n<tr>\n<td>include</td>\n<td>存放 Linux 核心需要的头文件</td>\n</tr>\n<tr>\n<td>init</td>\n<td>存放初始化相关的源码</td>\n</tr>\n<tr>\n<td>kernel</td>\n<td>存放与内核相关的代码</td>\n</tr>\n<tr>\n<td>lib</td>\n<td>存放库代码</td>\n</tr>\n<tr>\n<td>mm</td>\n<td>内存管理的代码</td>\n</tr>\n<tr>\n<td>tools</td>\n<td>工具相关的代码</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"内核升级\"><a class=\"markdownIt-Anchor\" href=\"#内核升级\">#</a> 内核升级</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uname -a</td>\n<td>查看当前的内核版本</td>\n</tr>\n<tr>\n<td>yum info kernel -q</td>\n<td>检测内核版本，显示可以升级的内核</td>\n</tr>\n<tr>\n<td>yum update kernel</td>\n<td>升级内核</td>\n</tr>\n<tr>\n<td>yum list kernel -q</td>\n<td>查看已经安装的内核</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"备份与恢复\"><a class=\"markdownIt-Anchor\" href=\"#备份与恢复\">#</a> 备份与恢复</h2>\n<p>linux 的备份和恢复很简单，有两种方式： 1、把需要的文件 (或者分区) 用 TAR 打包就行，下次需要恢复的时候，再解压开覆盖即可。2、使用 dump 和 restore 命令。</p>\n<p>dump 指令在备份分区时，是可以支持增量备份的，如果备份文件或者目录，不再支持增量备份，即只能使用 0 级别备份。</p>\n<h2 id=\"权限管理\"><a class=\"markdownIt-Anchor\" href=\"#权限管理\">#</a> 权限管理</h2>\n<ol>\n<li>注意权限分离，比如：工作中，Liux 系统权限和数据库权限不要在同一个部门权限最小原则，即在满足使用的情况下最少优先。</li>\n<li>减少使用 root 用户，尽量用普通用户 + sudo 提权进行日常操作。</li>\n<li>重要的系统文件，比如 /etc/passwd，/etc/shadow etc/fstab，/etc/sudoers 等，日常建议使用 chattr（change attribute）锁定，需要操作时再打开。</li>\n<li>使用 SUID,SGID,Sticky 设置特殊权限。</li>\n<li>可以利用工具，比如 chkrootkit/rootkit hunter 检测 rootkit 脚本（rootkit 是入侵者使用工具，在不察觉的建立了入侵系统途径)。</li>\n<li>利用工具 Tripwire 检测文件系统完整性。</li>\n</ol>\n<h2 id=\"centos7启动\"><a class=\"markdownIt-Anchor\" href=\"#centos7启动\">#</a> CentOS7 启动</h2>\n<ol>\n<li>硬件引导启动</li>\n<li>GRUB2 启动引导</li>\n<li>内核引导</li>\n<li>systemd 初始化阶段</li>\n</ol>\n",
            "tags": [
                "java学习路线",
                "计算机基础"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/java/Java%E5%88%B7%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/",
            "url": "http://example.com/2023/10/12/java/Java%E5%88%B7%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/",
            "title": "",
            "date_published": "2023-10-12T10:49:32.892Z",
            "content_html": "<h1 id=\"第一章-数组\"><a class=\"markdownIt-Anchor\" href=\"#第一章-数组\">#</a> 第一章 数组</h1>\n<h2 id=\"704二分查找\"><a class=\"markdownIt-Anchor\" href=\"#704二分查找\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/binary-search/\" >704. 二分查找 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二分法、双指针、边界处理</strong></p>\n<p>思路是使用二分查找方法，用左右指针不断进行二分来缩小范围，以这个为主要的思路，处理一些小的细节：</p>\n<ol>\n<li>java 中的除法是去尾除法。</li>\n<li>设定退出条件，退出条件与 mid 给两个指针的赋值相关。在这里是采取的加减 1 的方法，所以判断条件是大于等于。如果采用 <code>left-1</code>  而 right 不处理的话，则可以去掉等于号。</li>\n<li>java 中数组的声明为 <code>int nums = &#123;1,2,3&#125;;</code> ，是大括号而不是中括号。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,right = nums.length - <span class=\"number\">1</span>,mid;<span class=\"comment\">//length方法获取数组的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"27移除元素\"><a class=\"markdownIt-Anchor\" href=\"#27移除元素\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/remove-element/\" >27. 移除元素 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：双指针、边界处理</strong></p>\n<p>由于题目不要求元素的相对位置不变，所以我们可以使用双指针的方式前面搜索是否有等于 val 的元素，遇到则在后面找不等于 val 的元素进行替换。细节的处理：</p>\n<ol>\n<li>注意对边界进行处理，当 left 遇到 right 就应当停止，同理 right 遇到 left 后也应当停止，防止越界的情况出现。</li>\n<li>对与 right 遇到 left 这种情况需要进行处理，因为这意味着后面已经找不到元素进行与 left 处的元素进行替换了，所以此时的 left 不需要往前进行移动，而是直接返回当前的 left 值即可。</li>\n<li>可以省略将 left 处的值赋到 right 处的步骤，因为后面已经被截断，不影响结果。</li>\n<li>可以不用一步到位，应该逐步来，这样会减少很多的额外情况处理。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> nums.length - <span class=\"number\">1</span>, left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[left] == val) &#123;</span><br><span class=\"line\">              <span class=\"comment\">//可以不一步到位，而是采用下面的方面</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (right &gt; left &amp;&amp; nums[right] == val) &#123;</span><br><span class=\"line\">                    right--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//不需将left处的值赋到right处，因为后面已经被截断</span></span><br><span class=\"line\">                    nums[left] = nums[right];</span><br><span class=\"line\">                    right--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//其他题解</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[left] == val) &#123;</span><br><span class=\"line\">                nums[left] = nums[right - <span class=\"number\">1</span>];<span class=\"comment\">//此处没有向左遍历，而是用左侧的新的元素替换</span></span><br><span class=\"line\">                right--;<span class=\"comment\">//只移动right的值，left值不变，因为此时left处可能仍是val值</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"209长度最小的子数组\"><a class=\"markdownIt-Anchor\" href=\"#209长度最小的子数组\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\" >209. 长度最小的子数组 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：双指针、滑动窗口</strong></p>\n<p>使用滑动窗口来解决该问题，使用 count 记录目前窗口中的子数组和。</p>\n<ol>\n<li>右指针 i 不断向右移动，如果遇到子数组和满足条件则对窗口进行收缩，这里的收缩就是重点，我的想法是收缩至子数组小于目标值，然后再回退一步，此时得到的值就是目前刚好可以满足条件的最小数组。</li>\n<li>值得注意的是结果的初值应该设置为比数组长度更大，以便判断最后是否有结果。</li>\n<li>可以使用 <code>Math.min()</code>  来取最小值，用 <code>Integer.MAX_VALUE</code>  来表示最大值。</li>\n<li>在窗口缩小的时候，可以在缩小前先记录结果，这样就不需要再进行恢复操作了。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>,ans=length+<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//滑动窗口的左指针是j，右指针是i</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">            count+=nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count&gt;target)&#123;<span class=\"comment\">//如果此时已经大于目标，收缩窗口</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(count&gt;=target)&#123;</span><br><span class=\"line\">                    count-=nums[j];</span><br><span class=\"line\">                    j++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                j--;<span class=\"comment\">//回退一步恢复成符合条件</span></span><br><span class=\"line\">                count+=nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count&gt;=target &amp;&amp; ans&gt;i-j+<span class=\"number\">1</span>)&#123;<span class=\"comment\">//如果大于目标值且长度最小则记录新的值</span></span><br><span class=\"line\">                ans=i-j+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans==length+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//其他题解</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 滑动窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> s, <span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class=\"line\">            sum += nums[right];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (sum &gt;= s) &#123;</span><br><span class=\"line\">                result = Math.min(result, right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">                sum -= nums[left++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result == Integer.MAX_VALUE ? <span class=\"number\">0</span> : result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"59螺旋矩阵-ii\"><a class=\"markdownIt-Anchor\" href=\"#59螺旋矩阵-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/spiral-matrix-ii/\" >59. 螺旋矩阵 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：指针、数学</strong></p>\n<p>这题并没有什么算法思想，考验的就是对于指针的使用，如何变化才是最好的方式。这个解法给我的启示是不要想着一个阶段完成所有情况，可以单独处理麻烦的特殊情况，例如奇数的情况下，中间的赋值就不符合四个循环的赋值，与其硬是添加进去也是可以的，但是就使得程序变复杂了。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] generateMatrix(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> [][] array = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][n];</span><br><span class=\"line\">        <span class=\"type\">int</span> startx=<span class=\"number\">0</span>,starty=<span class=\"number\">0</span>,loop=n/<span class=\"number\">2</span>,mid = n/<span class=\"number\">2</span>,count=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> offset=<span class=\"number\">1</span>,i,j;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(loop &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            i=startx;<span class=\"comment\">//设置每次循环的起始点</span></span><br><span class=\"line\">            j=starty;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=starty;j&lt;starty+n-offset;j++)&#123;</span><br><span class=\"line\">                array[startx][j]=count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i=startx;i&lt;startx+n-offset;i++)&#123;</span><br><span class=\"line\">                array[i][j]=count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;j&gt;starty;j--)&#123;</span><br><span class=\"line\">                array[i][j]=count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;i&gt;startx;i--)&#123;</span><br><span class=\"line\">                array[i][j]=count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            startx++;</span><br><span class=\"line\">            starty++;</span><br><span class=\"line\">            offset+=<span class=\"number\">2</span>;<span class=\"comment\">//限制每次循环的步长</span></span><br><span class=\"line\">            loop--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span>==<span class=\"number\">1</span>)&#123;<span class=\"comment\">//对奇数时的中间结点单独处理</span></span><br><span class=\"line\">            array[mid][mid]=count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第二章-链表\"><a class=\"markdownIt-Anchor\" href=\"#第二章-链表\">#</a> 第二章 链表</h1>\n<h2 id=\"203移除链表元素\"><a class=\"markdownIt-Anchor\" href=\"#203移除链表元素\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/remove-linked-list-elements/\" >203. 移除链表元素 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：链表格式、指针、虚拟头结点</strong></p>\n<p>太久没用 java 了，用了 C 语言操作指针的格式，一直报错。这题可以使用虚拟头结点来解决 head 指针为空的特殊情况，将处理步骤归一化，当然使用单独处理的方法也是可以的。然后本题的一个易错点是结果返回 head 的值，当链表本来非空，但是经过删除后为空的情况就会出现问题，因此我们应该返回虚拟头结点的 next 的指针。由于我们的 temp 指针是一直移动的，因此需要新建一个结点来存储虚拟头结点的值。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">removeElements</span><span class=\"params\">(ListNode head, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>,head);</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">answer</span> <span class=\"operator\">=</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp.next != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next.val==val)&#123;</span><br><span class=\"line\">                temp.next=temp.next.next;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                temp=temp.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> answer.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"707设计链表\"><a class=\"markdownIt-Anchor\" href=\"#707设计链表\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/design-linked-list/\" >707. 设计链表 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：虚拟头结点、边界判断</strong></p>\n<p>这题并没有什么算法实现，考察的是细心程度和对题目的理解。通过这道题目，加深了我对链表各项基本操作的理解。本题遇到的最大问题是在 AddAtIndex 函数上，size+1 的位置放错了，由于调用了其他的函数，里面就已经加一了，因此会导致 size 比真实值大。还有就是在 AddAtTail 函数中曾经出现的断链问题，应该要想好了再编写代码，而不是写完再慢慢纠错。</p>\n<p>题解中也有将 AddAtTail 和 AddAthead 使用 AddAtIndex 函数来解决，也是一种思路。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">    ListNode head;</span><br><span class=\"line\">    ListNode tail;</span><br><span class=\"line\">    ListNode temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLinkedList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        size=<span class=\"number\">0</span>;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&gt;=size || index&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=index;i++)&#123;</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addAtHead</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        size+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val,head.next);</span><br><span class=\"line\">        head.next=num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addAtTail</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        temp=head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode num=<span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val,temp.next);</span><br><span class=\"line\">        temp.next=num;</span><br><span class=\"line\">        size+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&gt;size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index==size)&#123;</span><br><span class=\"line\">            addAtTail(val);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            addAtHead(val);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            temp=head;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;index;i++)&#123;</span><br><span class=\"line\">                temp=temp.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ListNode num=<span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val,temp.next);</span><br><span class=\"line\">            temp.next=num;</span><br><span class=\"line\">            size+=<span class=\"number\">1</span>; </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span>&lt;=index &amp;&amp; index&lt;size)&#123;</span><br><span class=\"line\">            temp=head;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;index;i++)&#123;</span><br><span class=\"line\">                temp=temp.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.next=temp.next.next;</span><br><span class=\"line\">            size-=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"206反转链表\"><a class=\"markdownIt-Anchor\" href=\"#206反转链表\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/reverse-linked-list/submissions/\" >206. 反转链表 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：虚拟头结点、双指针、头插法</strong></p>\n<p>反转链表是头插法的经典应用，我们只需新建一个虚拟头结点，然后依次将链表中的结点使用头插法插入到虚拟头结点后即可。或者也可以使用双指针，从头结点开始依次将其方向反转，最后返回原最后一个结点即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>,head);</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">ins</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">top</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head.next!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ins=head.next;</span><br><span class=\"line\">            head.next=head.next.next;</span><br><span class=\"line\">            ins.next=top;</span><br><span class=\"line\">            ans.next=ins;</span><br><span class=\"line\">            top=ins;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//依次反转结点方向</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">ListNode</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> curr.next;</span><br><span class=\"line\">            curr.next = prev;</span><br><span class=\"line\">            prev = curr;</span><br><span class=\"line\">            curr = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"19删除链表的倒数第-n-个结点\"><a class=\"markdownIt-Anchor\" href=\"#19删除链表的倒数第-n-个结点\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/\" >19. 删除链表的倒数第 N 个结点 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：快慢指针、双指针，虚拟头结点</strong></p>\n<p>这道题常规的思路应该是先计算链表的长度，然后算出倒数第 n 个元素的正数位置，然后结点移动到要删除的节点的前面，删除即可。进阶的要求是一遍扫描，此时我们就可以用到快慢指针法，先让快指针移动 n 位，然后让快慢指针一起移动，等到快指针移动到最后的位置时，慢指针此时就到达链表的倒数第 n 个节点的前一个结点，最后删除结点即可满足要求。细节就是使用虚拟头结点来解决删除元素后链表为空的特殊情况。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>,head);</span><br><span class=\"line\">        ListNode fast=ans;</span><br><span class=\"line\">        ListNode slow=ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            fast=fast.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast.next!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            fast=fast.next;</span><br><span class=\"line\">            slow=slow.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        slow.next=slow.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"14环形链表-ii\"><a class=\"markdownIt-Anchor\" href=\"#14环形链表-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\" >14. 环形链表 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：无法解决、快慢指针、数学、哈希表</strong></p>\n<p>本来是想着套用上一题环形链表的方法，逐个结点检测，然后得到答案。但是遇到了一个问题，那就是只要是成环，那么快慢指针一定会相遇。最后还是看了题解才解决了问题，要利用<a class=\"link\"   href=\"https://leetcode.cn/problems/linked-list-cycle-ii/solution/linked-list-cycle-ii-kuai-man-zhi-zhen-shuang-zhi-/\" >数学的方法 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>推导出分别从相遇点和起始点出发，两种相遇的地方即为入口。也可以使用哈希表的特性检测出第一个结点。</p>\n<p>数学分析：当 fast=slow 时，两指针在环中第一次相遇。下面分析此时 fast 与 slow 走过的步数关系：设链表共有 a 十 b 个节点，其中链表头部到链表入口有 a 个节点（不计链表入口节点)，链表环有 b 个节点。设两指针分别走了 f，s 步，则有： 1.fast 走的步数是 slow 步数的 2 倍，即 f=2s。2.fast 比 slow 多走了 n 个环的长度，即 f=s+nb;（解析：双指针都走过 a 步，然后在环内绕圈直到重合，重合时 fast 比 slow 多走环的长度整数倍)；以上两式相减得：f=2nb,s=nb。即 fast 和 slow 指针分别走了 2n,n 个环的周长。如果让指针从链表头部一直向前走并统计步数 k, 那么所有走到链表入口节点时的步数是：k=a+nb (先走 a 步到入口节点，之后每绕 1 圈环 (b 步) 都会再次到入口节点). 而目前， slow 指针走过的步数为 nb 步。因此，我们只要想办法让 s1ow 再走 a 步停下来，就可以到环的入口。但是我们不知道 a 的值，该怎么办？依然是使用双指针法。我们构建一个指针，此指针需要有以下性质：此指针和 slow 一起向前走 a 步后，两者在入口节点重合。那么从哪里走到入口节点需要 a 步？答案是链表头部 head。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">detectCycle</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">fast</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">slow</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast!=<span class=\"literal\">null</span> &amp;&amp; fast.next!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            fast=fast.next.next;</span><br><span class=\"line\">            slow=slow.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(head!=slow)&#123;</span><br><span class=\"line\">                    head=head.next;</span><br><span class=\"line\">                    slow=slow.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//哈希表</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">detectCycle</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        Set&lt;ListNode&gt; visited = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;ListNode&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pos != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visited.contains(pos)) &#123;<span class=\"comment\">//检测是否属于哈希表内</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                visited.add(pos);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pos = pos.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第三章-哈希表\"><a class=\"markdownIt-Anchor\" href=\"#第三章-哈希表\">#</a> 第三章 哈希表</h1>\n<h2 id=\"242有效的字母异位词\"><a class=\"markdownIt-Anchor\" href=\"#242有效的字母异位词\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/valid-anagram/\" >242. 有效的字母异位词 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：哈希表、String 函数使用、数组</strong></p>\n<p>使用哈希表的知识很容易解决该题，由于字符串全部由小写字母组成，因此我们只需要维护一个 26 位的数组即可。将 s 字符串每个位置的字符与小写 a 相减，在对应的位置上加一。同理对 t 字符串进行处理，在对应位置上减一。然后遍历数组，如果有非零位，则返回 false，否则返回 true。细节就在于 String 函数的使用，java 不支持 <code>s[i]</code>  的方法获取对应位置的字符，需要使用 charAt () 函数获取。另一种思路是将字符串进行排序，然后直接对比是否相同。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAnagram</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            count[s.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;t.length();i++)&#123;</span><br><span class=\"line\">            count[t.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]-=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count[i]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAnagram</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.length() != t.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] str1 = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] str2 = t.toCharArray();</span><br><span class=\"line\">        Arrays.sort(str1);</span><br><span class=\"line\">        Arrays.sort(str2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.equals(str1, str2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"349两个数组的交集\"><a class=\"markdownIt-Anchor\" href=\"#349两个数组的交集\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\" >349. 两个数组的交集 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：哈希表、数组、lambda 表达式、数组长度获取，集合与数组之间的转换</strong></p>\n<p>这题的思路还是很简单的，问题是很多都没有现成的函数来实现，例如集合与数组之间的转换就很麻烦，需要从数组中逐个取出后再放入集合内，集合转数组也是同理。细节就是数组获取长度是 <code>nums1.length</code> ，集合是 <code>set2.size()</code> ，注意有没有括号。另一种思路是先将两个数组排序，然后使用双指针逐步比较来构造新的数组。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] intersection(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2) &#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        Set&lt;Integer&gt; set2 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num:nums1)&#123;</span><br><span class=\"line\">            set1.add(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num:nums2)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(set1.contains(num))&#123;</span><br><span class=\"line\">                set2.add(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[set2.size()];</span><br><span class=\"line\">        <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i:set2)&#123;</span><br><span class=\"line\">            arr[j++] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//排序+双指针</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] intersection(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2) &#123;</span><br><span class=\"line\">        Arrays.sort(nums1);</span><br><span class=\"line\">        Arrays.sort(nums2);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length1</span> <span class=\"operator\">=</span> nums1.length, length2 = nums2.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] intersection = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length1 + length2];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, index1 = <span class=\"number\">0</span>, index2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index1 &lt; length1 &amp;&amp; index2 &lt; length2) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> nums1[index1], num2 = nums2[index2];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num1 == num2) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 保证加入元素的唯一性</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span> || num1 != intersection[index - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    intersection[index++] = num1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                index1++;</span><br><span class=\"line\">                index2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num1 &lt; num2) &#123;</span><br><span class=\"line\">                index1++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                index2++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.copyOfRange(intersection, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"1两数之和\"><a class=\"markdownIt-Anchor\" href=\"#1两数之和\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/two-sum/\" >1. 两数之和 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：哈希表、字典 HashMap、数组下标返回</strong></p>\n<p>这题以前我是使用暴力破解的方法解决的，即使用双指针来遍历数组。这道的题的难点在于数组是无序的且返回的不是整数，而是它们的数组下标，否则可以使用数组排序加首尾指针的方式解决该问题。改用哈希表来解决的话，我们可以遍历数组，把 <code>target-nums[i]</code>  的值存储到哈希表内，然后如果出现数组中的值等于哈希表内的值则说明两数的和等于 target。由于要记录数组下标，因此不能使用集合 Set，而是使用字典 Map，key 记录值，value 记录数组下标。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] twoSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer,Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> i; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans.containsKey(nums[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                ans.put(target-nums[i],i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123; i, ans.get(nums[i])&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"454四数相加-ii\"><a class=\"markdownIt-Anchor\" href=\"#454四数相加-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/4sum-ii/\" >454. 四数相加 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：哈希表、字典 HashMap</strong></p>\n<p>这题与上一题有类似的地方，这次虽然数组多了，但是思想还是类似，我们只要将两两集合一起，实际上又回到了两数之和的思路。只不过这次我们 Map 的 value 记录的不是数组下标，而是每个 key 出现的次数。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">fourSumCount</span><span class=\"params\">(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2, <span class=\"type\">int</span>[] nums3, <span class=\"type\">int</span>[] nums4)</span> &#123;</span><br><span class=\"line\">        HashMap&lt;Integer,Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> temp;</span><br><span class=\"line\">        <span class=\"type\">int</span> fin=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num1:nums1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num2:nums2)&#123;</span><br><span class=\"line\">                temp=num1+num2;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans.containsKey(temp))&#123;</span><br><span class=\"line\">                    ans.put(temp,ans.get(temp)+<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    ans.put(temp,<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num3:nums3)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num4:nums4)&#123;</span><br><span class=\"line\">                temp=-num3-num4;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans.containsKey(temp))&#123;</span><br><span class=\"line\">                    fin+=ans.get(temp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"15三数之和\"><a class=\"markdownIt-Anchor\" href=\"#15三数之和\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/3sum/\" >15. 三数之和 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：双指针、可变二维数组、数组长度、边界判断、排序、去重</strong></p>\n<p>三数之和在某种意义上比两数之和还要简单，因为此时不要求数组下标，我们只需求出不重复的三元组。因此我们只需将一个元素固定，然后在其右侧使用排序加双指针的方法就可以解决该问题。然后此题的难点就在于去重，并且返回的是所有的三元组，因此我们在存储答案的时候必须小心设置去重条件。至于返回三元组的问题则需要我们使用 <code>List&lt;List&lt;Integer&gt;&gt;</code>  来实现可变的数组，遇到符合条件的数组就新建数组，然后使用 add 方法加入到该数组中。还有使用 <code>Arrays.sort(nums);</code>  进行排序。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">threeSum</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"type\">int</span> left,right;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//确定i处位置有重复值的时候去重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; nums[i]==nums[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            left = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i]+nums[left]+nums[right]&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    left+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[i]+nums[left]+nums[right]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    right-=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;(</span><br><span class=\"line\">                    list.add(nums[i]);</span><br><span class=\"line\">                    list.add(nums[left]);</span><br><span class=\"line\">                    list.add(nums[right]);</span><br><span class=\"line\">                    result.add(list);</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(left&lt;right &amp;&amp; nums[right]==nums[right-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                        right-=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(left&lt;right &amp;&amp; nums[left]==nums[left+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                        left+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    right-=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    left+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"18四数之和\"><a class=\"markdownIt-Anchor\" href=\"#18四数之和\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/4sum/\" >18. 四数之和 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：整型溢出、排序、双指针、可变二维数组、去重</strong></p>\n<p>这道题与上一道题类型，只是在外部多加一个 for 循环，去重条件和基本思路都是一样的。此外这题使用 Java 会出现整型溢出，需要在相加的时候使用 Long 型强制转换来获取正确答案例如 <code>if ((long) nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] &gt; target)</code> 。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">fourSum</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"comment\">//整型溢出，面向答案编程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">294967296</span> || target==-<span class=\"number\">294967296</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> first=<span class=\"number\">0</span>;first&lt;n;first++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(first&gt;<span class=\"number\">0</span> &amp;&amp; nums[first]==nums[first-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> second=first+<span class=\"number\">1</span>;second&lt;n;second++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(second&gt;first+<span class=\"number\">1</span> &amp;&amp; nums[second]==nums[second-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> fourth=n-<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> target1=target-nums[first]-nums[second];</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> third=second+<span class=\"number\">1</span>;third&lt;n;third++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(third&gt;second+<span class=\"number\">1</span> &amp;&amp; nums[third]==nums[third-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(third&lt;fourth &amp;&amp; nums[fourth]+nums[third]&gt;target1)&#123;</span><br><span class=\"line\">                        fourth-=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(fourth==third)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(nums[fourth]+nums[third]==target1)&#123;</span><br><span class=\"line\">                        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">                        list.add(nums[first]);</span><br><span class=\"line\">                        list.add(nums[second]);</span><br><span class=\"line\">                        list.add(nums[third]);</span><br><span class=\"line\">                        list.add(nums[fourth]);</span><br><span class=\"line\">                        ans.add(list);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第四章-字符串\"><a class=\"markdownIt-Anchor\" href=\"#第四章-字符串\">#</a> 第四章 字符串</h1>\n<h2 id=\"344反转字符串\"><a class=\"markdownIt-Anchor\" href=\"#344反转字符串\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/reverse-string/\" >344. 反转字符串 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：双指针、字符数组</strong></p>\n<p>这题比较简单，只要设置首尾指针往中间靠拢即可。小细节是字符数组可以使用 <code>s[left]</code>  的方式取值，而 String 类型是不支持这样操作的。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverseString</span><span class=\"params\">(<span class=\"type\">char</span>[] s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> s.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">            temp = s[left];<span class=\"comment\">//只有字符数组可以这样用</span></span><br><span class=\"line\">            s[left] = s[right];</span><br><span class=\"line\">            s[right] = temp;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"541反转字符串-ii\"><a class=\"markdownIt-Anchor\" href=\"#541反转字符串-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/reverse-string-ii/\" >541. 反转字符串 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：字符串与字符数组之间的转换、continue 的使用、子函数</strong></p>\n<p>这题与上一题比较大的区别就是将字符数组改为了字符串，由于字符数组操作比较简便，因此我们需要使用 <code>s.toCharArray()</code>  来进行转换。然后善用 for 循环和 continue 语句简化过程，无需再进行繁杂的逻辑判断。还有将使用频率最高的反转函数封装为子函数，方便使用和调试。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">reverseStr</span><span class=\"params\">(String s, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] cs = s.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cs.length;i+=(<span class=\"number\">2</span>*k))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i+k&lt;=cs.length)&#123;</span><br><span class=\"line\">                reverseString(cs,i,i+k-<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> cs.length;</span><br><span class=\"line\">            reverseString(cs,i,n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(cs);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverseString</span><span class=\"params\">(<span class=\"type\">char</span>[] s,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; left &lt; right; ++left, --right) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> s[left];</span><br><span class=\"line\">            s[left] = s[right];</span><br><span class=\"line\">            s[right] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"151反转字符串中的单词\"><a class=\"markdownIt-Anchor\" href=\"#151反转字符串中的单词\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/reverse-words-in-a-string/\" >151. 反转字符串中的单词 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：函数调用、正则表达式</strong></p>\n<p>这题可以使用 Java 的内置函数进行解决，基本思路是使用 <code>trim()</code>  函数去除前后空格，然后使用 <code>split(&quot;\\\\s+&quot;)</code>  函数结合正则表达式将单词进行分隔，然后调用 Collection 接口的 <code>reverse()</code>  函数进行翻转，最后用 String 的 <code>join()</code>  函数连接。答案对 Java 内置函数的使用可谓炉火纯青，每一步都很优雅。另外使用 <code>asList()</code>  将分割后的字符串转换为字符串数组也很常用。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">reverseWords</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; strs = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String tmp:s.split(<span class=\"string\">&quot; &quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!tmp.isEmpty())&#123;</span><br><span class=\"line\">                strs.add(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=strs.size()-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            ans = ans.concat(strs.get(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                ans = ans.concat(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">reverseWords</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 除去开头和末尾的空白字符</span></span><br><span class=\"line\">        s = s.trim();</span><br><span class=\"line\">        <span class=\"comment\">// 正则匹配连续的空白字符作为分隔符分割</span></span><br><span class=\"line\">        List&lt;String&gt; wordList = Arrays.asList(s.split(<span class=\"string\">&quot;\\\\s+&quot;</span>));</span><br><span class=\"line\">        Collections.reverse(wordList);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.join(<span class=\"string\">&quot; &quot;</span>, wordList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"28找出字符串中第一个匹配项的下标\"><a class=\"markdownIt-Anchor\" href=\"#28找出字符串中第一个匹配项的下标\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/\" >28. 找出字符串中第一个匹配项的下标 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键字：KMP 算法</strong></p>\n<p>这题就是考察 KMP 算法的实现，我们首先构建 next 数组，来确定每个位置回退的位数。我认为 KMP 算法的核心就在于如何回退。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">strStr</span><span class=\"params\">(String haystack, String needle)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] cs = needle.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] nums = haystack.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> cs.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        getNext(next,cs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; nums.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]==cs[j])&#123;<span class=\"comment\">//如果匹配则都向后移动一位</span></span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//当j还可以回退的情况下向前回退</span></span><br><span class=\"line\">                j = next[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;<span class=\"comment\">//回退到终点后仍无法匹配则i前进1位，开始新一轮的匹配</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j==n)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i-j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(<span class=\"type\">int</span>[] next,<span class=\"type\">char</span>[] cs)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//前缀索引</span></span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;<span class=\"comment\">//后缀索引</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;cs.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; cs[i]!=cs[j])&#123;<span class=\"comment\">//当匹配不成功并且可以回退的情况下回退</span></span><br><span class=\"line\">                j = next[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cs[i]==cs[j])&#123;<span class=\"comment\">//相等则前移</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j;<span class=\"comment\">//为next数组赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"459重复的字符串\"><a class=\"markdownIt-Anchor\" href=\"#459重复的字符串\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/repeated-substring-pattern/\" >459. 重复的字符串 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：KMP 算法、数学</strong></p>\n<p>这题看上去与 KMP 算法毫无关系，但实际上我们可以利用 next 数组来解决重复字符串的问题。如果 next 数组的最后一个元素为 0，则说明没有公共前缀和，所以返回 false。若不为 0，如果是由子字符串重复生成的，则字符串长度减去最长相等前后缀的长度为第一个重复字符的长度，如果该长度可以整除字符串长度，则返回 true，否则返回 false。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">repeatedSubstringPattern</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] cs = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> cs.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//前缀索引</span></span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;<span class=\"comment\">//后缀索引</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;cs.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; cs[i]!=cs[j])&#123;<span class=\"comment\">//当匹配不成功并且可以回退的情况下回退</span></span><br><span class=\"line\">                j = next[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cs[i]==cs[j])&#123;<span class=\"comment\">//相等则前移</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j;<span class=\"comment\">//为next数组赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">fin</span> <span class=\"operator\">=</span> next[n-<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fin==<span class=\"number\">0</span>)&#123;<span class=\"comment\">//没有前缀和</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n%(n-fin)==<span class=\"number\">0</span>)&#123;<span class=\"comment\">//字符串长度减去最长相等前后缀的长度为第一个重复子串的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第五章-栈与队列\"><a class=\"markdownIt-Anchor\" href=\"#第五章-栈与队列\">#</a> 第五章 栈与队列</h1>\n<h2 id=\"232用栈实现队列\"><a class=\"markdownIt-Anchor\" href=\"#232用栈实现队列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/implement-queue-using-stacks/\" >232. 用栈实现队列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：栈、队列、函数使用</strong></p>\n<p>这题并不难，我们只需要一个输入栈，一个输出栈，当出队的时候就将输入栈的元素压入输出栈内，然后使用输出栈的栈顶输出即可，其他方法的实现也是类似。进阶的思路是如果输出栈不为空则直接在输出栈输出，否则将输入栈的数据压入输出栈内。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyQueue</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; instack;<span class=\"comment\">// 输入栈</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; outstack;<span class=\"comment\">// 输出栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        instack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        outstack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        instack.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!instack.isEmpty())&#123;</span><br><span class=\"line\">            outstack.push(instack.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> outstack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!outstack.isEmpty())&#123;</span><br><span class=\"line\">            instack.push(outstack.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">peek</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!instack.isEmpty())&#123;</span><br><span class=\"line\">            outstack.push(instack.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> outstack.peek();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!outstack.isEmpty())&#123;</span><br><span class=\"line\">            instack.push(outstack.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">empty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instack.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"225用队列实现栈\"><a class=\"markdownIt-Anchor\" href=\"#225用队列实现栈\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/implement-stack-using-queues/\" >225. 用队列实现栈 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：队列、栈、环</strong></p>\n<p>这道题比上一题要难，上一题利用栈的先进后出的特性，使用两个栈互相倒就可以得到队列先入先出的特性。但是两个先入先出的栈互相倒也不可能得出栈先入后出的特性，那么我们就应该换一个思路。那就是将队列想象成一个环，我只需要记录队列的元素个数，然后进行对应次数的出队和入队操作即可将队尾元素输出，且队列的相对位置并不会发生变化。值得注意的还有队列的操作： <code>offer()</code>  是添加元素； <code>poll()</code>  是返回队首元素并删除； <code>peek()</code>  是返回队首元素； <code>Isempty()</code>  是判断队列是否为空。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStack</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;<span class=\"comment\">//输入队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyStack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        queue.offer(x);</span><br><span class=\"line\">        num++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;num;i++)&#123;</span><br><span class=\"line\">            temp = queue.poll();</span><br><span class=\"line\">            queue.offer(temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue.poll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">top</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;num;i++)&#123;</span><br><span class=\"line\">            temp = queue.poll();</span><br><span class=\"line\">            queue.offer(temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">empty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"20有效的括号\"><a class=\"markdownIt-Anchor\" href=\"#20有效的括号\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/valid-parentheses/\" >20. 有效的括号 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：栈、括号匹配、反转</strong></p>\n<p>括号匹配一直是栈的常用领域，我们可以遍历字符串，然后与栈顶元素进行匹配，如果能够匹配则出栈，不能匹配则入栈，最后判断栈是否为空即可判断出括号是否已经被正确匹配了。还有一点可以提高的就是在遇到左括号入栈的时候直接入对应的右括号，这样我们在匹配的时候的时候就不用写这么复杂的判断式，直接判断两者是否相等即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] cs = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> i:cs)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!stack.isEmpty() &amp;&amp; ((i==<span class=\"string\">&#x27;)&#x27;</span>&amp;&amp;stack.peek()==<span class=\"string\">&#x27;(&#x27;</span>)||(i==<span class=\"string\">&#x27;]&#x27;</span>&amp;&amp;stack.peek()==<span class=\"string\">&#x27;[&#x27;</span>)||(i==<span class=\"string\">&#x27;&#125;&#x27;</span>&amp;&amp;stack.peek()==<span class=\"string\">&#x27;&#123;&#x27;</span>)))&#123;</span><br><span class=\"line\">                    stack.pop();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                stack.push(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stack.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        Stack&lt;Character&gt;stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Character&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> c: s.toCharArray())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;(&#x27;</span>) stack.push(<span class=\"string\">&#x27;)&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;[&#x27;</span>) stack.push(<span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;&#123;&#x27;</span>) stack.push(<span class=\"string\">&#x27;&#125;&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stack.isEmpty()||c!=stack.pop())<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"150逆波兰表达式求值\"><a class=\"markdownIt-Anchor\" href=\"#150逆波兰表达式求值\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/evaluate-reverse-polish-notation/\" >150. 逆波兰表达式求值 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：栈、集合、类型转换</strong></p>\n<p>这题并不复杂，我们只需遍历字符串数组，然后遇到运算符则弹出栈顶的两个元素进行运算即可。在判断运算符的环节上我使用了 HashSet 来进行判断，或者也可以编写函数对判断进行封装。还有一个值得注意的点是类型转换，由于给出的是字符串，然后我们需要使用 int 型来进行算术运算，因此我们需要在压入数据的时候使用 <code>Interger.parseInt()</code>  将字符串转换为数值型。最后是在 Java 中要注意单引号和双引号的区别。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">evalRPN</span><span class=\"params\">(String[] tokens)</span> &#123;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        set.add(<span class=\"string\">&quot;+&quot;</span>);</span><br><span class=\"line\">        set.add(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        set.add(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        set.add(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String i:tokens)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(set.contains(i))&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i.equals(<span class=\"string\">&quot;+&quot;</span>))&#123;</span><br><span class=\"line\">                    stack.push(a+b);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i.equals(<span class=\"string\">&quot;-&quot;</span>))&#123;</span><br><span class=\"line\">                    stack.push(b-a);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i.equals(<span class=\"string\">&quot;*&quot;</span>))&#123;</span><br><span class=\"line\">                    stack.push(a*b);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    stack.push(b/a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> Integer.parseInt(i);</span><br><span class=\"line\">                stack.push(temp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化写法，判断是否为数字</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isNumber</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !(<span class=\"string\">&quot;+&quot;</span>.equals(token) || <span class=\"string\">&quot;-&quot;</span>.equals(token) || <span class=\"string\">&quot;*&quot;</span>.equals(token) || <span class=\"string\">&quot;/&quot;</span>.equals(token));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"239滑动窗口最大值\"><a class=\"markdownIt-Anchor\" href=\"#239滑动窗口最大值\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/sliding-window-maximum/\" >239. 滑动窗口最大值 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：队列、双端队列、优先队列、无法解决</strong></p>\n<p>这类题目应该是我最薄弱的一环了，有在往优先队列的方向思考，这样可以维护一个队首为滑动窗口最大值的队列，但是存在一个问题就是滑动数组的其他元素应该如何存放，当队首元素离开滑动窗口时如何对这个队列进行维护。最后还是看了答案，书中是这样写的 ** 队列没有必要维护窗口内的所有元素，只需要维护有可能成为窗口中最大值的元素即可，同时保证队列的元素数值是从小到大排列的。** 实际上我们可以使用双端数组，队首是当前滑动窗口的最大值，然后当滑动窗口移动时，将要出去的元素和队首元素比较，看队首元素是否需要出去，然后将进入的元素放入队列中，将小于该元素的其他元素依次弹出队列，因为这些元素已经不可能成为最大值。这样做的原因是他们的相对位置实际并没有改变，滑动数组向右移动，右边的值比你大，因此其不可能成为最大值。实际上维护的是一个相对位置不变的递减队列。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxSlidingWindow(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Deque&lt;Integer&gt; deque = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; nums[i])&#123;</span><br><span class=\"line\">                deque.pollLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            deque.offerLast(nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        result[<span class=\"number\">0</span>] = deque.peekFirst();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=k;j&lt;nums.length;i++,j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]==deque.peekFirst())&#123;</span><br><span class=\"line\">                deque.pollFirst();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; nums[j])&#123;</span><br><span class=\"line\">                deque.pollLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            deque.offerLast(nums[j]);</span><br><span class=\"line\">            result[i+<span class=\"number\">1</span>] = deque.peekFirst();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"347前k个高频元素\"><a class=\"markdownIt-Anchor\" href=\"#347前k个高频元素\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/top-k-frequent-elements/\" >347. 前 K 个高频元素 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：堆、哈希表、重写比较器、无法解决</strong></p>\n<p>这题的思路并不困难，首先使用 map 哈希表计算出每个整数所出现的频率，然后使用小顶堆获取前 K 个元素即可。但是问题就出在使用小顶堆上了，不知道为何我写的比较器一直通不过编译，而且 map.entry 来进行比较也很麻烦。后来看了答案发现其实可以使用两个元素的数组来解决，然后只要在堆满的时候，每次插入的时候和堆顶的元素进行比较就没有问题了。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//class Solution &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] topKFrequent(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">        Map&lt;Integer,Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//计算每一个整数出现的频率，可以使用map.put(num, map.getOrDefault(num, 0) + 1);</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num:nums)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.containsKey(num))&#123;</span><br><span class=\"line\">                map.replace(num,map.get(num)+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                map.put(num,<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建小顶堆，堆中的元素为数组，而不是使用map.entry</span></span><br><span class=\"line\">        PriorityQueue&lt;<span class=\"type\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;<span class=\"type\">int</span>[]&gt;()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span>[] m,<span class=\"type\">int</span>[] n)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> m[<span class=\"number\">1</span>]-n[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//插入到小顶堆中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Map.Entry&lt;Integer,Integer&gt; entry : map.entrySet())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> entry.getKey(),count = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.size()==k)&#123;<span class=\"comment\">//堆满了就与堆顶元素比较</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(queue.peek()[<span class=\"number\">1</span>]&lt;count)&#123;</span><br><span class=\"line\">                    queue.poll();</span><br><span class=\"line\">                    queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;num,count&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;num,count&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[k];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">            ans[i] = queue.poll()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"42接雨水\"><a class=\"markdownIt-Anchor\" href=\"#42接雨水\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/trapping-rain-water/\" >42. 接雨水 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：无法解决、双指针、数学、动态规划、单调栈</strong></p>\n<p>这题我的第一思路是使用双指针去寻找凹型，然后取两端的最小值，然后计算中间柱子所能接到的雨水数量。但是后面遇到了新的问题，那就是如果低侧一段出现更高的柱子，中间柱子能接到的雨水数量就应该更多，我试图改良凹型的算法还是无法解决该问题。其实我离答案已经很接近了，一根柱子能接到的雨水多少取决于它两侧最高的柱子中的最小值，如果该值大于它，则它接到的雨水就等于该值减去自身，否则就接不到雨水。因此我们可以遍历每一根柱子，计算它两侧的最大的柱子高度，然后即可计算出接到的雨水数量。从上面的计算中，我们可以看出其中有很多的重复计算，此时我们可以使用动态规划来减少重复计算。我们可以先从左到右和从右到左计算一次所在位置左侧和右侧的高度，我们有 <code>Left[i]=Math.max(height[i],left[i-1]</code> ，右侧同理。实际上使用我的思路也可以通过单调栈来解决，因为此时计算是计算长方形，之前已经计算了的就不会重复计算了。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">trap</span><span class=\"params\">(<span class=\"type\">int</span>[] height)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,left,right,h;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;height.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            left = height[i];</span><br><span class=\"line\">            right = height[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;height.length;j++)&#123;</span><br><span class=\"line\">                right = Math.max(right,height[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">                left = Math.max(left,height[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            h = Math.min(right,left) - height[i];</span><br><span class=\"line\">            ans += Math.max(h,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单调栈解法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">trap</span><span class=\"params\">(<span class=\"type\">int</span>[] walls)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (walls == <span class=\"literal\">null</span> || walls.length &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 思路：</span></span><br><span class=\"line\">        <span class=\"comment\">// 单调不增栈，walls元素作为右墙依次入栈</span></span><br><span class=\"line\">        <span class=\"comment\">// 出现入栈元素（右墙）比栈顶大时，说明在右墙左侧形成了低洼处，低洼处出栈并结算该低洼处能接的雨水</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">water</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right=<span class=\"number\">0</span>; right&lt;walls.length; right++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 栈不为空，且当前元素（右墙）比栈顶（右墙的左侧）大：说明形成低洼处了</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; walls[right]&gt;walls[stack.peek()]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 低洼处弹出，尝试结算此低洼处能积攒的雨水</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">bottom</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">                <span class=\"comment\">// 看看栈里还有没有东西（左墙是否存在）</span></span><br><span class=\"line\">                <span class=\"comment\">// 有右墙+有低洼+没有左墙=白搭</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stack.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 左墙位置以及左墙、右墙、低洼处的高度</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> stack.peek();</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">leftHeight</span> <span class=\"operator\">=</span> walls[left];</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">rightHeight</span> <span class=\"operator\">=</span> walls[right];</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">bottomHeight</span> <span class=\"operator\">=</span> walls[bottom];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 能积攒的水=(右墙位置-左墙位置-1) * (min(右墙高度, 左墙高度)-低洼处高度)</span></span><br><span class=\"line\">                water += (right-left-<span class=\"number\">1</span>) * (Math.min(leftHeight, rightHeight)-bottomHeight);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 上面的pop循环结束后再push，保证stack是单调不增</span></span><br><span class=\"line\">            stack.push(right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> water;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第六章-二叉树\"><a class=\"markdownIt-Anchor\" href=\"#第六章-二叉树\">#</a> 第六章 二叉树</h1>\n<h2 id=\"递归算法三要素\"><a class=\"markdownIt-Anchor\" href=\"#递归算法三要素\">#</a> 递归算法三要素</h2>\n<ol>\n<li>确定递归算法的参数和返回值。</li>\n<li>确定终止条件。</li>\n<li>确定单层递归的逻辑。</li>\n</ol>\n<h2 id=\"144二叉树的前序遍历\"><a class=\"markdownIt-Anchor\" href=\"#144二叉树的前序遍历\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/binary-tree-preorder-traversal/\" >144. 二叉树的前序遍历 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：栈、二叉树、遍历</strong></p>\n<p>使用栈来进行遍历，将根节点入栈，终止条件设置为栈非空。取出栈顶元素，访问它的值，然后先后将右节点和左节点入栈。由于栈是先进后出的，所以应当将右节点入栈。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">preorderTraversal</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ans =<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        TreeNode temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stack.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">            temp = stack.pop();</span><br><span class=\"line\">            ans.add(temp.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(temp.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(temp.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"94二叉树的中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#94二叉树的中序遍历\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/binary-tree-inorder-traversal/\" >94. 二叉树的中序遍历 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、栈、遍历</strong></p>\n<p>由于这题的访问顺序和中序的顺序不一致，所以会显得更复杂一点。我们使用一个 temp 节点进行遍历，若节点非空则访问则一直访问左结点，如果遇到空则说明其没有左结点，然后获取栈顶元素的值，然后再访问其右节点即可。在这个算法中左结点和父节点会入栈，右节点是不入栈的。这种想法就比较简洁，不需要判断左节点是否存在再去访问，而是将其同样入栈即可，看作是同一种情况。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp != <span class=\"literal\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp != <span class=\"literal\">null</span>)&#123;<span class=\"comment\">//左节点非空，继续向下访问</span></span><br><span class=\"line\">                stack.push(temp);</span><br><span class=\"line\">                temp = temp.left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp = stack.pop();<span class=\"comment\">//左节点为空，获取其父节点</span></span><br><span class=\"line\">                ans.add(temp.val);<span class=\"comment\">//将值加入数组中</span></span><br><span class=\"line\">                temp = temp.right;<span class=\"comment\">//访问其右节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"145二叉树的后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#145二叉树的后序遍历\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/binary-tree-postorder-traversal/\" >145. 二叉树的后序遍历 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>数组反转、栈、二叉树、遍历</strong></p>\n<p>这题非常的巧妙，前序遍历的顺序是中 - 左 - 右，后序遍历的顺序是左 - 右 - 中，我们只需将前序的代码修改为中 - 右 - 左，然后将数组进行反转后我们就可以得到遍历顺序为左 - 右 - 中的数组，而这就是二叉树的后序遍历。值得注意的是 Java 进行数组反转可以使用 <code>Collections.reverse(ans);</code> ，无需接收值，数组本身已经被反转。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">postorderTraversal</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ans =<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        TreeNode temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stack.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">            temp = stack.pop();</span><br><span class=\"line\">            ans.add(temp.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(temp.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(temp.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.reverse(ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"102二叉树的层序遍历\"><a class=\"markdownIt-Anchor\" href=\"#102二叉树的层序遍历\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\" >102. 二叉树的层序遍历 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：队列、二叉树、遍历，二维可变数组</strong></p>\n<p>层序遍历并不复杂，我们只需要使用队列，依次访问队头元素，然后访问其子节点，若非空则将其入队。该题的难点就在于每层的数据也需要分开存放，如何分层就成为了一个难点，原来我的解决方案是使用一个临时队列存储下一层的元素，然后等队列为空就把临时队列里的值赋给它，实际上这样也是能够解决问题的，但是就使得问题变得复杂了。按照现在新的方法，在新一层开始的时候获取队列长度，就能够得到该层的元素个数，再使用 for 循环就能确保访问到该层的全部元素，然后在同一个队列中又可以开始新一轮的循环了。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">levelOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        Deque&lt;TreeNode&gt; deque  = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            deque.add(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!deque.isEmpty())&#123;</span><br><span class=\"line\">            List&lt;Integer&gt; ceng = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//利用当前数目来分层，值得注意的是deque.size会不断变化，因此需要存储下来</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> deque.size();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> deque.poll();</span><br><span class=\"line\">                ceng.add(temp.val);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    deque.add(temp.left);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    deque.add(temp.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.add(ceng);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"剑指offer27二叉树的镜像\"><a class=\"markdownIt-Anchor\" href=\"#剑指offer27二叉树的镜像\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/\" >剑指 offer27. 二叉树的镜像 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、遍历</strong></p>\n<p>这题实际上就是考遍历，我们只需遍历每一个节点，然后将其左节点和右节点进行反转即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">mirrorTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        TreeNode temp,tran;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">            temp = stack.pop();</span><br><span class=\"line\">            tran = temp.left;</span><br><span class=\"line\">            temp.left = temp.right;</span><br><span class=\"line\">            temp.right = tran;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(temp.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(temp.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"101对称二叉树\"><a class=\"markdownIt-Anchor\" href=\"#101对称二叉树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/symmetric-tree/\" >101. 对称二叉树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、层序遍历、队列、递归</strong></p>\n<p>一开始看到这道题的时候是比较头疼的，感觉有点复杂，想到二叉树不外乎四种遍历方式，这时候就有思路了，我可以使用层序遍历，然后对每层进行对称性检验即可，有元素的就是 1，没有元素的位置就是 0，然后检测数组是否对称即可。不过后来发现对称还要求值相同，那就改为存放值，将空的存为不可能出现的值即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSymmetric</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Deque&lt;TreeNode&gt; deque  = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            deque.add(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!deque.isEmpty())&#123;</span><br><span class=\"line\">            List&lt;Integer&gt; nums = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//利用当前数目来分层，值得注意的是deque.size会不断变化，因此需要存储下来</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> deque.size();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> deque.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    nums.add(temp.left.val);</span><br><span class=\"line\">                    deque.add(temp.left);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    nums.add(<span class=\"number\">101</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    nums.add(temp.right.val);</span><br><span class=\"line\">                    deque.add(temp.right);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    nums.add(<span class=\"number\">101</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=nums.size()-<span class=\"number\">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums.get(i) != nums.get(j))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//递归实现的版本</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSymmetric</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//调用递归函数，比较左节点，右节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(root.left,root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">dfs</span><span class=\"params\">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//递归的终止条件是两个节点都为空</span></span><br><span class=\"line\">        <span class=\"comment\">//或者两个节点中有一个为空</span></span><br><span class=\"line\">        <span class=\"comment\">//或者两个节点的值不相等</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left==<span class=\"literal\">null</span> &amp;&amp; right==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left==<span class=\"literal\">null</span> || right==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left.val!=right.val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//再递归的比较 左节点的左孩子 和 右节点的右孩子</span></span><br><span class=\"line\">        <span class=\"comment\">//以及比较  左节点的右孩子 和 右节点的左孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(left.left,right.right) &amp;&amp; dfs(left.right,right.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"104二叉树的最大深度\"><a class=\"markdownIt-Anchor\" href=\"#104二叉树的最大深度\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" >104. 二叉树的最大深度 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：递归、二叉树</strong></p>\n<p>这题使用递归极其简单，终止条件为传入的节点为空，此时返回深度值为 0。若不为空则返回左节点和右节点中的最大值后加一，之所以加一是因为算上了父节点这一层。或者也可以使用层序遍历一层层遍历出最大深度。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxDepth</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.max(maxDepth(root.left),maxDepth(root.right))+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"111二叉树的最小深度\"><a class=\"markdownIt-Anchor\" href=\"#111二叉树的最小深度\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\" >111. 二叉树的最小深度 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、层序遍历</strong></p>\n<p>一开始想的是将上一题最大深度修改一下就成为最小深度，但是发现这样是不行的，因为最大深度使用 max 本来的往深层找，但是最小深度要求的是到叶子节点的最小距离，因此判断条件复杂了不少，因此改用层序遍历的方式来解答。我们使用层序遍历，记录当前的层数，然后遇到叶子节点就返回当前的层数即可。使用算法则需要对子树是否为空的情况进行分别处理。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minDepth</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Deque&lt;TreeNode&gt; deque  = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            deque.add(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!deque.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> deque.size();</span><br><span class=\"line\">            ans += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> deque.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp.left==<span class=\"literal\">null</span> &amp;&amp; temp.right==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    deque.add(temp.left);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    deque.add(temp.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//递归算法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minDepth</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> minDepth(root.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> minDepth(root.left) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Math.min(minDepth(root.left), minDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"110平衡二叉树\"><a class=\"markdownIt-Anchor\" href=\"#110平衡二叉树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/balanced-binary-tree/\" >110. 平衡二叉树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：递归、二叉树</strong></p>\n<p>此题可以利用之前做过的树的最大深度作为子函数，我们使用递归来解决问题，终止条件是 root 为空，如果不为空则获取子树的高度进行比较，如果大于 1 则返回 false，否则继续递归判断左子树和右子树是否为平衡二叉树。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isBalanced</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> maxDepth(root.left);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> maxDepth(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Math.abs(left-right)&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取树的高度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxDepth</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.max(maxDepth(root.left),maxDepth(root.right))+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"257二叉树的所有路径\"><a class=\"markdownIt-Anchor\" href=\"#257二叉树的所有路径\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/binary-tree-paths/\" >257. 二叉树的所有路径 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、二叉树、无法解决、Integer 和 String 的转换、递归</strong></p>\n<p>这题也是薄弱环节，对于递归的题目还是能解决一点，但是遇到回溯题就一筹莫展了。不过通过这题的讲解，我还是领悟到了一点。我认为回溯法有三个步骤，首先将当前节点加入到路径之中，然后进行递归操作，递归结束后将节点从路径中删除。需要注意的还有终止条件的设置，还有就是需要哪些数据结构来存储回溯所需的信息。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">binaryTreePaths</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        List&lt;String&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        traversal(root,path,result);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traversal</span><span class=\"params\">(TreeNode cur,List&lt;Integer&gt; path,List&lt;String&gt; result)</span>&#123;</span><br><span class=\"line\">        path.add(cur.val);<span class=\"comment\">//1.将当前节点的值加入到路径</span></span><br><span class=\"line\">        <span class=\"comment\">//终止条件是访问到叶子节点，不用担心cur==null，因为在加入path之前已经有判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left==<span class=\"literal\">null</span> &amp;&amp; cur.right==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">sPath</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;path.size()-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">                sPath = sPath + Integer.toString(path.get(i));<span class=\"comment\">//Integer转String</span></span><br><span class=\"line\">                sPath += <span class=\"string\">&quot;-&gt;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sPath = sPath + Integer.toString(path.get(path.size()-<span class=\"number\">1</span>));</span><br><span class=\"line\">            result.add(sPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//2.不是叶子节点就继续递归判断</span></span><br><span class=\"line\">            <span class=\"comment\">//递归和回溯需要在一起，该节点访问完后，需要将其从路径中去除</span></span><br><span class=\"line\">            traversal(cur.left,path,result);</span><br><span class=\"line\">            <span class=\"comment\">//3.当前节点递归判断结束后，将节点从路径中删除，和步骤1对应</span></span><br><span class=\"line\">            path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            traversal(cur.right,path,result);</span><br><span class=\"line\">            path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"112路径总和\"><a class=\"markdownIt-Anchor\" href=\"#112路径总和\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/path-sum/\" >112. 路径总和 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、回溯、传值和传引用、递归</strong></p>\n<p>这题本来是想着模仿上一题做的，但是 int 型是传值而不是传引用，因此无需再进行回溯，我们只需要将目标值减去当前节点的值，就可以得到子节点下一次递归所需要的目标值。当我们遇到根结点的时候就判断目标值是否已经被减至 0 即可，然后我们只需要一个子节点能够满足条件即可，所以设置或条件来进行递归。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasPathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> targetSum)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> traversal(root,targetSum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">traversal</span><span class=\"params\">(TreeNode cur,<span class=\"type\">int</span> targetSum)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> temp1=<span class=\"literal\">false</span>,temp2=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        targetSum -= cur.val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left == <span class=\"literal\">null</span> &amp;&amp; cur.right == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(targetSum == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            temp1 = traversal(cur.left,targetSum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.right!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            temp2 = traversal(cur.right,targetSum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (temp2||temp1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化版本</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasPathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> targetSum)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> traversal(root,targetSum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">traversal</span><span class=\"params\">(TreeNode cur,<span class=\"type\">int</span> targetSum)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur==<span class=\"literal\">null</span>)&#123;<span class=\"comment\">//若为空，则返回false</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        targetSum -= cur.val;<span class=\"comment\">//修改目标值，因为不是传递引用，不会同时改变值，所以相当于帮我们进行回溯了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left == <span class=\"literal\">null</span> &amp;&amp; cur.right == <span class=\"literal\">null</span>)&#123;<span class=\"comment\">//遇到根结点才进行判断</span></span><br><span class=\"line\">        <span class=\"comment\">//当目标值减至0时，说明已经找到符合条件的路径了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(targetSum == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//只要子节点有一个满足即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (traversal(cur.left,targetSum)||traversal(cur.right,targetSum));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"113路径总和-ii\"><a class=\"markdownIt-Anchor\" href=\"#113路径总和-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/path-sum-ii/\" >113. 路径总和 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、二叉树、二维可变数组、递归</strong></p>\n<p>这题就没啥好说的，就是 112 路径总和和 257 二叉树的所有路径缝合起来的，我们只需在 112 的基础上加上记录路径和结果的两个数组即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> targetSum)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        traversal(root,path,result,targetSum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traversal</span><span class=\"params\">(TreeNode cur,List&lt;Integer&gt; path,List&lt;List&lt;Integer&gt;&gt; result,<span class=\"type\">int</span> targetSum)</span>&#123;</span><br><span class=\"line\">        path.add(cur.val);</span><br><span class=\"line\">        targetSum -= cur.val;</span><br><span class=\"line\">        <span class=\"comment\">//终止条件是访问到叶子节点，不用担心cur==null，因为在加入path之前已经有判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left==<span class=\"literal\">null</span> &amp;&amp; cur.right==<span class=\"literal\">null</span> &amp;&amp; targetSum==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;path.size();i++)&#123;</span><br><span class=\"line\">                temp.add(path.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result.add(temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            traversal(cur.left,path,result,targetSum);</span><br><span class=\"line\">            path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            traversal(cur.right,path,result,targetSum);</span><br><span class=\"line\">            path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"106从中序与后序遍历序列构造二叉树\"><a class=\"markdownIt-Anchor\" href=\"#106从中序与后序遍历序列构造二叉树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\" >106. 从中序与后序遍历序列构造二叉树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、遍历、递归、数学，查找索引、哈希表、无法解决</strong></p>\n<p>这题本来想的挺简单的，但是没想到用 Java 实现这么麻烦，尤其是获取对应元素的索引，本来 ArrayList 有 indexOf 方法可以获取对应元素的索引，但是这个是 int []，不能使用该方法，使用转换也不行。然后只能自己使用 map 来实现，好像这就是 Java 的底层实现，用惯了 Python，写起 Java 来还是有点不习惯。还有就是可以使用全局变量来减少变量的传递，不然就太麻烦了，而且如果能通过传索引解决的方法，就不要整个数组传进入了，避免栈溢出。做得最不好的一点就是没有计算好数组切分的位置，都是想当然的算出一个值，不能简单的使用 index 来切分，因为这个只有在第一次分配中符合条件，没有测试更多的用例来检验正确性。Pori 的长度应该是左子树的长度减 1，而左子树的长度等于根节点索引减去左子树。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"32de457907344ab2d3d26756890d38f1.png\"\n                      alt=\"33f5e8c9-7476-4ee5-a0f1-f4047c922958.png\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    HashMap&lt;Integer,Integer&gt; memo = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span>[] post;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>[] inorder, <span class=\"type\">int</span>[] postorder)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; inorder.length; i++) memo.put(inorder[i], i);</span><br><span class=\"line\">        post = postorder;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> traversal(<span class=\"number\">0</span>,inorder.length-<span class=\"number\">1</span>,<span class=\"number\">0</span>,postorder.length-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">traversal</span><span class=\"params\">(<span class=\"type\">int</span> Inle,<span class=\"type\">int</span> Inri,<span class=\"type\">int</span> Pole,<span class=\"type\">int</span> Pori)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Inle&gt;Inri || Pole&gt;Pori)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> post[Pori];</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(mid);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> memo.get(mid);</span><br><span class=\"line\"></span><br><span class=\"line\">        ans.left = traversal(Inle,index-<span class=\"number\">1</span>,Pole,Pole+index-Inle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        ans.right = traversal(index+<span class=\"number\">1</span>,Inri,Pole+index-Inle,Pori-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"105从前序与中序遍历序列构造二叉树\"><a class=\"markdownIt-Anchor\" href=\"#105从前序与中序遍历序列构造二叉树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" >105. 从前序与中序遍历序列构造二叉树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、遍历、递归、数学、哈希表查找索引</strong></p>\n<p>模仿前一道题做出来的，自己尝试推导一下公式，反正涉及数学公式递归的一定要证明一下，不要想当然的计算。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    HashMap&lt;Integer,Integer&gt; memo = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span>[] post;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>[] inorder, <span class=\"type\">int</span>[] postorder)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; inorder.length; i++) memo.put(inorder[i], i);</span><br><span class=\"line\">        post = postorder;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> traversal(<span class=\"number\">0</span>,inorder.length-<span class=\"number\">1</span>,<span class=\"number\">0</span>,postorder.length-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">traversal</span><span class=\"params\">(<span class=\"type\">int</span> Inle,<span class=\"type\">int</span> Inri,<span class=\"type\">int</span> Pole,<span class=\"type\">int</span> Pori)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Inle&gt;Inri || Pole&gt;Pori)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> post[Pori];</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(mid);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> memo.get(mid);</span><br><span class=\"line\"></span><br><span class=\"line\">        ans.left = traversal(Inle,index-<span class=\"number\">1</span>,Pole,Pole+index-Inle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        ans.right = traversal(index+<span class=\"number\">1</span>,Inri,Pole+index-Inle,Pori-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"617合并二叉树\"><a class=\"markdownIt-Anchor\" href=\"#617合并二叉树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/merge-two-binary-trees/\" >617. 合并二叉树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：递归、二叉树</strong></p>\n<p>按照前面的递归三部曲写起来确实不一样，有了思考的方向，首先是通过返回新节点来成二叉树，比传节点进去成树方便了不少。终止条件就设置为传入的两个节点都为空，如果两个都不为空则求和，然后就剩下一个为空，一个不为空的情况，就传入非空的节点，另一个节点就传入 null 即可。也有更好的写法，遇到一个为空，则将返回另外一个，这整个分支都返回了，也不需要新建节点，更少去了剩下的多余操作。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">mergeTrees</span><span class=\"params\">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class=\"line\">        TreeNode ans;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root1==<span class=\"literal\">null</span> &amp;&amp; root2==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ans = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root1 != <span class=\"literal\">null</span> &amp;&amp; root2 != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> root1.val+root2.val;</span><br><span class=\"line\">            ans = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(temp);</span><br><span class=\"line\">            ans.left = mergeTrees(root1.left,root2.left);</span><br><span class=\"line\">            ans.right = mergeTrees(root1.right,root2.right);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root1 != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ans = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(root1.val);</span><br><span class=\"line\">            ans.left = mergeTrees(root1.left,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            ans.right = mergeTrees(root1.right,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(root2.val);</span><br><span class=\"line\">            ans.left = mergeTrees(root2.left,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            ans.right = mergeTrees(root2.right,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更好的写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">mergeTrees</span><span class=\"params\">(TreeNode t1, TreeNode t2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t1 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t2 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">merged</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(t1.val + t2.val);</span><br><span class=\"line\">        merged.left = mergeTrees(t1.left, t2.left);</span><br><span class=\"line\">        merged.right = mergeTrees(t1.right, t2.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merged;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"700二叉搜索树中的搜索\"><a class=\"markdownIt-Anchor\" href=\"#700二叉搜索树中的搜索\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/search-in-a-binary-search-tree/\" >700. 二叉搜索树中的搜索 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、二叉搜索树</strong></p>\n<p>这题没什么好说的，按照二叉搜索树的原理依次遍历即可。如果要搜索一条边，那么递归函数就要返回值，因为找到边就要及时返回。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">searchBST</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.val == val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cur.val &gt; val)&#123;</span><br><span class=\"line\">                cur = cur.left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cur = cur.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"98验证二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#98验证二叉搜索树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/validate-binary-search-tree/\" >98. 验证二叉搜索树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、二叉搜索树、中序遍历、相等判断、哈希表查找索引、排序</strong></p>\n<p>二叉搜索树比较复杂，我就不打算使用递归的方式来解决了。而使用迭代的方法首先要想到二叉搜索树的中序遍历是一个有序的数组，因此我打算按照中序遍历的方式获取数组，然后判断其是否有序，这样就可以判断出是否为二叉搜索树了。我使用了 map 来记录原来的位置，调用函数来排序。二叉排序树还要求元素不能重复，也需要遍历判断，这里遇到了一个小问题就是使用 <code>==</code>  判断有时会有问题，而使用 <code>equals()</code>  方法则可以通过，暂时不知道问题出在哪里。然后看了答案，发现答案太简洁了，可以直接判断中序遍历的节点是否小于等于前一个 inorder 的值，如果是就说明不是二叉搜索树了。而如果使用递归的方法则设置上下限即可，但我感觉这题还是使用迭代的方法比较好。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        List&lt;Long&gt; ans = inorderTraversal(root);</span><br><span class=\"line\">        HashMap&lt;Integer,Long&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; ans.size(); i++) map.put(i, ans.get(i));</span><br><span class=\"line\">        Collections.sort(ans);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;ans.size()-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans.get(i).equals(ans.get(i+<span class=\"number\">1</span>)))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; ans.size();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans.get(i)!=map.get(i))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Long&gt; <span class=\"title function_\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        List&lt;Long&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp != <span class=\"literal\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp != <span class=\"literal\">null</span>)&#123;<span class=\"comment\">//左节点非空，继续向下访问</span></span><br><span class=\"line\">                stack.push(temp);</span><br><span class=\"line\">                temp = temp.left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp = stack.pop();<span class=\"comment\">//左节点为空，获取其父节点</span></span><br><span class=\"line\">                ans.add((<span class=\"type\">long</span>) temp.val);<span class=\"comment\">//将值加入数组中</span></span><br><span class=\"line\">                temp = temp.right;<span class=\"comment\">//访问其右节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化版本</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">inorder</span> <span class=\"operator\">=</span> -Double.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty() || root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                stack.push(root);</span><br><span class=\"line\">                root = root.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            root = stack.pop();</span><br><span class=\"line\">              <span class=\"comment\">// 如果中序遍历得到的节点的值小于等于前一个 inorder，说明不是二叉搜索树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.val &lt;= inorder) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            inorder = root.val;</span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//递归答案</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidBST</span><span class=\"params\">(TreeNode node, <span class=\"type\">long</span> lower, <span class=\"type\">long</span> upper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.val &lt;= lower || node.val &gt;= upper) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isValidBST(node.left, lower, node.val) &amp;&amp; isValidBST(node.right, node.val, upper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"530二叉搜索树的最小绝对差\"><a class=\"markdownIt-Anchor\" href=\"#530二叉搜索树的最小绝对差\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/minimum-absolute-difference-in-bst/\" >530. 二叉搜索树的最小绝对差 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、二叉搜索树、中序遍历、初值设置</strong></p>\n<p>和前一题类似，我们只需进行中序遍历，然后使用一个变量来存储前面的值，然后判断他们的差值大小，记录最小值即可。这题比较麻烦的是如何赋初值，最后也是加了一个判断来解决了，看了答案也没有一个很好的方法。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMinimumDifference</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty() || root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                stack.push(root);</span><br><span class=\"line\">                root = root.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            root = stack.pop();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> Math.abs(root.val-pre);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp &lt; ans &amp;&amp; temp != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                ans = temp;</span><br><span class=\"line\">            &#125;           </span><br><span class=\"line\">            pre = root.val;</span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"501二叉搜索树中的众数\"><a class=\"markdownIt-Anchor\" href=\"#501二叉搜索树中的众数\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/find-mode-in-binary-search-tree/\" >501. 二叉搜索树中的众数 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、二叉搜索数、中序遍历、初值设置</strong></p>\n<p>本来是想着跟上一题一样做的，但是初值设置真的特别麻烦，一时间没有理清楚逻辑，所以先不用这个方法。用了一个比较暴力的方法，就是先进行中序遍历后得到数组，然后统计每个出现的次数，再遍历寻找众数，最后还要将 ArrayList 转数组，还是挺麻烦的。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findMode(TreeNode root) &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ans = inorderTraversal(root);</span><br><span class=\"line\">        List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        HashMap&lt;Integer,Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//统计每个元素的出现个数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; ans.size(); i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> ans.get(i);</span><br><span class=\"line\">            map.put(val,map.getOrDefault(val,<span class=\"number\">0</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//找到出现最多的元素个数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> key: map.keySet())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.get(key)&gt;max)&#123;</span><br><span class=\"line\">                max = map.get(key);</span><br><span class=\"line\">                temp.clear();</span><br><span class=\"line\">                temp.add(key);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(map.get(key)== max)&#123;</span><br><span class=\"line\">                temp.add(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//ArrayList转数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[temp.size()];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;temp.size();i++)&#123;</span><br><span class=\"line\">            arr[i] = temp.get(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历方式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp != <span class=\"literal\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp != <span class=\"literal\">null</span>)&#123;<span class=\"comment\">//左节点非空，继续向下访问</span></span><br><span class=\"line\">                stack.push(temp);</span><br><span class=\"line\">                temp = temp.left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp = stack.pop();<span class=\"comment\">//左节点为空，获取其父节点</span></span><br><span class=\"line\">                ans.add(temp.val);<span class=\"comment\">//将值加入数组中</span></span><br><span class=\"line\">                temp = temp.right;<span class=\"comment\">//访问其右节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"236二叉树的最近公共祖先\"><a class=\"markdownIt-Anchor\" href=\"#236二叉树的最近公共祖先\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/\" >236. 二叉树的最近公共祖先 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、路径、递归、回溯</strong></p>\n<p>本来想的是使用层序遍历，然后用层数对应的方式往上寻找，但是层序遍历中还要包含 null，这样才能有对应关系，但是这样又导致了层序遍历变复杂了，难以判断应该什么时候结束遍历。于是我改变了方法，使用之前寻找根的路径的方法取得两个节点的路径，然后从后向前比对，得到最近的公共祖先。也可以使用递归来回溯的方法，如果一个节点的左子树和右子树分别包含这两个节点，由于回溯是从低到高的，所以该节点就是二叉树的最近公共祖先。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class=\"line\">        List&lt;TreeNode&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        List&lt;TreeNode&gt; Plist = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        List&lt;TreeNode&gt; Qlist = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        traversal(root,p,path,Plist);</span><br><span class=\"line\">        traversal(root,q,path,Qlist);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=Plist.size()-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> Plist.get(i).val;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=Qlist.size()-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Qlist.get(j).val == a)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Qlist.get(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> q;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traversal</span><span class=\"params\">(TreeNode cur,TreeNode target,List&lt;TreeNode&gt; path,List&lt;TreeNode&gt; result)</span>&#123;</span><br><span class=\"line\">        path.add(cur);<span class=\"comment\">//1.将当前节点的值加入到路径</span></span><br><span class=\"line\">        <span class=\"comment\">//终止条件是找到目标节点，不用担心cur==null，因为在加入path之前已经有判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val == target.val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;path.size();i++)&#123;</span><br><span class=\"line\">                result.add(path.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//2.不是叶子节点就继续递归判断</span></span><br><span class=\"line\">            <span class=\"comment\">//递归和回溯需要在一起，该节点访问完后，需要将其从路径中去除</span></span><br><span class=\"line\">            traversal(cur.left,target,path,result);</span><br><span class=\"line\">            <span class=\"comment\">//3.当前节点递归判断结束后，将节点从路径中删除，和步骤1对应</span></span><br><span class=\"line\">            path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            traversal(cur.right,target,path,result);</span><br><span class=\"line\">            path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//递归方式</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遇到叶子节点或者找到值都向上返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span> || root == p || root == q) <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        <span class=\"comment\">//递归调用</span></span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> lowestCommonAncestor(root.left, p, q)；</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\">        <span class=\"comment\">//如果左右子树都不包含要寻找的节点，说明该节点为null。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span> &amp;&amp; right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果左节点为空，则返回右节点，反之亦然，因为上面判断，两者至少一个非空，说明此时两个目标节点都在当前节点一侧</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> right; </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> left; </span><br><span class=\"line\">        <span class=\"comment\">//如果两者都非空，则说明当前节点就是最近公共祖先节点，返回root</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"235二叉搜索树的最近公共祖先\"><a class=\"markdownIt-Anchor\" href=\"#235二叉搜索树的最近公共祖先\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/\" >235. 二叉搜索树的最近公共祖先 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、二叉搜索树、递归</strong></p>\n<p>使用上一题的方式就可以解决该问题了。还有一种优化的方法，就是利用二叉搜索树的特点，如果目标节点的值小于当前节点的值，则说明它在当前节点左侧，否则就在右侧。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遇到叶子节点或者找到值都向上返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span> || root == p || root == q) <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        <span class=\"comment\">//递归调用</span></span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\">        <span class=\"comment\">//如果左右子树都不包含要寻找的节点，说明该节点为null。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span> &amp;&amp; right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果左节点为空，则返回右节点，反之亦然，因为上面判断，两者至少一个非空，说明此时两个目标节点都在当前节点一侧</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> right; </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> left; </span><br><span class=\"line\">        <span class=\"comment\">//如果两者都非空，则说明当前节点就是最近公共祖先节点，返回root</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化版本</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class=\"line\">        TreeNode temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.val &gt; q.val)&#123;</span><br><span class=\"line\">            temp = q;</span><br><span class=\"line\">            q = p;</span><br><span class=\"line\">            p = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.val &lt; p.val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lowestCommonAncestor(root.right,p,q);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root.val &gt;q.val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lowestCommonAncestor(root.left,p,q);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"701二叉搜索树中的插入操作\"><a class=\"markdownIt-Anchor\" href=\"#701二叉搜索树中的插入操作\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/insert-into-a-binary-search-tree/\" >701. 二叉搜索树中的插入操作 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、二叉搜索树、模拟</strong></p>\n<p>这题并不复杂，与二叉搜索树的查找类似，我们只需每次比较，然后选择正确的方向，唯一不同的是我们遇到要去的节点为空时，我们将目标值插入其中，然后返回 root 即可。还有一种特殊情况是二叉搜索树本身为空，此时我们把要插入的节点返回即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">insertIntoBST</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">ins</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.val &gt; val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur.left == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    cur.left = ins;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cur = cur.left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cur.val &lt; val)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur.right == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    cur.right = ins;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cur = cur.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ins;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//递归版</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">insertIntoBST</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遇到为空，则说明是要插入的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据值的大小决定要去哪个方向</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val &lt; root.val) &#123;</span><br><span class=\"line\">            root.left = insertIntoBST(root.left, val);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            root.right = insertIntoBST(root.right, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"450删除二叉搜索树中的节点\"><a class=\"markdownIt-Anchor\" href=\"#450删除二叉搜索树中的节点\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/delete-node-in-a-bst/\" >450. 删除二叉搜索树中的节点 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、二叉搜索树、遍历，树状调整、递归</strong></p>\n<p>删除二叉搜索树上的节点有多种情况：1、如果删除的节点为叶子节点，则可以直接删除；2、如果左子树非空，则寻找左子树的最右端节点进行删除，并将他们的值进行交换；3、如果右子树非空，则寻找右子树的最左端节点进行删除，并将他们的值进行交换。在情况 2 和 3 中，被换作删除的节点同样会遇到这三种情况，因此我们可以使用递归来进行处理，我们需要被删除的节点，它的父节点用于删除，还需要知道被删除的节点位于父节点的左右方向。实际上被删除的节点可以不传入，利用其他两个节点也可以推导出该节点。不得不说这个逻辑不算难，但是写出的代码有点累赘，不够优雅。</p>\n<p>别人的分类方法更加简便：其无左子：其右子顶替其位置，删除了该节点；其无右子：其左子顶替其位置，删除了该节点；其左右子节点都有：其左子树转移到其右子树的最左节点的左子树上，然后右子树顶替其位置，由此删除了该节点。而且感觉他们都好喜欢返回一个数节点的方式来进行递归。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">deleteNode</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        pre.left = root;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> pre;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">isleft</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.val == key)&#123;</span><br><span class=\"line\">                remove(cur,pre,isleft);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ans.left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cur.val &lt; key)&#123;</span><br><span class=\"line\">                pre = cur;</span><br><span class=\"line\">                cur = cur.right;</span><br><span class=\"line\">                isleft = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cur.val &gt; key)&#123;</span><br><span class=\"line\">                pre = cur;</span><br><span class=\"line\">                cur = cur.left;</span><br><span class=\"line\">                isleft = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(TreeNode root,TreeNode pre,<span class=\"type\">boolean</span> isleft)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(root.val);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.left == <span class=\"literal\">null</span> &amp;&amp; cur.right == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;我进来了&quot;);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isleft)&#123;</span><br><span class=\"line\">                pre.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                pre.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cur.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = cur.left;</span><br><span class=\"line\">            isleft = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(cur.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                pre = cur;</span><br><span class=\"line\">                cur = cur.right;</span><br><span class=\"line\">                isleft = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            root.val = cur.val;</span><br><span class=\"line\">            remove(cur,pre,isleft);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = cur.right;</span><br><span class=\"line\">            isleft = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(cur.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                pre = cur;</span><br><span class=\"line\">                cur = cur.left;</span><br><span class=\"line\">                isleft = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            root.val = cur.val;</span><br><span class=\"line\">            remove(cur,pre,isleft);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化版本</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">deleteNode</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key &gt; root.val)</span><br><span class=\"line\">            root.right = deleteNode(root.right, key); <span class=\"comment\">// 去右子树删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; root.val)    </span><br><span class=\"line\">            root.left = deleteNode(root.left, key);  <span class=\"comment\">// 去左子树删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>  &#123;  <span class=\"comment\">// 当前节点就是要删除的节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span>)   <span class=\"keyword\">return</span> root.right;      <span class=\"comment\">// 情况1，欲删除节点无左子</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.right == <span class=\"literal\">null</span>)  <span class=\"keyword\">return</span> root.left;  <span class=\"comment\">// 情况2，欲删除节点无右子</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.left!=<span class=\"literal\">null</span> &amp;&amp; root.right !=<span class=\"literal\">null</span>)&#123;  <span class=\"comment\">// 情况3，欲删除节点左右子都有 </span></span><br><span class=\"line\">                <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root.right;   </span><br><span class=\"line\">                <span class=\"keyword\">while</span> (node.left != <span class=\"literal\">null</span>)      <span class=\"comment\">// 寻找欲删除节点右子树的最左节点</span></span><br><span class=\"line\">                    node = node.left;</span><br><span class=\"line\"></span><br><span class=\"line\">                node.left = root.left;     <span class=\"comment\">// 将欲删除节点的左子树成为其右子树的最左节点的左子树</span></span><br><span class=\"line\">                root = root.right;         <span class=\"comment\">// 欲删除节点的右子顶替其位置，节点被删除</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"669修剪二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#669修剪二叉搜索树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/trim-a-binary-search-tree/\" >669. 修剪二叉搜索树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：递归、二叉树、二叉搜索树</strong></p>\n<p>这也是一道递归的二叉搜索树问题，我模仿了上题，没有使用复杂的传入参数，仅仅是调用自身。首先设置终止条件为节点为空，然后如果节点值大于上限，那么是应该被修剪的值，我们调用再次递归判断其左节点，然后使用 root 接收其返回的值，这样就达到了删除的效果，同理如果节点的值小于下限，同样应该被删除，我们就访问其右子树。如果是符合条件的节点，我们就使用其左节点接收函数访问左节点的返回结果，右节点也是同理，最后返回 root 的值即可。通过返回节点的方式就不用繁琐的传入父节点来删除节点，也无需使用标记位来判断其为左侧还是右侧。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">trimBST</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.val &gt; high)&#123;</span><br><span class=\"line\">            root = trimBST(root.left,low,high);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root.val &lt; low)&#123;</span><br><span class=\"line\">            root =  trimBST(root.right,low,high);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            root.left = trimBST(root.left,low,high);</span><br><span class=\"line\">            root.right = trimBST(root.right,low,high);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"108将有序数组转换为二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#108将有序数组转换为二叉搜索树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/\" >108. 将有序数组转换为二叉搜索树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二叉树、二叉搜索树、二叉搜索树生成，递归、全局变量</strong></p>\n<p>同样是使用递归来解决该题，我们使用全局变量来记录数组的值，这样我们就无需传入数组，传入索引即可。设置终止条件为左索引大于右索引，然后取中间值作为中间节点，然后传入左侧的索引给新的递归，并使用中间节点的左节点进行接收，右节点同理。话说这样通过返回节点来构建树真的很方便。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] nums;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">sortedArrayToBST</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nums = nums;<span class=\"comment\">//对全局变量进行赋值，减少每次传递数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> traversal(<span class=\"number\">0</span>,nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">traversal</span><span class=\"params\">(<span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &gt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(nums[mid]);</span><br><span class=\"line\">        ans.left = traversal(left,mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">        ans.right = traversal(mid+<span class=\"number\">1</span>,right);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第七章-回溯算法\"><a class=\"markdownIt-Anchor\" href=\"#第七章-回溯算法\">#</a> 第七章 回溯算法</h1>\n<p>回溯法可以解决的问题：组合问题、切割问题、子集问题、排列问题和棋盘问题。</p>\n<h2 id=\"回溯算法三部曲\"><a class=\"markdownIt-Anchor\" href=\"#回溯算法三部曲\">#</a> 回溯算法三部曲</h2>\n<ol>\n<li>确定回溯函数的返回值和参数。但不同于二叉树的递归过程那么容易，所以一般是先写逻辑，然后需要什么参数就填什么参数。</li>\n<li>确定回溯函数的终止条件。</li>\n<li>确定回溯搜索的遍历过程。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//回溯算法模板</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(参数)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(终止条件)&#123;</span><br><span class=\"line\">    存放结果;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span>(选择：本层集合中的元素（树中节点孩子的数量就是集合的大小）)&#123;</span><br><span class=\"line\">    处理节点;</span><br><span class=\"line\">    backtracking(路径，选择列表);<span class=\"comment\">//递归</span></span><br><span class=\"line\">    回溯，撤销处理结果</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"77组合\"><a class=\"markdownIt-Anchor\" href=\"#77组合\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/combinations/\" >77. 组合 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：组合问题、回溯、剪枝、全局变量、数组值传递和指针传递</strong></p>\n<p>不得不说，有模板真的不一样，有了思考的方向。首先我们将回溯函数中需要用到，但是不变的量设置为全局变量，减少函数之间参数的传递。我们使用 result 来记录最后的结果，然后 ans 是回溯中的临时数组，终止条件是 ans 的长度已经达到 k，此时可以推出回溯，将 ans 的值存储到 result 中。这里要注意的是不要简单的将 ans 添加到 result 数组中，而是应该新建一个数组，将 ans 的值赋予新建的数组，不然传入的是 ans 的指针，result 的结果就一直是 ans 的重复出现，这个 bug 还困扰了我很长时间。如果还没有到终止条件则根据新的范围继续遍历，记得回溯完成后要删除节点，不要影响下一次的回溯。还有一个优化的点是进行剪枝，当剩下的数字加上 ans 数组当前长度仍小于 k 的情况，说明已经无法满足了，就应该及时停止。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用全局变量减少参数传递</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k,n;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combine</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.k = k;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">        List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        backtracking(ans,<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(List&lt;Integer&gt; ans,<span class=\"type\">int</span> start)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans.size() == k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//传入的应该是一个新的list，不然会传递引用会一起改变</span></span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;(ans));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans.size()+n-start+<span class=\"number\">1</span>&lt;k)&#123;<span class=\"comment\">//这里可以直接写在for循环的终止条件处</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=start;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            ans.add(i);</span><br><span class=\"line\">            backtracking(ans,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"216组合总和-iii\"><a class=\"markdownIt-Anchor\" href=\"#216组合总和-iii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/combination-sum-iii/\" >216. 组合总和 III <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：全局变量、回溯、组合问题、前缀和</strong></p>\n<p>和上一题的思考方向类似，将终止条件设置为前缀和等于 n 且元素个数等于 k。由于已经将不变量设置为全局变量，因此我们只需传入开始的数字和前缀和，因为前缀和可以减少很多不必要的计算，加快运算速度。另外在回溯函数传入参数的时候对 Integer 型元素进行值修改可以省去回溯一步，因为当函数返回的时候值没有变化。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k,n;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum3</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.k = k;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">        backtracking(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> start,<span class=\"type\">int</span> count)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count == n &amp;&amp; ans.size() == k)&#123;</span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;(ans));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=start;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            ans.add(i);</span><br><span class=\"line\">            backtracking(i+<span class=\"number\">1</span>,count+i);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"17电话号码的字母组合\"><a class=\"markdownIt-Anchor\" href=\"#17电话号码的字母组合\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/\" >17. 电话号码的字母组合 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：哈希表、回溯、全局变量、初始化 List、组合问题</strong></p>\n<p>这题相对上面的题目，多了一层的映射关系，我们需要一个哈希表来建立数字和字符数组之间的关系，其余和常规的组合问题没什么区别。我们设置终止条件为遍历完所有的数字，此时将生成字符串并加入到结果数组中。否则一层层的遍历数字字符串，进行回溯生成。另外一个小知识是使用 <code>Arrays.asList()</code>  快速的初始化 list，不用一个个的进行赋值。</p>\n<p>在哈希表的部分可以自己使用数组和索引的对应关系也可以，还有可以值不使用字符数组，而是使用字符串，然后使用字符串函数同样可以达到这个效果。Java9 里面可以使用 <code>Map.of()</code>  进行哈希表的初始化。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    String digits;</span><br><span class=\"line\">    HashMap&lt;Character,List&lt;String&gt;&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    List&lt;String&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCombinations</span><span class=\"params\">(String digits)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.digits = digits;</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>));</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;d&quot;</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"string\">&quot;f&quot;</span>)));</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;g&quot;</span>,<span class=\"string\">&quot;h&quot;</span>,<span class=\"string\">&quot;i&quot;</span>)));</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;j&quot;</span>,<span class=\"string\">&quot;k&quot;</span>,<span class=\"string\">&quot;l&quot;</span>)));</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;m&quot;</span>,<span class=\"string\">&quot;n&quot;</span>,<span class=\"string\">&quot;o&quot;</span>)));</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;7&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;p&quot;</span>,<span class=\"string\">&quot;q&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"string\">&quot;s&quot;</span>)));</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;8&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;t&quot;</span>,<span class=\"string\">&quot;u&quot;</span>,<span class=\"string\">&quot;v&quot;</span>)));</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;9&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;w&quot;</span>,<span class=\"string\">&quot;x&quot;</span>,<span class=\"string\">&quot;y&quot;</span>,<span class=\"string\">&quot;z&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == digits.length())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;ans.size();i++)&#123;</span><br><span class=\"line\">                temp = temp + ans.get(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result.add(temp);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> digits.charAt(index);</span><br><span class=\"line\">        List&lt;String&gt; nums = map.get(num);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            ans.add(nums.get(i));</span><br><span class=\"line\">            backtracking(index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化map的方法</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;Character, String&gt; map = Map.of(</span><br><span class=\"line\">        <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&quot;def&quot;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&quot;ghi&quot;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&quot;jkl&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&quot;mno&quot;</span>, <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&quot;pqrs&quot;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&quot;tuv&quot;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&quot;wxyz&quot;</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"39组合总和\"><a class=\"markdownIt-Anchor\" href=\"#39组合总和\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/combination-sum/\" >39. 组合总和 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：组合问题、前缀和、回溯、全局变量、递归、剪枝</strong></p>\n<p>这题和上面 216 题相当类似，只是这次允许元素重复使用，因此我们递归的的时候传入的索引应该是 index，而不是 index+1，而且回溯不能回头计算，因为这样会导致重复的查找。终止调整则是前缀和大于或等于 target 的时候就应该停止了，如果等于的话，就将将当前结果添加到 result 数组中。优化的话可以对数组进行排序，然后在 for 循环内进行剪枝判断。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> target;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] candidates;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.candidates = candidates;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index,<span class=\"type\">int</span> count)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt;= target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count == target)&#123;</span><br><span class=\"line\">                result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;(ans));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;candidates.length;i++)&#123;</span><br><span class=\"line\">            ans.add(candidates[i]);</span><br><span class=\"line\">            backtracking(i,count+candidates[i]);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"40组合总和-ii\"><a class=\"markdownIt-Anchor\" href=\"#40组合总和-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/combination-sum-ii/\" >40. 组合总和 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、组合问题、剪枝、无法解决、前缀和、全局变量、去重</strong></p>\n<p>本题的难点在于有重复的元素，但要求返回的结果中不包含重复的组会，这就要求我们进行去重。原本我的想法是使用集合存储结果来进行去重，但是存在超时的问题。然后我又尝试在回溯的过程中进行剪枝，但是结果都不太理想，要不就是想要去重的地方没有正确去重，要不就是把正确的结果也给去掉。正如书上所说：“使用过” 在树形结构中是有两个维度的，一个维度是同一树枝上使用过，另一个维度是在同一个树层使用过。在题目的要求中，元素在同一个组合内是可以重复的，但两个组合不能相同。因此我们要去重的事同一树层上使用过的元素，同一树枝上的元素是一个组合里的，不用去重。本书提出了一个更好理解的思路，就是使用 used 数组，如果 <code>candidates[i]==candidates[i-1]&amp;&amp;used[i-1]==false</code> ，则说明前一个树枝使用了 <code>candidates[i-1]</code> ，也就是说同一树层已经使用过 <code>candidates[i-1]</code> ，此时就不应该继续递归，使用 continue 返回。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> target;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] candidates;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum2</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.candidates = candidates;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">        <span class=\"comment\">//排序后可以达到去重的效果</span></span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index,<span class=\"type\">int</span> count)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt;= target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count == target)&#123;</span><br><span class=\"line\">                result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;(ans));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;candidates.length &amp;&amp; count+candidates[i]&lt;=target;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//关键的剪枝操作，对结果进行去重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; index &amp;&amp; candidates[i] == candidates[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ans.add(candidates[i]);</span><br><span class=\"line\">            backtracking(i+<span class=\"number\">1</span>,count+candidates[i]);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"131切割回文串\"><a class=\"markdownIt-Anchor\" href=\"#131切割回文串\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/palindrome-partitioning/\" >131. 切割回文串 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回文、回溯、切割问题、递归，字符串函数使用</strong></p>\n<p>由于回文串判断经常要被使用到，因此将其独立为一个函数。这道题目是切割问题，我们可以这样进行遍历，从当前位置开始，新切割出的子串的位置逐渐后移，并判断新切割出的字符是否是回文串，如果是则继续递归，不是则进行剪枝操作。由于在递归前已经进行剪枝操作，因此 ans 数组中存储的一定都是回文串，我们只需将终止条件设置为当前位置已经到达字符串末尾即可。在这些操作中我们都是通过索引，而不是传入子串进行处理，这样能够提高运行速度。而对字符串进行切割可以使用 <code>substring(start,end)</code>  函数，注意是左闭右开的区间，因此右边索引的位置要加一。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    String s;</span><br><span class=\"line\">    List&lt;List&lt;String&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class=\"line\">    List&lt;String&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\"title function_\">partition</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.s = s;</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//终止条件为切割到字符串结尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == s.length())&#123;</span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(ans));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index+<span class=\"number\">1</span>;i&lt;=s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//剪枝操作，只有在当前切割出的字符串为回文串才继续进行递归操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isHui(index,i))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//左闭右开区间，调用函数对字符串进行切割</span></span><br><span class=\"line\">            ans.add(s.substring(index,i));</span><br><span class=\"line\">            backtracking(i);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//左闭右开，回文串判断比较频繁，因此独立为一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHui</span><span class=\"params\">(<span class=\"type\">int</span> start,<span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">        end = end-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start&lt;end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(start)!=s.charAt(end))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"93复原ip地址\"><a class=\"markdownIt-Anchor\" href=\"#93复原ip地址\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/restore-ip-addresses/\" >93. 复原 IP 地址 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、全局变量、字符串比较、字符串和 int 转换、剪枝、切割问题</strong></p>\n<p>由于判断子串是否合法的操作比较繁琐，因此将其独立处理，首先判断元素首位是否为 0，此时使用 String 的函数 <code>compareTo()</code> ，注意返回的是 int 型，而不是 boolean 型。如果为 0，则继续判断是首位 0，还是单一 0。解决了子串是否合法的问题后就可以正式进入回溯函数的编写，同样是利用索引来进行切割，由于整数大小最大为 3 为，因此切割的大小最大为 3，所以在 for 循环中添加限制。然后进行剪枝操作，遇到 ans 已满、新切割的子串不符合要求和不能切割全部字符串这三种情况进行剪枝。因为已经进行了剪枝，所以我们的终止条件只需要要求索引以切割到字符串末尾和切割出的整数数目为 4 即可。</p>\n<p>或者遇到 0 也有其他的处理方法，因为不能有前导 0，因此当我们遇到 0 的时候只能将 0 作为一部分，而不再需要和后面的数字进行结合，这样判断起来就方便了很多，实际上就是对遇到 0 这种情况单独处理。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    String s;</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">    List&lt;String&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">restoreIpAddresses</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.s = s;</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == s.length() &amp;&amp; ans.size()==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">sPath</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">                sPath = sPath + ans.get(i) + <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sPath = sPath + ans.get(<span class=\"number\">3</span>);</span><br><span class=\"line\">            result.add(sPath);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为子串大小最大为3，因此添加限制</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index+<span class=\"number\">1</span>;i&lt;=s.length() &amp;&amp; i&lt;=index+<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//剪枝操作，遇到ans已满、新切割的子串不符合要求和剩下仍不能切割全部字符串这三种情况进行剪枝</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans.size()&gt;=<span class=\"number\">4</span> || !isTrue(index,i) || i+(<span class=\"number\">4</span>-ans.size())*<span class=\"number\">3</span>&lt;s.length())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;          </span><br><span class=\"line\">            </span><br><span class=\"line\">            ans.add(s.substring(index,i));</span><br><span class=\"line\">            backtracking(i);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTrue</span><span class=\"params\">(<span class=\"type\">int</span> start,<span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> s.substring(start,end);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">first</span> <span class=\"operator\">=</span> s.substring(start,start+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断首位元素是否为0，如果为0则判断是单一0，还是首位0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(first.compareTo(<span class=\"string\">&quot;0&quot;</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(end-start&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//转为int型比较好判断</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(temp);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">0</span> &amp;&amp; num&lt;<span class=\"number\">256</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"73子集\"><a class=\"markdownIt-Anchor\" href=\"#73子集\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/subsets/\" >73. 子集 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：集合问题、回溯、全局变量</strong></p>\n<p>这题也是典型的回溯问题，我么也是使用索引来限制它的访问范围，这题比较特殊的是没有终止条件，我们只需将数组加入的结果数组，进行暴力回溯即可，也无需剪枝。有人可能会觉得没有终止条件，递归要怎么停止呢？因为 for 循环里面已经包含有终止条件了，当 index 大于等于数组长度的时候就不会进入 for 循环内，因此不会启动下一次的递归，递归也就能正常结束了。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span>[] nums;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nums = nums;</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(ans));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            ans.add(nums[i]);</span><br><span class=\"line\">            backtracking(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"90子集-ii\"><a class=\"markdownIt-Anchor\" href=\"#90子集-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/subsets-ii/\" >90. 子集 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、去重、集合问题、递归</strong></p>\n<p>这题总体上参考 73 题子集，然后使用 40 题的去重操作结合起来就得到了答案。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] nums;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsetsWithDup</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nums = nums;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(ans));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//剪枝操作，去重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;index &amp;&amp; nums[i]==nums[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.add(nums[i]);</span><br><span class=\"line\">            backtracking(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//采用used数组标记的方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] nums;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] used;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsetsWithDup</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nums = nums;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        used = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[nums.length];</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(ans));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; nums[i]==nums[i-<span class=\"number\">1</span>] &amp;&amp; used[i-<span class=\"number\">1</span>]==<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.add(nums[i]);</span><br><span class=\"line\">            used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            backtracking(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"491递增子序列\"><a class=\"markdownIt-Anchor\" href=\"#491递增子序列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/non-decreasing-subsequences/\" >491. 递增子序列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、去重、哈希表、全局变量</strong></p>\n<p>这题也是需要去重，但是不能使用上一题的方法进行去重，因为上一题是先进行排序过后的，因此相同的元素是相邻的，而这一题不同，它要求保持原有的顺序，因此不能使用排序的方法。既然上一题的方法不能实现，我们就采用最容易想到的集合去重法，将结果加入到集合中，最后再将集合内的元素赋给列表。这题的终止条件也是在 for 循环内，只要 ans 列表的大小大于 2，我们就可以将其加入到列表内。然后剪枝操作是当前元素和 ans 列表的最后一个元素比较，注意在比较之前要保证 ans 列表非空。</p>\n<p>优化版本是使用哈希表记录已经用过的元素，在这一层就不能再使用了。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] nums;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    Set&lt;List&lt;Integer&gt;&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">findSubsequences</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nums = nums;</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;Integer&gt; i:set)&#123;</span><br><span class=\"line\">            result.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans.size()&gt;=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(ans));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans.size()&gt;<span class=\"number\">0</span> &amp;&amp; ans.get(ans.size()-<span class=\"number\">1</span>)&gt;nums[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.add(nums[i]);</span><br><span class=\"line\">            backtracking(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化版本</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//结果集合</span></span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//路径集合</span></span><br><span class=\"line\">    LinkedList&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">findSubsequences</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        getSubsequences(nums,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getSubsequences</span><span class=\"params\">( <span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> start )</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(path.size()&gt;<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            res.add( <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path) );</span><br><span class=\"line\">            <span class=\"comment\">// 注意这里不要加return，要取树上的节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//由于HashMap是局部变量，因此不用回溯</span></span><br><span class=\"line\">        HashMap&lt;Integer,Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=start ;i &lt; nums.length ;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!path.isEmpty() &amp;&amp; nums[i]&lt; path.getLast())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 本层是否已经使用过了当前数字</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( map.getOrDefault( nums[i],<span class=\"number\">0</span> ) &gt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 对本层的已用数字进行计数</span></span><br><span class=\"line\">            map.put(nums[i],map.getOrDefault(nums[i],<span class=\"number\">0</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">            path.add(nums[i]);</span><br><span class=\"line\">            getSubsequences( nums,i+<span class=\"number\">1</span> );</span><br><span class=\"line\">            path.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"46全排列\"><a class=\"markdownIt-Anchor\" href=\"#46全排列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/permutations/\" >46. 全排列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、排列问题、访问标志</strong></p>\n<p>这题虽然大框架上和上面的题目一样，但是不同的时，上面的都是通过索引来进行切割，进行下一次的递归操作，而这题显然不可以，因为这题是排列问题，顺序不同也是不同。因此我们改用访问数组 used，每次都将 nums 遍历一遍，遇到已经访问过的元素就退出本次访问，转而访问其他的元素。回溯的时候也除了需要将 ans 数组的元素弹出，还需要将访问数组的对应位置设置为 false。终止条件就是 ans 的长度等于 nums 的长度，此时已经访问完全部的元素。此外就是 boolean 数组初始化默认都是 false。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] nums;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] used;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nums = nums;</span><br><span class=\"line\">        used = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[nums.length];</span><br><span class=\"line\">        backtracking();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans.size()==nums.length)&#123;</span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(ans));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            ans.add(nums[i]);</span><br><span class=\"line\">            backtracking();</span><br><span class=\"line\">            used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"47全排列-ii\"><a class=\"markdownIt-Anchor\" href=\"#47全排列-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/permutations-ii/\" >47. 全排列 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、去重、哈希表、局部变量与全局变量</strong></p>\n<p>这题的总体框架是 46 题的全排列，然后去重操作是是 491 题递增子序列的哈希表去重方式。这题与 47 题最大的不同就在于有重复的元素，要求我们进行去重。一旦涉及到去重，我们首先要搞明白的是对树枝去重，还是对树层去重，此题是对树层进行去重。树层去重有三个方法，一个是使用集合无脑去重，有超时的风险；一个是通过排序 + 标记的方式，如果前一个元素与自己相等，且该元素此时没有被访问，说明是同层元素，则进行去重；一个是使用哈希表记录本层当前数值已经被使用的次数，如果大于 1，则说明同层已经有重复元素了，要进行去重。通过分析问题，我们最终采用了第三种方式。实际上第二种方法可能效率更好一点。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] nums;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] used;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permuteUnique</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nums = nums;</span><br><span class=\"line\">        used = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[nums.length];</span><br><span class=\"line\">        backtracking();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans.size()==nums.length)&#123;</span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(ans));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//由于HashMap是局部变量，因此不用回溯</span></span><br><span class=\"line\">        HashMap&lt;Integer,Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 本层是否已经使用过了当前数字</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( map.getOrDefault( nums[i],<span class=\"number\">0</span> ) &gt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 对本层的已用数字进行计数</span></span><br><span class=\"line\">            map.put(nums[i],map.getOrDefault(nums[i],<span class=\"number\">0</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">            used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            ans.add(nums[i]);</span><br><span class=\"line\">            backtracking();</span><br><span class=\"line\">            used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"51n皇后\"><a class=\"markdownIt-Anchor\" href=\"#51n皇后\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/n-queens/\" >51.N 皇后 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：回溯、子函数、递归、字符串拼接、数组赋初值</strong></p>\n<p>这是我解决的第一道回溯的困难题，也是一题很经典的回溯算法。没有想象中的困难，按照模板的思路和画出递归的树形结构，问题变得简单了不少。我的思路是从第一行到最后一行进行递归，这样就能保证每行只有一个元素。终止条件是到达最后一行，此时将结果存储到 result 数组中。否则进行横向的遍历，如果出现了同列或者同一斜线的元素就结束，进行下一次循环。否则就进入下一层的递归。由于同一斜线的判断太麻烦，就独立为一个函数，专门检验新的点是否符合条件。遇到困难题不用慌，还是按照模板来进行思考就好。另外使用 <code>Arrays.fill(chessboard,-1);</code>  可以为数组赋初值。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;String&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class=\"line\">    List&lt;String&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//used[i]表示第i列已经被访问</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> used[][];</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> tip;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\"title function_\">solveNQueens</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">        used = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[n][n];</span><br><span class=\"line\">        backtracking(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans.size() == n)&#123;</span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(ans));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//由于是按行继续递归的，因此不用担心行中有重复元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isValid(index,i))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//拼接出对应的字符串</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">sPath</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                sPath += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sPath += <span class=\"string\">&quot;Q&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                sPath += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//进行递归和回溯操作</span></span><br><span class=\"line\">            ans.add(sPath);</span><br><span class=\"line\">            used[index][i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            backtracking(index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            ans.remove(ans.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">            used[index][i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//检测该点是否符合是否能够加入</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//检测同列是否已有元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i][y])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//检测斜线上是否有元素</span></span><br><span class=\"line\">        <span class=\"comment\">//左上角</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=x,j=y;i&gt;=<span class=\"number\">0</span> &amp;&amp; j&gt;=<span class=\"number\">0</span>;i--,j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i][j])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//右下角</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=x,j=y;i&lt;n &amp;&amp; j&lt;n;i++,j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i][j])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//左下角</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=x,j=y;i&lt;n &amp;&amp; j&gt;=<span class=\"number\">0</span>;i++,j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i][j])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//右上角</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=x,j=y;i&gt;=<span class=\"number\">0</span> &amp;&amp; j&lt;n;i--,j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i][j])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另外的写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;String&gt;&gt; ans=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    List&lt;String&gt; path=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span>[] chessboard;<span class=\"comment\">//存储第i行皇后在第几列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\"title function_\">solveNQueens</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        chessboard=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        Arrays.fill(chessboard,-<span class=\"number\">1</span>);</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>,n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> row,<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断目前棋盘是否满足要求</span></span><br><span class=\"line\">        <span class=\"comment\">//现在要放入第row行的皇后，所以判断第row-1行皇后是否满足要求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isValid(row-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row==n)&#123;</span><br><span class=\"line\">            ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//做选择</span></span><br><span class=\"line\">            StringBuilder str=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                str.append(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str.append(<span class=\"string\">&#x27;Q&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                str.append(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            path.add(str.toString());</span><br><span class=\"line\">            chessboard[row]=i;</span><br><span class=\"line\">            <span class=\"comment\">//进入下一层决策</span></span><br><span class=\"line\">            dfs(row+<span class=\"number\">1</span>,n);</span><br><span class=\"line\">            <span class=\"comment\">//恢复现场</span></span><br><span class=\"line\">            path.remove(path.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">            chessboard[row]=-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(<span class=\"type\">int</span> row)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row&lt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> col=chessboard[row];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;row;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//同一列有皇后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(chessboard[i]==col)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// “/”方向有皇后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(chessboard[i]+i==row+col)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// “\\”方向有皇后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(chessboard[i]-i==col-row)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"37解数独\"><a class=\"markdownIt-Anchor\" href=\"#37解数独\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/sudoku-solver/\" >37. 解数独 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：无法解决、二维递归、数学、返回值</strong></p>\n<p>这题总体思想上和上面的题目是一样的，但是在细节上就有很多差异了。首先这题不好设置终止条件，因为它原本的位置上有数，很难确定什么时候才把数独填满。至于二维递归方面我也想到了，因为一维肯定无法解决该问题，但是就卡在如何设置终止条件进行返回呢？实际上这个技巧在二叉树上被广泛应用，就是通过返回布尔值来获取符合条件的树枝。然后判断是否在小区域的方法也很巧妙，先除以 3，再乘以 3，这样就可以获取小区域的左上角的坐标了。本来以为回溯已经学的不错了，但是题外有题，还是要虚心学习才是正确的，而且模板虽好，但还是要保持一个开放的头脑，将各个模块的知识融会贯通。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>[][] board;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solveSudoku</span><span class=\"params\">(<span class=\"type\">char</span>[][] board)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.board = board;</span><br><span class=\"line\">        backtracking();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//x是插入位置的横坐标，y是插入位置的纵坐标，num是要插入的值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">backtracking</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x=<span class=\"number\">0</span>;x&lt;<span class=\"number\">9</span>;x++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> y=<span class=\"number\">0</span>;y&lt;<span class=\"number\">9</span>;y++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[x][y] != <span class=\"string\">&#x27;.&#x27;</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">char</span> num=<span class=\"string\">&#x27;1&#x27;</span>;num&lt;=<span class=\"string\">&#x27;9&#x27;</span>;num++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(isValid(x,y,num))&#123;</span><br><span class=\"line\">                        board[x][y] = num;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(backtracking())&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        board[x][y] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">                    &#125;                 </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">char</span> num)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(board[x][i] == num || board[i][y] == num)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过先除以3，再乘以3的操作回去小区域内的开始位置号巧妙</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">startRow</span> <span class=\"operator\">=</span> (x/<span class=\"number\">3</span>)*<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">startCol</span> <span class=\"operator\">=</span> (y/<span class=\"number\">3</span>)*<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=startRow;i&lt;startRow+<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=startCol;j&lt;startCol+<span class=\"number\">3</span>;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[i][j] == num)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第八章-贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#第八章-贪心算法\">#</a> 第八章 贪心算法</h1>\n<p>在学习贪心算法的过程中，手动模拟解题过程之后，如果感觉可以通过局部最优解推出全局最优，而且想不到反例，那么就试一下贪心算法。</p>\n<h2 id=\"455分发饼干\"><a class=\"markdownIt-Anchor\" href=\"#455分发饼干\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/assign-cookies/\" >455. 分发饼干 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、双指针、排序</strong></p>\n<p>这题的贪心策略是依次将小的饼干优先给胃口最小的小朋友，因为我们需要先见两个数组进行排序，然后用双指针分别指示当前等待派发的小朋友和饼干，如果饼干满足小朋友要求则同时移动到下一个，计数器加一，如果不满足要求，则小朋友继续等待，换一个更大的饼干。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findContentChildren</span><span class=\"params\">(<span class=\"type\">int</span>[] g, <span class=\"type\">int</span>[] s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>,count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        Arrays.sort(g);</span><br><span class=\"line\">        Arrays.sort(s);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;g.length &amp;&amp; j&lt;s.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g[i]&lt;=s[j])&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"376摆动序列\"><a class=\"markdownIt-Anchor\" href=\"#376摆动序列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/wiggle-subsequence/\" >376. 摆动序列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：无法解决、贪心算法、数学、边界处理、动态规划</strong></p>\n<p>这题的贪心策略可以转化为求取峰值的数目，然后注意平坡的情况，在遇到峰值的时候才进行 pre 的变换。或者我们可以通过动态规划的转移来推导出贪心算法，由于至于前一个状态相关，因此只需保存一个值即可。本来我已经想到这个方向了，但是推导了一下感觉有不可行，总觉得会有中间节点影响，不能简单的判断相邻的元素，但是也找不到反例，早知道这样算了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"1b87dee143e0e43e987f8da999b2a2aa.png\"\n                      alt=\"image.png.png\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">wiggleMaxLength</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">1</span>,pre=<span class=\"number\">0</span>,cur=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            cur = nums[i] - nums[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">//遇到峰值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((cur&gt;<span class=\"number\">0</span> &amp;&amp; pre&lt;=<span class=\"number\">0</span>) || (cur&lt;<span class=\"number\">0</span> &amp;&amp; pre&gt;=<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">                ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">                pre = cur;<span class=\"comment\">//为什么不放在if外</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更好理解的版本</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">wiggleMaxLength</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">up</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                up = down + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &lt; nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                down = up + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(up, down);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"53最大子数组和\"><a class=\"markdownIt-Anchor\" href=\"#53最大子数组和\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/maximum-subarray/\" >53. 最大子数组和 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、状态转移</strong></p>\n<p>这题的贪心就在于将当前遍历的值和之前形成的子数组和加上当前遍历的值的和相比，哪个大就取哪个。然后使用 ans 来记录出现过的最大子数组和。这个贪心策略就在于状态的转移，如果之前的子数组和是正向的，就将他和当前值相加，因为子数组要求是连续的，如果是负担，那么就直接取当前值作为起点，重启子数组的求和。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> count;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> count + nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp&lt;nums[i])&#123;</span><br><span class=\"line\">                count = nums[i];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                count = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count&gt;ans)&#123;</span><br><span class=\"line\">                ans = count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"122买卖股票的最佳时机-ii\"><a class=\"markdownIt-Anchor\" href=\"#122买卖股票的最佳时机-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/\" >122. 买卖股票的最佳时机 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法</strong></p>\n<p>这题的贪心策略是比较相邻两日的价格差距，如果差距大于 0 则昨日买入今天卖出，然后将利润加到 ans 中，遍历一遍后即可获得最大利润。这题的关键就在于利润的分解，我们不需要将股票等到股价的极大值点处卖出，只要每天执行都买卖一次即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> prices[i]-prices[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                ans+=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"55跳跃游戏\"><a class=\"markdownIt-Anchor\" href=\"#55跳跃游戏\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/jump-game/\" >55. 跳跃游戏 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法</strong></p>\n<p>我们对数组进行进行遍历，但是加上一个现在条件，就是不能越过 max 值，max 值又当前能跳到的最大距离决定，每次遍历都会进行比较，记录最大能跳到的距离，如果 max 到达最后一个坐标就返回 true，如果遍历完仍未到达则返回 false。这题的关键点在于不用管怎么跳的，只要覆盖范围大于最后一个数组下标就一定能到达。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canJump</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.length &amp;&amp; i&lt;=max;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> i+nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index&gt;max)&#123;</span><br><span class=\"line\">                max = index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(max&gt;=nums.length-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"45跳跃游戏-ii\"><a class=\"markdownIt-Anchor\" href=\"#45跳跃游戏-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/jump-game-ii/\" >45. 跳跃游戏 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、动态规划</strong></p>\n<p>这题要求的是求取最小长度，我们无法简单的使用贪心算法进行解决，因为可能局部最优的选择未必能够达到终点。因此我加上了一个数组来记录跳到该位置的最少次数，然后进行遍历，用当前值去更新它所能够跳到的节点的最小次数的值，最后返回结果即可。</p>\n<p>另一种贪心思路是记录当前覆盖的范围和下一步能最大覆盖的范围，然后如果下一步能够到达终点就直接计数加一后返回，否则遍历完当前覆盖的范围后，计数器加一，如果将下一步能覆盖的最大范围赋值到当前覆盖的范围，开启下一轮的寻找。这题的关键仍然是覆盖，不要纠结是哪一步走的，我们只需要知道每一步能够覆盖到的最大范围。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">jump</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> nums[i]+i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=step &amp;&amp; j&lt;nums.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(count[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    count[j] = count[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(count[i]+<span class=\"number\">1</span>&lt;count[j])&#123;</span><br><span class=\"line\">                        count[j]=count[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count[nums.length-<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另一种思路</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">jump</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"literal\">null</span> || nums.length == <span class=\"number\">0</span> || nums.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//记录跳跃的次数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当前的覆盖最大区域</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">curDistance</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//最大的覆盖区域</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxDistance</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//在可覆盖区域内更新最大的覆盖区域</span></span><br><span class=\"line\">            maxDistance = Math.max(maxDistance,i+nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">//说明当前一步，再跳一步就到达了末尾</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxDistance&gt;=nums.length-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//走到当前覆盖的最大区域时，更新下一步可达的最大区域</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i==curDistance)&#123;</span><br><span class=\"line\">                curDistance = maxDistance;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"134加油站\"><a class=\"markdownIt-Anchor\" href=\"#134加油站\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/gas-station/\" >134. 加油站 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、数学</strong></p>\n<p>首先我们可以知道如果 gas 的总和大于等于 cost 的话，那么一定存在一个起点使得车能够绕环路一周。题目指定如果有解，则解唯一，而解有什么特征呢，他肯定是 gas [i] 大于等于 cost [i]，其实因为唯一，所以应该不会是等于。然后从该点开始计算，它不会出现剩余油量小于 0 的情况，以此为依据，我们进行贪心算法，遍历 gas 和 cost 数组，每次遇到第一个 gas [i]-cost [i] 大于等于 0 的情况，就开始计算 part 部分，遇到 part 小于 0 则终止，等待开启下一次查找。</p>\n<p>优化写法则是遇到部分油量小于 0，则从前一位继续开始查找，最后满足条件的就是结果。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">canCompleteCircuit</span><span class=\"params\">(<span class=\"type\">int</span>[] gas, <span class=\"type\">int</span>[] cost)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum=<span class=\"number\">0</span>,rest=<span class=\"number\">0</span>,part=<span class=\"number\">0</span>,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> tip=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;gas.length;i++)&#123;</span><br><span class=\"line\">            rest = gas[i] - cost[i];</span><br><span class=\"line\">            sum += rest;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tip)&#123;</span><br><span class=\"line\">                part += rest;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(part&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    tip = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rest&gt;=<span class=\"number\">0</span> &amp;&amp; !tip)&#123;</span><br><span class=\"line\">                ans = i;</span><br><span class=\"line\">                tip = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                part = rest;<span class=\"comment\">//开启计数</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">canCompleteCircuit</span><span class=\"params\">(<span class=\"type\">int</span>[] gas, <span class=\"type\">int</span>[] cost)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum=<span class=\"number\">0</span>,run=<span class=\"number\">0</span>,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;gas.length;i++)&#123;</span><br><span class=\"line\">            run += (gas[i]-cost[i]);</span><br><span class=\"line\">            sum += (gas[i]-cost[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(run&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                ans = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">                run = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"135分发糖果\"><a class=\"markdownIt-Anchor\" href=\"#135分发糖果\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/candy/\" >135. 分发糖果 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、数组初始化</strong></p>\n<p>不要被困难题给吓到，此题的贪心策略并不复杂，我们使用一个数组来记录每个孩子分配到的糖果，由于每个孩子都至少分配到 1 个糖果，因此我们将数组的值初始化为 1。然后我们从左到右进行遍历，如果右侧的孩子评分比左侧孩子评分更高，我们就将右侧孩子的糖果数设置为左侧孩子的糖果数加一。那么就保证了每个孩子右侧能够符合条件。然后同理，我再从右侧向左侧遍历，但是这时要增加一个条件保证左侧孩子的糖果数不会减少。通过两侧的遍历，我们就保证了相邻两个孩子评分更高的孩子会获得更多的糖果，最后对数组求和即可。这题比较特殊就是通过两次的贪心策略来解决问题，如果在考虑局部最优的时候想要两边兼顾，就会顾此失彼。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">candy</span><span class=\"params\">(<span class=\"type\">int</span>[] ratings)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[ratings.length];</span><br><span class=\"line\">        Arrays.fill(ans,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;ratings.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ratings[i]&gt;ratings[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                ans[i] = ans[i-<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=ratings.length-<span class=\"number\">2</span>;i&gt;-<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ratings[i]&gt;ratings[i+<span class=\"number\">1</span>] &amp;&amp; ans[i]&lt;=ans[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"comment\">//ans的判断是为了保证左边孩子的糖果数不会减少</span></span><br><span class=\"line\">                ans[i] = ans[i+<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> Arrays.stream(ans).sum()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"860柠檬水找零\"><a class=\"markdownIt-Anchor\" href=\"#860柠檬水找零\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/lemonade-change/\" >860. 柠檬水找零 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、条件判断</strong></p>\n<p>这题的贪心策略比较显然，我们只要优先给大额的钞票即可，因为 5 比 10 能够应对的情况更多。由于情况比较少，只有 3 种情况，我们使用两个变量分别存储当前拥有的 5 元和 10 元的数目。我们就对三种情况进行分析，顾客给 5 元则不用找零，5 元账户加一；顾客给 10 元，我们只能找零 5 元并收入 10 元；顾客给 20 元，此时就需要贪心，如果有 10 元就给 10 元，没有就给 5 元。每次结算完都判断一下两个变量是否小于 0，小于则说明无法找零了，返回 false，否则返回 true。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">lemonadeChange</span><span class=\"params\">(<span class=\"type\">int</span>[] bills)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num5=<span class=\"number\">0</span>,num10=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : bills)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num == <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">                num5 += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                num5 -= <span class=\"number\">1</span>;</span><br><span class=\"line\">                num10 += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(num10 &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    num5 -= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    num10 -= <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    num5 -= <span class=\"number\">3</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num5&lt;<span class=\"number\">0</span> || num10&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"452用最少数量的箭引爆气球\"><a class=\"markdownIt-Anchor\" href=\"#452用最少数量的箭引爆气球\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/\" >452. 用最少数量的箭引爆气球 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、溢出、重写比较器</strong></p>\n<p>这题的贪心策略是首先按终止位置将各个气球的位置进行排序，然后在以此比较，看是否有范围重复的气球。我们记录当前气球匹配的最后位置，如果此时气球的起始位置小于等于该终止位置，则说明可以同时引爆，此时终止位置不用更新，因为可能下一个气球也可以同时加入。如果终止位置已经小于当前气球的开始位置，则说明已经没用了，则将终止位置更新为当前气球的终止位置。注意一个小细节，在进行比较器重写时，如果使用 <code>a[i]-b[i]</code>  会溢出，要使用 <code>Integer.compare(a[1],b[1])</code>  才没有问题。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMinArrowShots</span><span class=\"params\">(<span class=\"type\">int</span>[][] points)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用Integer.compare(int,int)，否则会溢出</span></span><br><span class=\"line\">        asArrays.sort(points,(a,b)-&gt;Integer.compare(a[<span class=\"number\">1</span>],b[<span class=\"number\">1</span>]));</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> points[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> points.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;points.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(points[i][<span class=\"number\">0</span>] &lt;= end)&#123;</span><br><span class=\"line\">                ans -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                end = points[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"26合并区间\"><a class=\"markdownIt-Anchor\" href=\"#26合并区间\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/merge-intervals/\" >26. 合并区间 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、边界处理、重写比较器</strong></p>\n<p>这题和上一题比较类似，只是遇到覆盖范围的处理方式不一样。我们首先按照开始位置从小到大进行排序，然后开始判断覆盖区间是否重复，如果下一个的开始位置小于等于当前结束位置，我们就选择其终止位置和当前终止位置，注意不要直接更新终止位置，因为会有 <code>[[1,4],[2,3]]</code>  这种情况。否则则说明当前区间已经和前面的区间不再重叠，此时存储前面区间的值，并开启下一轮重叠区间的寻找，记得最后还要存储最后一个区间，因为在 for 循环内并没有处理最后一个区间。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] merge(<span class=\"type\">int</span>[][] intervals) &#123;</span><br><span class=\"line\">        Arrays.sort(intervals,(a,b)-&gt;Integer.compare(a[<span class=\"number\">0</span>],b[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        <span class=\"type\">int</span> start=intervals[<span class=\"number\">0</span>][<span class=\"number\">0</span>],end=intervals[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;intervals.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">Nstart</span> <span class=\"operator\">=</span> intervals[i][<span class=\"number\">0</span>],Nend = intervals[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Nstart &lt;= end)&#123;</span><br><span class=\"line\">                end = Math.max(Nend,end);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;(Arrays.asList(start,end)));</span><br><span class=\"line\">                start = Nstart;</span><br><span class=\"line\">                end = Nend;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;(Arrays.asList(start,end)));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span>[][] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[ans.size()][<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;ans.size();i++)&#123;</span><br><span class=\"line\">            temp[i][<span class=\"number\">0</span>] = ans.get(i).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            temp[i][<span class=\"number\">1</span>] = ans.get(i).get(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"738单调递增的数字\"><a class=\"markdownIt-Anchor\" href=\"#738单调递增的数字\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/monotone-increasing-digits/\" >738. 单调递增的数字 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、数学、字符串转换、无法解决、字符相减</strong></p>\n<p>贪心算法的策略是从右向左扫描，如果遇到左边的数字大于右边的数组，则将左边的数字减一，然后将右侧的数组全部变成 9 即可。实际上思路并不算难，但是很巧妙，而且实现也不那么容易，这个使用字符直接实现就简便很多，我还将其转换为数字，还新建了一个数组来存储数据，就是这里卡住了，实际上直接使用原来的数组即可，只有更改对应位置就好，还少去了很多情况的处理。而且我的思路是从左到右扫描的，这样会导致要改变已经填写的答案，因此应该从右到左，这样就不会修改已经确定的结果，所以说细节决定成败，思路是想到了，但是没有能够实现出来。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">monotoneIncreasingDigits</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">10</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> String.valueOf(n);</span><br><span class=\"line\">        <span class=\"type\">char</span>[] arr = num.toCharArray(</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len-<span class=\"number\">2</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i]-<span class=\"string\">&#x27;0&#x27;</span> &gt; arr[i+<span class=\"number\">1</span>]-<span class=\"string\">&#x27;0&#x27;</span>)&#123;</span><br><span class=\"line\">                arr[i] = (<span class=\"type\">char</span>) (arr[i]-<span class=\"string\">&#x27;1&#x27;</span>+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;len;j++)&#123;</span><br><span class=\"line\">                    arr[j] = <span class=\"string\">&#x27;9&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.parseInt(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第九章-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#第九章-动态规划\">#</a> 第九章 动态规划</h1>\n<h2 id=\"动态规划五部曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五部曲\">#</a> 动态规划五部曲</h2>\n<ol>\n<li>确定 dp 数组及下标的含义。</li>\n<li>确定递推公式。</li>\n<li>初始化 dp 数组。</li>\n<li>确定遍历顺序。</li>\n<li>举例推导 dp 数组。</li>\n</ol>\n<h2 id=\"509斐波那契数\"><a class=\"markdownIt-Anchor\" href=\"#509斐波那契数\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/fibonacci-number/\" >509. 斐波那契数 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、边界处理</strong></p>\n<p>我们只要遍历 n 然后生成数即可，由于下一个值只与前两位的值有关，所以我们可以省略 dp 数组，直接使用两个变量存储值即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=<span class=\"number\">0</span>,b=<span class=\"number\">1</span>,temp=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">2</span>)&#123; <span class=\"keyword\">return</span> n;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            temp = a+b;</span><br><span class=\"line\">            a = b;</span><br><span class=\"line\">            b = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"70爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#70爬楼梯\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/climbing-stairs/\" >70. 爬楼梯 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、边界处理</strong></p>\n<p>这题实际上也是斐波那契数的变种，第 n 阶楼梯是由第 n-1 阶楼梯走 1 步和第 n-2 阶楼梯走 2 步得到的。我们只需修改上一题的初值即可解决该题。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">1</span>,temp=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">2</span>)&#123; <span class=\"keyword\">return</span> n;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            temp = a+b;</span><br><span class=\"line\">            a = b;</span><br><span class=\"line\">            b = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"746使用最小花费爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#746使用最小花费爬楼梯\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/\" >746. 使用最小花费爬楼梯 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、边界处理</strong></p>\n<p>和上一题一样，第 n 阶楼梯是由第 n-1 阶楼梯走 1 步和第 n-2 阶楼梯走 2 步得到的，只是这题增加了花费的概念。我们使用 dp 数组来记录每一步的花费，可以推导出这样递归公式 <code>dp[n+2] = Math.min(dp.get(i)+cost[i],dp.get(i+1)+cost[i+1])</code> ，确定好递归公式后，我们就需要为 dp 数组设定初值，由于可以选择在 0 或 1 的台阶开始，因此他们的初值为 0，根据递归公式我么也可以知道应该从左到右进行遍历。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minCostClimbingStairs</span><span class=\"params\">(<span class=\"type\">int</span>[] cost)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; dp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        dp.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dp.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cost.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            dp.add(Math.min(dp.get(i)+cost[i],dp.get(i+<span class=\"number\">1</span>)+cost[i+<span class=\"number\">1</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp.get(dp.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"62不同路径\"><a class=\"markdownIt-Anchor\" href=\"#62不同路径\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/unique-paths/\" >62. 不同路径 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、二维 dp 数组、边界处理、数学</strong></p>\n<p>由于机器人每次只能向下移动或者向右移动一步，那么 <code>dp[i][j]</code>  的值就是左边的路线和加上上面的路线和，递推公式为 <code>dp[i][j] = dp[i][j-1]+dp[i-1][j];</code> 。显然最上面和最左边的会产生越界错误，我们需要为其赋初值，由于限制条件，因此初值为 1。最后只需返回右下角的值即为不同路径的总数。或者使用高中数学的数论基础知识解决，机器人一定会走 m+n-2 步，即从 m+n-2 中挑出 m-1 步向下走不就行了吗？即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>C</mi><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>2</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">C^{m-1}_{m+n-2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1789em;vertical-align:-0.3246em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8542em;\"><span style=\"top:-2.4337em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3246em;\"><span></span></span></span></span></span></span></span></span></span>。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i][j-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"63不同路径-ii\"><a class=\"markdownIt-Anchor\" href=\"#63不同路径-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/unique-paths-ii/\" >63. 不同路径 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、二维 dp 数组、边界处理</strong></p>\n<p>这题和上一题的基本思路一样，只是多了障碍物，我们只需要在上一题的基础上增加对障碍物的处理即可。首先障碍物会影响我们对最上面和最左边的初始化，我们一旦遇到障碍物，就停止为后面的位置赋值为 1，因为唯一的路径都已经被障碍物堵住了。还有在动态规划的过程中对障碍物进行处理，遇到障碍物则将该处的路径值设置为 0，其余内容与上一题一样。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"type\">int</span>[][] obstacleGrid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> obstacleGrid.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> obstacleGrid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//遇到障碍物则后面的值都为0了</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;n &amp;&amp; obstacleGrid[<span class=\"number\">0</span>][i]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;m &amp;&amp; obstacleGrid[i][<span class=\"number\">0</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(obstacleGrid[i][j] == <span class=\"number\">0</span>) dp[i][j] = dp[i][j-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"343整数拆分\"><a class=\"markdownIt-Anchor\" href=\"#343整数拆分\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/integer-break/\" >343. 整数拆分 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、边界处理、数学</strong></p>\n<p>动态规划的 dp 数组记录拆分的乘积的最大值，我们可以遍历 n 的每个拆分，每次拆分都是拆成两个数。我们可以这样思考，例如 3，可以拆分为 1 和 2，也可以拆分为 1 和对 2 进行进行拆分，这样我们就推导出递推公式为 <code>temp = Math.max(j*(i-j),j*dp[i-j]);</code> 。由于这种拆分是遍历的，并从中选取最大值，因此 dp [i] 会比较递归中产生的值，选取其中最大的。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">integerBreak</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;n+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> Math.max(j*(i-j),j*dp[i-j]);</span><br><span class=\"line\">                dp[i] = Math.max(temp,dp[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"96不同的二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#96不同的二叉搜索树\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/unique-binary-search-trees/\" >96. 不同的二叉搜索树 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、数学、二叉树</strong></p>\n<p>我们可以这样分解问题，将二叉树分为两边，左边可能出现的二叉树种类 * 右边可能出现二叉树的种类相乘可以得到当前这棵二叉树可能的种类。以 3 个节点的情况为例子，因为要留一个节点作为根结点，左右总共可分配的节点数为 2，我们可以左 0 右 2、左 1 右 1、左 2 右 0 三种情况，我们只要将其求和即可得到 3 个节点时候的不同二叉树的数目。因此我们可以使用 dp 数组记录每个节点数目下，不同的二叉树数目有多少种，然后遍历即可得到答案。初始化的话就是将节点为 0 时值为 1，节点为 1 时值也为 1。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numTrees</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                count += (dp[j]*dp[i-j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[i] = count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"一维滚动数组\"><a class=\"markdownIt-Anchor\" href=\"#一维滚动数组\">#</a> 一维滚动数组</h2>\n<p>对于 0-1 背包问题，dp 数组的状态是可以压缩的。在使用二维数组的时候，递推公式为 <code>dp[i][j] = max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i]</code> 。如果把 <code>dp[i-1]</code>  的那层数据复制到 <code>dp[i]</code>  上，那么递推公式可以是 <code>dp[i][j] = max(dp[i][j],dp[i-1][j-weight[i]]+value[i]</code> 。与其复制数值，不如只使用 <code>dp[i]</code> 。这就是滚动数组的由来，需要满足的条件是上一层的数据可以重复利用，可以直接复制到当前层。</p>\n<p>二维 dp 数组中遍历背包的时候，背包容量是从小到大遍历的，而一维 dp 数组遍历背包的时候，背包容量是从大到到小的遍历。倒序遍历是保证物品 i 只被放入一次背包，如果使用正序遍历，那么物品 0 就会被重复加入多次。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一维dp数组的遍历顺序</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;weight.length;i++)&#123;<span class=\"comment\">//遍历物品</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=bagWeight;j&gt;=weight[i];j--)<span class=\"comment\">//遍历背包容量，从大到小</span></span><br><span class=\"line\">        dp[j] = Math.max(dp[j],dp[j-weight[i]]+value[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"416分割等和子集\"><a class=\"markdownIt-Anchor\" href=\"#416分割等和子集\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/partition-equal-subset-sum/\" >416. 分割等和子集 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：01 背包问题、动态规划、数学</strong></p>\n<p>首先一个数组如果能够分隔成两个和相同的子集，它数组的和应该为偶数，不然不可能分隔成两个相等的子集。如果是偶数，那么和的一半应该就是单个子集的和，而且我们可以知道如果我们能够找到一个子集的和为单个子集和，另一个子集就是剩下的元素。因此我们的任务就是在数组和为偶数的情况下，找到一个子集的和等于数组和的一半。我们使用以后数组记录子集和是否存在，遍历所有的元素，看是否能生成新的子集和，如果能生成我们想要的子集和，那么就返回 true，如果没有的话就返回 false。不知为啥我感觉这题不像是动态规划，更像是前面做过的覆盖范围问题，不断的进行覆盖，看是否能覆盖到最后的值。如果要想改成动态规划只需将循环内的代码换成 <code>dp[j] = max(dp[i].dp[j-nums[i]]+nums[i]</code> ，这里对 dp 数组的思路不同，动态规划的 dp [i] 表示容量为 j 的背包所能凑到的最大和，当然不会超过它，只要最后的最大和是相等的就找到该子集的和为目标所求。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canPartition</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> Arrays.stream(nums).sum();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum%<span class=\"number\">2</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> sum/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] bag = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[size+<span class=\"number\">1</span>];</span><br><span class=\"line\">        bag[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=size;j&gt;=num;j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bag[j-num]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    bag[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bag[size]==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"494目标和\"><a class=\"markdownIt-Anchor\" href=\"#494目标和\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/target-sum/\" >494. 目标和 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：无法解决、数学、动态规划、边界处理</strong></p>\n<p>这题和以外的背包问题的差异就在于出现了负数子集，不再是只是正价值的，每次处理数都有两种可能。递推公式并不复杂，为 <code>dp[i][j] = dp[i-1][j+nums[i]]+dp[i-1][j-nums[i]];</code> ，由前后两个来决定。这样虽然比较容易想到，但是处理起来却很复杂，各种边界情况都要仔细处理，最终由于畏难情绪，没有能够解决该问题，还是很可惜的。另外一种就实现起来比较简单，但是推导需要比较巧妙的思路。我们可以把取正的作为一个子集，子集和为 pos，取负的作为一个子集，和为 neg，数组总和为 sum，我们可以推导出两个公式：neg+pos=sum 和 pos-neg=target。综合两个式子可以得到 pos=(target+sum)/2，这样我们就将问题转换为装满容量为 pos 的背包有几种方法。递推公式为 <code>dp[j]+=dp[j-nums[i]]</code> ，这个公式在组合类问题中经常使用，需要记住。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findTargetSumWays</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> Arrays.stream(nums).sum();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Math.abs(target) &gt; sum) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums.length][sum*<span class=\"number\">2</span>+<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][sum+nums[<span class=\"number\">0</span>]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][sum-nums[<span class=\"number\">0</span>]] += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> -sum;j&lt;=sum;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((j+nums[i]) &gt; sum)&#123;</span><br><span class=\"line\">                    dp[i][j+sum] = dp[i-<span class=\"number\">1</span>][j-nums[i]+sum];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((j-nums[i]) &lt; -sum)&#123;</span><br><span class=\"line\">                    dp[i][j+sum] = dp[i-<span class=\"number\">1</span>][j+nums[i]+sum];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j+sum] = dp[i-<span class=\"number\">1</span>][j+nums[i]+sum]+dp[i-<span class=\"number\">1</span>][j-nums[i]+sum];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[nums.length-<span class=\"number\">1</span>][sum+target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优化版本</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findTargetSumWays</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> Arrays.stream(nums).sum();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">diff</span> <span class=\"operator\">=</span> sum - target;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">0</span> || diff % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">neg</span> <span class=\"operator\">=</span> diff / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[neg + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> neg; j &gt;= num; j--) &#123;</span><br><span class=\"line\">                dp[j] += dp[j - num];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[neg];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"474一和零\"><a class=\"markdownIt-Anchor\" href=\"#474一和零\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/ones-and-zeroes/\" >474. 一和零 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、数学、二维 dp 数、01 背包问题</strong></p>\n<p>由于该题有两个限制条件，因此我们需要使用二维的滚动数组，否则我们就需要使用一个三维数组。 <code>dp[i][j]</code>  表示在 i 个 0 和 j 个 1 的限制条件下最多的子集数目。递推公式也比较明显，只有两种情况，一种是维持现状不变，另一种是将该元素加入子集，因此递推公式为 <code>dp[i][j] = Math.max(dp[i-Zero][j-One]+1,dp[i][j]);</code> 。由于滚动数组的特性，我们需要从右下角开始遍历。这题实质上是有两个维度的 01 背包问题</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMaxForm</span><span class=\"params\">(String[] strs, <span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;strs.length;k++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取0和1的次数</span></span><br><span class=\"line\">            <span class=\"type\">char</span>[] s = strs[k].toCharArray();</span><br><span class=\"line\">            <span class=\"type\">int</span> Zero=<span class=\"number\">0</span>,One=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span> temp:s)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp == <span class=\"string\">&#x27;0&#x27;</span>)&#123;</span><br><span class=\"line\">                    Zero+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    One+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=m;i&gt;=Zero;i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=n;j&gt;=One;j--)&#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i-Zero][j-One]+<span class=\"number\">1</span>,dp[i][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"完全背包问题\"><a class=\"markdownIt-Anchor\" href=\"#完全背包问题\">#</a> 完全背包问题</h2>\n<p>完全背包问题和 01 背包问题在题目描述上唯一不同的地方就是每种物品有无数个。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先遍历物品，在遍历物品</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;weight.length;i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=weight[i];j&lt;=bagWeight;j++)&#123;</span><br><span class=\"line\">    dp[j] = max(dp[j],dp[j-weight[i]]+value[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"518零钱兑换-ii\"><a class=\"markdownIt-Anchor\" href=\"#518零钱兑换-ii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/coin-change-ii/\" >518. 零钱兑换 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、完全背包问题</strong></p>\n<p>这题是标准的完全背包问题，由于是统计可能的次数，因此我们的递推公式为 <code>dp[j] += dp[j-coins[i]];</code> ，每次遍历都检验是否能够增加可能的次数。由于 0 元的情况只有一种，我们将其设置为 1。</p>\n<p>遍历顺序对求取也是有影响的，如果求组合数，就是外循环为物品，内循环为背包；如果求排列数，就是外循环为背包，内循环为物品。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span> amount, <span class=\"type\">int</span>[] coins)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount+<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;coins.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=coins[i];j&lt;=amount;j++)&#123;</span><br><span class=\"line\">                dp[j] += dp[j-coins[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[amount];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"377组合总和-iv\"><a class=\"markdownIt-Anchor\" href=\"#377组合总和-iv\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/combination-sum-iv/\" >377. 组合总和 Ⅳ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：排列、动态规划</strong></p>\n<p>这题和上一题唯一的区别就在于上一题求的是组合数，该题求的是排列数。在本题中递推公式和数组初始化都是一样的，我们只需修改遍历的顺序，从原来的外循环是物品，内循环是背包改为外循环是背包，内循环是物品，因为先为循环是物品，则物品的相对次序不会改变，得到的就是组合，只有在内循环中遍历物品才会出现不一样的排列。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[target+<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=target;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j-nums[i]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    dp[j] += dp[j-nums[i]];</span><br><span class=\"line\">                &#125;            </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"322零钱兑换\"><a class=\"markdownIt-Anchor\" href=\"#322零钱兑换\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/coin-change/\" >322. 零钱兑换 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、边界处理、数组初始化</strong></p>\n<p>与其他的题目不同，这次我们要求的是最小的次数，我们设置 dp 数组为每个金额对应的最少的硬币个数。易得递推公式为 <code>dp[j] = Math.min(dp[j],dp[j-coins[i]]+1);</code> ，本题最难的是设置 dp 数组的初始值，因为是求最小值，所以不能和原来一样都设置为 0，而是要设置为最大的值，这样才能够进行更新。但是 dp [0] 需要设置为 0，作为动态规划的起点，否则数据无法进行更新。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">coinChange</span><span class=\"params\">(<span class=\"type\">int</span>[] coins, <span class=\"type\">int</span> amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount+<span class=\"number\">1</span>];</span><br><span class=\"line\">        Arrays.fill(dp,Integer.MAX_VALUE-<span class=\"number\">2</span>);</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;coins.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=coins[i];j&lt;=amount;j++)&#123;</span><br><span class=\"line\">                dp[j] = Math.min(dp[j],dp[j-coins[i]]+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[amount]==(Integer.MAX_VALUE-<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp[amount];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"279完全平方数\"><a class=\"markdownIt-Anchor\" href=\"#279完全平方数\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/perfect-squares/\" >279. 完全平方数 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、数学、数组初始化、边界处理</strong></p>\n<p>我们使用 dp 数组记录每个值所需的完全平方数的最小数量，递推公式也很好推导， <code>dp[i] = Math.min(dp[i],dp[i-j]+dp[j]);</code> ，我们只要遍历可能的两个和的组合即可。如果检测出数本身就是完全平方数，那么我们直接赋值为 1 即可，就不用进行遍历了。这题也可以通过数学推导使用更容易的方法解决。更好的递推公式为 <code>dp[j]=Math.min(dp[j-i*i),dp[j])</code> 。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numSquares</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; ping = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>, <span class=\"number\">100</span>, <span class=\"number\">121</span>, <span class=\"number\">144</span>, <span class=\"number\">169</span>, <span class=\"number\">196</span>, <span class=\"number\">225</span>, <span class=\"number\">256</span>, <span class=\"number\">289</span>, <span class=\"number\">324</span>, <span class=\"number\">361</span>, <span class=\"number\">400</span>, <span class=\"number\">441</span>,<span class=\"number\">484</span>, <span class=\"number\">529</span>, <span class=\"number\">576</span>, <span class=\"number\">625</span>, <span class=\"number\">676</span>, <span class=\"number\">729</span>, <span class=\"number\">784</span>, <span class=\"number\">841</span>, <span class=\"number\">900</span>, <span class=\"number\">961</span>, <span class=\"number\">1024</span>, <span class=\"number\">1089</span>, <span class=\"number\">1156</span>, <span class=\"number\">1225</span>, <span class=\"number\">1296</span>, <span class=\"number\">1369</span>, <span class=\"number\">1444</span>, <span class=\"number\">1521</span>, <span class=\"number\">1600</span>,<span class=\"number\">1681</span>, <span class=\"number\">1764</span>, <span class=\"number\">1849</span>, <span class=\"number\">1936</span>, <span class=\"number\">2025</span>, <span class=\"number\">2116</span>, <span class=\"number\">2209</span>, <span class=\"number\">2304</span>, <span class=\"number\">2401</span>, <span class=\"number\">2500</span>, <span class=\"number\">2601</span>, <span class=\"number\">2704</span>, <span class=\"number\">2809</span>, <span class=\"number\">2916</span>, <span class=\"number\">3025</span>, <span class=\"number\">3136</span>, <span class=\"number\">3249</span>,<span class=\"number\">3364</span>, <span class=\"number\">3481</span>, <span class=\"number\">3600</span>, <span class=\"number\">3721</span>, <span class=\"number\">3844</span>, <span class=\"number\">3969</span>, <span class=\"number\">4096</span>, <span class=\"number\">4225</span>, <span class=\"number\">4356</span>, <span class=\"number\">4489</span>, <span class=\"number\">4624</span>, <span class=\"number\">4761</span>, <span class=\"number\">4900</span>, <span class=\"number\">5041</span>, <span class=\"number\">5184</span>, <span class=\"number\">5329</span>, <span class=\"number\">5476</span>,<span class=\"number\">5625</span>, <span class=\"number\">5776</span>, <span class=\"number\">5929</span>, <span class=\"number\">6084</span>, <span class=\"number\">6241</span>, <span class=\"number\">6400</span>, <span class=\"number\">6561</span>, <span class=\"number\">6724</span>, <span class=\"number\">6889</span>, <span class=\"number\">7056</span>, <span class=\"number\">7225</span>, <span class=\"number\">7396</span>, <span class=\"number\">7569</span>, <span class=\"number\">7744</span>, <span class=\"number\">7921</span>, <span class=\"number\">8100</span>, <span class=\"number\">8281</span>,<span class=\"number\">8464</span>, <span class=\"number\">8649</span>, <span class=\"number\">8836</span>, <span class=\"number\">9025</span>, <span class=\"number\">9216</span>, <span class=\"number\">9409</span>, <span class=\"number\">9604</span>, <span class=\"number\">9801</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Arrays.fill(dp,<span class=\"number\">10000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ping.contains(i))&#123;</span><br><span class=\"line\">                dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">                dp[i] = Math.min(dp[i],dp[i-j]+dp[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数学</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numSquares</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPerfectSquare(n)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkAnswer4(n)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i * i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> n - i * i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isPerfectSquare(j)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否为完全平方数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPerfectSquare</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) Math.sqrt(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y * y == x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否能表示为 4^k*(8m+7)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">checkAnswer4</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x % <span class=\"number\">4</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            x /= <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x % <span class=\"number\">8</span> == <span class=\"number\">7</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"139单词拆分\"><a class=\"markdownIt-Anchor\" href=\"#139单词拆分\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/word-break/\" >139. 单词拆分 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：覆盖问题、动态规划、字符串切分、字符串比较</strong></p>\n<p>我的思路是记录从 0 到 i 是否已经连接，因为是需要拼接出字符串，因此我将字符匹配到的末尾位置设置为 1，同时需要匹配到的开头与旧有的拼接字符串相连才能够设置为 1。我这个想法，与其说是动态规划，其实更像是记忆化搜索。dp [i] 意味着 s 从 0 到 i 的所形成的字符串能够使用当前的 wordDict 进行拼接而成。动态规划的思想应该是 [0, i - 1] 的字符串可被拆分，当前仅当任一子串 [0, j - 1] 及 [j, i - 1] 可被拆分，很巧妙的想法，将大问题拆分成两个子问题。因此如果确定 dp [j] 为 true，且 [j,i] 这个区间的子字符串出现在字典中，那么 dp [i] 一定是 true。本来这题我看到就想放弃，但是后面还解决处理，虽然没有答案这么巧妙，但是好歹也算是解决了。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">wordBreak</span><span class=\"params\">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[s.length()+<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s.length();i++)&#123;<span class=\"comment\">//i表示背包当前的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;wordDict.size();j++)&#123;<span class=\"comment\">//遍历物品</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">word</span> <span class=\"operator\">=</span> wordDict.get(j);</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> word.length();</span><br><span class=\"line\">                <span class=\"comment\">//进行字符串匹配</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k+len&lt;=i;k++)&#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> s.substring(k,k+len);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(temp.compareTo(word)==<span class=\"number\">0</span> &amp;&amp; dp[k]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        dp[k+len] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[s.length()]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//动态规划</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以类比于背包问题</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">wordBreak</span><span class=\"params\">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"comment\">// memo[i] 表示 s 中索引为 [0,  i - 1] 范围的字符串是否可被 wordDict 拆分</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] memo = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        memo[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// [0, i - 1] 的字符串可被拆分，当前仅当任一子串 [0, j - 1] 及 [j, i - 1] 可被拆分</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (memo[j] &amp;&amp; wordDict.contains(s.substring(j, i))) &#123;</span><br><span class=\"line\">                    memo[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"121买卖股票的最佳时机\"><a class=\"markdownIt-Anchor\" href=\"#121买卖股票的最佳时机\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/\" >121. 买卖股票的最佳时机 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：贪心算法、动态规划</strong></p>\n<p>由于这题只允许一次交易，我们只需使用 min 记录目前遇到的最小值，然后使用 ans 记录当前的最大利润。然后遍历数组即可得到最大利润。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> min=prices[<span class=\"number\">0</span>],ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num:prices)&#123;</span><br><span class=\"line\">            ans = Math.max(ans,num-min);</span><br><span class=\"line\">            min = Math.min(min,num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"122买卖股票的最佳时机-ii-2\"><a class=\"markdownIt-Anchor\" href=\"#122买卖股票的最佳时机-ii-2\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/\" >122. 买卖股票的最佳时机 II <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、二维 dp 数组</strong></p>\n<p>使用二维 dp 数组来分别记录每天持有和不持有股票的状态， <code>dp[i][0]</code>  表示第 i 天持有股票所得的现金， <code>dp[i][1]</code>  表示第 i 天不持有股票所得的最多现金。每次遍历都有两种选择，一种是维持现状，一种是选择卖出股票或买入股票。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[prices.length][<span class=\"number\">2</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//dp[i][0]表示第i天持有股票所得的现金</span></span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]-prices[i]);<span class=\"comment\">//买入所以减</span></span><br><span class=\"line\">            <span class=\"comment\">//dp[i][1]表示第i天不持有股票所得的最多现金</span></span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>]+prices[i]);<span class=\"comment\">//卖出所以加</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.length-<span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"123买卖股票的最佳时机-iii\"><a class=\"markdownIt-Anchor\" href=\"#123买卖股票的最佳时机-iii\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/\" >123. 买卖股票的最佳时机 III <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、二维 dp 数组、贪心算法</strong></p>\n<p>这题最大的改变就是限制了两次售出，因此通过四个元素来表示第一次购买，第一次售出，第二次购买，第二次售出，最后输出第二次售出的利润即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[prices.length][<span class=\"number\">4</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>],-prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>]+prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">2</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">2</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]-prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">3</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">3</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">2</span>]+prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.length-<span class=\"number\">1</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"188买卖股票的最佳时机-iv\"><a class=\"markdownIt-Anchor\" href=\"#188买卖股票的最佳时机-iv\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/\" >188. 买卖股票的最佳时机 IV <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、二维 dp 数组</strong></p>\n<p>这题和上一题一样的思想，只是状态变多了。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[prices.length][<span class=\"number\">2</span>*k+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;<span class=\"number\">2</span>*k;j+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">2</span>*k-<span class=\"number\">1</span>;j+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                dp[i][j+<span class=\"number\">1</span>] = Math.max(dp[i-<span class=\"number\">1</span>][j+<span class=\"number\">1</span>],dp[i-<span class=\"number\">1</span>][j]-prices[i]);</span><br><span class=\"line\">                dp[i][j+<span class=\"number\">2</span>] = Math.max(dp[i-<span class=\"number\">1</span>][j+<span class=\"number\">2</span>],dp[i-<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]+prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.length-<span class=\"number\">1</span>][<span class=\"number\">2</span>*k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"309最佳买卖股票时机含冷冻期\"><a class=\"markdownIt-Anchor\" href=\"#309最佳买卖股票时机含冷冻期\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/\" >309. 最佳买卖股票时机含冷冻期 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划</strong></p>\n<p>和上面的题目一样，记录持有和不持有两种状态，由于这题增加了冷冻期的概念，因此我们多添加一个状态用于记录售卖前的值。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num:prices)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = Math.max(dp[<span class=\"number\">0</span>],dp[<span class=\"number\">1</span>]-num);</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>] = dp[<span class=\"number\">2</span>];</span><br><span class=\"line\">            dp[<span class=\"number\">2</span>] = Math.max(dp[<span class=\"number\">2</span>],dp[<span class=\"number\">0</span>]+num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"417买卖股票的最佳时机含手续费\"><a class=\"markdownIt-Anchor\" href=\"#417买卖股票的最佳时机含手续费\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\" >417. 买卖股票的最佳时机含手续费 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划</strong></p>\n<p>只需在 122 买卖股票的基础上，在卖出股票时减去手续费即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices, <span class=\"type\">int</span> fee)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[prices.length][<span class=\"number\">2</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//dp[i][0]表示第i天持有股票所得的现金</span></span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]-prices[i]);<span class=\"comment\">//买入所以减</span></span><br><span class=\"line\">            <span class=\"comment\">//dp[i][1]表示第i天不持有股票所得的最多现金</span></span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>]+prices[i]-fee);<span class=\"comment\">//卖出所以加</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.length-<span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"300最长递增子序列\"><a class=\"markdownIt-Anchor\" href=\"#300最长递增子序列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/longest-increasing-subsequence/\" >300. 最长递增子序列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、子序列、贪心算法、二分查找</strong></p>\n<p>我想着是从左到右来寻找这个最长的递增子序列，我的想法是将每个元素依次拼在前面的子序列上，然后记录最大的长度。由于是要拼接上去，因此 <code>dp[i]</code>  表示以第 i 个元素结尾能够形成的最长子序列。遇到当前元素大于前面的元素的时候，就检验是否能够形成一个更长的子序列。由于每个元素自己一定能够形成一个长度为一的子序列，因此我为 dp 数组初始化为 1。还有一种非常巧妙的方法就是贪心 + 二分查找，我们可以维护这样一个数列，遍历数组，如果当前元素大于数列的最后一个元素，就在数列后面加上该元素；否则在数列中进行二分查找，找到第一个比当前元素小的数，然后将该元素的后一个元素替换为当前元素。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLIS</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums.length];</span><br><span class=\"line\">        Arrays.fill(dp,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i]&gt;nums[j])&#123;</span><br><span class=\"line\">                    dp[i] = Math.max(dp[i],dp[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">                    ans = Math.max(ans,dp[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//贪心+二分查找</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLIS</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, n = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] d = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        d[len] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; d[len]) &#123;</span><br><span class=\"line\">                d[++len] = nums[i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, r = len, pos = <span class=\"number\">0</span>; <span class=\"comment\">// 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (d[mid] &lt; nums[i]) &#123;</span><br><span class=\"line\">                        pos = mid;</span><br><span class=\"line\">                        l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                d[pos + <span class=\"number\">1</span>] = nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"674最长连续递增序列\"><a class=\"markdownIt-Anchor\" href=\"#674最长连续递增序列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/longest-continuous-increasing-subsequence/\" >674. 最长连续递增序列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、贪心算法</strong></p>\n<p>由于这题要求的是连续递增的序列，因此思路就比较简单了，我们只需使用一个值记录，遍历整个数组，如果比前一个元素大，值加一，否则重新开始计数，将值设置为 1。然后每次记录遍历到的最大值即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findLengthOfLCIS</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>,max=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(ans);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]&gt;nums[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                ans+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                max = Math.max(max,ans);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"718最长重复子数组\"><a class=\"markdownIt-Anchor\" href=\"#718最长重复子数组\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/maximum-length-of-repeated-subarray/\" >718. 最长重复子数组 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二维 dp 数组、边界处理、动态规划</strong></p>\n<p>这题可以看做是 300 题的升级版，我们需要同时记录两个数组之间的信息，因此我们需要的是一个二维的 dp 数组， <code>dp[i][j]</code>  记录 nums1 以 i-1 为结尾和 nums2 以 j-1 为结尾的公共的最长的子数组长度，-1 是因为左侧和上方都需要设置边界方便计算。然后如果 <code>nums1[i]=nums2[j]</code> ，那么我们就将 <code>dp[i][j] = dp[i-1][j-1]+1;</code> ，相当于是往后拼接上一个元素。如果不相等则为 0，因为 dp 数组的初始值即为 0，因此不用处理。由于右下角的元素不一定是最长的重复子数组，因此我们还需要在遍历的过程中记录遍历到的最大值，以此作为答案。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findLength</span><span class=\"params\">(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums1.length+<span class=\"number\">1</span>][nums2.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=nums1.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=nums2.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums1[i-<span class=\"number\">1</span>] == nums2[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                    ans = Math.max(ans,dp[i][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"1143最长公共子序列\"><a class=\"markdownIt-Anchor\" href=\"#1143最长公共子序列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/longest-common-subsequence/\" >1143. 最长公共子序列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二维 dp 数组、动态规划、子序列问题</strong></p>\n<p>这题与后面 397 题的思路一模一样，我们只需把后面判断长度改为在遍历中记录最大值即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestCommonSubsequence</span><span class=\"params\">(String text1, String text2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] st = text1.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] tt = text2.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[st.length+<span class=\"number\">1</span>][tt.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=st.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=tt.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(st[i-<span class=\"number\">1</span>]==tt[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i-<span class=\"number\">1</span>][j],dp[i][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[st.length][tt.length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"1035不相交的线\"><a class=\"markdownIt-Anchor\" href=\"#1035不相交的线\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/uncrossed-lines/\" >1035. 不相交的线 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、无法解决</strong></p>\n<p>这题居然是上面一题换皮而成的题目，答案稍作修改就可以解答了，有种智商被侮辱的感觉，太难顶了。我还一直在想怎么判断两条直线是否相连，如何让端点不重复，这些复杂的物理问题。实际上可以转化为这样的问题，直线不能相交说明在 A 中找到一个与 B 相同的子序列，且这个子序列不能改变相对顺序，只要相对顺序不改变，那么链接相同数字的直线就不会相交。简直太巧妙了，同时也感到自己真的有点死板，题目换一种表述方式就不会了，应该学会透过现象看本质。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxUncrossedLines</span><span class=\"params\">(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums1.length+<span class=\"number\">1</span>][nums2.length+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=nums1.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=nums2.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums1[i-<span class=\"number\">1</span>]==nums2[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i-<span class=\"number\">1</span>][j],dp[i][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[nums1.length][nums2.length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"392判断子序列\"><a class=\"markdownIt-Anchor\" href=\"#392判断子序列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/is-subsequence/\" >392. 判断子序列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键字：贪心算法、双指针、字符串转字符数组、动态规划、边界处理，二维 dp 数组</strong></p>\n<p>由于此题要求子序列的相对次序不会改变，因此我们可以使用两个指针分别指向两个字符串的开头，为了方便遍历，我们首先将两个字符串转换为字符数组。然后我们进行判断，如果此时两个指针所指的元素相等则同时加一，表示两个匹配成功，否则子序列的指针不变，继续等待匹配，而父序列的指针加一往后移动。最后判断子序列指针是否走到末尾即可知道是否是子序列。由于是动态规划专题，我也使用了动态规划的方法来解决该题，由于是两个字符序列，因此我们使用一个二维的 dp 数组来记录信息， <code>dp[i][j]</code>  表示字符 s 前 i-1 为何字符 t 前 j-1 位匹配出的最长子序列长度，为什么不是第 i 位和第 j 位呢？因为第一行和第一列需要给边界值赋值。然后转移方程为如果 s [i]==t [j]，说明可以同时拼接到后面，因此是 <code>dp[i][j] = dp[i-1][j-1]+1;</code> ；否则应该是取上方和左方的最大值，因为字符串延长，两者的匹配长度应该是递增的。根据书上所理解，在不相等的情况下甚至不需要取最大值，直接取左方的值即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSubsequence</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] st = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] tt = t.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;st.length &amp;&amp; j&lt;tt.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(st[i]==tt[j])&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==st.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//动态规划</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSubsequence</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] st = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] tt = t.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[st.length+<span class=\"number\">1</span>][tt.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=st.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=tt.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(st[i-<span class=\"number\">1</span>]==tt[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i-<span class=\"number\">1</span>][j],dp[i][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[st.length][tt.length] == st.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"115不同的子序列\"><a class=\"markdownIt-Anchor\" href=\"#115不同的子序列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/distinct-subsequences/\" >115. 不同的子序列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、编辑距离、无法解决、二维 dp 数组</strong></p>\n<p>这题想了很久都还是没有办法解决。我们使用 <code>dp[i][j]</code>  记录以 i-1 为结尾的 s 子序列中出现以 j-1 为结尾的 t 子序列的个数，有两种不同的情况，一种是 <code>s[i-1]=t[j-1]</code> ，此时 <code>dp[i][j]</code>  由两部分解决，一部分是用 <code>s[i-1]</code>  匹配字符串，个数为 <code>dp[i-1][j-1]</code> ，一部分是不用 <code>s[i-1]</code>  匹配字符串，个数是 <code>dp[i-1][j]</code> ，这里是最难以理解的点，也是我卡住想不到的地方，就是在这里出现了次数的变化。如果不相等，情况就简单多了，只能使用 <code>dp[i-1][j]</code>  的进行匹配。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numDistinct</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] st = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] tt = t.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[st.length+<span class=\"number\">1</span>][tt.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;st.length;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=st.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=tt.length &amp;&amp; j&lt;=i;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(st[i-<span class=\"number\">1</span>]==tt[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[st.length][tt.length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"583两个字符串的删除操作\"><a class=\"markdownIt-Anchor\" href=\"#583两个字符串的删除操作\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/delete-operation-for-two-strings/\" >583. 两个字符串的删除操作 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、二维 dp 数组、编辑距离</strong></p>\n<p>这题由 1143 题最长公共子序列变种而来，通过删除两个字符串的字符使其相等的最小步数就等价于找到两个字符串的最长公共子序列，然后将其他多余的元素删除。我们只要计算出最长公共子序列的长度，然后即可计算出多余元素的个数。或者另外的动态规划思想是模拟字符串的删除操作，遇到不相同只有两种情况，一种是从 Word1 中删除，一种是从 Word2 中删除。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minDistance</span><span class=\"params\">(String word1, String word2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] st = word1.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] tt = word2.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[st.length+<span class=\"number\">1</span>][tt.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=st.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=tt.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(st[i-<span class=\"number\">1</span>]==tt[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i-<span class=\"number\">1</span>][j],dp[i][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> st.length+tt.length - <span class=\"number\">2</span>*dp[st.length][tt.length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另一种动态规划思想</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minDistance</span><span class=\"params\">(String word1, String word2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> word1.length(), n = word2.length();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m + <span class=\"number\">1</span>][n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">//初始化，当自身长度为0时，只有将对方元素全部去掉才能相等</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> word1.charAt(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> word2.charAt(j - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 == c2) &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//从Word1中删除一个元素或者从Word2中删除一个元素</span></span><br><span class=\"line\">                    dp[i][j] = Math.min(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"72编辑距离\"><a class=\"markdownIt-Anchor\" href=\"#72编辑距离\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/edit-distance/\" >72. 编辑距离 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：动态规划、二维 dp 数组、编辑距离</strong></p>\n<p>这题由上面一题变化而来，只是操作变多了，一共有三种操作：增加、删除和替换。由于删除 A 的字符与 B 增加字符是等价的，因此写删除的情况就可以覆盖增加的情况，这样就可以使问题变得更简单一些。dp 数组的定义和初始化和上一题都是一样的，我们需要处理两种情况，如果相等的话，我们就无需处理， <code>dp[i][j]=dp[i-1][j-1]</code> ；重点是不相等的情况，我们可以将其分为删除和替换两种操作，替换的话则是将目前不相等的两个元素，将其中一个替换成另外一个，因此操作数是 <code>dp[i-1][j-1]+1</code> ，前面部分的操作数加上替换这次的操作数；如果是删除，则要选择是删除 Word1，还是 Word2，因此操作数是 <code>min(dp[i][j-1],dp[i-1][j])+1</code> ，前面的操作数加上删除一次的操作数。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minDistance</span><span class=\"params\">(String word1, String word2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] s1 = word1.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] s2 = word2.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[s1.length+<span class=\"number\">1</span>][s2.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化，长度都为0的时候无需操作，当自身为0，要把对方全部元素删除才能相等</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s1.length;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=s2.length;j++)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=s1.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=s2.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s1[i-<span class=\"number\">1</span>] == s2[j-<span class=\"number\">1</span>])&#123;<span class=\"comment\">//相等则无需任何操作</span></span><br><span class=\"line\">                    dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//选择删除Word1还是Word2的字符，删除A的字符与B增加字符是等价的，因此不用写增加的情况。</span></span><br><span class=\"line\">                    min = Math.min(dp[i][j-<span class=\"number\">1</span>],dp[i-<span class=\"number\">1</span>][j]);</span><br><span class=\"line\">                    <span class=\"comment\">//选择是删除字符</span></span><br><span class=\"line\">                    dp[i][j] = Math.min(min,dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>])+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[s1.length][s2.length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"647回文子串\"><a class=\"markdownIt-Anchor\" href=\"#647回文子串\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/palindromic-substrings/\" >647. 回文子串 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二维 dp 数组、动态规划、回文字符</strong></p>\n<p>遇到这题，我们首先思考它的 dp 数组，我们可以使用一个二维数组，分别记录开始位置和结束位置是否能形成回文子串，如果 <code>s[i]=s[j]</code> ，我们要思考什么情况下，这个是回文子串，我们只需要它中间位置也是回文子串即可，也即 <code>dp[i+1][j-1]=true</code> ，但是这样会遗漏一种情况，那就是如果 i 和 j 是相邻的情况，我们把这个情况加入即可。如果头尾都不相等，那么肯定不能形成回文子串。初始化就是将全部设置为 false，遍历顺序在这题里面是有关系的，由于 <code>dp[i][j]</code>  的判断依赖 <code>dp[i+1][j-1]</code> ，因此我们应该从下到上，从左到右进行遍历，最后在遍历的过程中设置计数器计数即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">countSubstrings</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] s1 = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[s1.length][s1.length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=s1.length-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;s1.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j==i)&#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    ans++;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s1[i]==s1[j] &amp;&amp; (dp[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] || i==j-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    ans++;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"516最长回文子序列\"><a class=\"markdownIt-Anchor\" href=\"#516最长回文子序列\">#</a> <a class=\"link\"   href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" >516. 最长回文子序列 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2>\n<p><strong>关键词：二维 dp 数组、动态规划、回文字符</strong></p>\n<p>由于回文子序列是不要求连续的，因此我们对上题的代码进行微调，首先我们设置 dp 数组的意义， <code>dp[i][j]]</code>  表示以 i 为起始范围，以 j 为终止范围之间的最长回文子串的长度。与上题同理，遍历顺序也应该是从下到上，从左到右。在遍历的过程中，会遇到两种情况，一种是 <code>s[i]=s[j]</code> ，这种情况下有两种可能，如果 i=j，则回文字符的长度为 1，否则在 <code>dp[i+1][j-1]</code>  的基础上加 2，不用担心无法形成回文子序列，因为不要求连续，所以 <code>dp[i+1][j-1]</code>  至少为 1 且可以与 <code>s[i]</code>  和 <code>s[j]</code>  构成回文子串。如果两者不相等，那么就使用 <code> dp[i][j] = Math.max(dp[i][j-1],dp[i+1][j]);</code>  获取最长一侧的回文子序列。最后返回右上角的值即为最终答案。如果进行初始化 i=j 的情况，则在相等的情况下无需条件判断。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestPalindromeSubseq</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] s1 = s.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[s1.length][s1.length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=s1.length-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;s1.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s1[i]==s1[j])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i==j)&#123;</span><br><span class=\"line\">                        dp[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        dp[i][j] = dp[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] +<span class=\"number\">2</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i][j-<span class=\"number\">1</span>],dp[i+<span class=\"number\">1</span>][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][s1.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/10/12/java/%E9%9F%A9%E9%A1%BA%E5%B9%B3%20%E9%9B%B6%E5%9F%BA%E7%A1%8030%E5%A4%A9%E5%AD%A6%E4%BC%9AJava/",
            "url": "http://example.com/2023/10/12/java/%E9%9F%A9%E9%A1%BA%E5%B9%B3%20%E9%9B%B6%E5%9F%BA%E7%A1%8030%E5%A4%A9%E5%AD%A6%E4%BC%9AJava/",
            "title": "零基础30天学会Java-韩顺平-98",
            "date_published": "2023-10-12T10:49:32.884Z",
            "content_html": "<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1fh411y7R8?p=9&amp;spm_id_from=pageDriver\" >韩顺平 零基础 30 天学会 Java <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h1 id=\"第一章-概述\"><a class=\"markdownIt-Anchor\" href=\"#第一章-概述\">#</a> 第一章 概述</h1>\n<p>了解了该视频课程的大纲和 Java 的基本知识，Java1995 年推出，目前稳定维护的有 Java8 和 Java11 版本。</p>\n<p>JVM（Java 虚拟机）：JVM 包含于 JDK 中，Java 虚拟机机制屏蔽了底层运行平台的差别，实现了 “一次编译，到处运行 &quot;</p>\n<p>JRE（Java 运行环境）：JRE=JVM+Java 的核心类库。</p>\n<p>JDK（Java 开发工具包）：JDK=JRE+Java 的开发工具</p>\n<p>在桌面图标里勾选此电脑就可以在桌面显示此电脑了</p>\n<p>dos 命令行快捷键：win+r</p>\n<p>在对应文件夹上地址上输入 cmd 可以直接在该目录下打开命令行</p>\n<p>在控制台，输入 tab 键，可以实现命令补全</p>\n<p><strong>本机 Java8 的 JDK 安装位置：C:\\Program Files\\Java\\jdk1.8.0_211\\bin</strong></p>\n<p><strong>代码存放位置：E:\\java 韩顺平 \\ 练习代码</strong></p>\n<p>环境变量 path 的设置，增加 JAVA_HOME 环境变量，指向 JDK 的安装目录，编辑 path 环境变量，增加 % JAVA_HOME%\\bin</p>\n<p>如果程序中含有中文的时候，使用命令行编译的时候，需要将 sublime 中的文件 -&gt;Set File Encoding to-&gt;GBK，再保存，才能够正确编译成 class 文件，而 GBK 是根据 cmd 设置的编码方式相关</p>\n<p>运行的时候不是输入 Hello.java，而是 Hello，因为它实际运行的是 Hello 这个主类。</p>\n<p>一个源文件中最多只能有一个 public 类，其他类的个数不限。每一个类都就会生成一个对应的 class 文件。也可以将 main 方法写在非 public 类中，然后指定运行非 public 类，这样入口方法就是非 public 的 main 方法。</p>\n<p>在学习新技术时我们要思考它有什么好处，能应用到什么方面。学习新技术时先关注知识点的基本语法和基本语句，暂时不需要考虑细节，然后完成一个基础项目，最后开始考虑研究技术的注意事项、使用细节、使用规范、如何优化。</p>\n<p>java 对单引号和双引号敏感，输出时是使用双引号的。</p>\n<p>找不到文件，可能是文件名写错了，也可能没有在当前目录下。<br>\n最不好修改的是编译没有问题，但是业务逻辑错误，还有环境错误。</p>\n<p><strong>变量有三个基本要素：类型 + 名称 + 值</strong></p>\n<p>程序中的加号，当左右两边一方为字符串，则做拼接运算，运算顺序从左到右。</p>\n<h2 id=\"java转义字符\"><a class=\"markdownIt-Anchor\" href=\"#java转义字符\">#</a> java 转义字符</h2>\n<p>换行与回车的区别，回车后会直接到当前行的首位，而不是换下一行，而且会用当前字符覆盖掉之前的字符</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\t</td>\n<td>一个制表位，实现对齐功能</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>一个 &quot;</td>\n</tr>\n<tr>\n<td>'</td>\n<td>一个’</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>一个回车</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>多行注释内不允许内嵌多行注释，因为第一开始与第二个的结束符号匹配，导致第一的结束符号报错</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多行注释</span></span><br><span class=\"line\"><span class=\"comment\">  多行注释*/</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//文档注释</span></span><br><span class=\"line\">java文件中</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> 西芹</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">cmd中：表示将结果存放在存放D盘的temp文件下，关键字根据上面的注释写，最后写文件名</span><br><span class=\"line\">E:\\java韩顺平\\练习代码&gt;javadoc -d d:\\\\temp -author -version Comment02.java</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"代码规范\"><a class=\"markdownIt-Anchor\" href=\"#代码规范\">#</a> 代码规范</h2>\n<ul>\n<li>类、方法的注释，要以 javadoc 的方式来写。</li>\n<li>非 Javadoc 的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题。</li>\n<li>源代码使用 utf-8 编码。</li>\n<li>行宽度不要超过 80 字符。</li>\n<li>代码编写有次行风格和行尾风格，推荐行尾风格。</li>\n</ul>\n<h2 id=\"dos命令\"><a class=\"markdownIt-Anchor\" href=\"#dos命令\">#</a> dos 命令</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dir</td>\n<td>查看当前目录有什么</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>切换到其他文件夹，切换到其他盘，需要加上 / D。例如 E:\\java 韩顺平 \\ 练习代码 &gt; cd /D c:</td>\n</tr>\n<tr>\n<td>md</td>\n<td>新建文件夹</td>\n</tr>\n<tr>\n<td>rd</td>\n<td>删除文件夹</td>\n</tr>\n<tr>\n<td>…</td>\n<td>到上级目录</td>\n</tr>\n<tr>\n<td>help</td>\n<td>查看命令的详细信息</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>直接切换到根目录</td>\n</tr>\n<tr>\n<td>tree</td>\n<td>查看指定目录下的所有子级目录</td>\n</tr>\n<tr>\n<td>cls</td>\n<td>清屏</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>退出 DOS</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第二章-变量\"><a class=\"markdownIt-Anchor\" href=\"#第二章-变量\">#</a> 第二章 变量</h1>\n<p>java 的整型常量（具体值）<strong>默认为 int 型</strong>，声明 long 型常量需后加‘l’或’L‘。例如   <code>long num = 50L</code>  。</p>\n<p>浮点数构成：浮点数 = 符号位 + 指数位 + 尾数位。</p>\n<p>java 的浮点型常量（具体值）<strong>默认为 double 型</strong>，声明为 float 型常量需后加’f’或’F’。例如 <code>float num = 1.1F</code>  。</p>\n<p>浮点型常量有两种表现形式：1、十进制数形式  <code>double num = 5.12</code> ;2、科学计数法形式  <code>double num = 2.12e2</code>  。</p>\n<p>** 当我们对运算结果是小数的进行相等判断时，要小心，因为可能会有精度误差，应该是以两个数的差值的绝对值在某个精度范围类判断。** 如果是直接查询得到的小数或者赋值是可以正常判断的。</p>\n<p>API（应用程序编程接口）是 java 提供的基本编程接口（java 提供的类还有相关的方法）。<a class=\"link\"   href=\"https://www.matools.com/\" >中文在线文档 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>字符类型可以直接存放一个数字，因为在 java 中 char 的本质是一个整数，例如  <code>char c4 = 97</code>  ，但是会输出数字对应的 Unicode 字符。</p>\n<p>字符常量需要使用单引号括起来，例如  <code>char c1 = 'a'</code>  , 双引号代表字符串。java 中还运行使用转义字符’' 将字符转变为特殊字符串常量，例如  <code>char c3 = '\\n'</code>  。char 类型是可以进行运算的，相当于一个整数，因为它都有对应的 Unicode 码。</p>\n<p><strong>布尔类型不可以使用 0 或非 0 的整数代替 false 和 true，这点和 C 语言不同。</strong></p>\n<p>当 java 程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换。<strong>有多种类型的数据混合运算时，系统首先将所有数据转换成容量最大的数据类型，然后再进行计算。</strong></p>\n<p>char-&gt;int-&gt;long-&gt;float-&gt;double;byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double。</p>\n<p><strong>（byte,short）和 char 不会自动转换，但是它们三者之间是可以进行运算的，在计算时首先转换为 int 类型，包括自身的运算，例如 byte 和 byte 运算结果也是 int。</strong></p>\n<p>boolean 类型不参与自动转换。</p>\n<p>强制类型转换使用时用加上强制转换符 ()，例如  <code>int i = (int)1.9</code>  。可能造成精度丢失，需要格外注意。强制转换符号只对最近的操作数有效，往往会使用小括号提升优先级，例如  <code>int x = (int)(10 * 3.5 + 6 * 1.9)</code> 。</p>\n<p>基本数据类型转 String，使用加号和双引号即可，例如  <code>String s1 = n1 + &quot;&quot;</code>  。String 转基本数据类型，使用基本数据类型的包装类调用方法 parseXX 方法即可，例如  <code>int num = Integer.parseInt(s5)</code>  ，但是一定要确保能够转换成有效的数据。从 String 中取字符，指定需要获取的第几个元素，  <code>char c1 = s.charAt(0)</code>  。</p>\n<h2 id=\"java数据类型\"><a class=\"markdownIt-Anchor\" href=\"#java数据类型\">#</a> java 数据类型</h2>\n<p>基本数据类型：1、数值型：整数类型：byte [1]、short [2]、int [4]、long [8]；浮点类型：float [4]、double [8]。2、字符型 char [2]。3、布尔型 boolean [1]。</p>\n<p>引用数据类型：类 (class)、接口 (inferface)、数组 ([])。</p>\n<h2 id=\"字符编码表\"><a class=\"markdownIt-Anchor\" href=\"#字符编码表\">#</a> 字符编码表</h2>\n<table>\n<thead>\n<tr>\n<th>编码表</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII</td>\n<td>一个字节表示一个字符，一共有 128 个字符，上限为 256 个字符</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td>使用两个字节表示字符，汉字和字母统一占用 2 个字节</td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td>大小可变的 编码表，字母使用 1 个字节，汉字使用 3 个字节，可以使用 1-6 个字符表示一个符号</td>\n</tr>\n<tr>\n<td>gbk</td>\n<td>字母使用 1 个字节，汉字使用 2 个字节</td>\n</tr>\n<tr>\n<td>big5 码</td>\n<td>存储繁体中文</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第三章-运算符\"><a class=\"markdownIt-Anchor\" href=\"#第三章-运算符\">#</a> 第三章 运算符</h1>\n<p>java 取余的本质，公式  <code>a % b = a - a / b *b</code>  ，当 a 为小数时，公式转变为  <code>a % b = a - (int) a / b * b</code> 。</p>\n<p><code>&amp;和|是逻辑运算符，&amp;&amp;和||是短路运算符</code>  。</p>\n<p><code>x=flase</code>  的返回结果是 flase，同理  <code>x=true</code>  的返回结果是 true。</p>\n<p>有小数参与运算，得到结果是近似值。</p>\n<h2 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h2>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>正号；数字相加；字符串相加</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号；数字相减；</td>\n</tr>\n<tr>\n<td>*</td>\n<td>数字相乘</td>\n</tr>\n<tr>\n<td>/</td>\n<td>数字相除</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模（取余）</td>\n</tr>\n<tr>\n<td>++</td>\n<td>先运算后取值；先取值后运算</td>\n</tr>\n<tr>\n<td>–</td>\n<td>先运算后取值；先取值再运算</td>\n</tr>\n</tbody>\n</table>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//算术运算符例题</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">i = i++;</span><br><span class=\"line\">System.out.println(i);</span><br><span class=\"line\"><span class=\"comment\">//输出结果为1，因为规则使用临时变量,(1)temp=i;(2)i=i+1;(3)i=temp。所以结果为1。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">i = ++i;</span><br><span class=\"line\">System.out.println(i);</span><br><span class=\"line\"><span class=\"comment\">//输出结果为2，因为规则使用临时变量,(1)i=i+1;(2)temp=i;(3)i=temp.所以结果为2。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复合运算符进行逻辑转换</span></span><br><span class=\"line\"><span class=\"type\">byte</span> b=<span class=\"number\">3</span>;</span><br><span class=\"line\">b+=<span class=\"number\">2</span>;<span class=\"comment\">//等价于b=(byte)(b+2)</span></span><br><span class=\"line\">b++;<span class=\"comment\">//等价于b=(byte)(b+1)</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<h3 id=\"标识符命名规则\"><a class=\"markdownIt-Anchor\" href=\"#标识符命名规则\">#</a> 标识符命名规则</h3>\n<ul>\n<li>有 26 个字母，0-9，_和 $ 组成。</li>\n<li>数字不可以开头。</li>\n<li>不可以使用关键字和保留字，但能包含关键字和保留字。</li>\n<li>java 中严格区分大小写，长度无限制。</li>\n</ul>\n<h3 id=\"标识符命名规范\"><a class=\"markdownIt-Anchor\" href=\"#标识符命名规范\">#</a> 标识符命名规范</h3>\n<ul>\n<li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc，例如： <code>com.hsp.crm</code>   。</li>\n<li>类名、接口名：多单词组成时，所有单词的首字母大写（大驼峰）：XxxYyyZzz，例如：  <code>TankShotGame</code>  。</li>\n<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始首字母大写（小驼峰）：xxxYyyZzz，例如： <code>tankShotGame</code>  。</li>\n<li>常量名：所有字母都大写，多单词时每个单词用下划线连接：XXX_YYY_ZZZ，例如： <code>TAX_RATE</code>  。</li>\n</ul>\n<h2 id=\"接收键盘输入\"><a class=\"markdownIt-Anchor\" href=\"#接收键盘输入\">#</a> 接收键盘输入</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入对应的包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"comment\">//创建Scanner对象</span></span><br><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">myscanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"><span class=\"comment\">//调用方法，接收用户输入</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> myscanner.next()</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"进制\"><a class=\"markdownIt-Anchor\" href=\"#进制\">#</a> 进制</h2>\n<table>\n<thead>\n<tr>\n<th>进制</th>\n<th>表示方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>二进制</td>\n<td>以 0b 或 0B 开头</td>\n</tr>\n<tr>\n<td>十进制</td>\n<td>正常形式</td>\n</tr>\n<tr>\n<td>八进制</td>\n<td>以数字 0 开头</td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td>以 0x 或 0X 开头，0-9 及 A (10)-F (15)，此处的 A-F 不区分大小写</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"位运算\"><a class=\"markdownIt-Anchor\" href=\"#位运算\">#</a> 位运算</h2>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~</td>\n<td>取反</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>算术右移，低位溢出，符号位不变，用符号位补溢出的高位</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>算术左移，符号位不变，低位补 0</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>逻辑右移，也称为无符号右移。运算规则是低位溢出，高位补 0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"原码-反码-补码\"><a class=\"markdownIt-Anchor\" href=\"#原码-反码-补码\">#</a> 原码、反码、补码</h2>\n<ul>\n<li>二进制的最高位是符号位：0 代表正数，1 代表负数。</li>\n<li>正数的原码、反码、补码都一样。</li>\n<li>负数的反码 = 原码符号位不变，其他位取反。</li>\n<li>负数的补码 = 反码 + 1，负数的反码 = 补码 + 1。</li>\n<li>0 的反码，补码都是 0。</li>\n<li>java 没有无符号数，java 中的数都是有符号的。</li>\n<li><strong>在计算机运行的时候，都是以补码的方式来运算的</strong>。</li>\n<li><strong>当我们看运算结果的时候，要看他的原码。</strong></li>\n</ul>\n<h2 id=\"位运算解析\"><a class=\"markdownIt-Anchor\" href=\"#位运算解析\">#</a> 位运算解析</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、先得到-2的原码，由于默认为int型，4个字节，32位，原码为10000000 00000000 00000000 00000010</span></span><br><span class=\"line\"><span class=\"comment\">//2、-2的反码：11111111 11111111 11111111 11111101</span></span><br><span class=\"line\"><span class=\"comment\">//3、-2的补码：11111111 11111111 11111111 11111110</span></span><br><span class=\"line\"><span class=\"comment\">//4、取反操作：00000000 00000000 00000000 00000001,运算后的补码</span></span><br><span class=\"line\"><span class=\"comment\">//5、运算后的原码就是00000000 00000000 00000000 00000001=&gt;1</span></span><br><span class=\"line\">System.out.println(~-<span class=\"number\">2</span>);<span class=\"comment\">//结果为1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、得到2的补码：00000000 00000000 00000000 00000010</span></span><br><span class=\"line\"><span class=\"comment\">//~2操作:11111111 11111111 11111111 11111101，这是运算后的补码</span></span><br><span class=\"line\"><span class=\"comment\">//3、运算后的反码:11111111 11111111 11111111 11111100</span></span><br><span class=\"line\"><span class=\"comment\">//4、运算后的原码:10000000 00000000 00000000 00000011=&gt;-3</span></span><br><span class=\"line\">System.out.println(~<span class=\"number\">2</span>);<span class=\"comment\">//结果为-3</span></span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第四章-控制结构\"><a class=\"markdownIt-Anchor\" href=\"#第四章-控制结构\">#</a> 第四章 控制结构</h1>\n<p>三大流程控制语句：顺序控制、分支控制、循环控制。</p>\n<p>在 java 中，只要有值返回，就是一个表达式。</p>\n<p><strong>break 语句出现在多层嵌套的语句块中，可以通过标签指明要终止的是哪一层语句块。</strong></p>\n<p><strong>字符串比较是否相同： <code>&quot;林黛玉&quot;.equals(name)</code>  。尽量把具体对象写在前面以避免空指针。</strong></p>\n<p>continue 语句用于结束本次循环，继续执行下一次循环。在多层嵌套的循环语句体中，可以通过标签指定要跳过哪一层循环，这个和前面的 break 语句类似。</p>\n<p>当 return 用在方法时，表示跳出方法，如果用在 main，表示退出程序。</p>\n<h2 id=\"switch注意事项\"><a class=\"markdownIt-Anchor\" href=\"#switch注意事项\">#</a> Switch 注意事项</h2>\n<ul>\n<li>表达式数据类型，应和 case 后的常量类型一致，或者是可以自动转成可以相互比较的类型。</li>\n<li>Switch 表达式中的返回值必须是：byte,short,int,char,enum,String。</li>\n<li>case 子句中的值必须是常量或常量表达式，而不能是变量。</li>\n<li>default 子句是可选的，当没有匹配的 case 时，执行 default。</li>\n<li>Switch 穿透：case 中没有 break 语句，运行结束后直接执行下一个 case 的语句，不会进行判断。</li>\n</ul>\n<h2 id=\"for使用细节\"><a class=\"markdownIt-Anchor\" href=\"#for使用细节\">#</a> for 使用细节</h2>\n<ul>\n<li>for (; 循环判断条件；) 中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略。</li>\n<li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。</li>\n</ul>\n<h2 id=\"编程思想\"><a class=\"markdownIt-Anchor\" href=\"#编程思想\">#</a> 编程思想</h2>\n<ul>\n<li>化繁为简：将复杂的需求，拆解成简单的需求，逐步完成。</li>\n<li>先死后活：先考虑固定的值，然后转成灵活变化的值。</li>\n</ul>\n<h2 id=\"标签\"><a class=\"markdownIt-Anchor\" href=\"#标签\">#</a> 标签</h2>\n<ol>\n<li>label1 是标签，名字由程序员指定。</li>\n<li>break 后指定到哪个标签就退出到哪里。</li>\n<li>在实际的开发中，尽量不使用标签。因为会导致可读性变差。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//标签的例子</span></span><br><span class=\"line\">label1:</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;j &lt; <span class=\"number\">4</span>;j++)&#123;<span class=\"comment\">//外层for循环</span></span><br><span class=\"line\">label2:  </span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span> label1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;i = &quot;</span>+i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第五章-数组\"><a class=\"markdownIt-Anchor\" href=\"#第五章-数组\">#</a> 第五章 数组</h1>\n<p>数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。</p>\n<p>二维数组指向多个一维数组，一维数组再指向具体的值。</p>\n<p><strong>二维数组允许每列的元素个数不相同。</strong></p>\n<h2 id=\"数组操作\"><a class=\"markdownIt-Anchor\" href=\"#数组操作\">#</a> 数组操作</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"type\">int</span>[] hens = &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">8.8</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//先声明，再分配</span></span><br><span class=\"line\"><span class=\"type\">int</span> a[];<span class=\"comment\">//也可以使用int[] a;</span></span><br><span class=\"line\">a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];<span class=\"comment\">//此时才真正赋予存储空间</span></span><br><span class=\"line\"><span class=\"comment\">//获取数组长度</span></span><br><span class=\"line\">len = hens.length</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二维数组的新建与一维的类似</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] arr = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> a[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"type\">int</span>[] y[];</span><br><span class=\"line\"><span class=\"comment\">//动态初始化,列数不等</span></span><br><span class=\"line\"><span class=\"comment\">//创建二维数组，有3个一维数组，但是每个一维数组没有开空间</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">3</span>][];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class=\"line\">  arr[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[i+<span class=\"number\">1</span>];<span class=\"comment\">//给每个一维数组开空间</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取行数和列数</span></span><br><span class=\"line\">row = arr.length;</span><br><span class=\"line\">col = arr[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//练习题</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">strs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>&#125;<span class=\"comment\">//正确</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">strs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>]&#123;<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>&#125;<span class=\"comment\">//错误，不可以指定数字</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"数组细节\"><a class=\"markdownIt-Anchor\" href=\"#数组细节\">#</a> 数组细节</h2>\n<ol>\n<li>数组创建后，如果没有赋值，有默认值。int、short、byte、long 的默认值为 0；float 和 double 的默认值为 0.0；char 的默认值为 \\u0000；Boolean 为 false；String 为 null。</li>\n<li>数组中的元素可以是任何数据类型。包括基本数据类型和引用类型，但是不能混用。</li>\n<li>数组下标从 0 开始。</li>\n<li>数组属引用类型，数组型数据是对象。</li>\n</ol>\n<h2 id=\"赋值方式\"><a class=\"markdownIt-Anchor\" href=\"#赋值方式\">#</a> 赋值方式</h2>\n<ol>\n<li>基本数据类型赋值，赋值方式为值拷贝。</li>\n<li>数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递。</li>\n<li><strong>数组在栈中存储一个指向堆的地址，堆中存储实际的值，数组赋值时，实际上是将栈中的地址进行传递，这也是为什么将数组成为引用类型。</strong></li>\n</ol>\n<h2 id=\"二维数组内存示意图\"><a class=\"markdownIt-Anchor\" href=\"#二维数组内存示意图\">#</a> 二维数组内存示意图</h2>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/97b2904d6220cca5a9e0944106126e87.jpg\"\n                      alt=\"二维数组内存示意图\" style=\"zoom:50%;\" \n                >\n<h1 id=\"第六章-面向对象基础\"><a class=\"markdownIt-Anchor\" href=\"#第六章-面向对象基础\">#</a> 第六章 面向对象 (基础)</h1>\n<p>属性如果不赋值，有默认值，与数组相同。</p>\n<p>由于对象也是引用类型，所以赋值也是引用传递。</p>\n<p><strong>方法不能嵌套定义。</strong></p>\n<p>方法重载：java 中允许同一个类中，多个重名方法的存在，但要求形参列表不一致。</p>\n<p>可变参数：java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。</p>\n<p><strong>全局变量（属性）可以不赋值，直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值。我们说的局部变量一般是指在成员方法中定义的变量。</strong></p>\n<p>属性可以加修饰符，局部变量不可以加修饰符。</p>\n<p>可以使用 hashCode () 函数内存地址转换成的整数。例如  <code>this.hashCode()</code>  。</p>\n<p>使用 Double 包装类返回值，就可以返回 null 来提示错误信息。</p>\n<h2 id=\"类的操作\"><a class=\"markdownIt-Anchor\" href=\"#类的操作\">#</a> 类的操作</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  String color;</span><br><span class=\"line\">  <span class=\"comment\">//新建方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cal</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    System.out.printlin(<span class=\"string\">&quot;接收的信息：&quot;</span> + n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实例化，创建对象</span></span><br><span class=\"line\"><span class=\"comment\">//cat1是对象名(对象引用),new Cat()创建的对象空间(数据)才是真正的对象。</span></span><br><span class=\"line\"><span class=\"type\">Cat</span> <span class=\"variable\">cat1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">cat1.name = <span class=\"string\">&quot;小白&quot;</span>;</span><br><span class=\"line\">cat1.cal(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//将cat1指针置空</span></span><br><span class=\"line\">cat1 = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"类与对象的区别\"><a class=\"markdownIt-Anchor\" href=\"#类与对象的区别\">#</a> 类与对象的区别</h2>\n<ol>\n<li>类是抽象的，概念的，代表一类事物，即它是数据类型。</li>\n<li>对象是具体的，实际的，代表一个具体事物，即是实例。</li>\n<li>类是对象的模板，对象是类的一个实体，对应一个实例。</li>\n</ol>\n<h2 id=\"对象内存示意图\"><a class=\"markdownIt-Anchor\" href=\"#对象内存示意图\">#</a> 对象内存示意图</h2>\n<p>基本数据类型存储于堆中，引用类型存储于方法区中的常量池。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/5f4a10b99b9515c31caf316ec5e16bae.jpg\"\n                      alt=\"对象内存示意图\" style=\"zoom:50%;\" \n                >\n<h2 id=\"java内存的结构分析\"><a class=\"markdownIt-Anchor\" href=\"#java内存的结构分析\">#</a> java 内存的结构分析</h2>\n<ol>\n<li>栈：一般存放基本数据类型（局部变量）。</li>\n<li>堆：存放对象（Cat cat，数组等）。</li>\n<li>方法区：常量池（常量，比如字符串），类加载信息。</li>\n</ol>\n<h2 id=\"java创建对象流程\"><a class=\"markdownIt-Anchor\" href=\"#java创建对象流程\">#</a> java 创建对象流程</h2>\n<ol>\n<li>先加载类信息（属性和方法信息，每个类只加载一次）。</li>\n<li>在堆中分配空间，进行默认初始化。</li>\n<li>把堆中地址赋给栈中的对象名，使得对象名指向对象。</li>\n<li>进行指定初始化。</li>\n</ol>\n<h2 id=\"方法调用\"><a class=\"markdownIt-Anchor\" href=\"#方法调用\">#</a> 方法调用</h2>\n<ol>\n<li>当程序执行到方法时，就会开辟一个独立的空间（栈空间）。</li>\n<li>当方法执行完毕，或者执行到 return 语句时，就会返回到调用方法的地方。</li>\n<li>返回后，继续执行方法后面的代码。</li>\n<li>当 main 方法 (栈) 执行完毕，整个程序退出。</li>\n</ol>\n<h2 id=\"返回数据\"><a class=\"markdownIt-Anchor\" href=\"#返回数据\">#</a> 返回数据</h2>\n<ol>\n<li>一个方法最多一个返回值，使用数组可以传递多个结果。<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] returnarr()&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>[] resArr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>返回类型可以为任意类型，包含基本数据类型或引用类型。</li>\n<li>如果方法要求有返回类型，则方法体中最后的执行语句必须为 return 值，而且要求返回值类型必须和 return 的值类型一致或兼容。</li>\n<li>如果方法返回类型为 void，则方法体中可以没有 return 或只写 return。</li>\n</ol>\n<h2 id=\"成员方法传参机制\"><a class=\"markdownIt-Anchor\" href=\"#成员方法传参机制\">#</a> 成员方法传参机制</h2>\n<ol>\n<li>基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参。</li>\n<li>引用类型传递的是地址（地址也是值），可以通过形参影响实参。对象也是引用类型。</li>\n</ol>\n<h2 id=\"递归使用规则\"><a class=\"markdownIt-Anchor\" href=\"#递归使用规则\">#</a> 递归使用规则</h2>\n<ol>\n<li>执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。</li>\n<li>方法的局部变量是独立的，不会相互影响。</li>\n<li>如果方法中使用的是引用类型变量（比如数组，对象），就会共享该引用类型的数据。</li>\n<li>当方法执行完毕，或者遇到 return，就返回，遵守谁调用，就把结果返回给谁，同时方法执行完毕或者返回时，该方法执行完毕。</li>\n</ol>\n<h2 id=\"方法重载\"><a class=\"markdownIt-Anchor\" href=\"#方法重载\">#</a> 方法重载</h2>\n<ol>\n<li>方法名：必须相同</li>\n<li>形参列表：必须不同，形参类型或个数或顺序，至少有一个不同，参数名无要求</li>\n<li>返回类型：无要求</li>\n</ol>\n<h2 id=\"可变参数\"><a class=\"markdownIt-Anchor\" href=\"#可变参数\">#</a> 可变参数</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可变函数声明</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HspMethod</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//计算多个数的和</span></span><br><span class=\"line\">  <span class=\"comment\">//int...表示接受的是可变参数，类型是int，使用可变参数时，可以当作数组来使用</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span>... nums)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class=\"line\">      res += nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"可变参数细节\"><a class=\"markdownIt-Anchor\" href=\"#可变参数细节\">#</a> 可变参数细节</h3>\n<ol>\n<li>可变参数的实参可为 0 到任意多个。</li>\n<li>可变参数的实参可以是数组。</li>\n<li><strong>可变参数的本质就是数组。</strong></li>\n<li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数放在最后。</li>\n<li>一个形参列表只能出现一个可变参数。</li>\n</ol>\n<h2 id=\"构造器构造方法\"><a class=\"markdownIt-Anchor\" href=\"#构造器构造方法\">#</a> 构造器 / 构造方法</h2>\n<ol>\n<li>主要作用是完成对新对象的初始化，并不是创建对象</li>\n<li><strong>构造器没有返回值，也不能写 void</strong></li>\n<li>方法名和类名要一致</li>\n<li>参数列表和成员方法一样的规则</li>\n<li>构造器的调用由系统完成，不能自行调用</li>\n<li>构造器也允许重载</li>\n<li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器，可以使用 javap 指令反编译查看。例如  <code>javap Dog.class</code>  。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造器/构造方法声明</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name,<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用this指定当前对象，即当前调用构造器的对象</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"this使用细节\"><a class=\"markdownIt-Anchor\" href=\"#this使用细节\">#</a> this 使用细节</h2>\n<ol>\n<li>this 关键字可以用来访问本类的属性、方法、构造器</li>\n<li>this 用于区分当前类的属性和局部变量<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;smith&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">//传统方式，输出局部变量smith</span></span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;name=&quot;</span> + name);</span><br><span class=\"line\">  <span class=\"comment\">//this方式，输出类属性jack</span></span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;name=&quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>访问成员方法的语法：this. 方法名 (参数列表)</li>\n<li>访问构造器语法：this (参数列表)；<strong>注意只能在构造器中调用本类的另一个构造器，而且必须放置于第一条语句，因此只能用一个</strong></li>\n<li>this 不能在类定义的外部使用，只能在类定义的方法中使用。</li>\n</ol>\n<h2 id=\"题目解析\"><a class=\"markdownIt-Anchor\" href=\"#题目解析\">#</a> 题目解析</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">count1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    count = <span class=\"number\">10</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;count1=&quot;</span> + count);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">count2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;count2=&quot;</span> + count);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//Test类的main方法，任何一个类，都可以有自己的main方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//new Test()是匿名对象，只使用一次，因为没有对象名，使用后被销毁</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>().count1();<span class=\"comment\">//输出10</span></span><br><span class=\"line\">    <span class=\"type\">Test</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">    t1.count2();<span class=\"comment\">//输出9</span></span><br><span class=\"line\">    t1.count2();<span class=\"comment\">//输出10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第七章-面向对象中级\"><a class=\"markdownIt-Anchor\" href=\"#第七章-面向对象中级\">#</a> 第七章 面向对象 (中级)</h1>\n<p>idea 编译后的文件会存放在 out 文件夹下，src 文件夹存放源码文件。</p>\n<p>文件 -&gt; 设置 -&gt; 编辑器 -&gt; 代码模板：可以查看模板或者编辑模板。遇到一个问题是我没有 java 的模板。可以使用代码模板加快速度，例如使用  <code>sout</code>  加缩进自动补全为打印。</p>\n<p>package 关键字，声明当前类所在的包，需要放在类的最上面。</p>\n<p><strong>包的本质实际上就是创建不同的文件夹来保存类文件。</strong></p>\n<p>当类重名的时候，默认使用引入的类，或者通过指定包名来指出使用的类。</p>\n<p><strong>包的命名只能包含数字、字母、下划线、小圆点，但不能用数字开头，不能是关键字或保留字。</strong></p>\n<p>继承声明： <code>class 子类 extends 父类</code>  。</p>\n<p>方法重写 (覆盖)：子类的方法和父类的方法的名称、返回类型和参数都一样，那么子类的该方法覆盖父类的对应方法。</p>\n<p>多态是指方法和对象具有多种形态，可以提高代码的复用性，利于代码维护。</p>\n<p>instanceof 比较操作符，用于判断对象的运行类型是否为某类型或某类型的子类型。例子： <code>cat instanceof Animal</code>  。</p>\n<p><strong>多态的方法首先看运行类型，属性首先看编译类型。</strong></p>\n<p>多态数组：数组的定义类型为父类类型，里面保存的实际元素为子类类型。</p>\n<p>toString 方法默认返回类的全类名 (包名 + 类名)+@+ 十六进制哈希值 (由 hashCode 获取)。当直接输出一个对象时，toString 方法会被默认调用。</p>\n<p>当某个对象没有任何引用时，则 JVM 就认为这个对象是一个垃圾对象，会使用垃圾回收机制销毁该对象，在销毁该对象前，会先调用 finalize 方法。垃圾回收并不是即时的，有自己的一套算法，使用 System.gc () 主动调用。</p>\n<p><strong>在断点调试过程中是运行状态，是以对象的运行类型来执行的。</strong></p>\n<p>设置步进至源码：文件 -&gt; 构建，执行，部署 -&gt; 调试器 -&gt; 步进 -&gt; 取消勾选  <code>java.*</code>  和  <code>javax*</code>  。</p>\n<p>建议一段代码完成一个小功能，尽量不要混在一起。</p>\n<p>数据校验时，可以采用找出不正确的金额条件，然后给出提示，就直接 break。</p>\n<h2 id=\"idea快捷键\"><a class=\"markdownIt-Anchor\" href=\"#idea快捷键\">#</a> idea 快捷键</h2>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl+d</td>\n<td>删除当前行</td>\n</tr>\n<tr>\n<td>ctrl+alt + 向下箭头</td>\n<td>复制当前行到下一行</td>\n</tr>\n<tr>\n<td>alt+/</td>\n<td>代码补全</td>\n</tr>\n<tr>\n<td>ctrl+/</td>\n<td>第一次添加注释，第二次取消注释</td>\n</tr>\n<tr>\n<td>alt+enter</td>\n<td>自动导入光标对应的 class</td>\n</tr>\n<tr>\n<td>ctrl+alt+L</td>\n<td>自动格式化代码</td>\n</tr>\n<tr>\n<td>alt+r</td>\n<td>运行代码</td>\n</tr>\n<tr>\n<td>alt+insert</td>\n<td>新建构造器，get 和 set 方法等</td>\n</tr>\n<tr>\n<td>ctrl+h</td>\n<td>查看类的继承关系</td>\n</tr>\n<tr>\n<td>ctrl+b</td>\n<td>快速定位到光标所在的方法</td>\n</tr>\n<tr>\n<td>声明类时在后面加上 var, 点击 enter</td>\n<td>自动分配变量名</td>\n</tr>\n<tr>\n<td>F7</td>\n<td>断点调试跳入方法内</td>\n</tr>\n<tr>\n<td>F8</td>\n<td>逐行执行代码</td>\n</tr>\n<tr>\n<td>F9</td>\n<td>继续，执行到下一个断点</td>\n</tr>\n<tr>\n<td>shift+F8</td>\n<td>跳出方法</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"包的作用\"><a class=\"markdownIt-Anchor\" href=\"#包的作用\">#</a> 包的作用</h2>\n<ol>\n<li>区分相同名字的类</li>\n<li>当类很多时，可以很好的管理类</li>\n<li>控制访问范围</li>\n</ol>\n<h2 id=\"访问修饰符\"><a class=\"markdownIt-Anchor\" href=\"#访问修饰符\">#</a> 访问修饰符</h2>\n<p>java 提供四种访问修饰符，用于控制方法和属性的访问权限，也可以修饰类，但只能使用 public 和默认修饰符。</p>\n<table>\n<thead>\n<tr>\n<th>访问修饰符</th>\n<th>访问级别</th>\n<th>同类</th>\n<th>同包</th>\n<th>子类</th>\n<th>不同包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>公开</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n<tr>\n<td>protested</td>\n<td>受保护</td>\n<td>可以</td>\n<td>可以</td>\n<td colspan=\"2\">可以</td>\n</tr>\n<tr>\n<td>没有修饰符</td>\n<td>默认</td>\n<td>可以</td>\n<td colspan=\"3\">可以</td>\n</tr>\n<tr>\n<td>private</td>\n<td>私有</td>\n<td colspan=\"4\">可以</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"封装的实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#封装的实现步骤\">#</a> 封装的实现步骤</h2>\n<ol>\n<li>将属性进行私有化 private，使用户不能直接修改属性。</li>\n<li>提供一个公共的 set 方法，用于对属性进行判断并赋值。</li>\n<li>提供一个公共的 get 方法，用于获取属性的值。</li>\n</ol>\n<h2 id=\"继承细节\"><a class=\"markdownIt-Anchor\" href=\"#继承细节\">#</a> 继承细节</h2>\n<ol>\n<li>子类继承父类的所有属性和方法，非私有的属性可以直接访问，私有的需要通过父类的公共方法使用。</li>\n<li>java 所有类都是 Object 类的子类，Object 类是所有类的父类。</li>\n<li>子类必须调用父类的构造器，完成父类的初始化。父类构造器的调用不限于直接父类，将一直往上追溯到 Object 类。</li>\n<li>如果希望指定去调用父类的某个构造器，则显式 3 的调用一下：super (参数列表)。super 只能在构造器中使用，且必须放在构造器第一行。</li>\n<li>super () 和 this () 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器中，使用了 this () 方法，就不会默认调用 super () 方法。</li>\n<li>子类最多只能继承一个父类 (指直接继承)，那么如何继承多个？让父类去继承。</li>\n<li>子类往上寻找属性时，遇到一个私有属性不能访问，不会跳过再往上查找，而是直接报错。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承题目解析</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  A()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  A(String name)&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;a name&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  B()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//由于有this()方法，所以没有默认调用super()方法</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>(<span class=\"string\">&quot;abc&quot;</span>);<span class=\"comment\">//调用自身的构造方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  B(String name) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认调用了super();</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;b name&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//B b = new B()的输出结果为a,b name,b</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"方法重写细节\"><a class=\"markdownIt-Anchor\" href=\"#方法重写细节\">#</a> 方法重写细节</h2>\n<ol>\n<li>子类的方法的参数、方法名称要和父类方法的参数，方法名称完全相同。</li>\n<li>子类方法的返回类型和父类方法的返回类型一样，或者是父类返回类型的子类，比如父类方法的返回类型是 object，子类方法的返回类型是 String。</li>\n<li>子类方法不能缩小父类的方法权限。</li>\n</ol>\n<h2 id=\"对象的多态\"><a class=\"markdownIt-Anchor\" href=\"#对象的多态\">#</a> 对象的多态</h2>\n<ol>\n<li>一个对象的编译类型和运行类型可以不一致。</li>\n<li>编译类型在定义对象时，就确定了，不能改变。</li>\n<li>运行类型是可以变化的。</li>\n<li>编译类型看定义时等号的左边，运行类型看等号的右边。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//animal编译类型是Animal，运行类型是Dog，相当于披着Animal皮的Dog</span></span><br><span class=\"line\"><span class=\"type\">Animal</span> <span class=\"variable\">animal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"><span class=\"comment\">//因为animal运行类型是Dog，使用执行Dog的cry方法，而不是Animal的cry方法</span></span><br><span class=\"line\">animal.cry();</span><br><span class=\"line\"><span class=\"comment\">//animal的运行类型变成了Cat，编译类型仍然是Animal</span></span><br><span class=\"line\">animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"多态的向上转型\"><a class=\"markdownIt-Anchor\" href=\"#多态的向上转型\">#</a> 多态的向上转型</h3>\n<ol>\n<li>多态的前提是两个对象 (类) 存在继承关系</li>\n<li>多态的向上转型的本质是父类的引用指向子类的对象</li>\n<li>多态的向上转型的特点是可以调用父类中的所有成员 (需遵守访问权限)，不能调用子类的特有成员，因为在编译阶段，能调用哪些成员是由编译类型决定的，最终运行效果看子类的具体实现。</li>\n<li><strong>编译阶段只看编译类型，运行时只看具体的运行类型。</strong></li>\n</ol>\n<h3 id=\"多态的向下转型\"><a class=\"markdownIt-Anchor\" href=\"#多态的向下转型\">#</a> 多态的向下转型</h3>\n<ol>\n<li>语法：子类类型 引用名 = （子类类型）父类引用</li>\n<li>只能强转父类的引用，不能强转父类的对象</li>\n<li>要求父类的引用必须指向当前目标类型的对象</li>\n<li>当向下转型后，可以调用子类类型中的所有成员</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进行向下转型，此时cat的编译类型为Cat，运行类型也是Cat</span></span><br><span class=\"line\"><span class=\"comment\">//向下转型要求animal原来的引用指向的是Cat(第3个特点)</span></span><br><span class=\"line\"><span class=\"type\">Cat</span> <span class=\"variable\">cat</span> <span class=\"operator\">=</span> (Cat) animal;</span><br><span class=\"line\">cat.catchMouse();<span class=\"comment\">//此时可以调用Cat的特有方法</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"多态的属性\"><a class=\"markdownIt-Anchor\" href=\"#多态的属性\">#</a> 多态的属性</h3>\n<p>属性没有重写，属性的值看编译类型</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span>&#123;<span class=\"comment\">//父类</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span>&#123;<span class=\"comment\">//子类</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Base</span> <span class=\"variable\">base</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>();</span><br><span class=\"line\">System.out.println(base.count);</span><br><span class=\"line\"><span class=\"comment\">//base的编译类型的Base,输出值为编译类型的10</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"动态绑定\"><a class=\"markdownIt-Anchor\" href=\"#动态绑定\">#</a> 动态绑定</h2>\n<ol>\n<li>当调用对象方法时，该方法会和该对象的内存地址 / 运行类型绑定。</li>\n<li>当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">public</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">//由于B类没有sum()，于是往上找，父类A有，执行A的sum()</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getI() + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getI</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"comment\">//getI()在B类有，执行B的getI()，将B类中的i返回</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getI</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">System.out.println(a.sum());</span><br><span class=\"line\"><span class=\"comment\">//输出结果为30，</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"和equals的对比\"><a class=\"markdownIt-Anchor\" href=\"#和equals的对比\">#</a> == 和 equals 的对比</h2>\n<ol>\n<li>== 是一个比较运算符，它既可以判断基本数据类型，也可以判断引用类型。判断基本数据类型是判断值是否相等；判断引用类型则是判断地址是否相等，即判断是否为同一个对象。</li>\n<li>equals 方法是 Object 类中的方法，只能判断引用类型。默认判断地址是否相同，子类中往往重写该方法，用于判断内容是否相等。</li>\n</ol>\n<h2 id=\"hashcode方法\"><a class=\"markdownIt-Anchor\" href=\"#hashcode方法\">#</a> hashCode 方法</h2>\n<ol>\n<li>提高具有哈希结构的容器的效率</li>\n<li>两个引用，如果指向的是同一个对象，则哈希值一定一样；如果指向不同对象，则哈希值通常不一样</li>\n<li>哈希值主要是根据地址号，但不能完全将哈希值等价于地址</li>\n</ol>\n<h1 id=\"第八章-面向对象高级\"><a class=\"markdownIt-Anchor\" href=\"#第八章-面向对象高级\">#</a> 第八章 面向对象 (高级)</h1>\n<p>类的单例 (单个实例) 模式：采用一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。</p>\n<p>当父类的某些方法需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类。</p>\n<p>接口就是给出一些没有实现的方法，封装在一起，到某个类要使用的时候，再根据具体情况将这些方法写出来，一种高层次的抽象。</p>\n<h2 id=\"类静态变量\"><a class=\"markdownIt-Anchor\" href=\"#类静态变量\">#</a> 类 (静态) 变量</h2>\n<ol>\n<li>类变量 (静态变量) 会被该类的所有对象实例共享，而且在类加载的时候就生成了。例子： <code>public static int count;</code>  。</li>\n<li>类变量是随着类的加载而创建的，所以即使没有创建对象实例也可以访问。</li>\n<li>类变量存放位置会由于 JDK 版本不同而产生差异。</li>\n<li>类变量可以通过类名。类变量名或者对象名。类变量名来访问，但是 java 设计者推荐使用类名。类变量名方式访问。</li>\n<li>类变量的生命周期是随着类的加载开始，随着类的消亡而销毁。</li>\n</ol>\n<h2 id=\"类静态方法\"><a class=\"markdownIt-Anchor\" href=\"#类静态方法\">#</a> 类 (静态) 方法</h2>\n<ol>\n<li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区。</li>\n<li>类方法不允许使用和对象有关的关键字，比如 this 和 super。</li>\n<li>当方法中不涉及任何和对象相关的成员时，则可以将该方法设计成静态方法，提高开发效率。</li>\n<li>当方法使用了 static 修饰符后，该方法就是静态方法，静态方法只能访问静态属性 / 变量和静态方法。普通方法既可以访问非静态成员，也可以访问静态成员。</li>\n<li>类变量可以通过类名。类方法名或者对象名。类方法名来访问，但是 java 设计者推荐使用类名。类方法名方式访问。</li>\n</ol>\n<h2 id=\"main方法\"><a class=\"markdownIt-Anchor\" href=\"#main方法\">#</a> main 方法</h2>\n<ol>\n<li>main 方法是由 Java 虚拟机调用的，处于不同的类，所以该方法的访问权限必须是 public。</li>\n<li>java 虚拟机在执行 main 方法时不需要创建对象，所以该方法的必须是 static。所以 main 方法本质上也是静态方法，遵守静态方法的规则。</li>\n<li>main 方法接收 String 类型的数组参数，该数组中保存执行 java 命令时传递给所运行的类的参数。String 数组是由命令行运行时传入的。idea 中可以点击编辑配置 -&gt; 程序参数中填写。</li>\n</ol>\n<h2 id=\"代码块\"><a class=\"markdownIt-Anchor\" href=\"#代码块\">#</a> 代码块</h2>\n<ol>\n<li>代码块又称为初始化块，属于类中的成员，类似于方法，将逻辑语句封装在方法体中。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是在加载类时或创建对象时隐式调用。</li>\n<li>修饰符可不写或写 static，使用 static 的为静态代码块，作用就是对类进行初始化，而且随着类的加载而执行，并且只会执行一次；否则为普通代码块，每创建一个对象就执行一次，如果只是使用类的静态成员，普通代码块并不会执行。静态代码块只能调用静态成员。</li>\n<li>相当于另外一种形式的构造器 (对构造器的补充机制)，可以做初始化的操作。如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性。</li>\n<li>代码块的执行顺序优先于构造器。构造器的最前面其实隐含了 super 方法和调用普通代码块。</li>\n</ol>\n<h2 id=\"类的加载\"><a class=\"markdownIt-Anchor\" href=\"#类的加载\">#</a> 类的加载</h2>\n<ol>\n<li>创建对象实例时 (new)</li>\n<li>创建子类对象实例，父类也会被加载</li>\n<li>使用类的静态成员时</li>\n</ol>\n<h2 id=\"创建对象的顺序\"><a class=\"markdownIt-Anchor\" href=\"#创建对象的顺序\">#</a> 创建对象的顺序</h2>\n<ol>\n<li>调用静态代码块和静态属性初始化，两者的优先级相同，按照顺序执行。</li>\n<li>调用普通代码块和普通属性的初始化。</li>\n<li>调用构造方法。</li>\n</ol>\n<h2 id=\"子类创建对象的顺序\"><a class=\"markdownIt-Anchor\" href=\"#子类创建对象的顺序\">#</a> 子类创建对象的顺序</h2>\n<ol>\n<li><strong>父类</strong>的静态代码块和静态属性</li>\n<li>子类的静态代码块和静态属性</li>\n<li><strong>父类</strong>的普通代码块和普通属性初始化</li>\n<li>父类的构造方法</li>\n<li>子类的普通代码块和普通属性初始化</li>\n<li>子类的构造方法</li>\n</ol>\n<h2 id=\"单例模式实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#单例模式实现步骤\">#</a> 单例模式实现步骤</h2>\n<ol>\n<li>构造器私有化，防止用户直接进行创建。</li>\n<li>类的内部创建对象</li>\n<li>向外暴露一个静态的方法：getInstance</li>\n<li>代码实现</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//饿汉式：在没有使用前就提前创建好对象，可以在getInstance方法中判断是否已经创建对象，改造为懒汉式</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GirlFriend</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">//类的内部创建对象,为了能够在静态方法中返回gf对象，需要将其修饰为static</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">GirlFriend</span> <span class=\"variable\">gf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GirlFriend</span>(<span class=\"string\">&quot;小红&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">//构造器私有化</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">GirlFriend</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//向外暴露一个静态的方法：getInstance</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GirlFriend <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gf;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"final关键字应用\"><a class=\"markdownIt-Anchor\" href=\"#final关键字应用\">#</a> final 关键字应用</h2>\n<ol>\n<li>final 可以修饰类、属性、方法和局部变量。</li>\n<li>当不希望类被继承，可以用 final 修饰。</li>\n<li>当不希望子类的某个方法被子类覆盖 / 重写时，可以用 final 关键字修饰。</li>\n<li>当不希望类的某个属性被修改，可以用 final 修饰。</li>\n<li>当不希望局部变量被修改，可以用 final 修饰。</li>\n</ol>\n<h3 id=\"final细节\"><a class=\"markdownIt-Anchor\" href=\"#final细节\">#</a> final 细节</h3>\n<ol>\n<li>final 修饰的属性又叫常量，一般用 XX_XX_XX 来命名</li>\n<li>final 修饰的属性在定义时必须赋初值，并且不能再进行修改，且只能在定义时、构造器和代码块中为其赋初值。</li>\n<li>如果该属性是静态的，则只能在定义时和静态代码块中赋初值。不能在构造器中赋初值，因为静态变量在类加载时创建，而构造器要在对象创建时才加载。</li>\n<li>如果一个类已经是 final 类了，就没有必要在将其方法修饰为 final 方法。</li>\n<li>final 不能修饰构造方法 (即构造器)。</li>\n<li>final 和 static 往往搭配使用，效率更高，不会导致类的加载，底层编译器做了优化处理。</li>\n<li>包装类 (Integer,Double,Float,Boolean 等都是 final)，String 也是 final 类。</li>\n<li>可以指定传入的形参为 final。</li>\n</ol>\n<h2 id=\"抽象类细节\"><a class=\"markdownIt-Anchor\" href=\"#抽象类细节\">#</a> 抽象类细节</h2>\n<ol>\n<li>抽象类不能被实例化。</li>\n<li>抽象类不一定要包含 abstract 方法，还可以有实现的方法。</li>\n<li>当一个类中存在抽象方法时，需要将该类声明为 abstract 类。</li>\n<li>abstract 只能修饰类和方法，不能修饰属性和其他的。</li>\n<li>抽象类可以有任意成员，因为其本质还是一个类，比如：非抽象方法、构造器、静态方法等。</li>\n<li>抽象方法不可以有主体。</li>\n<li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为抽象类。所谓实现方法就是有方法体。</li>\n<li>抽象方法不能使用 private、final 和 static 来修饰，因为这些关键字都是和重写相违背的。</li>\n</ol>\n<h2 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\">#</a> 接口</h2>\n<ol>\n<li>在 JDK7 之前，接口中所有方法都没有方法体，都是抽象方法。</li>\n<li>JDK8 后接口中可以有静态方法，默认方法，默认方法需要使用 default 关键字修饰，即接口中可以有方法的具体实现。</li>\n<li>多态传递，A 接口继承 B 接口，C 实现 A 接口，可以有 <code>B b = new c();</code> 。</li>\n<li>在接口中，抽象方法可以省略 abstract 关键字。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Myinterface01</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">default</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myMethod</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;默认方法&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;静态方法&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Myinterface01</span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"接口细节\"><a class=\"markdownIt-Anchor\" href=\"#接口细节\">#</a> 接口细节</h3>\n<ol>\n<li>接口不能被实例化。</li>\n<li>接口中所有的方法都是 public 方法，接口中抽象方法可以不用 abstract 修饰。</li>\n<li>一个普通类实现接口，就必须将该接口的所有方法都实现。在 IJ 代码标黄处，使用 alt+enter 可以一键实现。</li>\n<li>抽象类实现接口，可以不用实现接口的方法。</li>\n<li>一个类可以同时多个接口。</li>\n<li><strong>接口中的属性，只能是 final 的，而且是 public static final 修饰符。</strong></li>\n<li>接口中属性的访问形式：接口名。属性名。</li>\n<li>接口不能继承其他的类，但是可以继承多个别的接口，使用 extends 关键字继承。</li>\n<li>接口的修饰符只能是 public 和默认，这点和类的修饰符是一样的。</li>\n</ol>\n<h3 id=\"接口与继承的区别\"><a class=\"markdownIt-Anchor\" href=\"#接口与继承的区别\">#</a> 接口与继承的区别</h3>\n<ol>\n<li>当子类继承了父类，就自动的拥有了父类的功能，如果子类需要扩展功能，可以通过实现接口的方式拓展。可以理解实现接口是对 java 单继承方式的补充。</li>\n<li>继承的价值主要在于：解决代码的复用性和可维护性。接口的价值主要在于：设计好各种规范，让其他类去实现这些方法。</li>\n<li>接口比继承更加灵活，继承满足 is-a 的关系，而接口只需满足 like-a 的关系。</li>\n<li>接口在一定程度上实现代码解耦。使用接口规范性 + 动态绑定。</li>\n</ol>\n<h3 id=\"接口练习\"><a class=\"markdownIt-Anchor\" href=\"#接口练习\">#</a> 接口练习</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pX</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(x);<span class=\"comment\">//x不明确，访问接口使用A.x，父类使用super().x</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">C</span>().pX();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"内部类\"><a class=\"markdownIt-Anchor\" href=\"#内部类\">#</a> 内部类</h2>\n<p>一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类，嵌套其他类的类称为外部类。</p>\n<p>内部类的最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系。</p>\n<h3 id=\"内部类的划分\"><a class=\"markdownIt-Anchor\" href=\"#内部类的划分\">#</a> 内部类的划分</h3>\n<p>定义在外部类局部位置上（通常方法内）：</p>\n<ol>\n<li>局部内部类（有类名）</li>\n<li>匿名内部类（无类名，重点）</li>\n</ol>\n<p>定义在外部类的成员位置上：</p>\n<ol>\n<li>成员内部类（不使用 static 修饰）</li>\n<li>静态内部类（使用 static 修饰）</li>\n</ol>\n<h3 id=\"局部内部类\"><a class=\"markdownIt-Anchor\" href=\"#局部内部类\">#</a> 局部内部类</h3>\n<ol>\n<li>可以直接访问外部类的所有成员，包括私有的。</li>\n<li>除了可以使用 final 修饰，不能添加访问修饰符。</li>\n<li>内部类可以继续被同一外部类的内部类所继承。</li>\n<li>作用域仅仅在定义它的方法或代码块中。</li>\n<li>外部类在方法中，可以创建内部类对象，然后调用方法即可。</li>\n<li>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类.this. 成员）去访问。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outer02</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Outer02 m2()&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部内部类是定义在外部类的局部位置，通常在方法</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Inner02</span>&#123;<span class=\"comment\">//本质还是一个类</span></span><br><span class=\"line\">      <span class=\"comment\">//可以直接访问外部类的所有成员，包括私有的</span></span><br><span class=\"line\">      <span class=\"type\">private</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"number\">800</span>;</span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果外部类和局部内部类的成员重名时，默认遵循就近原则</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;n1=&quot;</span> + n1);<span class=\"comment\">//输出800</span></span><br><span class=\"line\">        <span class=\"comment\">//如果想访问外部类的成员，则可以使用（外部类.this.成员）去访问</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;外部类的n1=&quot;</span> + Outer02.<span class=\"built_in\">this</span>.n1);<span class=\"comment\">//输出100</span></span><br><span class=\"line\">        m2();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//外部类在方法中，可以创建内部类对象，然后调用方法即可</span></span><br><span class=\"line\">    <span class=\"type\">Inner02</span> <span class=\"variable\">inner02</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Inner02</span>();</span><br><span class=\"line\">    inner02.f1();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"匿名内部类\"><a class=\"markdownIt-Anchor\" href=\"#匿名内部类\">#</a> 匿名内部类</h3>\n<ol>\n<li>匿名内部类没有名字，底层有一个系统命名的名字，同时还是一个对象。</li>\n<li>tiger 的编译类型是 IA, 运行类型就是匿名内部类。</li>\n<li>底层分配的类名为外部类名 +$ 数字，可以使用 getClass () 查看。</li>\n<li>匿名内部类使用一次，就不能再使用，对象可以反复使用。</li>\n<li>我认为匿名内部类就是为了简便重写只需使用一次的类。</li>\n<li>匿名内部类可以当作实参直接传递，简介高效。</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outer04</span>&#123;<span class=\"comment\">//外部类</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//基于接口的匿名内部类</span></span><br><span class=\"line\">    <span class=\"comment\">//以前想使用IA接口，是先写一个类实现该接口，并创建对象，如果只是使用一次，会很麻烦，此时使用匿名内部类</span></span><br><span class=\"line\">    <span class=\"comment\">//tiger的编译类型是IA,运行类型就是匿名内部类Outer04$1</span></span><br><span class=\"line\">    <span class=\"comment\">//底层分配的类名为外部类名+$次序，所以这个是Outer04$1，可以使用getClass()查看</span></span><br><span class=\"line\">    <span class=\"comment\">//jdk底层在创建匿名内部类后，马上就创建了实例，并且把地址返回给tiger。</span></span><br><span class=\"line\">    <span class=\"type\">IA</span> <span class=\"variable\">tiger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IA</span>()&#123;</span><br><span class=\"line\">      <span class=\"meta\">@override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是老虎&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    tiger.cry();</span><br><span class=\"line\">    <span class=\"comment\">//由于有对象的性质，也可以直接调用,效果与上面的一样</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">IA</span>()&#123;</span><br><span class=\"line\">      <span class=\"meta\">@override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是老虎&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.cry();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//基于类的匿名内部类</span></span><br><span class=\"line\">    <span class=\"comment\">//father编译类型是Father，运行类型是匿名内部类Outer04$2</span></span><br><span class=\"line\">    <span class=\"comment\">//参数列表会传递给Father的构造器</span></span><br><span class=\"line\">    <span class=\"type\">Father</span> <span class=\"variable\">father</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Father</span>(<span class=\"string\">&quot;jack&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"meta\">@override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;匿名内部重写了test方法&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    father.test();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//基于抽象类的匿名内部类</span></span><br><span class=\"line\">    <span class=\"type\">Animal</span> <span class=\"variable\">animal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>()&#123;</span><br><span class=\"line\">      <span class=\"meta\">@override</span></span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat东西&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IA</span>&#123;<span class=\"comment\">//接口</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cry</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Father</span>&#123;<span class=\"comment\">//类</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Father</span><span class=\"params\">(String name)</span>&#123;<span class=\"comment\">//构造器</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;<span class=\"comment\">//测试方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"成员内部类\"><a class=\"markdownIt-Anchor\" href=\"#成员内部类\">#</a> 成员内部类</h3>\n<ol>\n<li>成员内部类是定义在外部类的成员位置，并且没有 static 修饰。</li>\n<li>可以添加任意访问修饰符，因为它的地位就是一个成员。</li>\n<li>外部其他类访问成员内部类。<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Outer</span> <span class=\"variable\">outer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>();</span><br><span class=\"line\"><span class=\"comment\">//方法1，相当于将new Inner()当作是outer的成员</span></span><br><span class=\"line\">Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>();</span><br><span class=\"line\"><span class=\"comment\">//方法2，在外部类中编写一个方法，返回对象实例</span></span><br><span class=\"line\">Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.getInner();</span><br></pre></td></tr></table></figure></div>\n</li>\n</ol>\n<h3 id=\"静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#静态内部类\">#</a> 静态内部类</h3>\n<ol>\n<li>静态内部类是定义在外部类的成员位置，使用 static 进行修饰。</li>\n<li>可以访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员。</li>\n<li>外部其他类访问静态内部类<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法1,因为静态内部类是可以通过类名直接访问的</span></span><br><span class=\"line\">Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>.Inner();</span><br><span class=\"line\"><span class=\"comment\">//方法2，在外部类中编写一个方法，返回对象实例</span></span><br><span class=\"line\">Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.getInner();</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>重名时访问外部类的成员，可以使用外部类名。成员。</li>\n</ol>\n<h1 id=\"第九章-枚举和注解\"><a class=\"markdownIt-Anchor\" href=\"#第九章-枚举和注解\">#</a> 第九章 枚举和注解</h1>\n<h2 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\">#</a> 枚举</h2>\n<ol>\n<li>当我们使用 enum 关键字开发一个枚举类时，默认继承 Enum 类。</li>\n<li>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略。</li>\n<li>枚举对象必须放在枚举类的行首。</li>\n</ol>\n<h3 id=\"枚举函数\"><a class=\"markdownIt-Anchor\" href=\"#枚举函数\">#</a> 枚举函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ordinal()</td>\n<td>输出该枚举对象的次序，从 0 开始编号</td>\n</tr>\n<tr>\n<td>values()</td>\n<td>返回一个数组</td>\n</tr>\n<tr>\n<td>valueof()</td>\n<td>将字符串转换为枚举对象，要求字符串为已有的枚举对象</td>\n</tr>\n<tr>\n<td>compareTo()</td>\n<td>对比两个枚举对象的编号</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"枚举类\"><a class=\"markdownIt-Anchor\" href=\"#枚举类\">#</a> 枚举类</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Season</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//要求将定义常量对象写在最前面</span></span><br><span class=\"line\">  SPRING(<span class=\"string\">&quot;春天&quot;</span>,<span class=\"string\">&quot;温暖&quot;</span>),WINTER(<span class=\"string\">&quot;冬天&quot;</span>,<span class=\"string\">&quot;寒冷&quot;</span>),AUTUMN(<span class=\"string\">&quot;秋天&quot;</span>,<span class=\"string\">&quot;凉爽&quot;</span>),SUMMER(<span class=\"string\">&quot;夏天&quot;</span>,<span class=\"string\">&quot;炎热&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">  <span class=\"comment\">//下面写构造器和各种方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"注解\"><a class=\"markdownIt-Anchor\" href=\"#注解\">#</a> 注解</h2>\n<p>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入到代码中的补充信息。</p>\n<p>override 表示重写指定的父类方法（从编译层面验证），如果父类没有该方法，则会报错。</p>\n<p>元注解是修饰注解的注解。</p>\n<h3 id=\"常用注解\"><a class=\"markdownIt-Anchor\" href=\"#常用注解\">#</a> 常用注解</h3>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@override</td>\n<td>限定某个方法，是重写父类方法，该注释只能用于方法</td>\n</tr>\n<tr>\n<td>@Deprecated</td>\n<td>用于表示某个程序元素（类，方法，字段，包，参数等）已经过时</td>\n</tr>\n<tr>\n<td>@SuppressWarnings</td>\n<td>抑制编译器警告</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"元注解\"><a class=\"markdownIt-Anchor\" href=\"#元注解\">#</a> 元注解</h3>\n<table>\n<thead>\n<tr>\n<th>元注解</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Retention</td>\n<td>指定注解的作用范围，有 SOURCE、CLASS、RUNTINE</td>\n</tr>\n<tr>\n<td>Target</td>\n<td>指定注解可以在哪些地方使用</td>\n</tr>\n<tr>\n<td>Document</td>\n<td>指定该注解是否会在 javadoc 体现</td>\n</tr>\n<tr>\n<td>Inherited</td>\n<td>子类会继承父类注解</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第十章-异常\"><a class=\"markdownIt-Anchor\" href=\"#第十章-异常\">#</a> 第十章 异常</h1>\n<p>java 语言中，将程序执行中发生的不正常现象称为 “异常”，开发中的语法错误和逻辑错误不是异常。</p>\n<p>异常分为两大类，运行时异常和编译时异常。</p>\n<p>编译时异常是必须处理的异常，是我们编写程序时需要避免的情况。</p>\n<p>自定义异常类名继承 Exception（编译异常）或 RuntimeException（运行异常）。</p>\n<h2 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\">#</a> 异常处理</h2>\n<p>IJ 中将该代码选中，输入快捷键 ctrl+alt+t，选中 try-catch 可以设置异常处理。</p>\n<p>如果异常发生了，则异常后的代码不再执行，直接进入 catch 代码块。</p>\n<p>可以有多个 catch 异常，捕获不同的异常，但要求父类异常在后，子类异常在前，如发生异常，只会匹配一个 catch。</p>\n<p>可以使用 try-finally，即不对异常进行任何处理。</p>\n<p>子类重写的方法所抛出的异常类型要么额父类抛出的异常一致，要么为父类抛出异常类型的子类型。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//try-catch-finally异常处理方式</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> num1 / num2;</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(ArithmeticException e)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//捕获不同的异常</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//程序捕获到异常后，将其封装成一个Exception对象</span></span><br><span class=\"line\">  e.printStackTrace();</span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//不管是否捕获到异常，始终执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//throws异常处理方式，返回给上一级函数处理，是系统默认的处理方式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  f5();<span class=\"comment\">//会被标红，因为f2抛出的是编译异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException&#123;</span><br><span class=\"line\">  <span class=\"comment\">//使用throws抛出异常，让调用f2方法的调用者(方法)处理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"常见运行异常\"><a class=\"markdownIt-Anchor\" href=\"#常见运行异常\">#</a> 常见运行异常</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NullPointerException</td>\n<td>空指针异常</td>\n</tr>\n<tr>\n<td>ArithmeticException</td>\n<td>数学运算异常</td>\n</tr>\n<tr>\n<td>ArrayIndexOutOfBoundException</td>\n<td>数组下标越界异常</td>\n</tr>\n<tr>\n<td>ClassCastException</td>\n<td>类型转换异常</td>\n</tr>\n<tr>\n<td>NumberFormatException</td>\n<td>数字格式不正确异常</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第十一章-常用类\"><a class=\"markdownIt-Anchor\" href=\"#第十一章-常用类\">#</a> 第十一章 常用类</h1>\n<h2 id=\"包装类\"><a class=\"markdownIt-Anchor\" href=\"#包装类\">#</a> 包装类</h2>\n<p>包装类是针对 8 种基本数据类型对应的引用类型。</p>\n<p>jdk5 以后实现了自动装箱和自动拆箱。</p>\n<p>三元运算符是一个整体，取最高精度。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"comment\">//装箱</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">integer1</span> <span class=\"operator\">=</span> Integer.valueOf(n1);<span class=\"comment\">//手动装箱</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">integer2</span> <span class=\"operator\">=</span> n1;<span class=\"comment\">//自动装箱，底层使用的仍是valueOf方法</span></span><br><span class=\"line\"><span class=\"comment\">//拆箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> integer1.intValue();<span class=\"comment\">//手动拆箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> integer2;<span class=\"comment\">//自动拆箱，底层使用的仍是intValue方法</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"包装类与string转换\"><a class=\"markdownIt-Anchor\" href=\"#包装类与string转换\">#</a> 包装类与 String 转换</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包装类转String</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"comment\">//方式一，i本身没变化</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> i + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//方式二,使用包装类的toString方法</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> i.toString();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str3</span> <span class=\"operator\">=</span> String.valueOf(i);</span><br><span class=\"line\"><span class=\"comment\">//String转包装类</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;12345&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> Integer.parseInt(str4);</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(str4);</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\">#</a> 例题</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj1</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span> ? <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">1</span>):<span class=\"keyword\">new</span> <span class=\"title class_\">Double</span>(<span class=\"number\">2.0</span>);</span><br><span class=\"line\">System.out.println(obj1);</span><br><span class=\"line\"><span class=\"comment\">//输出结果为1.0，因为三元运算符为一个整体，最高为Double</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(i==j);</span><br><span class=\"line\"><span class=\"comment\">//输出FALSE，i和j此时是对象，对象相等判断地址是否相同</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">System.out.println(m==n);</span><br><span class=\"line\"><span class=\"comment\">//返回True，自动装箱底层是valueOf方法，在范围-128~127正确，这个数组是事先加载好的</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">127</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">127</span>;</span><br><span class=\"line\">System.out.println(i==j);</span><br><span class=\"line\"><span class=\"comment\">//返回True，只要有基本数据类型，判断的是值是否相同</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"string类\"><a class=\"markdownIt-Anchor\" href=\"#string类\">#</a> String 类</h2>\n<p>String 实现了 Serializable 接口，说明 String 可以串行化，即可以在网络中传输；Comparable 接口表示可以比较。</p>\n<p>字符串的字符使用 Unicode 编码，一个字符（不区分字母还是汉字）占两个字节。</p>\n<p>String 是 final 类，不能被其他的类继承。</p>\n<p>String 有属性 value [] 用于存放字符串内容，值得注意的是，该属性为 final，不可修改地址。</p>\n<h3 id=\"两种创建方法的区别\"><a class=\"markdownIt-Anchor\" href=\"#两种创建方法的区别\">#</a> 两种创建方法的区别</h3>\n<p><code>Srting s = 'hsp'</code> : 先从常量池查看是否有 “hsp” 数据空间，如果有则直接指向；如果没有则重新创建，然后指向，S 最终指向的是<strong>常量池</strong>的空间地址。</p>\n<p><code>String s = new String(&quot;hsp&quot;)</code> : 先在堆中创建空间，里面维护了 value 属性，指向常量池的 hsp 空间。如果常量池没有 “hsp”，重新创建，有则通过 value 指向。最终指向的是<strong>堆</strong>中的空间地址。可以使用 intern 方法返回常量池的地址。</p>\n<p><code>String a = &quot;hello&quot;+&quot;abc&quot;;</code>  只创建了一个对象，因为编译器会将其优化，先进行拼接。</p>\n<p><code>String s = a + &quot;hello&quot;</code>  底层会调用 StringBuilder，所以会指向<strong>堆</strong>中的空间地址。</p>\n<h3 id=\"string常用方法\"><a class=\"markdownIt-Anchor\" href=\"#string常用方法\">#</a> String 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>equals</td>\n<td>区分大小写</td>\n</tr>\n<tr>\n<td>equalsIgnoreCase</td>\n<td>忽略大小写判断内容是否相同</td>\n</tr>\n<tr>\n<td>length</td>\n<td>字符的个数，字符串的长度</td>\n</tr>\n<tr>\n<td>indexOf</td>\n<td>获取字符第一次出现的索引</td>\n</tr>\n<tr>\n<td>lastIndexOf</td>\n<td>获取字符最后一次出现的索引</td>\n</tr>\n<tr>\n<td>substring</td>\n<td>截取指定范围的子串</td>\n</tr>\n<tr>\n<td>trim</td>\n<td>去前后空格</td>\n</tr>\n<tr>\n<td>charAt</td>\n<td>获取某索引出的字符，注意不能使用 str [index] 方法</td>\n</tr>\n<tr>\n<td>contact</td>\n<td>拼接字符串</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>替换字符串，原字符串不变化，返回的结果才是替换的</td>\n</tr>\n<tr>\n<td>split</td>\n<td>分割字符串</td>\n</tr>\n<tr>\n<td>toCharArray</td>\n<td>转换为字符数组</td>\n</tr>\n<tr>\n<td>compareTo</td>\n<td>比较大小</td>\n</tr>\n<tr>\n<td>format</td>\n<td>格式化字符串</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"例题-2\"><a class=\"markdownIt-Anchor\" href=\"#例题-2\">#</a> 例题</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hsp&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">char</span>[] ch = &#123;<span class=\"string\">&#x27;j&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;v&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(String str,<span class=\"type\">char</span> ch[])</span>&#123;</span><br><span class=\"line\">    str = <span class=\"string\">&quot;java&quot;</span>;<span class=\"comment\">//String类的更新实际上是更改地址</span></span><br><span class=\"line\">    ch[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;h&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">Text1</span> <span class=\"variable\">ex</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test1</span>();</span><br><span class=\"line\">  ex.change(ex.str,ex.ch);</span><br><span class=\"line\">  System.out.println(ex.str+<span class=\"string\">&quot;and&quot;</span>+ex.ch);</span><br><span class=\"line\">  <span class=\"comment\">//输出hspandhava</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"stringbuffer-stringbuilder类\"><a class=\"markdownIt-Anchor\" href=\"#stringbuffer-stringbuilder类\">#</a> StringBuffer、StringBuilder 类</h2>\n<p>StringBuffer 是一个容器，代表可变的字符序列，可以对字符串内容进行删减。</p>\n<p>String 保存的是字符串常量，里面的值不能更改，每次 String 类的实际上就是更改地址，效率较低；StringBuffer 值存放在堆中，每次更新实际上可以更新内容，不用每次更新地址。</p>\n<p>StringBuilder 一个可变的字符序列，提供与 StringBuffer 兼容的 API，但不保证同步，不是线程安全。其作为 StringBuffer 的一个简易替换，用于字符串缓冲区被单个线程使用，速度快于 StringBuffer。</p>\n<h3 id=\"string与stringbuffer转换\"><a class=\"markdownIt-Anchor\" href=\"#string与stringbuffer转换\">#</a> String 与 StringBuffer 转换</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//String转StringBuffer</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello tom&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">StringBuffer</span> <span class=\"variable\">strB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>(str);</span><br><span class=\"line\"><span class=\"comment\">//StringBuffer转String</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> strB.toString();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(strB);</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"stringbuffer常用方法\"><a class=\"markdownIt-Anchor\" href=\"#stringbuffer常用方法\">#</a> StringBuffer 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>append</td>\n<td>在末尾追加字符</td>\n</tr>\n<tr>\n<td>delete(start,end)</td>\n<td>删除区间内字符</td>\n</tr>\n<tr>\n<td>replace(start,end,string)</td>\n<td>将 start 到 end 中的字符替换成 string</td>\n</tr>\n<tr>\n<td>indexOf</td>\n<td>查找子串第一次出现的索引</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>插入</td>\n</tr>\n<tr>\n<td>length</td>\n<td>获取长度</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"例题-3\"><a class=\"markdownIt-Anchor\" href=\"#例题-3\">#</a> 例题</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">sb.append(str);<span class=\"comment\">//底层调用的是AbstractStringBuilder的appendNull，返回一个null字符串</span></span><br><span class=\"line\">System.out.println(sb.length());<span class=\"comment\">//输出4</span></span><br><span class=\"line\">System.out.println(sb);<span class=\"comment\">//输出null</span></span><br><span class=\"line\"><span class=\"type\">StringBuffer</span> <span class=\"variable\">sb1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>(str);<span class=\"comment\">//底层super(str.length()+16),length方法抛出空指针异常</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"math类\"><a class=\"markdownIt-Anchor\" href=\"#math类\">#</a> Math 类</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>abs</td>\n<td>绝对值</td>\n</tr>\n<tr>\n<td>pow</td>\n<td>求幂</td>\n</tr>\n<tr>\n<td>ceil</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>floor</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>round</td>\n<td>四舍五入</td>\n</tr>\n<tr>\n<td>sqrt</td>\n<td>开平方</td>\n</tr>\n<tr>\n<td>random</td>\n<td>返回 [0-1) 的随机数</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"arrays类\"><a class=\"markdownIt-Anchor\" href=\"#arrays类\">#</a> Arrays 类</h2>\n<h3 id=\"常用方法\"><a class=\"markdownIt-Anchor\" href=\"#常用方法\">#</a> 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>toString</td>\n<td>返回数组的字符串形式</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>排序，分为自然排序和定制排序，因为数组是引用类型，所以会影响到实参</td>\n</tr>\n<tr>\n<td>binarySearch</td>\n<td>二分查找，要求已排序数组</td>\n</tr>\n<tr>\n<td>copyOf</td>\n<td>拷贝 n 个元素到新数组中</td>\n</tr>\n<tr>\n<td>fill</td>\n<td>数组填充，将原来的元素全部替换成新元素</td>\n</tr>\n<tr>\n<td>equals</td>\n<td>比较两个数组元素内容是否完全一致</td>\n</tr>\n<tr>\n<td>asList</td>\n<td>将一组数据转换为 list</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"定制排序\"><a class=\"markdownIt-Anchor\" href=\"#定制排序\">#</a> 定制排序</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定制排序是通过传入一个接口Comparator实现定制排序规则</span></span><br><span class=\"line\">Arrays.sort(arr,<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>()&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(object o1,object o2)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> (Integer) o1;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> (Integer) o2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i2 - i1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"system类\"><a class=\"markdownIt-Anchor\" href=\"#system类\">#</a> System 类</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>exit</td>\n<td>退出当前程序</td>\n</tr>\n<tr>\n<td>arraycopy</td>\n<td>复制数组元素，比较适合底层调用</td>\n</tr>\n<tr>\n<td>currentTimeMillens</td>\n<td>返回当前时间距离 1970-1-1 的毫秒数</td>\n</tr>\n<tr>\n<td>gc</td>\n<td>垃圾回收机制</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"biginteger和bigdecimal\"><a class=\"markdownIt-Anchor\" href=\"#biginteger和bigdecimal\">#</a> BigInteger 和 BigDecimal</h2>\n<p>BigInteger 适合保存比较大的整型，BigDecimal 适合保存精度更高的浮点型。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明BigInteger</span></span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">big1</span> <span class=\"operator\">=</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;57987978979879879&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">big2</span> <span class=\"operator\">=</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;989898989898899879&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//在对BigInteger进行加减乘除的时候，需要使用对应的方法</span></span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">add</span> <span class=\"operator\">=</span> big1.add(big2);</span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">sub</span> <span class=\"operator\">=</span> big1.substract(big2);</span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">mul</span> <span class=\"operator\">=</span> big1.multiply(big2);</span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">div</span> <span class=\"operator\">=</span> big1.divide(big2);</span><br><span class=\"line\"><span class=\"comment\">//声明BigDecimal</span></span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">dec1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;489.5646545644454465&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">dec2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;8978978.564654564564544565&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//加减乘的方法与上面BigInteger相同，除法可能出现异常，结果可能无限循环小数</span></span><br><span class=\"line\"><span class=\"comment\">//在调用除法时，指定精度,ROUND_CEILING保留被除数原有的精度</span></span><br><span class=\"line\"><span class=\"type\">BigInteger</span> <span class=\"variable\">div</span> <span class=\"operator\">=</span> dec1.divide(dec2,BigDecimal.ROUND_CEILING);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"日期类\"><a class=\"markdownIt-Anchor\" href=\"#日期类\">#</a> 日期类</h2>\n<h3 id=\"第一代日期类date\"><a class=\"markdownIt-Anchor\" href=\"#第一代日期类date\">#</a> 第一代日期类 Date</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Date</td>\n<td>精确到毫秒，代表特定的瞬间</td>\n</tr>\n<tr>\n<td>SimpleDateFormat</td>\n<td>格式和解析日期的类</td>\n</tr>\n</tbody>\n</table>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();<span class=\"comment\">//获取日期</span></span><br><span class=\"line\"><span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>);<span class=\"comment\">//设定格式</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> sdf.format(d1);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1996年01月01日 10:20:30 星期一&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">parse</span> <span class=\"operator\">=</span> sdf.parse(s);<span class=\"comment\">//将格式化字符串转化为日期</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"第二代日期类calendar\"><a class=\"markdownIt-Anchor\" href=\"#第二代日期类calendar\">#</a> 第二代日期类 Calendar</h3>\n<p>Calender 是一个抽象类，并且构造器是 private，可以通过 getInstance () 来获取实例。</p>\n<p>存在的问题：可变性、偏移性、不可格式化、线程不安全、不能处理闰秒。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Calendar.getInstance();<span class=\"comment\">//创建日历对象，不能使用new</span></span><br><span class=\"line\"><span class=\"comment\">//获取日历对象的字段，使用get方法</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;月：&quot;</span>+(c.get(Calendar.MONTH)+<span class=\"number\">1</span>));<span class=\"comment\">//月份从0开始，所以需要加1</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"第三代日期类localdatetime\"><a class=\"markdownIt-Anchor\" href=\"#第三代日期类localdatetime\">#</a> 第三代日期类 LocalDateTime</h3>\n<p>LocalDate 只包含日期，LocalTime 只包含时间，LocalDateTime 日期和时间都包含。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt</span> <span class=\"operator\">=</span> LocalDateTime.now();<span class=\"comment\">//创建对象，不能new</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;月=&quot;</span> + ldt.getMonth());<span class=\"comment\">//返回JULY</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;月=&quot;</span> + ldt.getMonthValue());<span class=\"comment\">//返回7</span></span><br><span class=\"line\"><span class=\"comment\">//使用DateTimeFormatter对象格式化</span></span><br><span class=\"line\"><span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">dtf</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;&quot;</span>yyyy年MM月dd日 HH小时mm分钟ss秒<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> dft.format(ldt);</span><br><span class=\"line\"><span class=\"comment\">//Instant时间戳，与Date相互转换</span></span><br><span class=\"line\"><span class=\"type\">Instant</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> Date.from(now);</span><br><span class=\"line\"><span class=\"type\">Instant</span> <span class=\"variable\">instant</span> <span class=\"operator\">=</span> date.toInstant();</span><br><span class=\"line\"><span class=\"comment\">//提供plus和minus方法对当前日期进行加减操作</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt1</span> <span class=\"operator\">=</span> ldt.plusDays(<span class=\"number\">890</span>);<span class=\"comment\">//890天后的时间</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt1</span> <span class=\"operator\">=</span> ldt.minusMinutes(<span class=\"number\">8</span>);<span class=\"comment\">//8分钟前的时间</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"练习\"><a class=\"markdownIt-Anchor\" href=\"#练习\">#</a> 练习</h2>\n<p>编程技巧：对函数进行验证时，先写出正确的情况，然后取反即可。</p>\n<h1 id=\"第十二章-集合\"><a class=\"markdownIt-Anchor\" href=\"#第十二章-集合\">#</a> 第十二章 集合</h1>\n<p>集合可以动态保存任意多个对象，使用比较方便，并提供了一系列方便操作对象的方法。</p>\n<p>集合主要分为单列集合 (Collection) 和双列集合 (Map, 一般以键值对形式存在)。</p>\n<h2 id=\"collection接口\"><a class=\"markdownIt-Anchor\" href=\"#collection接口\">#</a> Collection 接口</h2>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/f59eb486d97f8445f82ac823e1181265.png\"\n                      alt=\"Collection接口\" style=\"zoom:67%;\" \n                >\n<h3 id=\"collection常用方法\"><a class=\"markdownIt-Anchor\" href=\"#collection常用方法\">#</a> Collection 常用方法</h3>\n<p>Collection 接口没有被实例化，以实现子类 ArrayList 来演示。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add</td>\n<td>增加元素</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>删除元素，指定删除元素会返回布尔值，指定对象则返回被删除对象</td>\n</tr>\n<tr>\n<td>contains</td>\n<td>查找元素是否存在</td>\n</tr>\n<tr>\n<td>size</td>\n<td>返回元素个数</td>\n</tr>\n<tr>\n<td>isEmpty</td>\n<td>判断是否为空</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>清空</td>\n</tr>\n<tr>\n<td>addAll</td>\n<td>添加多个元素</td>\n</tr>\n<tr>\n<td>containsAll</td>\n<td>查找多个元素是否都存在</td>\n</tr>\n<tr>\n<td>removeAll</td>\n<td>删除多个元素</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"迭代器的执行原理\"><a class=\"markdownIt-Anchor\" href=\"#迭代器的执行原理\">#</a> 迭代器的执行原理</h3>\n<p>快捷键 itit 快速生成 while 循环，而且 ctrl+j 可以查看所有快捷键。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Iterator</span> <span class=\"variable\">iterator</span> <span class=\"operator\">=</span> col.iterator();<span class=\"comment\">//获取迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(iterator.hasNext())&#123;<span class=\"comment\">//判断是否有下一元素</span></span><br><span class=\"line\">  <span class=\"type\">Object</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> iterator.next();<span class=\"comment\">//返回下一元素，类型为Object</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">iterator = col.iterator();<span class=\"comment\">//重置迭代器</span></span><br><span class=\"line\"><span class=\"comment\">//增强for循环，简化版的iterator</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Object book:col)&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;book=&quot;</span> + book);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"list接口\"><a class=\"markdownIt-Anchor\" href=\"#list接口\">#</a> List 接口</h3>\n<p>List 集合类中元素有序（即添加顺序和取出顺序一致），且可重复。</p>\n<p>List 集合中的每个元素都有其对应的顺序索引，支持索引，可以根据序号存取容器中的元素。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add(int index,Object ele)</td>\n<td>在 index 位置插入 ele 元素</td>\n</tr>\n<tr>\n<td>addAll(int index,Collection eles)</td>\n<td>从 index 位置开始将 eles 的元素添加进来</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取指定位置的元素</td>\n</tr>\n<tr>\n<td>indexOf</td>\n<td>返回元素在集合中首次出现的位置</td>\n</tr>\n<tr>\n<td>lastIndexOf</td>\n<td>返回元素在集合中最后出现的位置</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>删除指定位置的元素，并返回该元素</td>\n</tr>\n<tr>\n<td>set(int index,Object ele)</td>\n<td>设置指定位置的元素为 ele，相当于替换</td>\n</tr>\n<tr>\n<td>subList(int from,int to)</td>\n<td>返回从 from 到 to 的子集合</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"arraylist\"><a class=\"markdownIt-Anchor\" href=\"#arraylist\">#</a> ArrayList</h4>\n<p>ArrayList 可以放入 null，而且可以放多个。</p>\n<p>ArrayList 底层是由数组实现数据存储的，维护了一个 Object 类型的数组 elementData []。当创建 ArrayList 对象时，如果使用无参构造器，则 elementData<strong> 容量为 0</strong>，第一次添加时则扩容 elementData 为<strong> 10</strong>，如需要再次扩容，则扩容 elementData 为<strong> 1.5 倍</strong>。如果使用的是指定大小的构造器，则初始扩容 elementData 为指定大小，如需要再次扩容，则扩容 elementData 为<strong> 1.5 倍</strong>。</p>\n<p>ArrayList 基本等同于 Vector，除了 ArrayList 是线程不安全的（执行效率高），在多线程情况下，建议使用 Vector。</p>\n<p>transient 关键字表示该属性不会被序列化。</p>\n<h4 id=\"vector\"><a class=\"markdownIt-Anchor\" href=\"#vector\">#</a> Vector</h4>\n<p>Vector 底层也是一个对象数组，维护了一个 Object 类型的数组 elementData []。当创建 Vector 对象时，如果使用无参构造器，则调用有参构造器，设置<strong>容量为 10</strong>，需要扩容，则扩容 elementData 为<strong> 2 倍</strong>。如果使用的是指定大小的构造器，则初始扩容 elementData 为指定大小，如需要再次扩容，则扩容 elementData 为<strong> 2 倍</strong>。不过扩容大小可以自行指定。</p>\n<p>与 ArrayList 不同的是，Vector 是线程同步的，即线程安全的，带有 synchronized 关键字。</p>\n<h4 id=\"linkedlist\"><a class=\"markdownIt-Anchor\" href=\"#linkedlist\">#</a> LinkedList</h4>\n<p>LinkedList 底层实现了双向链表和双端队列，可以添加任意元素，且元素可以重复或为 null，但线程不安全，没有实现同步。</p>\n<h3 id=\"set接口\"><a class=\"markdownIt-Anchor\" href=\"#set接口\">#</a> Set 接口</h3>\n<p>Set 接口是无序的，即添加和取出的顺序不一致 (但是取出的顺序是固定的)，没有索引；不允许重复数据，使用最多只有一个 null。</p>\n<p>同 Collection 的迭代方式一样，因为 Set 接口是 Collection 接口的子接口，可以使用迭代器和增强 for，但是不能使用索引的方式来获取。</p>\n<h4 id=\"hashset\"><a class=\"markdownIt-Anchor\" href=\"#hashset\">#</a> HashSet</h4>\n<p>HashSet 的底层其实是 HashMap，而 HashMap 的底层是数组 + 链表 + 红黑树，在数据量小的时候为哈希中的拉链法，数据量大时会转化为红黑树。</p>\n<p>在添加数据时，先得到 hash 值，然后会转化为索引值，找到索引位置后判断是否已有元素，没有则直接加入，有则逐个调用 equals 方法比较，如果相同则放弃添加，否则将其添加到最后。在 java8 中，如果一条链表的元素个数超过 TREEIFY-THRESHOLD (默认是 8)，而且数组大小大于等于 MIN-TREEIFY-CAPACITY (默认为 64)，就会进行红黑树化。</p>\n<p>第一次添加时，table 扩容到 16，临界值为容量 * 加载因子 0.75 为 12。到达临界值后，会扩容 2 倍到 32，因此新的临界值等于 32 乘以 0.75=24，以此类推。还有一种导致扩容的情况是单条链已经超越 TREEIFY-THRESHOLD (默认是 8)，每超越一次，触发一次扩容。该容量是指元素的个数，不是只计算在第一个位置上的。</p>\n<p>LinkedHashSet 是 HashSet 的子类，底层是 LinkedHashMap，维护了一个数组 + 双向链表。其使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。第一次添加时，直接将数组扩容到 16，数组类型是 <code>HashMap$Node</code>  存放的结点类型是 <code>LinkedHashMap$Entry</code> 。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//HashSet不能添加相同的元素</span></span><br><span class=\"line\">set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>(<span class=\"string\">&quot;Tom&quot;</span>));</span><br><span class=\"line\">set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>(<span class=\"string\">&quot;Tom&quot;</span>));<span class=\"comment\">//是可以的，因为是两个不同的元素</span></span><br><span class=\"line\">set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hsp&quot;</span>));</span><br><span class=\"line\">set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hsp&quot;</span>);<span class=\"comment\">//是不可以的，因为按照String的equals方法判断，两者是相同的</span></span><br><span class=\"line\"><span class=\"comment\">//哈希计算公式</span></span><br><span class=\"line\">hash = <span class=\"literal\">null</span> ? <span class=\"number\">0</span>:(h = key.hashcode())^(h&gt;&gt;&gt;<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//相等判断,equals会根据key进行动态绑定</span></span><br><span class=\"line\">(k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"treeset\"><a class=\"markdownIt-Anchor\" href=\"#treeset\">#</a> TreeSet</h4>\n<p>TreeSet 的底层是 TreeMap，可以进行排序，可以通过传入一个比较器 (匿名内部类) 来实现排序效果。构造器把传入的比较器对象赋给 TreeSet 底层的 TreeMap 的属性 this.comparator。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TreeSet</span> <span class=\"variable\">treeset</span> <span class=\"operator\">=</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>()&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(object o1,object o2)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((String) o1).compareTo((String) o2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<p>不允许传入相同 (以 Comparator 为准) 的元素，如果设定比较长度，则长度一样的不能加入。</p>\n<h2 id=\"mapjdk8\"><a class=\"markdownIt-Anchor\" href=\"#mapjdk8\">#</a> Map(JDK8)</h2>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/01ad78be19da71cc384c01b6b8deeebb.png\"\n                      alt=\"Map接口\" style=\"zoom:50%;\" \n                >\n<p>Map 用于具有映射关系的数据，key 和 value 可以是任何引用类型的数据，会封装到 HashMap$Node 对象中。key 不允许重复，但允许为 null，而 value 允许重复，这种情况相当于进行替换。</p>\n<p>常用 String 类作为 Map 的 key。key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value。</p>\n<p>HashMap 是 Map 接口使用频率最高的实现类，其没有实现同步，因此是线程不安全。</p>\n<p>HashTable 的键和值都不能为 null，而且是线程安全的。HashTable 的元素是 HashTable$Entry 类型的，使用 addEntry 方法添加元素。其初始容量为 11，扩容为 2 倍 + 1。</p>\n<p>Properties 还可以从 xxx.propertises 文件 (作为配置文件) 中加载数据到 Properties 类对象，并进行读取和修改</p>\n<h3 id=\"map常用方法\"><a class=\"markdownIt-Anchor\" href=\"#map常用方法\">#</a> Map 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>put</td>\n<td>添加</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>根据键删除映射关系</td>\n</tr>\n<tr>\n<td>get</td>\n<td>根据键获取值</td>\n</tr>\n<tr>\n<td>size</td>\n<td>获取元素个数</td>\n</tr>\n<tr>\n<td>isEmpty</td>\n<td>判断是否为空</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>清除</td>\n</tr>\n<tr>\n<td>containsKey</td>\n<td>查找键是否存在</td>\n</tr>\n<tr>\n<td>keySet</td>\n<td>获取所有的键</td>\n</tr>\n<tr>\n<td>entrySet</td>\n<td>获取所有的关系</td>\n</tr>\n<tr>\n<td>values</td>\n<td>获取所有的值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"map遍历方式\"><a class=\"markdownIt-Anchor\" href=\"#map遍历方式\">#</a> Map 遍历方式</h3>\n<ol>\n<li>先取出所有的 key，通过 key 取出对应的 value。</li>\n<li>把所有 values 取出。</li>\n<li>通过 entrySet 方法获取，集合存放的数据的元素类型是 Entry，提供了 getKey 和 getValue 方法。<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Set</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> map.entrySet();<span class=\"comment\">//转换成entry类型</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Object obj:set)&#123;</span><br><span class=\"line\">  Map.<span class=\"type\">Entry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> (Map.Entry) obj;<span class=\"comment\">//向下转型</span></span><br><span class=\"line\">  System.out.println(entry.getKey() + <span class=\"string\">&quot;-&quot;</span> +entry.getValue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ol>\n<h2 id=\"collections工具类\"><a class=\"markdownIt-Anchor\" href=\"#collections工具类\">#</a> Collections 工具类</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Collections的方法都是静态方法，传入参数即可调用</span></span><br><span class=\"line\">Collections.sort(list);</span><br></pre></td></tr></table></figure></div>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reverse</td>\n<td>反转 List 中元素的顺序</td>\n</tr>\n<tr>\n<td>shuffle</td>\n<td>对 List 中元素进行随机排序</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>对 List 元素进行升序排序，可以自行指定排序接口</td>\n</tr>\n<tr>\n<td>swap</td>\n<td>交换 List 中两个元素的位置</td>\n</tr>\n<tr>\n<td>max</td>\n<td>返回集合中的最大元素，可以自行指定排序接口</td>\n</tr>\n<tr>\n<td>min</td>\n<td>返回集合中的最小元素，可以自行指定排序接口</td>\n</tr>\n<tr>\n<td>frequency</td>\n<td>返回集合中指定元素的出现次数</td>\n</tr>\n<tr>\n<td>copy(List dest,List src)</td>\n<td>将一个 src 复制到 dest 中，需要 dest 的大小大于等于 src</td>\n</tr>\n<tr>\n<td>replaceAll</td>\n<td>使用新值替换 List 中的所有值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"例题-4\"><a class=\"markdownIt-Anchor\" href=\"#例题-4\">#</a> 例题</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TreeSet</span> <span class=\"variable\">treeset</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>();</span><br><span class=\"line\"><span class=\"comment\">//add方法，因为构造器没有传入Comparator接口的匿名内部类，</span></span><br><span class=\"line\"><span class=\"comment\">//所以底层会将尝试将Person转为Comparable类型，而Person没有实现，因此会报错，解决方法是实行Comparable接口</span></span><br><span class=\"line\">treeset.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改了hashcode为id和name绑定，equals是判断id和name是否相同</span></span><br><span class=\"line\"><span class=\"type\">HashSet</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">1001</span>,<span class=\"string\">&quot;AA&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">1002</span>,<span class=\"string\">&quot;BB&quot;</span>);</span><br><span class=\"line\">set.add(p1);</span><br><span class=\"line\">set.add(p2);</span><br><span class=\"line\">p1.name = <span class=\"string\">&quot;CC&quot;</span>;</span><br><span class=\"line\">set.remove(p1);<span class=\"comment\">//由于此时p1已被改变，哈希值改变，不能查找到原来位置，删除失败</span></span><br><span class=\"line\">set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">1001</span>,<span class=\"string\">&quot;AA&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//p1的name发生改变，但在内部存储的位置不变，和新加入的不相同，所以能成功加入</span></span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第十三章-泛型\"><a class=\"markdownIt-Anchor\" href=\"#第十三章-泛型\">#</a> 第十三章 泛型</h1>\n<p>传统方法不能对加入到集合中的数据进行约束，而且遍历的时候，需要类型转换，如果集合中的数据量较大，对效率有影响。</p>\n<p>泛型又称参数化类型，是 JDK5 出现的新特性，解决数据类型的安全性问题，在类声明或实例化时只要指定需要的具体类型即可。</p>\n<p>泛型的作用是在类声明时通过一个标识表示类中某个属性的类型，或者某个方法的返回值类型，或者参数类型。</p>\n<p>JUnit 单元测试框架首先输入 <code>@Test</code> ，然后在后面按 <code>alt+enter</code> ，然后点击方法旁边的运行键即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Dog&gt; arraylist = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Dog&gt;();</span><br><span class=\"line\">ArrayList&lt;Dog&gt; arraylist = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();<span class=\"comment\">//简写形式，推荐使用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Dog dog:arraylist)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//此时可以不再使用Object类，直接使用Dog，不用进行类型转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt;&#123;</span><br><span class=\"line\">  T s;<span class=\"comment\">//此时s的数据类型指定的泛型决定&#x27;</span></span><br><span class=\"line\">  T[] ts = <span class=\"keyword\">new</span> <span class=\"title class_\">T</span>[<span class=\"number\">8</span>];<span class=\"comment\">//错误的，使用泛型的数组，不能初始化，因为数组在new不能确定T的类型，就无法在内存中开空间</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(T s)</span>&#123;<span class=\"comment\">//T可以是参数类型</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.s = s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">f</span><span class=\"params\">()</span>&#123;<span class=\"comment\">//E可以是返回类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>&lt;M,R&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">(M m,R r)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//泛型方法，调用方法声明的泛型</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly1</span><span class=\"params\">(T t)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不能称作泛型方法，只是使用了泛型，里面的泛型只能使用类声明的泛型</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m1</span><span class=\"params\">(T t)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//静态方法不能使用泛型，因为静态是和类相关的，所以无法得知泛型的类型</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IUsb</span>&lt;String,Double&gt;&#123;</span><br><span class=\"line\">  <span class=\"comment\">//在继承接口时指定泛型接口的类型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IUsb</span>&lt;U,R&gt;&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"泛型使用细节\"><a class=\"markdownIt-Anchor\" href=\"#泛型使用细节\">#</a> 泛型使用细节</h2>\n<ol>\n<li><strong>泛型只能是引用类型，不可以是基本数据类型。</strong></li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();<span class=\"comment\">//True</span></span><br><span class=\"line\">List&lt;<span class=\"type\">int</span>&gt; list2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;<span class=\"type\">int</span>&gt;();<span class=\"comment\">//False</span></span><br></pre></td></tr></table></figure></div>\n<ol start=\"2\">\n<li>在给泛型指定具体类型后，可以传入该类型或其子类类型。</li>\n<li>如果没有指定泛型，则默认是 Object 类。</li>\n<li>使用泛型的数组，不能初始化，因为数组在 new 不能确定 T 的类型，就无法在内存中开空间。</li>\n<li>静态方法不能使用泛型，因为静态是和类相关的，所以无法得知泛型的类型。</li>\n</ol>\n<h2 id=\"泛型的通配符\"><a class=\"markdownIt-Anchor\" href=\"#泛型的通配符\">#</a> 泛型的通配符</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型不具备继承性</span></span><br><span class=\"line\">List&lt;Object&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\"><span class=\"comment\">//&lt;?&gt;:支持任意泛型类型</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;? extends A&gt;:支持A类以及A类的子类，规定了泛型的上限</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;? super A&gt;:支持A类以及A类的父类，不限于直接父类，规定了泛型的下限</span></span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第十四章-坦克大战\"><a class=\"markdownIt-Anchor\" href=\"#第十四章-坦克大战\">#</a> 第十四章 坦克大战</h1>\n<p>写并发程序，一定要考虑清楚，该线程什么时候结束。</p>\n<p>线程消亡了不代表它的对象会变为 null。</p>\n<p>主要实现了英雄坦克和敌人坦克的范围内移动和子弹的发射功能，还有子弹击中效果实现。</p>\n<h2 id=\"绘图\"><a class=\"markdownIt-Anchor\" href=\"#绘图\">#</a> 绘图</h2>\n<p>当组件第一次在屏幕显示的时候，程序会自动的调用 paint () 方法来绘制组件，还有在窗口最小化后在最大化；窗口的大小发生变化；repaint 函数被调用。</p>\n<p>画笔基础 JPanel 画笔类，主类继承 JFrame 画框类，这样才能画出图像。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DrawCircle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JFrame</span>&#123;<span class=\"comment\">//JFrame相当于画框</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">MyPenal</span> <span class=\"variable\">mp</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">DrawCircle</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DrawCircle</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化面板</span></span><br><span class=\"line\">        mp = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPenal</span>();</span><br><span class=\"line\">        <span class=\"comment\">//将面板放入到画框中</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.add(mp);</span><br><span class=\"line\">        <span class=\"comment\">//设置画框大小</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setSize(<span class=\"number\">400</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class=\"comment\">//点击关闭按钮后程序退出</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setVisible(<span class=\"literal\">true</span>);<span class=\"comment\">//可以显示</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPenal</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JPanel</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">paint</span><span class=\"params\">(Graphics g)</span> &#123;<span class=\"comment\">//绘图方法</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.paint(g);<span class=\"comment\">//调用父类方法完成初始化</span></span><br><span class=\"line\">        <span class=\"comment\">//此处画椭圆的x,y不是圆心的坐标，而是椭圆形成的长方形的左上角坐标</span></span><br><span class=\"line\">        g.setColor(Color.BLUE);<span class=\"comment\">//设置颜色为蓝色</span></span><br><span class=\"line\">        g.drawOval(<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"comment\">//绘制图片</span></span><br><span class=\"line\">        <span class=\"type\">Image</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(<span class=\"string\">&quot;/哈哈.jpg&quot;</span>));</span><br><span class=\"line\">        g.drawImage(image,<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>,<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//绘制文字</span></span><br><span class=\"line\">        g.setColor(Color.red);</span><br><span class=\"line\">        g.setFont(<span class=\"keyword\">new</span> <span class=\"title class_\">Font</span>(<span class=\"string\">&quot;宋体&quot;</span>,Font.BOLD,<span class=\"number\">50</span>));</span><br><span class=\"line\">        g.drawString(<span class=\"string\">&quot;北京你好&quot;</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>);<span class=\"comment\">//此处的x,y位置为左下角</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"常用方法-2\"><a class=\"markdownIt-Anchor\" href=\"#常用方法-2\">#</a> 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>drawLine</td>\n<td>画直线</td>\n</tr>\n<tr>\n<td>drawRect</td>\n<td>画矩形边框</td>\n</tr>\n<tr>\n<td>drawOval</td>\n<td>画椭圆边框</td>\n</tr>\n<tr>\n<td>fillRect</td>\n<td>填充矩形</td>\n</tr>\n<tr>\n<td>fillOval</td>\n<td>填充椭圆</td>\n</tr>\n<tr>\n<td>drawImage</td>\n<td>画图片，图片需要放在 out 文件夹下的 idea 文件夹下</td>\n</tr>\n<tr>\n<td>drawString</td>\n<td>画字符串</td>\n</tr>\n<tr>\n<td>setFont</td>\n<td>设置画笔的字体</td>\n</tr>\n<tr>\n<td>setColor</td>\n<td>设置画笔的颜色</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"事件处理\"><a class=\"markdownIt-Anchor\" href=\"#事件处理\">#</a> 事件处理</h2>\n<p>java 事件处理是采用 “委派事件模型”，当事件发生时，产生事件的对象，会将此 “信息” 传递给 “事件的监听者” 处理。</p>\n<p>控制小球移动需要画笔实现 KeyListener 接口监听键盘的操作，以实现对小球的控制，同时需要在主函数中监听对应的画笔才能实现功能。</p>\n<p>使用 getKeyCode () 方法可以获取键盘输入，每当发生变化时需要调用 repaint 方法进行图像重绘。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BallMove</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JFrame</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyPenal</span> <span class=\"variable\">mp</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BallMove</span> <span class=\"variable\">ballMove</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BallMove</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BallMove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mp = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPenal</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.add(mp);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setSize(<span class=\"number\">400</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">        <span class=\"comment\">//窗口JFrame可以监听键盘事件，即可以监听面板发生的键盘事件</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.addKeyListener(mp);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//面板，可以画小球</span></span><br><span class=\"line\"><span class=\"comment\">//KeyListener是一个监听器，可以监听键盘时间，可以点击显示上下文生成三个需要实现的方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPenal</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JPanel</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">KeyListener</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//为了小球可以移动，把左上角坐标设置为变量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">paint</span><span class=\"params\">(Graphics g)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.paint(g);</span><br><span class=\"line\">        g.fillOval(x, y, <span class=\"number\">20</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//监听有字符输出时</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">keyTyped</span><span class=\"params\">(KeyEvent e)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当某个键被按下时</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">keyPressed</span><span class=\"params\">(KeyEvent e)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println((char) e.getKeyCode() + &quot;被按下&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//根据用户按下的不同键，来处理小球的移动</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getKeyCode() == KeyEvent.VK_DOWN) &#123;<span class=\"comment\">//向下的箭头</span></span><br><span class=\"line\">            y++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKeyCode()==KeyEvent.VK_UP)&#123;</span><br><span class=\"line\">            y--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKeyCode()==KeyEvent.VK_LEFT)&#123;</span><br><span class=\"line\">            x--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKeyCode()==KeyEvent.VK_RIGHT)&#123;</span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//让画笔重绘图像</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repaint();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当某个键被释放</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">keyReleased</span><span class=\"params\">(KeyEvent e)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第十五章-线程基础\"><a class=\"markdownIt-Anchor\" href=\"#第十五章-线程基础\">#</a> 第十五章 线程 (基础)</h1>\n<p>** 在 java 中使用线程有两种方法，一种是继承 Thread 类，重写 run 方法；另一种是实行 Runnable，重写 run 方法。** 从 java 的设计来看，两者本质上没有区别，但实现 Runnable 接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制。</p>\n<p>Thread 类实现了 Runnable 接口的 run 方法。</p>\n<p>在控制台中输入 jconsole 可以查看线程信息。</p>\n<p><strong>为啥调用的是 start 方法，而不是 run 方法，因为 run 方法就是一个普通的方法，没有真正的启动一个线程，只是像以前一样顺序执行。线程是通过底层的 start0 方法实现的。</strong></p>\n<p>当线程完成任务后会自动退出，除此之外还可以通过使用变量来控制 run 方法停止线程，即通知方式。</p>\n<p>用户线程：也叫工作线程，当线程的任务执行完成或通知方式结束。</p>\n<p>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束。最常见的守护线程是垃圾回收机制。</p>\n<p>可以在方法上加上 synchronized 关键字来实现同步。同步方法如果没有使用 static 修饰，默认锁对象为 this，如果方法使用 static 修饰，默认锁对象为当前类.class。</p>\n<p>在代码块上加锁：同步方法（非静态的）的锁可以是 this，也可以是其他对象（要求是同一个对象）；而同步方法（静态的）的锁是当前类本身。</p>\n<p>线程同步关键在于要求多个线程的锁的对象为同一个即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Cat</span> <span class=\"variable\">cat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">        cat.start();<span class=\"comment\">//启动线程，是start方法而不是run方法</span></span><br><span class=\"line\">        <span class=\"comment\">//如果是通过继承Runnable接口的方法，没有start方法，则要使用下面的方式</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(cat);<span class=\"comment\">//设计模式中的代理模式</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(cat);<span class=\"comment\">//多个线程共享一个资源</span></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">        cat.setDaemon(<span class=\"literal\">true</span>);<span class=\"comment\">//设置为守护线程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;<span class=\"comment\">//重写run方法，写上自己的业务逻辑</span></span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>)&#123;<span class=\"comment\">//给该代码块加锁</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (time &lt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我是西芹啊&quot;</span> + (++time));</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">//休眠1秒</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"常用方法-3\"><a class=\"markdownIt-Anchor\" href=\"#常用方法-3\">#</a> 常用方法</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setName</td>\n<td>设置线程名称，使其与参数 name 相同</td>\n</tr>\n<tr>\n<td>getName</td>\n<td>返回线程的名称</td>\n</tr>\n<tr>\n<td>start</td>\n<td>使该线程开始执行，java 虚拟机底层调用该线程的 start0 方法</td>\n</tr>\n<tr>\n<td>run</td>\n<td>调用线程对象 run 方法</td>\n</tr>\n<tr>\n<td>setPriority</td>\n<td>更改线程的优先级</td>\n</tr>\n<tr>\n<td>getPriority</td>\n<td>获取线程的优先级</td>\n</tr>\n<tr>\n<td>sleep</td>\n<td>指定线程休眠的毫秒数</td>\n</tr>\n<tr>\n<td>interrupt</td>\n<td>中断线程，一般用于中断正在休眠的线程，此时会进入 catch 方法中</td>\n</tr>\n<tr>\n<td>yield</td>\n<td>线程的礼让，让出 CPU 使其他线程执行，但礼让的时间不确定，所以也不一定礼让成功</td>\n</tr>\n<tr>\n<td>join</td>\n<td>线程的插队，插队的线程一旦插队成功，则肯定让先执行完插入的线程所有的任务</td>\n</tr>\n<tr>\n<td>getState</td>\n<td>获取线程当前状态</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"线程的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#线程的生命周期\">#</a> 线程的生命周期</h2>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/197a9592f2d9e99b7739720a71f36c13.png\"\n                      alt=\"线程的生命周期\"\n                ></p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NEW</td>\n<td>尚未启动的线程</td>\n</tr>\n<tr>\n<td>RUNNABLE</td>\n<td>在 java 虚拟机中执行的线程，可细分为 READY 和 RUNNING 两种状态</td>\n</tr>\n<tr>\n<td>BLOCKED</td>\n<td>被阻塞等待监视器锁定的线程</td>\n</tr>\n<tr>\n<td>WAITTING</td>\n<td>正在等待另一个线程执行特定动作的线程</td>\n</tr>\n<tr>\n<td>TIMED_WAITING</td>\n<td>正在等待另一个线程执行动作达到指定等待时间的线程</td>\n</tr>\n<tr>\n<td>TERMINATED</td>\n<td>已退出的线程</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"释放锁\"><a class=\"markdownIt-Anchor\" href=\"#释放锁\">#</a> 释放锁</h2>\n<h3 id=\"释放锁情况\"><a class=\"markdownIt-Anchor\" href=\"#释放锁情况\">#</a> 释放锁情况</h3>\n<ol>\n<li>当前线程的同步方法、同步代码块执行结束。</li>\n<li>当前线程在同步方法、同步代码块中遇到 break、return。</li>\n<li>当前线程在同步方法、同步代码块中出现了未处理的 Error 或 Exception，导致异常结束。</li>\n<li>当前线程在同步方法、同步代码块中执行了线程对象的 wait () 方法，当前线程释放，并释放锁。</li>\n</ol>\n<h3 id=\"不释放锁情况\"><a class=\"markdownIt-Anchor\" href=\"#不释放锁情况\">#</a> 不释放锁情况</h3>\n<ol>\n<li>线程执行同步方法、同步代码块时，程序调用了 Thread.sleep ()、Thread.yield () 方法暂停当前线程的执行，不会释放锁。</li>\n<li>线程执行同步代码块时，其他线程调用了该线程的 suspend () 方法将该线程挂起，不会释放锁。但应尽量避免使用 suspend () 和 resume () 来控制线程。</li>\n</ol>\n<h1 id=\"第十六章-io文件流\"><a class=\"markdownIt-Anchor\" href=\"#第十六章-io文件流\">#</a> 第十六章 IO 文件流</h1>\n<p>当文件读取完成后应将子资源释放，避免造成浪费。</p>\n<h2 id=\"新建文件\"><a class=\"markdownIt-Anchor\" href=\"#新建文件\">#</a> 新建文件</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种方式:new File(String pathname)根据路径创建一个File对象</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">filePath</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;e:\\\\news1.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//这里的File对象，在java程序中只是一个对象</span></span><br><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种方式:new File(File parent,String child)根据父目录文件+子路径创建</span></span><br><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">parentFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;e:\\\\&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;news2.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(parentFile, fileName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第三种方法:new File(String parent,String child)根据父目录+子路径创建</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">parentPath</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;e:\\\\&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;news3.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(parentPath, fileName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//只有执行了createNewFile方法才会真正的在磁盘中创建该文件</span></span><br><span class=\"line\">file.createNewFile();</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"常用方法-4\"><a class=\"markdownIt-Anchor\" href=\"#常用方法-4\">#</a> 常用方法</h2>\n<p>在 java 编程中，目录也被当作是一种文件。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getName</td>\n<td>获取文件名称</td>\n</tr>\n<tr>\n<td>getAbsolutePath</td>\n<td>获取绝对路径</td>\n</tr>\n<tr>\n<td>getParent</td>\n<td>获取文件父级目录</td>\n</tr>\n<tr>\n<td>length</td>\n<td>文件大小，按字节统计</td>\n</tr>\n<tr>\n<td>exists</td>\n<td>文件或目录是否存在</td>\n</tr>\n<tr>\n<td>isFile</td>\n<td>是不是一个文件</td>\n</tr>\n<tr>\n<td>isDirectory</td>\n<td>是不是一个目录</td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>创建一级目录</td>\n</tr>\n<tr>\n<td>mkdirs</td>\n<td>创建多级目录</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>删除空目录或文件</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭输入输出流</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"输入流和输出流\"><a class=\"markdownIt-Anchor\" href=\"#输入流和输出流\">#</a> 输入流和输出流</h2>\n<table>\n<thead>\n<tr>\n<th>抽象基类</th>\n<th>字节流 (二进制文件)</th>\n<th>字符流 (文本文件)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>输入流</td>\n<td>InputStream</td>\n<td>Reader</td>\n</tr>\n<tr>\n<td>输出流</td>\n<td>OutputStream</td>\n<td>Writer</td>\n</tr>\n</tbody>\n</table>\n<p>InputStream 常用子类：文件输入流 FileInputStream、缓冲字节输入流 BufferedInputStream、对象字节输入流 ObjectInputStream。</p>\n<p>可以使用 String 中的 getBytes () 方法将字符串转换为字符数组，使其可以使用 write 方法写入到文件中： <code>fileOutputStream.write(str.getBytes());</code> 。</p>\n<p>FileWriter 使用后，必须要关闭 (close) 或刷新 (flush)，否则写入不到指定的文件。</p>\n<p>比较特殊的是 read 方法返回的是 int 类型，所以要使用 int 变量接收后进行强转后输出。</p>\n<h2 id=\"节点流和处理流\"><a class=\"markdownIt-Anchor\" href=\"#节点流和处理流\">#</a> 节点流和处理流</h2>\n<p>节点流可以从一个特定的数据源读取数据。处理流 (又称包装流) 是 “连接” 在已存在的流之上，为程序提供更为强大的读写功能。</p>\n<p>节点流是底层流 / 低级流，直接跟数据源连接。</p>\n<p>处理流包装节点流，使用了修饰器设计模式，不会与数据源直接相连，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出。</p>\n<p>处理流的功能主要体现在：性能的提高，以增加缓冲的方式提高输入输出的效率；操作的便捷，处理流提供了一系列便捷大方法来一次性输入输出大批量的数据，使用更加方便。</p>\n<p><strong>处理流对节点流的包装使用的多态，处理流拥有自身管理的节点流的父类属性，通过动态绑定机制实现对不同节点流的统一处理。</strong></p>\n<p>关闭处理流时只需关闭外层流即可，因为底层会自动的去关闭节点流。</p>\n<p>BufferedReader 和 BufferedWriter 都是按照字符串操作的处理流，不要去操作二进制文件，可能会导致文件损坏。</p>\n<h3 id=\"序列化和反序列化\"><a class=\"markdownIt-Anchor\" href=\"#序列化和反序列化\">#</a> 序列化和反序列化</h3>\n<p>序列化是指在保存数据时，保存数据的值和数据类型；反序列化是指在恢复数据时，恢复数据的值和数据类型。</p>\n<p>需要让某个对象支持序列化机制，则必须让其类是可序列化的，因此该类必须实现如下接口之一：Serializable 和 Exterenalizable。而 ObjectOutputStream 和 ObjectInputStream 提供了对基本数据类型或对象类型的序列化和反序列化的方法。</p>\n<p>序列化后保存的文件格式，不是存文本，而是按照它的格式进行存储。</p>\n<p>对于自定义的类而言，通过 readObject 方法读取到的对象的编译类型是 Object 类，而运行类型是本身的类型。</p>\n<p>序列化中的类中建议添加 SerialVersionUID，这个是序列化的版本号，可以提高版本的兼容性。</p>\n<p><strong>序列化对象时，默认将里面所有的对象进行序列化，除了 static 或 transient 修饰的成员，还有没有实现序列化接口的属性也是不会进行序列化的。</strong></p>\n<p>序列化具备可继承性，如果父类已经实现了序列化，则其所有子类也默认实现了序列化。</p>\n<h3 id=\"默认输入输出\"><a class=\"markdownIt-Anchor\" href=\"#默认输入输出\">#</a> 默认输入输出</h3>\n<p>System.in 的编译类型是 InputStream，运行类型是 BufferInputStream，默认输入是键盘。</p>\n<p>System.out 的编译类型是 PrintStream，运行类型是 PrintStream，默认输出是显示器。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切换输出位置</span></span><br><span class=\"line\">System.setOut(<span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(<span class=\"string\">&quot;e\\\\f1.txt&quot;</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"转换流\"><a class=\"markdownIt-Anchor\" href=\"#转换流\">#</a> 转换流</h3>\n<p>在默认情况下，我们读取文件是按照 UTF-8 编码。</p>\n<p>转换流有 InputStreamReader 和 OutputStreamWriter，可以实现将字节流转换为字符流，并为其指定编码类型 (比如 UTF-8、gbk、gb2312、ISO8859-1 等)。</p>\n<p>当处理纯文本数据时，如果使用字符流效率更高，并且可以有效解决中文问题，所以建议将字节流转换为字符流。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先将字节流转换为字符流</span></span><br><span class=\"line\"><span class=\"type\">InputStreamReader</span> <span class=\"variable\">isr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file),<span class=\"string\">&quot;gbk&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//然后放入BufferedReader中提高读取效率，也可以将两步合成一步写</span></span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(isr);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"properties类\"><a class=\"markdownIt-Anchor\" href=\"#properties类\">#</a> Properties 类</h2>\n<p>该类是专门用于读写配置文件的集合类，键值对不需要有空格，值不需要引号，默认类型是 String。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">properties.load(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;src\\\\mysql.properties&quot;</span>));</span><br><span class=\"line\">properties.list(System.out);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> properties.getProperty(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\">System.out.println(user);</span><br><span class=\"line\">properties.setProperty(<span class=\"string\">&quot;charset&quot;</span>,<span class=\"string\">&quot;utf8&quot;</span>);</span><br><span class=\"line\">properties.store(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;src\\\\mysql2.properties&quot;</span>),<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"常用方法-5\"><a class=\"markdownIt-Anchor\" href=\"#常用方法-5\">#</a> 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>load</td>\n<td>加载配置文件的键值对到 Properties 对象</td>\n</tr>\n<tr>\n<td>list</td>\n<td>将数据显示到指定设备</td>\n</tr>\n<tr>\n<td>getProperty(key)</td>\n<td>根据键获取值</td>\n</tr>\n<tr>\n<td>setProperty(key,value)</td>\n<td>设置键值对到 Properties 对象</td>\n</tr>\n<tr>\n<td>store</td>\n<td>将 Properties 中的键值对存储到配置文件，在 idea 中保存数据到配置文件，中文会存储为 Unicode 码</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第十七章-网络通信\"><a class=\"markdownIt-Anchor\" href=\"#第十七章-网络通信\">#</a> 第十七章 网络通信</h1>\n<p>IPV4 使用 32 位表示地址，IPV6 使用 128 位地址。</p>\n<p>端口范围为 0-65535，而 0-1024 已经被占用，例如 ssh 占用 22，ftp 占用 21，smtp 占用 25，http 占用 90，常用的网络程序端口号 Tomcat 是 8080，mysql 是 3306，Oracle 是 1521，SQLserver 是 1433。</p>\n<p><strong>当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通信的，这个端口是 TCP/IP 进行随机分配的。</strong></p>\n<p><strong>语言本身就是协议。</strong></p>\n<h2 id=\"inetaddress类\"><a class=\"markdownIt-Anchor\" href=\"#inetaddress类\">#</a> InetAddress 类</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getLocalHost</td>\n<td>获取本机 InetAddress 对象</td>\n</tr>\n<tr>\n<td>getByName</td>\n<td>根据指定主机名 / 域名获取 ip 对象</td>\n</tr>\n<tr>\n<td>getHostName</td>\n<td>获取 InetAddress 对象的主机名</td>\n</tr>\n<tr>\n<td>getHostAddress</td>\n<td>获取 InetAddress 对象的地址</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"socket\"><a class=\"markdownIt-Anchor\" href=\"#socket\">#</a> Socket</h2>\n<p>套接字 (Socket) 开发网络应用程序被广泛采用，以至于成为事实上的标准。</p>\n<p><strong>通信的两端都要有 Socket，是两台机器间通信的端点，网络通信其实就是 Socket 之间的通信。</strong></p>\n<p>Socket 允许程序把网络连接当成一个流，数据在两个 Socket 间通过 IO 传输。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SocketTCP01Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.链接服务端(IP,端口)，连接本机9999端口，可以指定对应的IP地址，如果连接成功则返回socket对象</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(InetAddress.getLocalHost(), <span class=\"number\">9999</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.连接上后，生产socket，通过socket。getOutputStream()得到和socket对象关联的输出流对象</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">//3.通过输出流，写入数据到数据通道</span></span><br><span class=\"line\">        outputStream.write(<span class=\"string\">&quot;hello,server&quot;</span>.getBytes());</span><br><span class=\"line\">        <span class=\"comment\">//设置结束标志,这样对方才能回复</span></span><br><span class=\"line\">        <span class=\"comment\">//在字符流中可以使用writer.newLine()写入结束标记，但对方需要使用readLine()</span></span><br><span class=\"line\">        socket.shutdownOutput();</span><br><span class=\"line\">        <span class=\"comment\">//4.关闭流对象和socket</span></span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//服务端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SocketTCP01Server</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.在本机的9999端口监听，等待链接，要求本机没有其他服务在监听9999端口</span></span><br><span class=\"line\">        <span class=\"comment\">//这个ServerSocket可以通过accept()返回多个Socket对象</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">9999</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.当没有客户端连接9999端口时，程序会阻塞，等待链接;如果有客户连接，则会返回Socket对象，程序继续</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">        <span class=\"comment\">//3.通过socket.getInputStream()读取客户端写入到数据通道的数据，显示</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">        <span class=\"comment\">//4.IO读取</span></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">readLen</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((readLen = inputStream.read(buf)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buf,<span class=\"number\">0</span>,readLen));<span class=\"comment\">//根据读取到的实际长度，显示内容</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//5.关闭流和socket</span></span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">        serverSocket.close();<span class=\"comment\">//关闭</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"上传图片到客户端\"><a class=\"markdownIt-Anchor\" href=\"#上传图片到客户端\">#</a> 上传图片到客户端</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件上传服务端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TCPFileUploadServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.服务端在本机监听8888端口</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.等待连接</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">        <span class=\"comment\">//3.读取客户端发送的数据，通过socket得到一个输入流</span></span><br><span class=\"line\">        <span class=\"type\">BufferedInputStream</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(socket.getInputStream());</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);<span class=\"comment\">//使用老韩的工具</span></span><br><span class=\"line\">        <span class=\"comment\">//4.将数组写入到指定的路径，就得到一个文件了</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">destFilePath</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;src\\\\qie2.png&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">BufferedOutputStream</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(destFilePath));</span><br><span class=\"line\">        bos.write(bytes);</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">        <span class=\"comment\">//5.向客户端回复“收到图片”</span></span><br><span class=\"line\">        <span class=\"type\">BufferedWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class=\"line\">        writer.write(<span class=\"string\">&quot;收到图片&quot;</span>);</span><br><span class=\"line\">        writer.flush();<span class=\"comment\">//刷新内容到数据通道</span></span><br><span class=\"line\">        socket.shutdownOutput();<span class=\"comment\">//写入结束标志</span></span><br><span class=\"line\">        <span class=\"comment\">//6.关闭其他资源</span></span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">        bis.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">        serverSocket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//文件上传的客户端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TCPFileUploadClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.客户端连接服务端8888，得到Socket对象</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(InetAddress.getLocalHost(), <span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.创建读取磁盘文件的输入流</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">filePath</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;e:\\\\qie.png&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">BufferedInputStream</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(filePath));</span><br><span class=\"line\">        <span class=\"comment\">//调用老韩的文件实现转换</span></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class=\"line\">        <span class=\"comment\">//3.通过socket获取到输出流，将byte数据发送给服务端</span></span><br><span class=\"line\">        <span class=\"type\">BufferedOutputStream</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class=\"line\">        bos.write(bytes);<span class=\"comment\">//将文件的内容写入数据通道</span></span><br><span class=\"line\">        bis.close();</span><br><span class=\"line\">        socket.shutdownOutput();<span class=\"comment\">//结束标记</span></span><br><span class=\"line\">        <span class=\"comment\">//4.接受服务端回复的消息</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">        <span class=\"comment\">//使用老韩工具，将接受到的数据转换为字符串</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> StreamUtils.streamToString(inputStream);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">        <span class=\"comment\">//5.关闭流</span></span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"netstat指令\"><a class=\"markdownIt-Anchor\" href=\"#netstat指令\">#</a> netstat 指令</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>netstat -an</td>\n<td>可以查看当前主机网络情况，包括端口监听情况和网络连接情况。 netstat -an|more 可以分页显示</td>\n</tr>\n<tr>\n<td>netstat -an|more</td>\n<td>可以分页显示</td>\n</tr>\n<tr>\n<td>netstat -anb</td>\n<td>查看是哪个程序在使用该端口，需要管理员权限</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"udp网络编程\"><a class=\"markdownIt-Anchor\" href=\"#udp网络编程\">#</a> UDP 网络编程</h2>\n<p>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</p>\n<p>UDP 数据报数据通过数据报套接字 DatagramSocket 发送和接收，系统不保证 UDP 数据报一定能安全送到目的地，也不能确定什么时候可以抵达。</p>\n<p>DatagramPacket 对象封装了 UDP 数据，在数据报中包含了发送端的 IP 地址和端口号已经接收端的 IP 地址和端口号。UDP 协议中每个数据报都给出了完整的地址信息，因此无需建立发送方和接收方的连接。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//UDP接收端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UDPReceiverA</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.创建一个DatagramSocket对象，准备在9999接收数据</span></span><br><span class=\"line\">        <span class=\"type\">DatagramSocket</span> <span class=\"variable\">socket</span>  <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramSocket</span>(<span class=\"number\">9999</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.构建一个DatagramPacket对象，准备接收数据,数据包最大64k</span></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"type\">DatagramPacket</span> <span class=\"variable\">packet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramPacket</span>(buf, buf.length);</span><br><span class=\"line\">        <span class=\"comment\">//3.调用接收方法，准备接收数据，将数据填充到packet中</span></span><br><span class=\"line\">        socket.receive(packet);</span><br><span class=\"line\">        <span class=\"comment\">//4.将packet进行拆包，取出数据并显示</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> packet.getLength();<span class=\"comment\">//获取实际接收到的长度</span></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] data = packet.getData();<span class=\"comment\">//实际上的数据</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(data, <span class=\"number\">0</span>, length);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">        <span class=\"comment\">//5.关闭资源</span></span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//UDP发送端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UDPSenderB</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.创建DatagramSocket对象，准备在9998接收数据</span></span><br><span class=\"line\">        <span class=\"type\">DatagramSocket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramSocket</span>(<span class=\"number\">9998</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.将需要发送的数据封装到DatagramPacket对象，使用ipconfig查询ip地址</span></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] data = <span class=\"string\">&quot;hello,明天吃火锅~&quot;</span>.getBytes();</span><br><span class=\"line\">        <span class=\"type\">DatagramPacket</span> <span class=\"variable\">packet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class=\"string\">&quot;192.168.116.1&quot;</span>), <span class=\"number\">9999</span>);</span><br><span class=\"line\">        socket.send(packet);</span><br><span class=\"line\">        <span class=\"comment\">//3.关闭资源</span></span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第十八章-反射\"><a class=\"markdownIt-Anchor\" href=\"#第十八章-反射\">#</a> 第十八章 反射</h1>\n<p>反射可以通过外部文件设置，在不修改源码的基础上来控制程序，也符合设计模式的开闭原则。</p>\n<p>反射机制允许程序在执行期借助反射取得任何类的内部信息 (比如成员变量、构造器和成员方法等等)，并能操作对象的属性及方法。反射的应用广泛，在设计模式和框架底层都会用到。</p>\n<p>加载完类之后，在堆中就产生了一个 class 类型的对象 (一个类只有一个 Class 对象)，这个对象包含了类的完整结构信息。通过这个对象可以得到类的结构。这个 Class 对象就像是一面镜子，透过这个镜子可以看到类的结构，所以形象的将其称为：反射。</p>\n<p><strong>反射的优点是可以动态的创建和使用对象 (也是框架底层核心)，使用灵活，没有反射机制，框架技术就失去底层支撑。缺点是反射基本是解释执行，对执行速度有影响。</strong></p>\n<p>Method 和 Field、Constructor 对象都有 setAccessible () 方法，该方法作用是启动和禁止访问安全检查的开关，参数值为 true 表示反射的对象在使用时取消访问检查，提高反射的效率。</p>\n<p>静态加载在编译时加载相关的库，如果没有则报错，依赖性太强。动态加载在运行时加载需要的库，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性。</p>\n<p>** 类加载的时机：创建对象、子类被加载、调用类中的静态方法、通过反射。** 其中只有反射是动态加载，其余都是静态加载。</p>\n<p>在反射中，如果方法有返回值，统一返回 Object 类型，但运行类型和方法定义的返回类型一致。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/bc8de307116765133225103e6b99267a.png\"\n                      alt=\"反射机制\"\n                ></p>\n<h2 id=\"反射的使用\"><a class=\"markdownIt-Anchor\" href=\"#反射的使用\">#</a> 反射的使用</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从配置文件中读取到类cat和需要被调用的方法methodName</span></span><br><span class=\"line\"><span class=\"comment\">//1.加载类，返回class类型的对象cls</span></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">cls</span> <span class=\"operator\">=</span> Class.forName(classfullpath);</span><br><span class=\"line\"><span class=\"comment\">//2.通过cls得到加载的类Cat的对象实例</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> cls.newInstance();</span><br><span class=\"line\"><span class=\"comment\">//3.通过cls得到你加载的Cat的methodName对应的方法&quot;hi&quot;的方法对象</span></span><br><span class=\"line\"><span class=\"comment\">//在反射中，可以把方法视为对象（万物皆对象）</span></span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">method1</span> <span class=\"operator\">=</span> cls.getMethod(methodName);</span><br><span class=\"line\"><span class=\"comment\">//4.通过method1调用方法，即通过方法对象来实现调用方法</span></span><br><span class=\"line\">method1.invoke(o);<span class=\"comment\">//反射机制：方法.invoke(对象)</span></span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">nameField</span> <span class=\"operator\">=</span> cls.getField(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">System.out.println(nameField.get(o));</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"创建实例\"><a class=\"markdownIt-Anchor\" href=\"#创建实例\">#</a> 创建实例</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取User类的Class对象</span></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">userclass</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;User&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//调用无参构造器创建实例</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> userClass.newInstance();</span><br><span class=\"line\"><span class=\"comment\">//调用有参public构造器创建实例</span></span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> userClass.getConstructor(String.class);<span class=\"comment\">//获取构造器</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">hsp</span> <span class=\"operator\">=</span> constructor.newInstance(<span class=\"string\">&quot;hsp&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//调用非public构造器创建实例</span></span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> userClass.getDeclaredConstructor(<span class=\"type\">int</span>.class,String.class);<span class=\"comment\">//获取构造器</span></span><br><span class=\"line\">constructor.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//暴破，强行访问非public的构造方法</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">hsp</span> <span class=\"operator\">=</span> constructor.newInstance(<span class=\"number\">100</span>,<span class=\"string\">&quot;hsp&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"反射的作用\"><a class=\"markdownIt-Anchor\" href=\"#反射的作用\">#</a> 反射的作用</h2>\n<ol>\n<li>在运行时判断任意一个对象所属的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时得到任意一个类所具有的成员变量和方法</li>\n<li>在运行时调用任意一个对象的成员变量和方法</li>\n<li>生成动态代理</li>\n</ol>\n<h2 id=\"反射的主要类\"><a class=\"markdownIt-Anchor\" href=\"#反射的主要类\">#</a> 反射的主要类</h2>\n<p>这些类在 java.lang.reflection</p>\n<table>\n<thead>\n<tr>\n<th>类</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>java.lang.Class</td>\n<td>代表一个类，Class 对象表示某个类加载后在堆中的对象</td>\n</tr>\n<tr>\n<td>java,lang.reflect.Method</td>\n<td>代表类的方法，Method 对象表示某个类的方法</td>\n</tr>\n<tr>\n<td>java.lang.reflect.Field</td>\n<td>代表类的成员变量，获取公有的成员变量</td>\n</tr>\n<tr>\n<td>java.lang.reflect.Constructor</td>\n<td>代表类的构造方法</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"class类\"><a class=\"markdownIt-Anchor\" href=\"#class类\">#</a> Class 类</h2>\n<ol>\n<li>Class 也是类，因此也继承 Object 类</li>\n<li>Class 类对象不是 new 出来的，而是系统创建的</li>\n<li>对于某个类的 Class 对象，在内存中只有一份，因为类只加载一次</li>\n<li>每个类的实例都会知道自己是由哪个 Class 实例所生成</li>\n<li>通过 Class 对象可以完整地得到一个类的完整结构</li>\n<li>Class 对象是存放在堆的</li>\n<li>类的字节码二进制数据是放在方法区的，有的地方称为类的元数据 (包括方法代码、变量名、方法名、访问权限等)。</li>\n</ol>\n<h2 id=\"类加载\"><a class=\"markdownIt-Anchor\" href=\"#类加载\">#</a> 类加载</h2>\n<p>加载阶段：JVM 在该阶段的主要目的是将字节码从不同的数据源 (可能是 class 文件，也可能是 jar 包，甚至是网络) 转化为二进制字节流加载到内存中，并生成一个代表该类的 java.lang.Class 对象。</p>\n<p>连接阶段 - 验证：目的是确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证包括文件格式验证、元数据验证、字符码验证和符号引用验证。</p>\n<p>连接阶段 - 准备：JVM 会在该阶段对静态变量分配内存并默认初始化 (对应数据类型的默认初始化值)。这些变量所使用的内存将在方法区中进行分配。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//n1是实例变量，不是静态变量，因此在准备阶段不会分配内存</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">//n2是静态变量，分配内存并初始化为默认值0，而不是20</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"comment\">//n3是static final是常量，和静态变量不一样，直接赋值为30</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">n3</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>连接阶段 - 解析：虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<p>初始化：到初始化阶段才真正开始执行类中定义的 java 程序代码，此阶段是执行 <code>&lt;clinit&gt;()</code>  方法的过程。该方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有静态变量的赋值语句和静态代码块中的语句，并进行合并。</p>\n<p>虚拟机会保证一个类的 <code>&lt;clinit()&gt;</code>  方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行该方法，其他线程都需要阻塞等待，直到活动线程执行该方法完毕。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/80ec4d8b21e1f9775fbc5bc6f0f628a8.png\"\n                      alt=\"连接 Linking\"  \n                >\n<h1 id=\"第十九章-mysql\"><a class=\"markdownIt-Anchor\" href=\"#第十九章-mysql\">#</a> 第十九章 MySQL</h1>\n<p>数据库表的一行成为一条记录，在 java 程序中，一行记录往往使用对象表示。</p>\n<p>在创建数据库，表的时候，为了规避关键字，可以使用反引号解决。</p>\n<p>delete 语句不能删除某一列的数据，可以使用 update 设为 null 或者‘’。</p>\n<p>select 语句可以通过指定 distinct 参数来选择是否显示重复的数据。</p>\n<p>count (*) 返回满足条件的记录的行数；count (‘列名’) 也会返回满足条件的记录的某列有多少个，但是会排除为 null。</p>\n<p>like 模糊查找，% 表示多个任意字符，_表示单个任意字符。</p>\n<p>为了给某个 SQL 语句进行效率测试，我们需要海量数据时，可以使用该方法为表创建海量数据。</p>\n<p>union all 将两个查询结果合并，不会去重；union 合并时会进行去重。</p>\n<p>可以使用 auto_increment 实现自增长，填入数据时只需填入 null，数据会自行增长，如果填入值，则以该值为准。自增长的机制是选取当前的最大值进行加一。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into my_tab01 select * from my_tab01 # 自我复制</span><br><span class=\"line\"># 将my_tab01表的结构(列)复制到my_tab02中</span><br><span class=\"line\">create table my_tab02 like my_tab01;</span><br><span class=\"line\"># 修改自增长的起始值为100</span><br><span class=\"line\">alter table t25 auto_increment = 100;</span><br><span class=\"line\">select empno,ename name,sal salary from emp;# 正确，可以省略as</span><br><span class=\"line\"># 错误，Annual Salary中间有空格，编译器无法明白，改为&quot;Annual Salary&quot;，或者中间加上下划线</span><br><span class=\"line\">select ename,sal*12 Annual Salary from emp;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h2>\n<p><strong>索引是最物美价廉的东西，不用加内存，不用改程序，不用调 SQL，查询速度就可能提高百倍千倍。但是会影响更新，删除和插入的效率，因为要更新搜索二叉树。</strong></p>\n<p>索引的类型：主键索引 (primary key)，唯一索引 (unique)，普通索引 (index)，全文索引 (fulltext)，但一般不使用全文索引，而是使用全文搜索 Solr 和 ElasticSearch。</p>\n<p>较频繁的作为查询条件字段应该创建索引，唯一性太差的和更新非常频繁字段不适合单独创建索引。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在emp表的empno列创建索引</span><br><span class=\"line\">create index empno_index on emp(empno)</span><br><span class=\"line\">alter table emp add index empno_index(empno)</span><br><span class=\"line\"># 查询表是否有索引</span><br><span class=\"line\">show index from t25</span><br><span class=\"line\"># 删除索引</span><br><span class=\"line\">drop index empno_index on t25</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"数据库备份\"><a class=\"markdownIt-Anchor\" href=\"#数据库备份\">#</a> 数据库备份</h2>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#备份数据库，将数据库保存到指定目录:mysqldump -u 用户名 -p -B 数据库1 数据库2 &gt; 文件名.sql</span><br><span class=\"line\">mysqldump -u root -p -B hsp_db02 hsp_db03 &gt; d:\\\\bak.sql</span><br><span class=\"line\">#备份数据库中指定的表:mysqldump -u 用户名 -p 数据库 表1 表2 &gt; 文件名.sql</span><br><span class=\"line\">mysqldump -u root -p hsp num1 num2 &gt; d:\\\\bak.sql</span><br><span class=\"line\">#恢复数据库，需要先进入MySQL命令行，输入mysql -u root -p</span><br><span class=\"line\">source d:\\\\bak.sql</span><br><span class=\"line\">#由于备份的数据库中含有所有操作，所有可以全部执行一遍来进行恢复</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"数据类型列类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型列类型\">#</a> 数据类型 (列类型)</h2>\n<p>数据默认是有符号的，添加 unsigned 关键字变为无符号。</p>\n<p>Decimal [M,D]，M 是小数位的总数，D 是小数点后面的位数。M 的最大值是 65，默认值是 10；D 的最大值为 30，默认值是 0。</p>\n<p>timestamp 时间戳可以指定 on update current_timestamp，这样每次更新时都会自动更新为当前时间。</p>\n<p>字符和日期型数据应包含在单引号中。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/81bf2d9b3a518e97ccb968574b30080f.png\"\n                      alt=\"MySQL数据类型\"\n                ></p>\n<h2 id=\"char与varchar\"><a class=\"markdownIt-Anchor\" href=\"#char与varchar\">#</a> char 与 varchar</h2>\n<ol>\n<li><strong>char 最多可存储 255 个字符，varchar 最大可存储 65532 个字节，注意是字节，因此能最多能存储的字符取决于编码方式。但填入的参数都是指定字符数。</strong></li>\n<li>char 是定长，会固定占用声明的空间；varchar 是变长，存储实际占用的空间，但会使用一定长度的字节存储长度。</li>\n<li>char 的查询速度大于 varchar。</li>\n</ol>\n<h2 id=\"常用函数\"><a class=\"markdownIt-Anchor\" href=\"#常用函数\">#</a> 常用函数</h2>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<p>dual 是亚元表，系统表，可以作为一个测试表使用。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>charset</td>\n<td>获取字符串所属字符集</td>\n</tr>\n<tr>\n<td>concat</td>\n<td>连接字符串，将多个列拼接成一列</td>\n</tr>\n<tr>\n<td>instr(string,substring)</td>\n<td>返回 substring 在 string 出现的位置，没有则返回 0</td>\n</tr>\n<tr>\n<td>ucase</td>\n<td>转换为大写</td>\n</tr>\n<tr>\n<td>lcase</td>\n<td>转换为小写</td>\n</tr>\n<tr>\n<td>left(string,length)</td>\n<td>从字符串的左边起取 length 个字符</td>\n</tr>\n<tr>\n<td>right(string,length)</td>\n<td>从字符串的右边起取 length 个字符</td>\n</tr>\n<tr>\n<td>length</td>\n<td>获取字符串长度 (字节)</td>\n</tr>\n<tr>\n<td>replace(str,search,replace)</td>\n<td>将 str 列中的 search 替换成 replace</td>\n</tr>\n<tr>\n<td>strcmp</td>\n<td>比较两个字符串大小</td>\n</tr>\n<tr>\n<td>substring(str,position,[,length])</td>\n<td>截取字符串，从 position 开始取 length 个字符，从 1 开始计数</td>\n</tr>\n<tr>\n<td>ltrim,rtrim,trim</td>\n<td>去除前端或后端空格</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数学\"><a class=\"markdownIt-Anchor\" href=\"#数学\">#</a> 数学</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>abs</td>\n<td>返回绝对值</td>\n</tr>\n<tr>\n<td>bin</td>\n<td>十进制转二进制</td>\n</tr>\n<tr>\n<td>celling</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>conv</td>\n<td>进制转换</td>\n</tr>\n<tr>\n<td>floor</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>format</td>\n<td>保留小数位数，四舍五入</td>\n</tr>\n<tr>\n<td>hex</td>\n<td>转十六进制</td>\n</tr>\n<tr>\n<td>least</td>\n<td>求最小值</td>\n</tr>\n<tr>\n<td>mod</td>\n<td>求余</td>\n</tr>\n<tr>\n<td>rand</td>\n<td>返回随机数，范围为 [0,1]，可以填入 seed，生产对应的随机数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"时间日期\"><a class=\"markdownIt-Anchor\" href=\"#时间日期\">#</a> 时间日期</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>current_date</td>\n<td>当前日期</td>\n</tr>\n<tr>\n<td>current_time</td>\n<td>当前时间</td>\n</tr>\n<tr>\n<td>current_timestamp</td>\n<td>当前时间戳</td>\n</tr>\n<tr>\n<td>date</td>\n<td>返回 datetime 的日期部分</td>\n</tr>\n<tr>\n<td>date_add(date,interval d_value d_type)</td>\n<td>在 date 中加上日期或时间</td>\n</tr>\n<tr>\n<td>date_sub(date,interval d_value d_type)</td>\n<td>在 date 上减去日期或时间</td>\n</tr>\n<tr>\n<td>datediff</td>\n<td>两个时间差，结果返回天数</td>\n</tr>\n<tr>\n<td>timediff</td>\n<td>两个时间差，返回多少小时多少分钟多少秒</td>\n</tr>\n<tr>\n<td>now</td>\n<td>当前时间</td>\n</tr>\n<tr>\n<td>year|month</td>\n<td>date(date)</td>\n</tr>\n<tr>\n<td>from_unixtime</td>\n<td>可以将 unix_timestamp 转换为指定格式的日期</td>\n</tr>\n<tr>\n<td>unix_timestamp</td>\n<td>返回从 1970-1-1 到现在的秒数</td>\n</tr>\n<tr>\n<td>last_day</td>\n<td>返回填入日期该月的最后一天</td>\n</tr>\n</tbody>\n</table>\n<p>date_add 和 date_sub 中的 interval 后面可以是 year,month,day,hour,second,minute</p>\n<h3 id=\"加密函数\"><a class=\"markdownIt-Anchor\" href=\"#加密函数\">#</a> 加密函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user</td>\n<td>查询登录到 mysql 的有哪些用户，已经登录的 IP</td>\n</tr>\n<tr>\n<td>database</td>\n<td>查询当前的数据库名称</td>\n</tr>\n<tr>\n<td>md5</td>\n<td>为字符串算出一个 MD5 的 32 位字符串，进行加密</td>\n</tr>\n<tr>\n<td>password</td>\n<td>加密函数，MySQL 数据库的用户密码函数使用该函数进行加密</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"流程控制函数\"><a class=\"markdownIt-Anchor\" href=\"#流程控制函数\">#</a> 流程控制函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>if(expr1,expr2,expr3)</td>\n<td>然后 expr1 为 true，则返回 expr2，否则返回 expr3</td>\n</tr>\n<tr>\n<td>ifnull(expr1,expr2)</td>\n<td>如果 expr1 不为空，则返回 expr1，否则返回 expr2</td>\n</tr>\n<tr>\n<td>when a then b when c then d else e</td>\n<td>多分支选择</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"查询\"><a class=\"markdownIt-Anchor\" href=\"#查询\">#</a> 查询</h2>\n<p>在默认情况下，当两张表查询时，规则是从第一张表中取出一行和第二张表的每一行进行组合，返回结果。因此一共返回的记录数为两张表的行数之积，称为笛卡尔集。</p>\n<p><strong>自连接是指在同一张表的连接查询，将同一张表看做两张表，此时需要为该表起别名才能进行操作。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from emp worker,emp boss; #分别取别名为worker和boss</span><br><span class=\"line\"># 多列子查询，查询和Allen的deptno和job完全一样的员工</span><br><span class=\"line\">select * from emp</span><br><span class=\"line\">where (deptno,job)=(select deptno,job from emp where ename=&#x27;allen&#x27;) and ename!=&#x27;allen&#x27;</span><br></pre></td></tr></table></figure></div>\n<p>子查询是指嵌入到其他 SQL 语句中的 select 语句，也叫嵌套查询。子查询还可以当做临时表使用。</p>\n<h2 id=\"约束\"><a class=\"markdownIt-Anchor\" href=\"#约束\">#</a> 约束</h2>\n<p>约束用于确保数据库的数据满足特定的商业规则，在 MySQL 中，约束包括：not null,unique,primary key,foreign key 和 check 五种。</p>\n<p>如果没有指定 not null，则 unique 字段可以有多个 null。</p>\n<p>外键 (foreign key) 用于定义主表和从表的之间的关系：主表约束要定义在从表上，主表则必须具有主键约束或者 unique 约束，要求外键列数据必须在主键列存在或者是为 null。</p>\n<p>表的类型必须是 InnoDB，这样的表才支持外键。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">primary key(id,name)#复合主键</span><br><span class=\"line\">#指定外键关系</span><br><span class=\"line\">foreign key (class_id) references my_class(id)</span><br></pre></td></tr></table></figure></div>\n<p>check 用于强制行数据必须满足的条件。Oracle 和 SQL server 均支持 check，但是 MySQL5.7 目前还不支持 check，只做语法校验，但不会生效。在 MySQL 中实现 check 的功能，一般是在程序中控制或者通过触发器完成。</p>\n<h2 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h2>\n<p>当执行回退事务时，通过指定保存点可以回退到指定的点。</p>\n<p>提交事务后会确认事务的变化，结束事务，删除保存点，释放锁，数据生效。当使用 commit 语句结束事务后，其他会话将可以查看到事务变化后的新数据。</p>\n<p>如果不开启事务，在默认情况下，操作是自动提交的，不能回滚。</p>\n<p>InnoDB 存储引擎支持事务，MyISAM 不支持。</p>\n<p><strong>事务的特性：原子性、一致性、隔离性和持久性。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开始事务，也可以写set autocommit=off</span><br><span class=\"line\">start transaction</span><br><span class=\"line\"># 设置保存点</span><br><span class=\"line\">savepoint a</span><br><span class=\"line\">savepoint b</span><br><span class=\"line\"># 回退到a保存点,此时就无法再回退到b点，只写rollback的话直接回退到事务开始的状态</span><br><span class=\"line\">rollback to a</span><br><span class=\"line\"># 提交操作，此时不可以回退</span><br><span class=\"line\">commit</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"事务隔离\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离\">#</a> 事务隔离</h3>\n<p>多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。如果不考虑隔离性，可能会导致：脏读、不可重复读、幻读。</p>\n<p>脏读：当一个事务读取到另一个事务<strong>尚未提交</strong>的修改时，产生脏读。</p>\n<p>不可重复读：同一查询在同一事务中多次进行，由于其他提交事务所做的<strong>修改或删除</strong>，每次返回不同的结果集，产生不可重复读。</p>\n<p>幻读：同一查询在同一事务中多次出现，由于其他提交事务所做的<strong>插入</strong>操作，每次返回不同的结果集，产生幻读。</p>\n<p><strong>我希望看到的数据是我连接到数据库时的数据，而不可重复读和幻读影响了我能看到的数据，不同事务之间正常来说应该不会互相影响。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前MySQL的隔离级别</span><br><span class=\"line\">select @@tx_isolation;</span><br><span class=\"line\"># 查看系统当前隔离级别</span><br><span class=\"line\">select @@global.tx_isolation</span><br><span class=\"line\"># 设置控制台的隔离级别</span><br><span class=\"line\">set session transaction isolation level read uncommitted</span><br><span class=\"line\"># 设置系统的隔离级别</span><br><span class=\"line\">set global transaction isolation level read uncommitted</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#隔离级别\">#</a> 隔离级别</h4>\n<p>MySQL 默认的隔离级别是 repeated read，一般情况下，没有特殊要求就没有必要修改。若要修改，可以在 my.ini 文件中写入 transaction-isolation = 想要的隔离级别</p>\n<table>\n<thead>\n<tr>\n<th>MySQL 隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>加锁读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读未提交 (Read uncommitted)</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>不加锁</td>\n</tr>\n<tr>\n<td>读已提交 (Read committed)</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n<td>不加锁</td>\n</tr>\n<tr>\n<td>可重复读 (Repeatable read)</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n<td>不加锁</td>\n</tr>\n<tr>\n<td>可串行化 (Serializable)</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n<td>加锁</td>\n</tr>\n</tbody>\n</table>\n<p>√表示可能出现，× 表示不会出现；加锁后需要其他事务均已提交才能运行。</p>\n<h2 id=\"存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#存储引擎\">#</a> 存储引擎</h2>\n<p>MySQL 的表类型由存储引擎决定，主要包括 Myisam、innoDB、Memory 等。</p>\n<p>MySQL 数据表主要支持六种类型，分别是：CSV、Memory、Archive、Mge_Myisam、Myisam 和 InnoDB，这六种又分为两类，一类为事务安全型，例如 InnoDB；其余为非事务安全型，例如 MyISAM 和 Memory。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有的存储引擎</span><br><span class=\"line\">show engines</span><br><span class=\"line\"># 修改存储引擎</span><br><span class=\"line\">alter table &#x27;tb01&#x27; engine = innodb;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"常用引擎比较\"><a class=\"markdownIt-Anchor\" href=\"#常用引擎比较\">#</a> 常用引擎比较</h3>\n<p>Myisam 不支持事务也不支持外键，但其访问速度快，对事务完整性没有要求。</p>\n<p>InnoDB 提供了具有提交、回滚和崩溃恢复能力的事物安全。但是比起 Myisam，InnoDB 写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</p>\n<p>Memory 使用存储在内存中的内容来创建表。每个 Memory 表只实际对应一个磁盘文件，Memory 类型的表访问非常快，因为它的数据是放在内存的，而且默认使用 hash 索引，但是一旦 MySQL 服务关闭，表中的数据就会丢失掉，表的结构还在。</p>\n<table>\n<thead>\n<tr>\n<th>特点</th>\n<th>Myisam</th>\n<th>InnoDB</th>\n<th>Memory</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>批量插入的速度</td>\n<td>高</td>\n<td>低</td>\n<td>高，内存级别</td>\n<td>非常高</td>\n</tr>\n<tr>\n<td colspan=\"2\">事务安全</td>\n<td colspan=\"3\">支持</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td colspan=\"4\">支持</td>\n</tr>\n<tr>\n<td>锁机制</td>\n<td>表级</td>\n<td>行锁</td>\n<td>表锁</td>\n<td>行锁</td>\n</tr>\n<tr>\n<td>存储限制</td>\n<td>没有</td>\n<td>64TB</td>\n<td>有</td>\n<td>没有</td>\n</tr>\n<tr>\n<td>B 树索引</td>\n<td>支持</td>\n<td>支持</td>\n<td colspan=\"2\">支持</td>\n</tr>\n<tr>\n<td colspan=\"2\">哈希索引</td>\n<td>支持</td>\n<td colspan=\"2\">支持</td>\n</tr>\n<tr>\n<td colspan=\"2\">集群索引</td>\n<td colspan=\"3\">支持</td>\n</tr>\n<tr>\n<td colspan=\"2\">数据缓存</td>\n<td>支持</td>\n<td colspan=\"2\">支持</td>\n</tr>\n<tr>\n<td>索引缓存</td>\n<td>支持</td>\n<td>支持</td>\n<td colspan=\"2\">支持</td>\n</tr>\n<tr>\n<td>数据可压缩</td>\n<td colspan=\"3\">支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>低</td>\n<td colspan=\"2\">高</td>\n<td>非常低</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>低</td>\n<td>高</td>\n<td>中等</td>\n<td>低</td>\n</tr>\n<tr>\n<td colspan=\"2\">支持外键</td>\n<td colspan=\"3\">支持</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"视图\"><a class=\"markdownIt-Anchor\" href=\"#视图\">#</a> 视图</h2>\n<p>视图是一个虚拟表，其内容由查询定义，其数据来自于对应的真实表 (基表)。创建视图后到数据库去看，对应视图只有一个视图结构文件，而没有数据文件。</p>\n<p>视图的数据变化会影响到基表，基表的数据变化也会影响视图。</p>\n<p>视图中仍可以生成视图。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建视图emp_view01，只能查询emp表的empno、ename、job和deptno信息</span><br><span class=\"line\">create view emp_view as select empno,ename,job,deptno from emp;</span><br><span class=\"line\"># 查看视图</span><br><span class=\"line\">select empno,job from emp_view</span><br><span class=\"line\"># 查看创建视图的指令</span><br><span class=\"line\">show create view emp_view01</span><br><span class=\"line\"># 删除视图</span><br><span class=\"line\">drop view emp_view01</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"第二十章-jdbc和连接池\"><a class=\"markdownIt-Anchor\" href=\"#第二十章-jdbc和连接池\">#</a> 第二十章 jdbc 和连接池</h1>\n<p>jdbc 为访问不同的数据库提供了统一的接口，为使用者屏蔽了细节问题。java 程序员使用 jdbc，可以连接任何提供了 jdbc 驱动程序的数据库系统，从而完成对数据库的各种操作。</p>\n<p>jdbc 的 API 是一系列的接口，它统一和规范了应用程序和数据库的连接、执行 SQL 语句，并得到返回结果等各类操作，相关类和接口在 java.sql 和 javax.sql 包中。</p>\n<p>jdbc 程序编写步骤：注册驱动，加载 Driver 类；获取连接，得到 Connection；执行增删改查，发生 SQL 给数据库执行；释放资源，关闭相关连接。</p>\n<p><strong>mysql 的连接本质上是 socket 连接。</strong></p>\n<p><strong>jdbc 连接 MySQL 时，如果要使用批处理功能，需要在 URL 中加参数 <code>?rewriteBatchedStatements=true</code> 。</strong></p>\n<p>批处理往往和 PreparedStatement 一起搭配使用，既可以减少编译次数，又减少运行次数，效率大大提高。</p>\n<p>遇到异常时，可以使用 <code>throw new RuntimeException(e);</code>  将其转换为运行异常。</p>\n<p><strong>新建 Propertises 文件时选择文件类型为 Text 即可。</strong></p>\n<p>BasicDao 是专门和数据库交互的，即完成对数据库的 crud 操作。在 BasicDao 的基础上，实现一张表对应一个 Dao，更好的完成功能，比如 Customer 表 - Customer.java 类 - CustomerDao.java。</p>\n<p>声明使用可变参数可以使用省略号，例如 <code>Object... parameters</code> 。</p>\n<p><strong>idea 注释中的作者和版本信息都会对程序运行有影响。</strong></p>\n<p>进行多表查询时，增加来自另一张表的属性需要和原来表的属性名保持一致，因为底层会通过列名来调用 set 方法进行赋值，或者在 SQL 语句中通过取别名的方法解决。</p>\n<h2 id=\"preparedstatement\"><a class=\"markdownIt-Anchor\" href=\"#preparedstatement\">#</a> PreparedStatement</h2>\n<p>使用 PreparedStatement 进行预处理可以解决 Statement 的 SQL 注入问题。PreparedStatement 不再使用加号拼接 SQL 语句，而是使用占位符和 set 方法，有效解决了 SQL 注入问题。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select name from class where name = ? and pwd = ?&quot;</span>;<span class=\"comment\">//？作为占位符</span></span><br><span class=\"line\"><span class=\"type\">PreparedStatement</span> <span class=\"variable\">preparedStatement</span> <span class=\"operator\">=</span> connection.preparedStatement(sql);</span><br><span class=\"line\">preparedStatement.setString(<span class=\"number\">1</span>,admin_name);<span class=\"comment\">//给第一个？号处填入值</span></span><br><span class=\"line\"><span class=\"comment\">//由于前面已经填了，此处不需要再填入sql</span></span><br><span class=\"line\"><span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> preparedStatement.executeQuery();</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"resultset\"><a class=\"markdownIt-Anchor\" href=\"#resultset\">#</a> ResultSet</h2>\n<p>ResultSet 表示数据库结果集的数据表，通常通过执行查询数据库的语句生成。ResultSet 对象保存一个光标指向其当前的数据行，光标在最初位于第一行之前，next 方法可以将光标移动到下一行，当对象没有更多行时会返回 false，因此可以使用 while 循环进行遍历。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from class&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//执行SQL语句，返回单个的ResultSet对象</span></span><br><span class=\"line\"><span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> statement.executeQuery(sql);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> resultSet.getInt(<span class=\"number\">1</span>);<span class=\"comment\">//获取第一列的数据</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> resultSet.getNString(<span class=\"number\">2</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;id是&quot;</span> + id + <span class=\"string\">&quot;;班级是&quot;</span> + name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4.关闭连接</span></span><br><span class=\"line\">resultSet.close();</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"jdbc操作数据库\"><a class=\"markdownIt-Anchor\" href=\"#jdbc操作数据库\">#</a> jdbc 操作数据库</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先将jar文件加入到项目中，并右键选择“添加到库”</span></span><br><span class=\"line\"><span class=\"comment\">//1.注册驱动</span></span><br><span class=\"line\"><span class=\"type\">Driver</span> <span class=\"variable\">driver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Driver</span>();</span><br><span class=\"line\"><span class=\"comment\">//2.得到连接，表示通过jdbc的方式连接mysql，localhost表示主机，可以使用ip地址，</span></span><br><span class=\"line\"><span class=\"comment\">//3306是监听的端口，day27db是连接的数据库，高版本的mysql包需要写上?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"comment\">//mysql的连接本质上是socket连接</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:mysql://localhost:3306/day27db?serverTimezone=UTC&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//将用户名和密码放入到Properties对象中</span></span><br><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"><span class=\"comment\">//user和password是规定好的，后面的值根据实际情况填写</span></span><br><span class=\"line\">properties.setProperty(<span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;root&quot;</span>);<span class=\"comment\">//用户</span></span><br><span class=\"line\">properties.setProperty(<span class=\"string\">&quot;password&quot;</span>, <span class=\"string\">&quot;hsp&quot;</span>);<span class=\"comment\">//密码</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connect</span> <span class=\"operator\">=</span> driver.connect(url, properties);</span><br><span class=\"line\"><span class=\"comment\">//3.执行SQL语句</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;insert into class values(null,&#x27;数学&#x27;)&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//用于执行静态SQL语句并返回其生成的结果的对象</span></span><br><span class=\"line\"><span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> connect.createStatement();</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> statement.executeUpdate(sql);<span class=\"comment\">//如果是dml语句，返回影响的行数</span></span><br><span class=\"line\">System.out.println(row &gt; <span class=\"number\">0</span> ? <span class=\"string\">&quot;成功&quot;</span> : <span class=\"string\">&quot;失败&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//4.关闭连接</span></span><br><span class=\"line\">statement.close();</span><br><span class=\"line\">connect.close();</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"连接方式\"><a class=\"markdownIt-Anchor\" href=\"#连接方式\">#</a> 连接方式</h2>\n<p>MySQL 驱动在 5.1.6 之后可以无需 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code> 。从 jdk1.5 以后使用了 jdbc4，不需要显式调用该方法注册驱动，而是自动调用驱动 jar 包下 META-INF\\services\\java.sql.Driver 文本中的类名去注册。</p>\n<p>本质上只有两种连接方式：静态加载和动态加载。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式1，创建Driver对象，静态加载</span></span><br><span class=\"line\"><span class=\"type\">Driver</span> <span class=\"variable\">driver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Driver</span>();</span><br><span class=\"line\"><span class=\"comment\">//方式2，使用反射加载Driver类，动态加载，更加灵活，减少依赖性</span></span><br><span class=\"line\">Class&lt;?&gt; aClass = Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Driver</span> <span class=\"variable\">driver</span> <span class=\"operator\">=</span> (Driver)aClass.newInstance();</span><br><span class=\"line\"><span class=\"comment\">//方式3，使用DriverManager替代Driver进行统一管理</span></span><br><span class=\"line\"><span class=\"comment\">//先获取Driver对象，然后传入URL，用户名和密码</span></span><br><span class=\"line\">DriverManager.registerDriver(driver);<span class=\"comment\">//注册Driver驱动</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManage.getConnection(url,user,password);</span><br><span class=\"line\"><span class=\"comment\">//方式4，如果使用了Class.forName方法则会自动完成注册驱动，可以省略registerDriver的步骤，这是最推荐使用的</span></span><br><span class=\"line\"><span class=\"comment\">//方式5则是在方式4上进行改进，使用配置文件</span></span><br><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">properties.load(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src\\\\mysql.propertises&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> properties.getProperty(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> properties.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> properties.getProperty(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">driver</span> <span class=\"operator\">=</span> properties.getProperty(<span class=\"string\">&quot;driver&quot;</span>);</span><br><span class=\"line\">Class.forName(driver);</span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"常用api\"><a class=\"markdownIt-Anchor\" href=\"#常用api\">#</a> 常用 API</h2>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/ff73ede308799b2baad8f194c544c270.png\"\n                      alt=\"常用API\"\n                ></p>\n<h2 id=\"数据库连接池\"><a class=\"markdownIt-Anchor\" href=\"#数据库连接池\">#</a> 数据库连接池</h2>\n<p>传统的 jdbc 数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证 IP 地址，用户名和密码。需要数据库连接的时候，就向数据库要求一个，频繁的进行数据库连接操作将占用很多的系统资源，容易造成服务器崩溃。</p>\n<p>每一次数据库连接，使用完后都得断开，如果程序出现异常而未能关闭，将导致数据库内存泄露，最终导致重启数据库。为解决传统开发中的数据库连接问题，可以采用 数据库连接池技术。</p>\n<p><strong>数据库连接池预先在缓冲区放入一定数量的连接，当需要建立数据库连接时，只需从 “缓冲池” 中取出一个，使用完毕后放回去。连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立。</strong></p>\n<h3 id=\"常见连接池\"><a class=\"markdownIt-Anchor\" href=\"#常见连接池\">#</a> 常见连接池</h3>\n<p>jdbc 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口由第三方提供实现。</p>\n<table>\n<thead>\n<tr>\n<th>连接池</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C3P0</td>\n<td>速度相对较慢，稳定性不错，hibernate 和 spring 使用</td>\n</tr>\n<tr>\n<td>DBCP</td>\n<td>速度相对 C3P0 较快，但不稳定</td>\n</tr>\n<tr>\n<td>Proxool</td>\n<td>有监控连接池状态的功能，稳定性较 C3P0 差一点</td>\n</tr>\n<tr>\n<td>BoneCP</td>\n<td>速度快</td>\n</tr>\n<tr>\n<td>Druid (德鲁伊)</td>\n<td>来自阿里，集上面的优点于一身</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"连接池使用\"><a class=\"markdownIt-Anchor\" href=\"#连接池使用\">#</a> 连接池使用</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将c3p0提供的c3o0.config.xml拷贝到src目录下，该文件指定了数据库和连接池的相关参数</span></span><br><span class=\"line\"><span class=\"type\">ComboPooledDataSource</span> <span class=\"variable\">comboPooledDataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>(<span class=\"string\">&quot;hsp_edu&quot;</span>);<span class=\"comment\">//填入数据源名称</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> comboPooledDataSource.getConnection();</span><br><span class=\"line\">connection.close();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.加入Druid的jar包和配置文件druid.properties，将该文件拷贝到项目的src目录</span></span><br><span class=\"line\"><span class=\"comment\">//2.创建Properties对象，读取配置文件</span></span><br><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">properties.load(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src\\\\druid.properties&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//3.创建一个指定参数的数据库连接池</span></span><br><span class=\"line\"><span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection();</span><br><span class=\"line\">connection.close();</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"dbutils\"><a class=\"markdownIt-Anchor\" href=\"#dbutils\">#</a> DBUtils</h2>\n<p><strong>关闭 connection 后，resultSet 结果集无法使用，而且 resultSet 不利于数据的管理。</strong></p>\n<p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC 工具类库，它是对 JDBC 的封装，使用 dbutils 能极大简化 jdbc 编程的工作量。</p>\n<p>QueryRunner 类：封装了 SQL 的执行，是线程安全的。可以实现增、删、改、查、批处理。</p>\n<p>ResultSetHandler 接口：用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p>\n<p>一定要给 java 类一个无参构造器，可能反射会需要。</p>\n<p>int,double 等在 java 中都使用包装类，因为 mysql 中所有类型都可能是 null，而只有 java 是引用类型才有 null 值。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DBUtils使用</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class=\"line\"><span class=\"type\">QueryRunner</span> <span class=\"variable\">queryRunner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryRunner</span>();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from course where cid &gt;= ?&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//new BeanListHandler&lt;&gt;(Actor.class):将resultSet-&gt;Actor对象-&gt;封装到ArrayList，底层会使用反射机制</span></span><br><span class=\"line\"><span class=\"comment\">//参数1是填入到SQL中的问号</span></span><br><span class=\"line\"><span class=\"comment\">//底层得到的resultSet和PreparedStatement会在query方法中关闭</span></span><br><span class=\"line\"> List&lt;Actor&gt; list = queryRunner.query(connection, sql, <span class=\"keyword\">new</span> <span class=\"title class_\">BeanListHandler</span>&lt;&gt;(Actor.class), <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Actor actor : list) &#123;</span><br><span class=\"line\">    System.out.println(actor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JDBCUtilsByDruid.close(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,connection);<span class=\"comment\">//释放资源</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"常用函数-2\"><a class=\"markdownIt-Anchor\" href=\"#常用函数-2\">#</a> 常用函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ArrayHandler</td>\n<td>将结果集中的第一行数据转成对象数组</td>\n</tr>\n<tr>\n<td>ArrayListHandler</td>\n<td>将结果集中的每一行数据都转成一个数组，再存放到 List 中</td>\n</tr>\n<tr>\n<td>BeanHandler</td>\n<td>将结果集中的第一行数据封装到一个对应的 javaBean 实例中</td>\n</tr>\n<tr>\n<td>BeanListHandler</td>\n<td>将结果集中的每一行都封装到一个对应的 javaBean 实例中，存放到 List 中</td>\n</tr>\n<tr>\n<td>ColumnListHandler</td>\n<td>将结果集中某一列的数据存放到 List 中</td>\n</tr>\n<tr>\n<td>KeyedHandler(name)</td>\n<td>将结果集中每行的数据都封装到 Map 里，再把这些 map 存到另一个 Map 里，其 key 为指定的 key</td>\n</tr>\n<tr>\n<td>MapHandler</td>\n<td>将结果集中第一行的数据都封装到 Map 里，key 是列名，value 是对应的值</td>\n</tr>\n<tr>\n<td>MapListHandler</td>\n<td>将结果集中每行的数据都封装到 Map 里，然后存放到 List</td>\n</tr>\n<tr>\n<td>ScalarHandler</td>\n<td>返回单行单列，一个 object 对象</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第二十一章-正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#第二十一章-正则表达式\">#</a> 第二十一章 正则表达式</h1>\n<p>** 在 java 的正则表达式中，两个 <code>\\\\</code>  代表其他语言中的一个 \\。** 而需要用到转义字符的有： <code>.*()$/\\?[]^&#123;&#125;</code> 。</p>\n<p><strong>正则表达式可以使用括号进行分组，group (0) 表示匹配到的字符串，group (n) 表示返回对应的分组。</strong></p>\n<p>java 匹配默认贪婪匹配，即尽可能多的匹配。</p>\n<p>分组的内容被捕获后，可以在这个括号后被使用，从而写出比较实用的匹配模式，这个被称作反向引用。这种引用可以在正则表达式内部，也可以是外部，内部反向引用使用 \\\\ 分组号，外部引用使用 $ 分组号。</p>\n<p>字符串配合正则表达式使用 replaceAll、matches 和 split 方法可以提高效率。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先创建一个Pattern对象，模式对象，可以理解为就是一个正则表达式对象</span></span><br><span class=\"line\"><span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;[a-zA-Z+]&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建一个匹配器对象</span></span><br><span class=\"line\"><span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> pattern.matcher(content);<span class=\"comment\">//content是需要匹配的文本</span></span><br><span class=\"line\"><span class=\"comment\">//开始循环匹配</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(matcher.find())&#123;</span><br><span class=\"line\">  <span class=\"comment\">//匹配内容和文本会放在matcher.group()</span></span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;找到&quot;</span> + matcher.group(<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//捕获命名分组，(?&lt;name&gt;pattern)</span></span><br><span class=\"line\"><span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;?(&lt;name1&gt;\\\\d\\\\d)(?&lt;name2&gt;\\\\d\\\\d)&quot;</span>);</span><br><span class=\"line\">matcher.group(<span class=\"string\">&quot;name1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//应用实例</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;^[\\u0391-\\uffe5]+$&quot;</span>;<span class=\"comment\">//匹配汉字</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">matches</span> <span class=\"operator\">=</span> Pattern.matches(regStr,content);<span class=\"comment\">//调用静态方法进行整体匹配，而不是其中一部分</span></span><br><span class=\"line\"><span class=\"comment\">//匹配五个连续相同的数字，相当于&quot;(//d)//1//1///1//1&quot;，意思是后面的元素与第一分组的内容相同</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\d)\\\\1&#123;4&#125;&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//匹配四位长度的回文数字,意思是先与第2分组相同，再与第1分组相同</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\d)(\\\\d)\\\\2\\\\1&quot;</span>;</span><br><span class=\"line\">content = matcher.replaceAll(<span class=\"string\">&quot;$1&quot;</span>);<span class=\"comment\">//反向引用使用第1分组的内容进行替换</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"字符串匹配符\"><a class=\"markdownIt-Anchor\" href=\"#字符串匹配符\">#</a> 字符串匹配符</h2>\n<p><a class=\"link\"   href=\"https://www.runoob.com/java/java-regular-expressions.html\" >菜鸟教程字符串匹配符 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n<th>示例</th>\n<th>说明</th>\n<th>匹配输入</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>匹配处 \\n 以外的任意字符</td>\n<td>a…b</td>\n<td>以 a 开头，b 结尾，中间包括两个任意字符为 4 的字符串</td>\n<td>aaab,a35b</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>可接收的字符列表，特殊符号将按照本身进行匹配</td>\n<td>[efg?.]</td>\n<td>e,f,g,? 和。中的任意一个字符</td>\n<td>.,?,e</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>不接收的字符列表</td>\n<td>[^efg]</td>\n<td>除 e,f,g 的任意一个字符</td>\n<td>a</td>\n</tr>\n<tr>\n<td>-</td>\n<td>连字符</td>\n<td>A-Z</td>\n<td>任意大写字母</td>\n<td>A</td>\n</tr>\n<tr>\n<td>|</td>\n<td>选择匹配符，匹配’|' 之前或之后的表达式</td>\n<td>ab|cd</td>\n<td>ab 或 cd</td>\n<td>ab</td>\n</tr>\n<tr>\n<td>*</td>\n<td>指定字符重复 0 次或 n 次</td>\n<td>(abc)*</td>\n<td>仅包含任意个 abc 的字符串，等效于 \\w*</td>\n<td>abcabc</td>\n</tr>\n<tr>\n<td>+</td>\n<td>指定字符重复 1 次或 n 次</td>\n<td>m+(abc)*</td>\n<td>以至少一个 m 开头，后接任意个 abc 的字符串</td>\n<td>m</td>\n</tr>\n<tr>\n<td>?</td>\n<td>指定字符重复 0 次或 1 次，当此字符紧随其他限定符 (*,+,?,{n},{n,},{n,m}) 之后，则表示采用非贪婪匹配</td>\n<td>m+abc？</td>\n<td>以至少一个 m 开头，后接 ab 或 abc 的字符串</td>\n<td>mab</td>\n</tr>\n<tr>\n<td>^</td>\n<td>指定起始字符</td>\n<td><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>+[a-z]*</td>\n<td>以至少一个数字开头，后接任意个小写字母的字符串</td>\n<td>123dsd，而 a123dsd 就不能匹配</td>\n</tr>\n<tr>\n<td>$</td>\n<td>指定结束字符</td>\n<td><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>\\-[a-z]+$</td>\n<td>以 1 个数字开头后接连字符‘-’，并以至少一个小写字母结尾的字符串</td>\n<td>1-a</td>\n</tr>\n<tr>\n<td n=\"\"></td>\n<td>接收 n 个字符</td>\n<td><span 3=\"\">abcd</span></td>\n<td>由 abcd 中字母组成的任意长度为 3 的字符串</td>\n<td>abc</td>\n</tr>\n<tr>\n<td n,=\"\"></td>\n<td>指定至少 n 个匹配</td>\n<td><span 3,=\"\">abcd</span></td>\n<td>由 abcd 中字母组成的任意长度不小于 3 的字符串</td>\n<td>abaaaaa</td>\n</tr>\n<tr>\n<td n,m=\"\"></td>\n<td>指定至少 n 个但不多于 m 个匹配</td>\n<td><span 3,5=\"\">abcd</span></td>\n<td>由 abcd 中字母组成的任意长度不小于 3，不大于 5 的字符串</td>\n<td>aaaa</td>\n</tr>\n<tr>\n<td>\\\\d</td>\n<td>匹配单个数字字符，相当于 [0-9]</td>\n<td>\\\\d{3}(\\\\d)?</td>\n<td>包含 3 个或 4 个数字的字符串</td>\n<td>123，7895</td>\n</tr>\n<tr>\n<td>\\\\D</td>\n<td>匹配单个非数字字符，相当于 [^0-9]</td>\n<td>\\\\D(\\\\d)*</td>\n<td>以单个非数字字符开头，后接任意个数字字符</td>\n<td>a，A345</td>\n</tr>\n<tr>\n<td>\\\\w</td>\n<td>匹配单个数字、大小写字母字符，相当于 [0-9a-zA-Z]</td>\n<td 4=\"\">\\\\d{3}\\\\w</td>\n<td>以 3 个数字字符开头的长度为 7 的数字字母字符串</td>\n<td>234abcd</td>\n</tr>\n<tr>\n<td>\\\\W</td>\n<td>匹配单个非数字、大小写字母字符，相当于 [^0-9a-zA-Z]</td>\n<td 2=\"\">\\\\W+\\\\d</td>\n<td>以至少一个非数字字母字符开头，2 个数字字符结尾的字符串</td>\n<td>#29</td>\n</tr>\n<tr>\n<td>\\\\s</td>\n<td>匹配任意空白字符 (空格、制表符等)</td>\n<td>\\\\s</td>\n<td>任意空白字符</td>\n<td>一个空格</td>\n</tr>\n<tr>\n<td>\\\\S</td>\n<td>匹配任意非空白字符</td>\n<td>\\\\S</td>\n<td>任意非空白字符</td>\n<td>A</td>\n</tr>\n<tr>\n<td>\\\\b</td>\n<td>匹配目标字符串的边界</td>\n<td>han\\\\b</td>\n<td>字符串的边界指的是子串之间有空格，或者是目标字符串的结束位置</td>\n<td>hanshun<strong>han</strong> nn <strong>han</strong></td>\n</tr>\n<tr>\n<td>\\\\B</td>\n<td>匹配目标字符串的非边界</td>\n<td>han\\\\B</td>\n<td>与 \\\\b 的含义相反，匹配北边界的 han</td>\n<td><strong>han</strong>shunhan nnhan</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"大小写区分\"><a class=\"markdownIt-Anchor\" href=\"#大小写区分\">#</a> 大小写区分</h3>\n<p>java 正则表达式默认区分字母大小写，如何实现不区分大小写。</p>\n<ul>\n<li>(?i) abc 表示都不区分大小写</li>\n<li>a (?i) abc 表示 bc 不区分大小写</li>\n<li>a ((?i) b) c 表示只有 b 不区分大小写</li>\n<li>Pattern pat = Pattern.compile(regEx,Pattern.CASE_INSENSITIVE);</li>\n</ul>\n<h2 id=\"非捕获分组\"><a class=\"markdownIt-Anchor\" href=\"#非捕获分组\">#</a> 非捕获分组</h2>\n<p>非捕获分组的意思是只是进行了匹配，并没有获取该分组子表达式的值，即不能通过 group (n) 等获取该分组的值。</p>\n<table>\n<thead>\n<tr>\n<th>构造形式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(?:pattern)</td>\n<td>匹配 pattern 但不捕获该匹配式的子表达式，不存储供以后使用的匹配。该形式对于用 &quot;or&quot; 字符 (|) 组合模式部件的情况很有用，例如” 韩顺平 (?: 学习</td>\n</tr>\n<tr>\n<td>(?=pattern)</td>\n<td>&quot;Windows(?=95|98</td>\n</tr>\n<tr>\n<td>(?!pattern)</td>\n<td>和第二个模式取反，该模式不匹配括号内的字符。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"matcher类\"><a class=\"markdownIt-Anchor\" href=\"#matcher类\">#</a> Matcher 类</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>matches</td>\n<td>整体匹配，返回一个布尔值</td>\n</tr>\n<tr>\n<td>start</td>\n<td>返回匹配的开始索引</td>\n</tr>\n<tr>\n<td>end</td>\n<td>返回匹配的结束索引，对应位置的后一位</td>\n</tr>\n<tr>\n<td>replaceAll(oldStr)</td>\n<td>返回一个替换后的结果</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常用正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#常用正则表达式\">#</a> 常用正则表达式</h2>\n<h3 id=\"校验数字\"><a class=\"markdownIt-Anchor\" href=\"#校验数字\">#</a> 校验数字</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> 数字：^[<span class=\"number\">0</span>-<span class=\"number\">9</span>]*$</span><br><span class=\"line\"><span class=\"number\">2</span> n位的数字：^\\d&#123;n&#125;$</span><br><span class=\"line\"><span class=\"number\">3</span> 至少n位的数字：^\\d&#123;n,&#125;$</span><br><span class=\"line\"><span class=\"number\">4</span> m-n位的数字：^\\d&#123;m,n&#125;$</span><br><span class=\"line\"><span class=\"number\">5</span> 零和非零开头的数字：^(<span class=\"number\">0</span>|[<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]*)$</span><br><span class=\"line\"><span class=\"number\">6</span> 非零开头的最多带两位小数的数字：^([<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]*)+(.[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;)?$</span><br><span class=\"line\"><span class=\"number\">7</span> 带<span class=\"number\">1</span>-<span class=\"number\">2</span>位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;)?$</span><br><span class=\"line\"><span class=\"number\">8</span> 正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br><span class=\"line\"><span class=\"number\">9</span> 有两位小数的正实数：^[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+(.[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;)?$</span><br><span class=\"line\"><span class=\"number\">10</span> 有<span class=\"number\">1</span>~<span class=\"number\">3</span>位小数的正实数：^[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+(.[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;)?$</span><br><span class=\"line\"><span class=\"number\">11</span> 非零的正整数：^[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\d*$ 或 ^([<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]*)&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;$ 或 ^\\+?[<span class=\"number\">1</span>-<span class=\"number\">9</span>][<span class=\"number\">0</span>-<span class=\"number\">9</span>]*$</span><br><span class=\"line\"><span class=\"number\">12</span> 非零的负整数：^\\-[<span class=\"number\">1</span>-<span class=\"number\">9</span>][]<span class=\"number\">0</span>-<span class=\"number\">9</span><span class=\"string\">&quot;*$ 或 ^-[1-9]\\d*$</span></span><br><span class=\"line\"><span class=\"string\">13 非负整数：^\\d+$ 或 ^[1-9]\\d*|0$</span></span><br><span class=\"line\"><span class=\"string\">14 非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$</span></span><br><span class=\"line\"><span class=\"string\">15 非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</span></span><br><span class=\"line\"><span class=\"string\">16 非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$</span></span><br><span class=\"line\"><span class=\"string\">17 正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class=\"line\"><span class=\"string\">18 负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class=\"line\"><span class=\"string\">19 浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"校验字符\"><a class=\"markdownIt-Anchor\" href=\"#校验字符\">#</a> 校验字符</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> 汉字：^[\\u4e00-\\u9fa5]&#123;<span class=\"number\">0</span>,&#125;$</span><br><span class=\"line\"><span class=\"number\">2</span> 英文和数字：^[A-Za-z0-<span class=\"number\">9</span>]+$ 或 ^[A-Za-z0-<span class=\"number\">9</span>]&#123;<span class=\"number\">4</span>,<span class=\"number\">40</span>&#125;$</span><br><span class=\"line\"><span class=\"number\">3</span> 长度为<span class=\"number\">3</span>-<span class=\"number\">20</span>的所有字符：^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\"><span class=\"number\">4</span> 由<span class=\"number\">26</span>个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class=\"line\"><span class=\"number\">5</span> 由<span class=\"number\">26</span>个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class=\"line\"><span class=\"number\">6</span> 由<span class=\"number\">26</span>个小写英文字母组成的字符串：^[a-z]+$</span><br><span class=\"line\"><span class=\"number\">7</span> 由数字和<span class=\"number\">26</span>个英文字母组成的字符串：^[A-Za-z0-<span class=\"number\">9</span>]+$</span><br><span class=\"line\"><span class=\"number\">8</span> 由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\"><span class=\"number\">9</span> 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$</span><br><span class=\"line\"><span class=\"number\">10</span> 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-<span class=\"number\">9</span>]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\"><span class=\"number\">11</span> 可以输入含有^%&amp;<span class=\"string\">&#x27;,;=?$\\&quot;等字符：[^%&amp;&#x27;</span>,;=?$\\x22]+</span><br><span class=\"line\"><span class=\"number\">12</span> 禁止输入含有~的字符：[^~\\x22]+</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"特殊需求\"><a class=\"markdownIt-Anchor\" href=\"#特殊需求\">#</a> 特殊需求</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</span><br><span class=\"line\"><span class=\"number\">2</span> 域名：[a-zA-Z0-<span class=\"number\">9</span>][-a-zA-Z0-<span class=\"number\">9</span>]&#123;<span class=\"number\">0</span>,<span class=\"number\">62</span>&#125;(/.[a-zA-Z0-<span class=\"number\">9</span>][-a-zA-Z0-<span class=\"number\">9</span>]&#123;<span class=\"number\">0</span>,<span class=\"number\">62</span>&#125;)+/.?</span><br><span class=\"line\"><span class=\"number\">3</span> InternetURL：[a-zA-z]+:<span class=\"comment\">//[^\\s]* 或 ^https://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</span></span><br><span class=\"line\"><span class=\"number\">4</span> 手机号码：^(<span class=\"number\">13</span>[<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">14</span>[<span class=\"number\">5</span>|<span class=\"number\">7</span>]|<span class=\"number\">15</span>[<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>|<span class=\"number\">5</span>|<span class=\"number\">6</span>|<span class=\"number\">7</span>|<span class=\"number\">8</span>|<span class=\"number\">9</span>]|<span class=\"number\">18</span>[<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>|<span class=\"number\">5</span>|<span class=\"number\">6</span>|<span class=\"number\">7</span>|<span class=\"number\">8</span>|<span class=\"number\">9</span>])\\d&#123;<span class=\"number\">8</span>&#125;$</span><br><span class=\"line\"><span class=\"number\">5</span> 电话号码(<span class=\"string\">&quot;XXX-XXXXXXX&quot;</span>、<span class=\"string\">&quot;XXXX-XXXXXXXX&quot;</span>、<span class=\"string\">&quot;XXX-XXXXXXX&quot;</span>、<span class=\"string\">&quot;XXX-XXXXXXXX&quot;</span>、<span class=\"string\">&quot;XXXXXXX&quot;</span>和<span class=\"string\">&quot;XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$ </span></span><br><span class=\"line\"><span class=\"string\">6 国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;</span></span><br><span class=\"line\"><span class=\"string\">7 身份证号：</span></span><br><span class=\"line\"><span class=\"string\">\t\t15或18位身份证：^\\d&#123;15&#125;|\\d&#123;18&#125;$</span></span><br><span class=\"line\"><span class=\"string\">\t\t15位身份证：^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$</span></span><br><span class=\"line\"><span class=\"string\">\t\t18位身份证：^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;4&#125;$</span></span><br><span class=\"line\"><span class=\"string\">8 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</span></span><br><span class=\"line\"><span class=\"string\">9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span></span><br><span class=\"line\"><span class=\"string\">10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$</span></span><br><span class=\"line\"><span class=\"string\">11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$ </span></span><br><span class=\"line\"><span class=\"string\">12 日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</span></span><br><span class=\"line\"><span class=\"string\">13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span></span><br><span class=\"line\"><span class=\"string\">14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span></span><br><span class=\"line\"><span class=\"string\">15 钱的输入格式：</span></span><br><span class=\"line\"><span class=\"string\">16 1.有四种钱的表示形式我们可以接受:&quot;</span><span class=\"number\">10000.00</span><span class=\"string\">&quot; 和 &quot;</span><span class=\"number\">10</span>,<span class=\"number\">000.00</span><span class=\"string\">&quot;, 和没有 &quot;</span>分<span class=\"string\">&quot; 的 &quot;</span><span class=\"number\">10000</span><span class=\"string\">&quot; 和 &quot;</span><span class=\"number\">10</span>,<span class=\"number\">000</span><span class=\"string\">&quot;：^[1-9][0-9]*$ </span></span><br><span class=\"line\"><span class=\"string\">17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </span></span><br><span class=\"line\"><span class=\"string\">18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </span></span><br><span class=\"line\"><span class=\"string\">19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </span></span><br><span class=\"line\"><span class=\"string\">20 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;</span><span class=\"number\">10.</span><span class=\"string\">&quot;是不通过的,但是 &quot;</span><span class=\"number\">10</span><span class=\"string\">&quot; 和 &quot;</span><span class=\"number\">10.2</span><span class=\"string\">&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ </span></span><br><span class=\"line\"><span class=\"string\">21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class=\"line\"><span class=\"string\">22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class=\"line\"><span class=\"string\">23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class=\"line\"><span class=\"string\">24 备注：这就是最终结果了,别忘了&quot;</span>+<span class=\"string\">&quot;可以用&quot;</span>*<span class=\"string\">&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span></span><br><span class=\"line\"><span class=\"string\">25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$</span></span><br><span class=\"line\"><span class=\"string\">26 中文字符的正则表达式：[\\u4e00-\\u9fa5]</span></span><br><span class=\"line\"><span class=\"string\">27 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span></span><br><span class=\"line\"><span class=\"string\">28 空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)</span></span><br><span class=\"line\"><span class=\"string\">29 HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span></span><br><span class=\"line\"><span class=\"string\">30 首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span></span><br><span class=\"line\"><span class=\"string\">31 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)</span></span><br><span class=\"line\"><span class=\"string\">32 中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)</span></span><br><span class=\"line\"><span class=\"string\">33 IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span></span><br></pre></td></tr></table></figure></div><hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>0-9 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>0-9 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "java",
                "java基础",
                "java学习路线"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/java/java8%E6%96%B0%E7%89%B9%E6%80%A7-%E5%B0%9A%E7%A1%85%E8%B0%B7-92/",
            "url": "http://example.com/2023/10/12/java/java8%E6%96%B0%E7%89%B9%E6%80%A7-%E5%B0%9A%E7%A1%85%E8%B0%B7-92/",
            "title": "java8新特性-尚硅谷-92",
            "date_published": "2023-10-12T10:49:32.881Z",
            "content_html": "<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1Kb411W75N?p=666&amp;vd_source=636bdfc4ce8c201bed8740cf77c11dda\" >尚硅谷 Java 入门视频教程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h1 id=\"新特性简介\"><a class=\"markdownIt-Anchor\" href=\"#新特性简介\">#</a> 新特性简介</h1>\n<ul>\n<li>速度更快，便于并行</li>\n<li>代码更少，增加了新的语法：Lambda 表达式</li>\n<li>强大的 Stream API</li>\n<li>最大化的减少空指针异常：Optional</li>\n<li>Nashorn 引擎，允许在 JVM 上运行 JS 应用</li>\n</ul>\n<h1 id=\"lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式\">#</a> Lambda 表达式</h1>\n<p><strong>Lambda 表达式的本质：与其他语言的 lambda 表达式不同，java 中的 lambda 表达式不是匿名函数，而是作为函数式接口的实例。</strong></p>\n<p>以 <code>(o1,02) -&gt; Interger.compare(o1,o2)</code>  为例， <code>-&gt;</code>  是 Lambda 操作符或箭头操作符，左边是形参列表，其实就是接口中的抽象方法的形参列表，右边是 lambda 体，其实就是重写的抽象方法的方法体。</p>\n<p>以前使用匿名实现类表示的现在都可以用 lambda 表达式做。</p>\n<h2 id=\"语法格式\"><a class=\"markdownIt-Anchor\" href=\"#语法格式\">#</a> 语法格式</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.无参，无返回值</span></span><br><span class=\"line\"><span class=\"type\">Runnable</span> <span class=\"variable\">r2</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;hello,world&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//2.Lambda需要一个参数，但是没有返回值</span></span><br><span class=\"line\">Consumer&lt;String&gt; con = (String s) -&gt; &#123;System.out.println(s);&#125;;</span><br><span class=\"line\"><span class=\"comment\">//3.数据类型可以省略，因为可由编译器推断得出，称为“类型推断”,只有一个参数时可以省略小括号</span></span><br><span class=\"line\">Consumer&lt;String&gt; con = s -&gt; &#123;System.out.println(s);&#125;;</span><br><span class=\"line\"><span class=\"comment\">//4.表达式需要两个或以上的参数，多条执行语句，并且可以有返回值</span></span><br><span class=\"line\">Comparator&lt;Integer&gt; com = (o1,o2) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;========&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o1.compareTo(o2);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//5.当lambda题只有一条语句时，return和大括号都可以省略</span></span><br><span class=\"line\">Comparator&lt;Integer&gt; com = (o1,o2) -&gt; o1.compareTo(o2);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#函数式接口\">#</a> 函数式接口</h2>\n<p><strong>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。</strong></p>\n<p>我们可以在一个接口上使用 <code>@FunctionalInterface</code>  注解，这样可以检测它是否为函数式接口。</p>\n<p>在 java.util.function 包下定义了 java8 丰富的函数式接口。</p>\n<p>java 不仅可以支持 OOP (面向对象编程)，还可以支持 OOF (面向函数编程)。</p>\n<h2 id=\"核心函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#核心函数式接口\">#</a> 核心函数式接口</h2>\n<table>\n<thead>\n<tr>\n<th>接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>用途</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Consumer<T></td>\n<td>T</td>\n<td>void</td>\n<td>对类型为 T 的对象应用操作</td>\n<td>void accept(T t)</td>\n</tr>\n<tr>\n<td>Supplier<T></td>\n<td>无</td>\n<td>T</td>\n<td>返回类型为 T 的对象</td>\n<td>T get()</td>\n</tr>\n<tr>\n<td>Function&lt;T,R&gt;</td>\n<td>T</td>\n<td>R</td>\n<td>对类型为 T 的对象应用操作，并返回结果为 R 的对象</td>\n<td>R apply(T t)</td>\n</tr>\n<tr>\n<td>Predicate<T></td>\n<td>T</td>\n<td>boolean</td>\n<td>确定类型为 T 的对象是否满足某种约束，并返回 boolean 值</td>\n<td>boolean test(T t)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"方法引用和构造器引用\"><a class=\"markdownIt-Anchor\" href=\"#方法引用和构造器引用\">#</a> 方法引用和构造器引用</h2>\n<p>当要传递给 lambda 体的操作，已经有实现的方法了，可以使用方法引用。方法引用就是 lambda 表达式，通过方法的名字来指向一个方法，可以认为是 lambda 表达式的一个语法糖。</p>\n<p><strong>使用的要求是实现接口的抽象对象方法的参数列表和返回值类，必须与方法引用的方法的参数列表和返回值类型一致。</strong></p>\n<p>使用格式： <code>类或对象 :: 方法名</code> 。具体有三种情况，对象调用非静态方法，类调用静态方法，类调用非静态方法。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Consumer中的void accept(T t)和PrintStream中的void println(T t)的参数列表和返回值类型一致</span></span><br><span class=\"line\">Consumer&lt;String&gt; con1 = s -&gt; System.out.println(s);</span><br><span class=\"line\">con1.accept(<span class=\"string\">&quot;hello,world&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//使用方法引用</span></span><br><span class=\"line\"><span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> System.out;</span><br><span class=\"line\">Consumer&lt;String&gt; con2 = ps::println;</span><br><span class=\"line\">con2.accept(<span class=\"string\">&quot;hello,beijing&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类::实例方法,Comparator中的int compare(T o1,T o2)和String中的int o1.compareTo(o2)</span></span><br><span class=\"line\"><span class=\"comment\">//前者比后者多一个参数，实际上是使用该参数调用实例方法，因为类是无法调用实例方法的</span></span><br><span class=\"line\">Comparator&lt;String&gt; com = (o1,o2) -&gt; o1.compareTo(o2);</span><br><span class=\"line\">Comparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造器引用与方法引用类似</span></span><br><span class=\"line\">Supplier&lt;Employee&gt; sup = () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">Supplier&lt;Employee&gt; sup1 = Employee::<span class=\"keyword\">new</span>;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"stream-api\"><a class=\"markdownIt-Anchor\" href=\"#stream-api\">#</a> Stream API</h1>\n<p>Stream API 把真正的函数式编程风格引入到 java 中。使用 Stream API 可以对集合数据进行操作，可以执行非常复杂的查找、过滤和映射数据等操作，这操作类似 SQL 执行的数据库查询。</p>\n<p>现在数据库源有 MongDB，Redis 等，而这些 NoSQL 的数据就需要 java 层面去处理。</p>\n<p><strong>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</strong></p>\n<p><strong>Stream 自身不存储元素。Stream 不会改变源对象，相反，他们会返回一个持有结果的新 Stream。</strong></p>\n<p><strong>Stream 操作是延迟执行的，只有在执行终止操作，才执行中间操作链，并产生结果。执行终止操作后流不能再复用，若想继续操作需要重新创建新的 Stream。</strong></p>\n<p>Optional<T>类是一个容器类，可以保存类型 T 的值，代表这个值存在，或者仅仅保存 null，表示这个值不存在。是 java8 中用于解决空指针异常引入的类。</p>\n<h2 id=\"创建stream流\"><a class=\"markdownIt-Anchor\" href=\"#创建stream流\">#</a> 创建 Stream 流</h2>\n<ul>\n<li>集合可以通过 stream () 方法返回一个顺序流，通过 parallelStream () 方法返回一个并行流。</li>\n<li>数组可以通过 stream () 方法返回一个流。</li>\n<li>通过 Stream 的 of () 方法，在方法内填入多个参数形成容器。</li>\n<li>使用 iterate () 迭代方法和 generate () 生成方法创建无限流，主要用于生成数据。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; employees = EmployeeData.getEmployees();<span class=\"comment\">//获取一个集合</span></span><br><span class=\"line\"><span class=\"comment\">//default Stream&lt;E&gt; stream():返回一个顺序流</span></span><br><span class=\"line\">Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class=\"line\">Stream.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>);<span class=\"comment\">//填入参数形成容器</span></span><br><span class=\"line\"><span class=\"comment\">//迭代方法，初始值为0，每次迭代加2，limit()限制输出个数，并在forEach()中指定输出位置</span></span><br><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>,t -&gt; t+<span class=\"number\">2</span>).limit(<span class=\"number\">10</span>)forEach(System.out::println);</span><br><span class=\"line\">Stream.generate(Math::random).limit(<span class=\"number\">10</span>)forEach(System.out::println);<span class=\"comment\">//生成10个随机数</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"中间操作\"><a class=\"markdownIt-Anchor\" href=\"#中间操作\">#</a> 中间操作</h2>\n<h3 id=\"筛选与切片\"><a class=\"markdownIt-Anchor\" href=\"#筛选与切片\">#</a> 筛选与切片</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fliter(Predicate p)</td>\n<td>接收 Lambda，从流中排除某些元素</td>\n</tr>\n<tr>\n<td>distinct()</td>\n<td>筛选，通过流所生成元素的 hashCode () 和 equals () 去除重复元素</td>\n</tr>\n<tr>\n<td>limit(long maxSize)</td>\n<td>截断流，使其元素不超过给定数量</td>\n</tr>\n<tr>\n<td>skip(long n)</td>\n<td>跳过元素，返回一个忽略前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"映射与排序\"><a class=\"markdownIt-Anchor\" href=\"#映射与排序\">#</a> 映射与排序</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>map(Function f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td>\n</tr>\n<tr>\n<td>mapToDouble(ToDoubleFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个 DoubleStream。</td>\n</tr>\n<tr>\n<td>mapToint(TointFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个 IntStream。</td>\n</tr>\n<tr>\n<td>mapToLong(ToLongFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个 LongStream。</td>\n</tr>\n<tr>\n<td>flatMap(Function f)</td>\n<td>接收一个函数作为参数，将流中的每个值都转换成一个流，然后把所有流连接成一个流。例如将字符串数组的每个元素拆成字符，再组合成一个字符数组。</td>\n</tr>\n<tr>\n<td>sorted(Comparator com)</td>\n<td>产生一个新流，如果没有传入比较器，则按自然顺序排序，否则按照比较器顺序排序。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"终止\"><a class=\"markdownIt-Anchor\" href=\"#终止\">#</a> 终止</h3>\n<p>map 和 reduce 的连接通常被称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。</p>\n<p>Collect 接口中方法的实现决定了如果对流执行收集的操作，如收集到 List，Set 和 Map。另外 Collects 实用类提供了很多静态方法，可以方便地创建常见收集器实例。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allMatch(Predicate p)</td>\n<td>检查是否匹配所有元素</td>\n</tr>\n<tr>\n<td>anyMatch(Predicate p)</td>\n<td>检查是否至少匹配一个元素</td>\n</tr>\n<tr>\n<td>noneMatch(Predicate p)</td>\n<td>检查是否没有匹配所有元素</td>\n</tr>\n<tr>\n<td>findFirst()</td>\n<td>返回第一个元素</td>\n</tr>\n<tr>\n<td>findAny()</td>\n<td>返回当前流中所有元素</td>\n</tr>\n<tr>\n<td>count()</td>\n<td>返回流中元素的总个数</td>\n</tr>\n<tr>\n<td>max(Comparator c)</td>\n<td>返回流中元素的最大值</td>\n</tr>\n<tr>\n<td>min(Comparator c)</td>\n<td>返回流中的最小值</td>\n</tr>\n<tr>\n<td>forEach(Consumer c)</td>\n<td>内部迭代</td>\n</tr>\n<tr>\n<td>reduce(T iden,BinaryOperator b)</td>\n<td>可以将流中元素反复结合起来，得到一个值，返回 T。</td>\n</tr>\n<tr>\n<td>reduce(BinaryOperator b)</td>\n<td>可以将流中元素反复结合起来，得到一个值，返回 Optional<T></td>\n</tr>\n<tr>\n<td>collect(Collector c)</td>\n<td>将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "java",
                "java基础",
                "java学习路线"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/java/HeadFirst%20Java-Kathy%20Sierra/",
            "url": "http://example.com/2023/10/12/java/HeadFirst%20Java-Kathy%20Sierra/",
            "title": "HeadFirst Java-Kathy Sierra-90",
            "date_published": "2023-10-12T10:49:32.879Z",
            "content_html": "<ol>\n<li>当某个对象被 java 虚拟机察觉不会被使用到，该对象就会被标记成可回收的。如果内存开始不足，垃圾收集器就会启动来清理垃圾、回收空间，让空间能够再次被利用。</li>\n<li>任何变量只要加上 public、static 和 final，基本上都会变成全局变量取用的常数。</li>\n<li><strong>事实上没有对象变量这样的东西存在，只要引用到对象的变量，对象引用变量保存的是存取对象的方式。</strong></li>\n<li>数组是个对象，不管里面放的是不是 primitive 主数据类型。</li>\n<li>java 是通过值传递的，也就是通过拷贝传递，方法无法改变调用方所传入的参数。</li>\n<li>在创建一个类之前我们需要写出下面三种东西：伪码、测试码、真实码。</li>\n<li>标准版的扩展都以 javax 作为包名称的开头。</li>\n<li>import 和 C 的 include 并不相同，运用 import 只是帮你省下每个类前面的包名称而已。程序不会英文用来 import 而变大或变慢。</li>\n<li>抽象类的产生源于有些类不应该被初始化，比如动物类应该是什么？</li>\n<li>任何从 <code>ArrayList&lt;Object&gt;</code>  取出的东西都会被当作 Object 类型的引用而不管它原来是什么。而且编译器是根据引用类型来判断哪些方法可以调用，而不是根据 Object 实际的类型。</li>\n<li>多重继承会产生 “致命方块 &quot; 问题，即两个及以上的直接父类拥有相同的方法，子类不知道应该调用哪个方法。</li>\n<li><strong>接口解决致命方块的方法很简单：把全部方法设为抽象的，如此一来，子类就得实现这个此方法，因此 java 虚拟机在执行期间就不会搞不清楚要用哪一个继承版本。</strong></li>\n<li><strong>在 java 中，程序员会在乎内存中的两个区域：对象的生存空间堆 (heap) 和方法调用及变量的生存空间 (stack)。</strong></li>\n<li><strong>不管对象是否声明或创建，如果局部变量是个对该对象的引用，只有变量本身会放在栈上，对象本身只会存在于堆上。</strong></li>\n<li>实例变量声明在类中方法之外的地方，局部变量声明在方法或方法的参数上。</li>\n<li>构造函数在执行的时候，第一件事是去执行它的父类的构造函数，这会连锁反应到 Object 这个类为止。因为如果我们没有调用 super ()，编译器会帮我们加上 super () 的调用。</li>\n<li><strong>基本数据类型有默认值，而包装类则没有默认值。</strong></li>\n<li>编译器不会注意 RuntimeException 类型的异常，它所关心的是称为检查异常的异常。</li>\n<li>内部类可以使用外部所有的方法和变量，就算是私有的也一样可以使用。</li>\n<li>如果某实例变量不能或不应该被实例化的，因为有些变量要在执行期当场创建才有意义。这个时候需要把它标记为 transient (瞬时) 的，transient 的引用变量会以 null 返回，而不管存储当时它的值是什么。恢复时会被赋值为 null 的对象引用或基本数据类型的默认值。</li>\n<li><strong>一个不可序列化的父类，其子类可以是可序列化的。</strong></li>\n<li>解序列化时新的对象会被配置到堆上，但构造函数不会执行，不然会抹去对象的状态。</li>\n<li><strong>静态变量不会被序列化，因为所有对象都是共享同一份静态变量值。当对象还原时，静态变量会恢复成类中原本的样子，而不是存储时的样子。</strong></li>\n<li>将 FileWriter 链接到 BufferedWriter 可以提升效率，因为 BufferedWriter 可以暂存一堆数据，然后到满的时候再实际写入键盘，这样可以减少对磁盘的操作。</li>\n<li>File 对象代表文件的路径，而不是文件本身。</li>\n<li>对象的状态并非只能用序列化来存储，也可以使用 transient 修饰存储。</li>\n<li>java 的好处就在于大部分的输入 / 输出工作并不在乎链接串流的上游实际是什么。也就是说可以使用 BufferedReader 而不管是来自串流来自文件或 socket。</li>\n<li>调度器在不同的 java 虚拟机上有不同的做法，就算是同一个程序在同一台机器上运行也会有不同的遭遇。</li>\n<li>对泛型来说，extends 这个关键词代表 &quot;是一个…&quot;，且适用于类和接口。</li>\n<li>hashcode 是用来缩小寻找成本的，但最后还是要用 equals () 才能认定是否真的找到了相同的项目。如果两个对象有相同的 hashcode 值，它们不一定是相等的。但若两个对象相等，则 hashcode 值一定要相等。</li>\n<li><strong>数组的类型是运行时检查的，但集合的类型检查只会发生在编译期间。</strong></li>\n<li>JAR 就是 JavaARchive，这种文件是个 pkzip 格式的文件，它能让你的一组类文件包装起来，所以交付时只需一个 JAR 文件。</li>\n<li>JWS (Java Web Start) 程序由两个部分组成：可执行的 JAR 文件和.jnlp 文件。.jhlp 文件是用来描述 JWS 应用程序的 XML 文件，它有 target 指定 JAR 的名称和位置，以及带有 main () 的类名称。</li>\n</ol>\n",
            "tags": [
                "java",
                "书籍",
                "java基础",
                "java学习路线"
            ]
        },
        {
            "id": "http://example.com/2023/10/12/hello-world/",
            "url": "http://example.com/2023/10/12/hello-world/",
            "title": "Hello World",
            "date_published": "2023-10-12T10:47:36.780Z",
            "content_html": "<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></div>\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></div>\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></div>\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n",
            "tags": []
        }
    ]
}