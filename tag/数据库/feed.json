{
    "version": "https://jsonfeed.org/version/1",
    "title": "西芹的小站 • All posts by \"数据库\" tag",
    "description": "",
    "home_page_url": "https://xiqin-huang.github.io",
    "items": [
        {
            "id": "https://xiqin-huang.github.io/2023/10/12/bian-cheng/shu-ju-ku-xi-tong-gai-shu/shu-ju-ku-xi-tong-gai-shu/",
            "url": "https://xiqin-huang.github.io/2023/10/12/bian-cheng/shu-ju-ku-xi-tong-gai-shu/shu-ju-ku-xi-tong-gai-shu/",
            "title": "数据库系统概述-91",
            "date_published": "2023-10-12T10:49:32.954Z",
            "content_html": "<h1 id=\"绪论\"><a class=\"markdownIt-Anchor\" href=\"#绪论\">#</a> 绪论</h1>\n<p>数据库的特点之一是数据的共享，严格地讲，这里的数据共享是指多种应用、多种语言、多个用户互相覆盖地使用数据集合。</p>\n<p>数据库 DB、数据库系统 DBS 和数据库管理系统 DBMS 之间的关系是 DBS 包括 DB 和 DBMS。</p>\n<p>在数据管理技术的发展过程中，经历了文件系统、人工管理和数据库系统阶段。</p>\n<h2 id=\"数据库系统概述\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统概述\">#</a> 数据库系统概述</h2>\n<h3 id=\"四个基本概念\"><a class=\"markdownIt-Anchor\" href=\"#四个基本概念\">#</a> 四个基本概念</h3>\n<h4 id=\"数据\"><a class=\"markdownIt-Anchor\" href=\"#数据\">#</a> 数据</h4>\n<p>数据是数据库中存储的基本对象，数据的定义是描述事物的符号记录。</p>\n<p>数据的含义称为数据的含义，数据与其语义是不可分的。</p>\n<p>数据是有结构的：记录是计算机存储数据的一种格式或一种方法。</p>\n<h4 id=\"数据库\"><a class=\"markdownIt-Anchor\" href=\"#数据库\">#</a> 数据库</h4>\n<p><strong>数据库 (Database，简称 DB) 是长期存储在计算机内、有组织的、可共享的大量数据的集合。</strong></p>\n<h5 id=\"数据库的基本特征\"><a class=\"markdownIt-Anchor\" href=\"#数据库的基本特征\">#</a> 数据库的基本特征</h5>\n<ul>\n<li>数据按一定的数据模型组织、描述和存储</li>\n<li>可为各种用户共享、冗余度较小、易扩展</li>\n<li>数据独立性较高</li>\n</ul>\n<h4 id=\"数据库管理系统\"><a class=\"markdownIt-Anchor\" href=\"#数据库管理系统\">#</a> 数据库管理系统</h4>\n<p>数据库管理系统 (DBMS) 位于用户应用与操作系统之间的一层数据管理软件，是基础软件，是一个大型复杂的软件系统。</p>\n<h5 id=\"主要功能\"><a class=\"markdownIt-Anchor\" href=\"#主要功能\">#</a> 主要功能</h5>\n<ol>\n<li>数据定义功能，提供数据定义语言 (DDL) 和定义数据库中的数据对象</li>\n<li>数据组织、存储和管理\n<ul>\n<li>分类组织、存储和管理各种数据</li>\n<li>确定数据在存储级别上的结构和存取方式</li>\n<li>实现数据之间的联系</li>\n<li>提供多种存取方式提高存取效率</li>\n</ul>\n</li>\n<li>数据操纵功能，提供数据操纵语言 (DML)，实现对数据库的基本操作</li>\n<li>数据库的事务管理和运行管理，由数据库管理系统统一管理和控制，保证事务正确运行</li>\n<li>数据库的建立和维护功能，提供实用程序和工具完成数据库数据批量装载，数据库转储，介质故障恢复，数据库的重组织和性能监视等</li>\n<li>其他功能\n<ul>\n<li>数据库管理系统与网络中其他软件系统的通信</li>\n<li>数据库管理系统之间的数据转换</li>\n<li>异构数据库之间的互访和互操作</li>\n</ul>\n</li>\n</ol>\n<img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/1d1c6e6b37a025b0d05c4af995e17427.jpg\" alt=\"数据库在计算机系统中的位置.jpg\" style=\"zoom:50%;\">\n<h4 id=\"数据库系统\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统\">#</a> 数据库系统</h4>\n<p>数据库系统 (DBS) 是指在计算机系统中引入数据库后的系统构成，在不引起混淆的情况下常常把数据库系统简称为数据库。</p>\n<p><strong>数据库系统的构成包括数据库，数据库管理系统及其应用开发工具、应用程序和数据库管理员 (DBA)。</strong></p>\n<img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/4c59c7cbd6fbffe4f187f1d35b6104eb.png\" alt=\"数据库系统\" style=\"zoom:50%;\">\n<h3 id=\"数据库管理技术的产生和发展\"><a class=\"markdownIt-Anchor\" href=\"#数据库管理技术的产生和发展\">#</a> 数据库管理技术的产生和发展</h3>\n<p><strong>数据管理对数据进行分类、组织、编码、存储、检索和维护。</strong></p>\n<p>数据库系统管理相比于文件管理系统的优点是：程序员不需要关注记录的存储和不同表之间的联系，开发速度快。</p>\n<p>数据库的数据独立性高，拥有物理独立性，当数据的物理存储改变不影响应用程序，也拥有逻辑独立性，数据的逻辑结构改变不影响应用程序。</p>\n<h2 id=\"数据模型\"><a class=\"markdownIt-Anchor\" href=\"#数据模型\">#</a> 数据模型</h2>\n<p><strong>数据模型是对现实世界数据特征的抽象，通俗来讲数据模型就是对现实世界的模拟，是数据库系统的核心和基础。</strong></p>\n<p>数据模型分为两类：概念模型，也称信息模型，是按用户的观点对数据和信息建模，用于数据库设计；逻辑模型和物理模型，逻辑模型按计算机系统的观点对数据建模，用于 DBMS 实现，物理模型描述在系统内 (磁盘上) 的表示方式和存取方法。</p>\n<p><strong>数据模型由三部分组成：数据结构，用于描述系统的静态特性；数据操作，用于描述系统的动态特性；完整性约束。</strong></p>\n<h3 id=\"概念模型\"><a class=\"markdownIt-Anchor\" href=\"#概念模型\">#</a> 概念模型</h3>\n<h4 id=\"信息世界中的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#信息世界中的基本概念\">#</a> 信息世界中的基本概念</h4>\n<ol>\n<li>实体 (entity)：客观存在并可相互区别的事物。</li>\n<li>属性 (attribute)：实体所具有的某一特性称为属性，一个实体可以由多个属性来刻画。</li>\n<li>码 (key)：唯一标志实体的属性。</li>\n<li>实体型 (entity type)：用实体名及其属性名集合来抽象和刻画同类实体称为实体型。</li>\n<li>实体集 (entity set)：同一类型实体的集合称为实体集。</li>\n<li>联系 (relationship)：现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。</li>\n</ol>\n<h3 id=\"常用的逻辑模型\"><a class=\"markdownIt-Anchor\" href=\"#常用的逻辑模型\">#</a> 常用的逻辑模型</h3>\n<ol>\n<li>层次模型，为格式化模型，使用树形结构来表示各类实体已经实体间的联系。</li>\n<li>网状模型，为格式化模型</li>\n<li>关系模型，目前最常见的模型，</li>\n<li>面向对象数据模型，</li>\n<li>对象关系数据模型</li>\n<li>半结构化数据模型，如 XML</li>\n<li>非结构化数据模型，图模型</li>\n</ol>\n<h2 id=\"数据库系统的结构\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统的结构\">#</a> 数据库系统的结构</h2>\n<p>从数据库应用开发人员角度看，数据库系统采用三级模式结构，是数据库系统内部的系统结构。</p>\n<p>从数据库最终用户角度看有：单用户结构、主从式结构、分布式结构、客户 - 服务器、浏览器 - 应用服务器 / 数据库服务器。</p>\n<h3 id=\"三级模式结构\"><a class=\"markdownIt-Anchor\" href=\"#三级模式结构\">#</a> 三级模式结构</h3>\n<p>数据库系统模式分为外模式，模式 (逻辑模式) 和内模式。</p>\n<p>逻辑模式是数据库系统模式的中心，与数据的物理存储细节和硬件环境无关，与具体的应用程序、开发工具及高级程序设计语言无关。</p>\n<p>外模式，也称子模式或用户模式，是数据库用户使用的局部数据的逻辑结构和特征的描述，通常是逻辑模式的子集，一个模式可以有多个外模式，反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求。</p>\n<p>内模式，也称存储模式，是数据物理结构和存储方式的描述，一个数据库一般只有一个内模式。</p>\n<p><strong>通过二级映像可以保证数据的物理独立性和逻辑独立性。</strong></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/f07dad2a314607f6018151359fa25d93.png\" alt=\"数据库三级模式.png\"></p>\n<h1 id=\"关系数据库\"><a class=\"markdownIt-Anchor\" href=\"#关系数据库\">#</a> 关系数据库</h1>\n<p>基数的大小等于各个域的大小相乘。</p>\n<p>分量必须取原子值。</p>\n<p>关系模式是型，关系是值，关系模型是对关系法描述。</p>\n<p>关系的三类完整性约束：实体完整性，参照完整性，用户定义的完整性。前两者是关系模型必须满足的完整性约束条件，称为关系的两个不变性，应由关系系统自动支持。</p>\n<p>实体完整性是指关系的主属性不能取空值。</p>\n<p>参照完整性是指外码一定要是存在的值。比如学生所选课程号是外码，该课程一定要实际存在。此时学生关系是参照关系，课程关系是被参照关系或目标关系。</p>\n<p>‍关系代数中的连接操作是由选择和笛卡尔积操作组合而成。</p>\n<p>关系数据模型的基本数据结构是关系，而不是关系模式。</p>\n<p>在参照完整性规则中，参照关系 R 中的外码与被参照关系 S 中的主码可以不同名，但应取自同一值域。</p>\n<h3 id=\"关系代数\"><a class=\"markdownIt-Anchor\" href=\"#关系代数\">#</a> 关系代数</h3>\n<p><strong>关系代数是一种抽象的查询语言，它使用对关系的运算来表达查询。</strong></p>\n<p>选择运算是从关系 R 中选取使逻辑表达式 F 为真的元祖，是从行的角度进行的运算。</p>\n<p>投影操作是从 R 中选择出若干属性列组成新的关系，主要是从列的角度进行运算，投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组 (避免重复行)。</p>\n<p>连接是从两个关系的笛卡尔积中选取属性间满足一定条件的元组。</p>\n<p>两个关系 R 和 S 再做自然连接时，关系 R 中某些元组有可能在 S 中不存在公共属性上值相等的元组，这些被舍弃的元组被称为悬浮元组。可以通过外连接保留左边或者右边的悬浮元组，其他属性上填空值。</p>\n<p><strong>除法首先找出 R 和 S 关系中相同的属性，即 Y 属性。被除关系 R 中与 S 中不相同的属性是 X，做取消重复值的投影。然后求关系 R 中 X 属性对应的象集 Y。最后判断包含关系，判断关系 R 中 X 各个值的象集是否包含关系 S 中属性 Y 的所有值，如果包含则为所求。</strong></p>\n<p><a href=\"https://blog.csdn.net/t_1007/article/details/53036082\">除运算应用实例</a></p>\n<img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/f71e0b776d2f094e3aa8450af51872ad.png\" alt=\"关系代数\" style=\"zoom:50%;\">\n<h3 id=\"关系演算\"><a class=\"markdownIt-Anchor\" href=\"#关系演算\">#</a> 关系演算</h3>\n<p>关系演算是以数理逻辑中的谓语演算为基础，可以按谓词变元不同分为两类：以 ALPHA 语言为代表的以元组变量作为基本对象，和以 QUE 为代表的以域变量作为基本对象。</p>\n<p>ALPHA 语句格式： <code>GET 工作空间名(定额) (表达式1)[:条件][DOWN|UP 表达式2]</code> 。例如查询选修 2 号课程的学生名字： <code>RANGE sc x GET W(Student.Sname):∃X(X.Sno=Suudent.Sno∧X.Cno='2'</code> 。</p>\n<p>QBE 是基于屏幕表格的查询余姚，以填写表格的方式构造查询，使用示例元素 (域变量) 来表示查询结果可能的情况，查询结果以表格形式显示。分为示例变量，打印操作符 P 和查询条件。</p>\n<h1 id=\"关系数据库标准语言sql\"><a class=\"markdownIt-Anchor\" href=\"#关系数据库标准语言sql\">#</a> 关系数据库标准语言 SQL</h1>\n<p><strong>SQL 集数据定义语言 (DDL)，数据操纵语言 (DML)，数据控制语言 (DCL) 功能于一体，可以独立完成数据库生命周期中的全部活动。</strong></p>\n<p>SQL 高度非过程化，存取路径的选择以及 SQL 的操作过程由系统自动完成。</p>\n<p>定义模式实际上定义了一个命名空间，或者说是目录。</p>\n<p>空值是一个很特殊的值，含有不确定性，对关系运算带来特殊的问题，需要做特殊的处理。</p>\n<p>更新视图的限制，一些视图是不可更新的，因为对这些视图的更新不能唯一地有意义地转换成对相应基本表的更新。</p>\n<h1 id=\"数据库安全性\"><a class=\"markdownIt-Anchor\" href=\"#数据库安全性\">#</a> 数据库安全性</h1>\n<p>数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。</p>\n<p>数据库的一大特点是数据可以共享，数据共享必然带来数据库的安全性问题。</p>\n<h3 id=\"数据库的不安全因素及安全措施\"><a class=\"markdownIt-Anchor\" href=\"#数据库的不安全因素及安全措施\">#</a> 数据库的不安全因素及安全措施</h3>\n<ol>\n<li>非授权用户对数据库的恶意存取和破坏。安全措施主要包括用户身份识别、存取控制和视图等技术。</li>\n<li>数据库中重要或敏感的数据被泄露。安全措施主要由强制存取控制、数据加密存储和加密传输等。</li>\n<li>安全环境的脆弱性。建立一套可信计算机系统的概率和标准。</li>\n</ol>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/d60cdd4a5b0d034082aa8f133c477c18.png\" alt=\"安全标准\"></p>\n<h2 id=\"数据库安全控制\"><a class=\"markdownIt-Anchor\" href=\"#数据库安全控制\">#</a> 数据库安全控制</h2>\n<p><strong>数据库安全技术有：用户身份鉴别、存取控制、自主存取控制方法、数据库角色、强制存取控制方法。</strong></p>\n<p>自主存取控制 (DAC)：用户对不同的数据对象有不同的存取权限，不同的用户对同一对象也有不同的存取权限，用户还可以将其拥有的存取权限转授给其他用户。</p>\n<p>** 在收回用户权限的时候可以选择级联回收或受限回收，前者会将该用户传播出去的权限也进行回收，而后者不会。如果运行循环授权的话，级联回收会导致死循环，因此不允许级联回收。** 一个用户可能从多个用户处获得同一个权限，级联回收只回收直接或间接从此处获得权限，不影响从其他用户处获得的权限。</p>\n<p><strong>数据库角色是被命名的一组与数据库操作相关的权限，简单来说角色是权限的集合，可以为一组具有相同权限的用户创建一个角色。</strong></p>\n<p>自主存取控制缺点是可能存在数据的 “无意泄露”，例如读取到机密的数据后将其写入到其他没有限制的数据库中，数据本身没有安全性标志。而强制存取控制 (MAC) 则保证了更高程度的安全性。</p>\n<p>强制存取控制对于主体和客体，DBMS 为它们每个实例 (值) 指派一个敏感度标记 (Label)，主体的敏感度标记称为许可证，客体的敏感度标记称为密级。仅当主体的许可证级别大于或等于客体的密级时， 该主体才能读取相应的客体；仅当主体的许可证级别小于或等于客体的密级时， 该主体才能写相应的客体。</p>\n<p>可以利用视图机制实现授予用户查询某些行的权限。</p>\n<p>审计启动一个专用的审计日志，将用户对数据库的所有操作记录在上面。审计的事件包括服务器事件、系统权限、语句事件和模式对象事件。</p>\n<p>推理控制处理强制存取控制未处理的问题，避免用户利用能够访问的数据推知更高密级的数据。</p>\n<p>隐蔽信道处理强制存取控制未解决的问题，高安全等级用户按事先约定方式主动向低安全等级用户传输信息，从而导致高安全敏感信息泄露。例如每列有唯一的序号，低等级用户通过插入试探高等级用户是否有插入该位置的数据。</p>\n<h3 id=\"安全层次\"><a class=\"markdownIt-Anchor\" href=\"#安全层次\">#</a> 安全层次</h3>\n<ul>\n<li>系统根据用户标识鉴定用户身份，合法用户才准许进入计算机系统。</li>\n<li>数据库管理系统进行存取控制，只允许用户执行合法操作。</li>\n<li>操作系统有自己的保护措施。</li>\n<li>数据以密码形式存储到数据库中。</li>\n</ul>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/c5870f665e46f11af68e67ec086f3863.png\" alt=\"安全层次\"></p>\n<h1 id=\"数据库完整性\"><a class=\"markdownIt-Anchor\" href=\"#数据库完整性\">#</a> 数据库完整性</h1>\n<p>数据库的完整性是指数据的正确性和数据的相容性，包括实体完整性、参照完整性和用户定义的完整性。</p>\n<p>数据库的完整性是防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据。</p>\n<p>完整性和安全性的区别在于：完整性是阻止<strong>合法用户</strong>通过<strong>合法操作</strong>向数据库中加入<strong>不正确的数据</strong>；安全性防范的是<strong>非法用户</strong>和<strong>非法操作</strong>存取数据库中的<strong>正确数据</strong>。</p>\n<p>为了避免对基本表进行全表扫描，RDBMS 核心一般都会在主码上自动建立一个 UNIQUE 索引。</p>\n<p>使用断言可以指定更具一般性的约束，可以定义涉及多个表的或聚集操作的比较复杂的完整性约束。</p>\n<p>触发器只能定义在基本表上，不能定义在视图上。</p>\n<p>空值的字段上可以定义主键约束。</p>\n<p>‏实体完整性规则检查的内容包括检查主码的各个属性值是否为空，只要有一个为空就拒绝插入或修改；检查主码值是否唯一，如果不唯一就拒绝插入或修改。</p>\n<h3 id=\"完整性小结\"><a class=\"markdownIt-Anchor\" href=\"#完整性小结\">#</a> 完整性小结</h3>\n<table>\n<thead>\n<tr>\n<th>实体完整性</th>\n<th>参照完整性</th>\n<th>用户定义的完整性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>定义方法</td>\n<td>create table</td>\n<td>create table</td>\n<td>create table</td>\n</tr>\n<tr>\n<td>检查时机</td>\n<td>执行插入和修改操作</td>\n<td>参照表：插入 / 修改；被参照表：删除 / 修改</td>\n<td>执行插入和修改操作</td>\n</tr>\n<tr>\n<td>违约操作</td>\n<td>拒绝执行</td>\n<td>拒绝执行 / 级联操作 / 设置为空值</td>\n<td>拒绝执行</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"关系数据理论\"><a class=\"markdownIt-Anchor\" href=\"#关系数据理论\">#</a> 关系数据理论</h1>\n<p>用规范化理论改造关系模式，消除其中不合适的数据依赖。</p>\n<p>数据依赖的主要类型：函数依赖 (FD)、多值依赖 (MVD) 和连接依赖。数据依赖会导致插入异常、删除异常、更新异常和数据冗余问题。</p>\n<p>函数依赖：设 R (U) 是一个属性集 U 上的关系模式，X 和 Y 是 U 的子集。若对于 R (U) 的任意一个可能的关系 r，r 中不可能存在两个元组在 X 上的属性值相等，而在 Y 上的属性值不等则称 \"X 函数确定 Y\" 或 \"Y 函数依赖于 X\"，记为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo lspace=\"0em\" rspace=\"0em\">→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X{\\rightarrow}Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>。还可以根据 X 的真子集是否确定 Y 来判断是 \"Y 完全函数依赖于 X，记为\"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo><mover><mo><mo>⟶</mo></mo><mi>F</mi></mover></mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\stackrel{F}{\\longrightarrow}Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3003em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2893em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.711em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> 还是 \"Y 部分函数依赖于 X，记为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo><mover><mo><mo>⟶</mo></mo><mi>P</mi></mover></mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\stackrel{P}{\\longrightarrow}Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3003em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2893em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.711em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>\"。</p>\n<p>设 K 为关系模式 R&lt;U,F&gt; 中的属性或属性组合，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo><mover><mo><mo>⟶</mo></mo><mi>F</mi></mover></mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">K\\stackrel{F}{\\longrightarrow}U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3003em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2893em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.711em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>，则称 K 为 R 的一个候选码；如果是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo><mover><mo><mo>⟶</mo></mo><mi>P</mi></mover></mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">K\\stackrel{P}{\\longrightarrow}U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3003em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2893em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.711em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>，则称 K 为 R 的一个超码。若关系模式 R 有多个候选码，则选择其中一个为主码。</p>\n<p>包含在任意一个候选码中的属性，称为主属性，否则称为非主属性或非码属性。整个属性组是码，称为全码。</p>\n<p>Armstrong 公理系统中包含自反律、增广律和传递律。</p>\n<p>如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mo>+</mo></msup><mo>=</mo><msup><mi>F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">G^+=F^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>，就说函数依赖集 F 覆盖 G，或 F 与 G 等价，两个函数依赖集等价是指它们的闭包等价。</p>\n<h2 id=\"范式\"><a class=\"markdownIt-Anchor\" href=\"#范式\">#</a> 范式</h2>\n<p>各种范式之间的联系：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>2</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>3</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>4</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>5</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">1NF\\supset 2NF\\supset 3NF\\supset BCNF\\supset 4NF\\supset 5NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">5</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，关系属于 n 范式，可以记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mi>n</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}nNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>。</p>\n<p>低级别的关系模式可以通过模式分解转换为若干个高一级的范式的关系模式的集合，这个过程被称为规范化。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>：如果一个关系模式 R 的所有属性都是不可分的数据项，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>。如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，则会出现插入异常、删除异常、修改复杂和数据冗余度大的问题。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">2NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>：若关系模式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，并且每一个非主属性都完全依赖于 R 的主码，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}2NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>。如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}2NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，仍会出现插入异常、删除异常、修改复杂和数据冗余度大的问题，但是相比于 1NF 的情况得到缓解。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">3NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>：关系模式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\langle}U,F\\rangle{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，若 R 中不存在这样的码<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mtext>、属性组</mtext><mi>Y</mi><mtext>及非主属性</mtext><mi>Z</mi><mo stretchy=\"false\">(</mo><mi>Y</mi><mo>⊉</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">X、属性组Y及非主属性Z(Y{\\not\\supseteq}Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord cjk_fallback\">、属性组</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord cjk_fallback\">及非主属性</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">⊇</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span>)，使得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo lspace=\"0em\" rspace=\"0em\">→</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo lspace=\"0em\" rspace=\"0em\">→</mo><mi>Z</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo>↛</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X{\\rightarrow}Y,Y{\\rightarrow}Z,Y{\\not\\rightarrow}X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord\"><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> 成立，则称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>3</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\langle}U,F\\rangle{\\in}3NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，简而言之即不存在非主属性传递函数依赖于候选码。如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>3</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}3NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，仍会出现插入异常、删除异常、修改复杂和数据冗余度大的问题，但是相比于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">2NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span> 的情况得到缓解。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">BCNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span></span></span></span>：设关系模式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\langle}U,F\\rangle{\\in}1NF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NF</span></span></span></span>，如果对于 R 的每个函数依赖<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo lspace=\"0em\" rspace=\"0em\">→</mo><mi>Y</mi><mtext>，且</mtext><mi>X</mi><mo>⊅</mo><mi>Y</mi><mtext>时</mtext></mrow><annotation encoding=\"application/x-tex\">X{\\rightarrow}Y，且X{\\not\\supset}Y时</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mrel\">→</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord cjk_fallback\">，且</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">⊃</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord cjk_fallback\">时</span></span></span></span>，X 必含有码，那么<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo lspace=\"0em\" rspace=\"0em\">∈</mo><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">R{\\in}BCNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span></span></span></span>。即在关系模型 R 中，每个决定因素都包含码。3NF 出现问题是因为存在主属性 J 部分依赖于码<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(S,T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span>，因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">BCNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span></span></span></span> 的关系模式中要求没有任何属性对码的部分函数依赖和传递函数依赖。</p>\n<p>如果一个关系数据库中的所有关系模式都属于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">BCNF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BCNF</span></span></span></span>，那么在函数依赖范畴内，它已实现模式的彻底分解，达到了最高的规范化程度，消除了操作异常等诸多问题。</p>\n<p><strong>1NF 消除非主属性对码的部分函数依赖满足 2NF，2NF 消除非主属性对码的传递函数依赖满足 3NF，3NF 消除主属性对码的部分和传递函数依赖满足 BCNF，BCNF 消除非平凡且非函数依赖的多值依赖满足 4NF。</strong></p>\n<h2 id=\"模式分解\"><a class=\"markdownIt-Anchor\" href=\"#模式分解\">#</a> 模式分解</h2>\n<p>记<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><msub><mi>U</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mn>1</mn></msub><mo stretchy=\"false\">⟩</mo><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>R</mi><mi>n</mi></msub><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><msub><mi>U</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">⟩</mo><mo stretchy=\"false\">}</mo><mtext>是</mtext><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mtext>的一个分解，若对</mtext><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mtext>的任何一个关系</mtext><mi>r</mi><mtext>均有</mtext><mi>r</mi><mo>=</mo><mi>r</mi><mtext>在</mtext><mi>ρ</mi><mtext>中各关系模式上的投影的自然连接成立，则称分解</mtext><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">{\\rho}=\\{R_1{\\langle}U_1,F_1\\rangle,\\dots,\\{R_n{\\langle}U_n,F_n\\rangle\\}是R{\\langle}U,F\\rangle的一个分解，若对R{\\langle}U,F\\rangle的任何一个关系r均有r=r在\\rho中各关系模式上的投影的自然连接成立，则称分解\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩}</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord cjk_fallback\">的一个分解，若对</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord cjk_fallback\">的任何一个关系</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">均有</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord mathnormal\">ρ</span><span class=\"mord cjk_fallback\">中各关系模式上的投影的自然连接成立，则称分解</span><span class=\"mord mathnormal\">ρ</span></span></span></span> 具有无损连接性，简称无损分解。<a href=\"https://zhuanlan.zhihu.com/p/151039521\">无损分解算法</a></p>\n<p>记<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><msub><mi>U</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mn>1</mn></msub><mo stretchy=\"false\">⟩</mo><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>R</mi><mi>n</mi></msub><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><msub><mi>U</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">⟩</mo><mo stretchy=\"false\">}</mo><mtext>是</mtext><mi>R</mi><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">⟨</mo><mi>U</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">⟩</mo><mtext>的一个分解，若</mtext><mi>F</mi><mtext>所逻辑蕴含的函数依赖一定也为分解后所有的关系模式中的函数依赖</mtext><msub><mi>F</mi><mi>i</mi></msub><mtext>所逻辑蕴含，即</mtext><msup><mi>F</mi><mo>+</mo></msup><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>F</mi><mn>1</mn></msub><mo lspace=\"0em\" rspace=\"0em\">∪</mo><msub><mi>F</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">∪</mo><mo>…</mo><mo lspace=\"0em\" rspace=\"0em\">∪</mo><msub><mi>F</mi><mi>n</mi></msub><msup><mo stretchy=\"false\">)</mo><mo>+</mo></msup><mtext>，则称关系模式</mtext><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">{\\rho}=\\{R_1{\\langle}U_1,F_1\\rangle,\\dots,\\{R_n{\\langle}U_n,F_n\\rangle\\}是R{\\langle}U,F\\rangle的一个分解，若F所逻辑蕴含的函数依赖一定也为分解后所有的关系模式中的函数依赖F_i所逻辑蕴含，即F^+=(F_1{\\cup}F_2{\\cup}\\dots{\\cup}F_n)^+，则称关系模式R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩}</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mopen\">⟨</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">⟩</span><span class=\"mord cjk_fallback\">的一个分解，若</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord cjk_fallback\">所逻辑蕴含的函数依赖一定也为分解后所有的关系模式中的函数依赖</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">所逻辑蕴含，即</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">∪</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">∪</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\">∪</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，则称关系模式</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> 的这个分解是保持函数依赖的。</p>\n<table>\n<thead>\n<tr>\n<th>无损连接</th>\n<th>保持依赖</th>\n<th>达到的范式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>3NF，不一定 BCNF</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>Y</td>\n<td>3NF，不一定 BCNF</td>\n</tr>\n<tr>\n<td colspan=\"2\">Y</td>\n<td>4NF</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"数据库设计\"><a class=\"markdownIt-Anchor\" href=\"#数据库设计\">#</a> 数据库设计</h1>\n<p><strong>数据库设计分为 6 个阶段：需求分析、概念结构设计、逻辑结构设计、物理结构设计、数据库实施、数据库运行和维护。</strong></p>\n<p>数据项是数据的最小组成单位，若干个数据项可以组成一个数据结构。</p>\n<p>数据流是数据结构在系统内部传输的路径。</p>\n<p>把参与联系的实体型的数目称为联系的度。</p>\n<p>E-R 模型使用方框代表实体，菱形代表联系，实体之间的联系可以分为 1 对 1、1 对多和多对多。</p>\n<p>E-R 模型三种主要的扩展：ISA 联系 (父类 - 子类联系，表示 is a)、基数约束和 PART-OF 联系。</p>\n<p>ISA 联系又被称作父类 - 子类联系，表示 is a，符号表示为三角形。叉号 X 表示不相交约束，即一个父类的实体最多属于一个子类实体集。完备性约束则是描述父类中的一个实体是否必须是某个子类的实体，如果是则叫做完全特化，否则称为部分特化。</p>\n<p>基数约束是实体型中的任何一个实体可以在联系中出现的最小次数和最多次数。</p>\n<p>Part-of 联系是描述某个实体型是另外一个实体型的一部分。当整体实体被破坏，部分实体仍然可以存在，则称为非独占联系，否则称为独占联系。</p>\n<p>概念结构设计要解决属性冲突、命名冲突和结构冲突。</p>\n<p>关系数据库物理设计的内容是为关系模式选取存取方法和为关系、索引、日志、备份等数据库文件选择物理存储结构。</p>\n<p>为了提高某个属性 (或属性组) 的查询速度，把这个 (或这些) 属性上具有相同值的元组集中存放在连续的物理块中成为聚簇。</p>\n<p>聚簇的局限性在于一个基本表最多只能建立一个聚簇索引，且建立与维护聚簇的开销相当大。对已有关系建立聚簇，将导致关系中元组的物理存储位置移动，并使此关系上原有的索引无效，必须重建。</p>\n<p>数据库的重组织是指物理层面的，重构造是指逻辑层面的，根据新环境调整数据库的模式和内模式。</p>\n<p>‎在 E-R 图向关系模型转换的过程中，无论是一个 1:1 的联系，一个 1：n 的联系，还是一个 m：n 的联系，都可以转换为一个独立的关系模式。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/ba464d37c4370ec918c7e38bd5bb6cd8.jpg\" alt=\"数据库设计.jpg\"></p>\n<h1 id=\"数据库编程\"><a class=\"markdownIt-Anchor\" href=\"#数据库编程\">#</a> 数据库编程</h1>\n<h2 id=\"技术方案\"><a class=\"markdownIt-Anchor\" href=\"#技术方案\">#</a> 技术方案</h2>\n<ol>\n<li>利用高级语言的表达能力：嵌入式 SQL。</li>\n<li>拓展 SQL 语言对应过程控制的表达能力：过程化 SQL。</li>\n<li>在一个更大的视野上，将数据库看作是一类数据源：ODBC 编程。</li>\n</ol>\n<h2 id=\"嵌入式sql\"><a class=\"markdownIt-Anchor\" href=\"#嵌入式sql\">#</a> 嵌入式 SQL</h2>\n<p>当指示变量 &lt; 0 时，将对应的属性值置为空值，可以用作新增学生但成绩尚未获取时，将成绩属性通过指示变量置为空值。</p>\n<p><strong>游标是数据库系统为用户开设的一个数据缓冲区，存放 SQL 语句的执行结果。每个游标区都有一个名字，可以理解为该数据区的指针。</strong></p>\n<p>使用游标的原因是 SQL 语言与主语言具有不同的数据处理方式。SQL 语言是面向集合的，一条 SQL 语句原则上可以产生或处理多条记录；而主语言是面向记录的，一组主语言只能存放一条记录。</p>\n<h2 id=\"过程化sql\"><a class=\"markdownIt-Anchor\" href=\"#过程化sql\">#</a> 过程化 SQL</h2>\n<p>过程化 SQL 是对 SQL 的扩展，基本结构是块，块可以嵌套 (调用)，每个块可以完成一个逻辑操作；增加了变量、常量等的定义语句；增加了变量赋值语句和流程控制语句。</p>\n<p>存储过程是由过程化 SQL 语句书写的一段程序，经编译和优化后，命名并存储在数据库服务器中，使用时只要调用即可。</p>\n<p>函数和存储过程的异同：都是持久性存储模块，但函数必须指定返回的类型。</p>\n<h1 id=\"odbc\"><a class=\"markdownIt-Anchor\" href=\"#odbc\">#</a> ODBC</h1>\n<p><strong>句柄 (handle) 是 32 位整数值，代表一个指针，可分为：环境句柄、连接句柄、语句句柄和描述符句柄。</strong></p>\n<p>每个 ODBC 应用程序需要建立一个 ODBC 环境，分配一个环境句柄，存取数据的全局性背景，如环境状态、当前环境状态判断、当前在环境上分配的连接句柄等。一个环境句柄可以建立多个连接句柄，每个连接句柄实现与一个数据源之间的连接。</p>\n<img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/ba6672642863f1d2fb36c5034f0c05bb.png\" alt=\"ODBC的工作流程.png\" style=\"zoom:50%;\">\n<h1 id=\"关系查询处理和查询优化\"><a class=\"markdownIt-Anchor\" href=\"#关系查询处理和查询优化\">#</a> 关系查询处理和查询优化</h1>\n<p>有效性检查：检查语句中的数据库对象，如关系名、属性名是否存在和有效，会根据数据字典中有关的模式定义信息进行检查。</p>\n<p>视图转换：如果查询是对视图的操作，则要用视图消解法把对视图的操作转换成对基本表的操作。</p>\n<p><strong>查询优化的选择依据：基于规则、基于代价和基于语义。</strong></p>\n<h2 id=\"代数优化\"><a class=\"markdownIt-Anchor\" href=\"#代数优化\">#</a> 代数优化</h2>\n<p>连接、笛卡尔积交换律：设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是关系代数表达式，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> 是连接关系运算的条件，则有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo lspace=\"0em\" rspace=\"0em\">×</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">≡</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">×</mo><msub><mi>E</mi><mn>1</mn></msub><mo separator=\"true\">;</mo><msub><mi>E</mi><mn>1</mn></msub><mo lspace=\"0em\" rspace=\"0em\">⋈</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">≡</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">⋈</mo><msub><mi>E</mi><mn>1</mn></msub><mo separator=\"true\">;</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo lspace=\"0em\" rspace=\"0em\">▹</mo><mi>F</mi></msub><mo lspace=\"0em\" rspace=\"0em\">◃</mo><msub><mi>E</mi><mn>2</mn></msub><mo lspace=\"0em\" rspace=\"0em\">≡</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo lspace=\"0em\" rspace=\"0em\">▹</mo><mi>F</mi></msub><mo lspace=\"0em\" rspace=\"0em\">◃</mo><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_1{\\times}E_2{\\equiv}E_2{\\times}E_1;E_1{\\bowtie}E_2{\\equiv}E_2{\\bowtie}E_1;E_1{\\triangleright}_F{\\triangleleft}E_2{\\equiv}E_2{\\triangleright}_F{\\triangleleft}E_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">×</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">≡</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">×</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">⋈</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">≡</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">⋈</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">▹</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">◃</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mrel\">≡</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">▹</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">◃</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。也有类似的结合律。</p>\n<p>此外还有选择与投影操作、笛卡尔、并、差、自然连接都有分配率，投影与笛卡尔积、并的分配律。</p>\n<h3 id=\"代数优化步骤\"><a class=\"markdownIt-Anchor\" href=\"#代数优化步骤\">#</a> 代数优化步骤</h3>\n<ol>\n<li>从查询<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> 出发，按照事先约定的规则对 Q 进行变换，获得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Q</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">Q_1，Q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 必须与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> 等价。</li>\n<li>确保<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">Q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的执行代价比<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> 的执行代价低。</li>\n<li>直到找不到执行代价更小的等价表达式，结束。存在的问题是找到的不一定是全局最优解，而是局部最优解。</li>\n</ol>\n<h3 id=\"典型的启发式规则\"><a class=\"markdownIt-Anchor\" href=\"#典型的启发式规则\">#</a> 典型的启发式规则</h3>\n<ul>\n<li><strong>选择运算应尽可能先做，这是优化策略中最重要、最基本的一条。</strong></li>\n<li>把投影运算和选择运算同时进行。</li>\n<li>把投影同其前或其后的双目运算结合起来，没有 必要为了去掉某些字段而扫描一遍关系。</li>\n<li>把某些选择同在它前面要执行的笛卡尔积结合起 来成为一个连接运算，连接特别是等值连接运算要比 同样关系上的笛卡尔积省很多时间。</li>\n<li>找出公共子表达式，进行计算后存储结果。</li>\n</ul>\n<h2 id=\"数据库恢复技术\"><a class=\"markdownIt-Anchor\" href=\"#数据库恢复技术\">#</a> 数据库恢复技术</h2>\n<p><strong>事务的 ACID 特性：原子性 (Atomicity)、一致性 (Comsistency)、隔离性 (Isolation)、持续性 (Durability)。</strong></p>\n<p>故障的种类：事务内部的故障、系统故障、介质故障、计算机病毒。</p>\n<p>系统故障的恢复需要做两件事情：撤销所有未完成的事务和重做所有己提交的事务。</p>\n<p>转储方法：静态转储和动态转储、海量转储和增量转储。</p>\n<p>事务分为以记录为单位和以块为单位。</p>\n<p>以记录为单位的日志文件内容 ：各个事务的开始标记 (BEGIN TRANSACTION) 、各个事务的结束标记 (COMMIT 或 ROLLBACK) 、各个事务的所有更新操作。</p>\n<p>以块为单位的日志文件内容：事务标识和被更新的数据块。</p>\n<p>为保证数据库是可恢复的，登记日志文件时必须遵循两条原则 ：登记的次序严格按并发事务执行的时间次序 ；必须先写日志文件，后写数据库。</p>\n<p><strong>事务故障的恢复：UNDO；系统故障的恢复：UNDO+REDO；介质故障的恢复；重装后援副本 + REDO。</strong></p>\n<p><strong>检查点的出现是为了解决两个问题：搜索整个日志将耗费大量时间；UNDO 操作重新执行，浪费了大量时间。</strong></p>\n<p>具有检查点 (checkpoint) 的恢复技术：在日志文件中增加检查点记录 (checkpoint)；增加重新开始文件；恢复子系统在登录日志文件期间动态地维护日志。</p>\n<p>检查点记录的内容：建立检查点时刻所有正在执行的事务清单和这些事务最近一个日志记录的地址。事务会形成一条链表，因此记录地址可以更快对事务进程处理。</p>\n<p>重新开始文件记录每个检查点记录在日志文件中的地址。</p>\n<h3 id=\"检查点步骤\"><a class=\"markdownIt-Anchor\" href=\"#检查点步骤\">#</a> 检查点步骤</h3>\n<ol>\n<li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上</li>\n<li>在日志文件中写入一个检查点记录</li>\n<li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中</li>\n<li>把检查点记录在日志文件中的地址写入一个重新开始文件</li>\n</ol>\n<h1 id=\"并发控制\"><a class=\"markdownIt-Anchor\" href=\"#并发控制\">#</a> 并发控制</h1>\n<p>并发控制的主要技术：封锁 (Locking)、时间戳 (Timestamp)、乐观控制法和多版本并发控制 (VCC)。</p>\n<h2 id=\"封锁协议\"><a class=\"markdownIt-Anchor\" href=\"#封锁协议\">#</a> 封锁协议</h2>\n<p>封锁协议的区别主要在于读操作的申请封锁和释放锁的时机。</p>\n<ol>\n<li>一级封锁协议：事务 T 在<strong>修改数据</strong> R 之前必须先对其加 X 锁，直到事务结束才释放。事务结束是指正常结束 (commit) 或非正常结束 (rollback)。一级封锁协议可防止丢失修改，并保证事务 T 是可恢复的。</li>\n<li>二级封锁协议：<strong>一级封锁协议</strong>加上事务 T 在<strong>读取数据</strong> R 之前必须先对其加 S 锁，<strong>读完</strong>后即可释放 S 锁。解决读脏数据问题。</li>\n<li>三级封锁协议：<strong>一级封锁协议</strong>加上事务 T 在<strong>读取数据</strong> R 之前必须先对其加 S 锁，直到<strong>事务结束</strong>才释放。解决不可重复读问题。</li>\n</ol>\n<h2 id=\"串行化\"><a class=\"markdownIt-Anchor\" href=\"#串行化\">#</a> 串行化</h2>\n<p>执行结果等价于串行调度的调度也是正确的，称为可串行化调度。一个给定的并发调度，当且仅当它是可串行化的才认为是正确调度。</p>\n<p>冲突操作：是指<strong>不同</strong>的事务对<strong>同一</strong>数据的<strong>读写</strong>操作和<strong>写写</strong>操作。涉及同一个数据库对象，并且至少有一个是写操作。</p>\n<p>不能交换的动作：同一事务的两个操作和不同事务的冲突操作。</p>\n<p>一个调度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 在保证冲突操作的次序不变的情况下，通过交换两个事务不冲突操作的次序得到另一个调度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><msub><mi>S</mi><mi>c</mi></msub><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup></mrow><annotation encoding=\"application/x-tex\">{S_c}^{'}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1657em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0157em;\"><span style=\"top:-3.0157em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, 如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><msub><mi>S</mi><mi>c</mi></msub><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup></mrow><annotation encoding=\"application/x-tex\">{S_c}^{'}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1657em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0157em;\"><span style=\"top:-3.0157em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> 是串行的，称调度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是冲突可串行化的调度。</p>\n<p>冲突可串行化调度是可串行化调度的充分条件，不是必要条件。</p>\n<h2 id=\"两段锁协议\"><a class=\"markdownIt-Anchor\" href=\"#两段锁协议\">#</a> 两段锁协议</h2>\n<p>两段锁协议指所有事务必须分两个阶段对数据项加锁和解锁：在对任何数据进行读、写操作之前，事务首先要获得对该数据的封锁；在释放一个封锁之后，事务不再申请和获得任何其他封锁。</p>\n<p>两段锁协议的含义是指将事务分为两个阶段，第一阶段是获得封锁，也称为扩展阶段，事务可以申请获得任何数据项上的任何类型的锁，但是不能释放任何锁。第二阶段是释放封锁，也称为收缩阶段，事务可以释放任何数据项上的任何类型的锁，但是不能再申请任何锁。</p>\n<p>遵守两段锁协议，则一定是一个可串行化调度。事务遵守两段锁协议是可串行化调度的充分条件，而不是必要条件。</p>\n<p>遵守两段锁协议的事务可能会发生死锁。</p>\n<h2 id=\"封锁的粒度\"><a class=\"markdownIt-Anchor\" href=\"#封锁的粒度\">#</a> 封锁的粒度</h2>\n<p>封锁粒度与系统的并发度和并发控制的开销密切相关。</p>\n<p>对任一结点加基本锁，必须先对它的上层结点加意向锁。</p>\n<p>具有意向锁的多粒度封锁方法在申请封锁时应该按自上而下的次序进行，释放封锁时则应该按自下而上的次序进行。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/360%E6%88%AA%E5%9B%BE20221105113011248.jpg\" alt=\"数据锁的相容矩阵\"></p>\n",
            "tags": [
                "计算机基础",
                "数据库"
            ]
        },
        {
            "id": "https://xiqin-huang.github.io/2023/10/12/bian-cheng/shu-ju-ku-lian-xi/",
            "url": "https://xiqin-huang.github.io/2023/10/12/bian-cheng/shu-ju-ku-lian-xi/",
            "title": "数据库练习",
            "date_published": "2023-10-12T10:49:32.916Z",
            "content_html": "<h2 id=\"牛客\"><a class=\"markdownIt-Anchor\" href=\"#牛客\">#</a> 牛客</h2>\n<p><strong>like 表示模糊查找</strong></p>\n<p>浮点数的平均值可能小数点位数很多，按照示例保存一位小数，用 round 函数</p>\n<p>多个条件进行分组： <code>group by university,gender;</code></p>\n<p>where 在 group by 前执行，所以需要用 having，而 order by 在 group by 后，所以可以不用 having。</p>\n<p>每张表都需要有别名</p>\n<p>多个条件判断： <code>case when then</code></p>\n<p>日期函数 day () 取日，month () 取月份，datediff 求两个日期之间的差</p>\n<h3 id=\"常见例题\"><a class=\"markdownIt-Anchor\" href=\"#常见例题\">#</a> 常见例题</h3>\n<p>年龄在 20 到 23 之间： <code>SELECT device_id,gender,age from user_profile where age between 20 and 23</code></p>\n<p>用 where 过滤空值练习： <code>select device_id,gender,age,university from user_profile where age is not null;</code></p>\n<p>查看学校名称中含北京的用户： <code>select device_id,age,university from user_profile where university like '%北京%';</code></p>\n<p>统计每个学校的答过题的用户的平均答题数：首先构造出一张以 device_id 为分组的表，然后以该表为主表，进行链接，然后根据学校进行分组，使用 sum 和 count（1）即可，或者  <code>(count(question_id)/count(distinct(qpd.device_id)))</code>  直接使用 count<br>\nSELECT DISTINCT Company FROM Orders： distinct 关键字表示只取一次，去重<br>\n结果不去重只需 union all 将两张表连接在一起。</p>\n<p>选取文本中的最右的元素： <code>substring_index(profile,',',-1)</code></p>\n<p>查找倒数第二个元素需要两层： <code>SUBSTRING_INDEX(SUBSTRING_INDEX(profile,',',-2),',',1)AS age;</code></p>\n<h2 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\">#</a> day1</h2>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<p>verchar 和 char 的区别：verchar 存储时变长，最多容纳 65535 个字节；char 固定长度，最多容纳 255 个字符。</p>\n<p>在配置文件（my.cnf）中加入如下配置： <code>sql-mode=\"NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\"</code>  保存并重启即可进入非严格模式</p>\n<p>长的文本：text</p>\n<p>创建表： <code>create table L3(id int not null primary key auto_increment,name varchar(5),depart char(3))default charset=utf8;</code></p>\n<p>插入元素： <code>insert into L3(name,depart) values(\"alex\",\"sb\");</code></p>\n<h3 id=\"增删改查\"><a class=\"markdownIt-Anchor\" href=\"#增删改查\">#</a> 增删改查</h3>\n<p>新增数据： <code>insert into L2(salary) values(5.289);</code></p>\n<p>删除数据： <code>delete from L3 where name=\"alex\" and id=1;</code>  。删除 name=alex 的数据，and 链接多个条件</p>\n<p>更新数据： <code>update L2 set salary=1.99 where id=1;</code> 。 <code>update L3 set name=concat(name,\"3\") where id=2；</code>  。PS：concat 函数用于拼接字符串</p>\n<p>查找数据： <code>select id,name from L3 where id=2;</code></p>\n<p>显示一列标题为 age 的 111： <code>select id,name,111 as age from L3;</code></p>\n<h3 id=\"小数\"><a class=\"markdownIt-Anchor\" href=\"#小数\">#</a> 小数</h3>\n<p>decimal (8,2) 表示数字位有 8 位（不包含负号），小数位保留 2 位。</p>\n<p>小数位数过多会自动四舍五入，整数部分超过会报错</p>\n<p>插入元素： <code>insert into L2(salary) values(5.289);</code></p>\n<p>新建表： <code>create table L2(id int not null primary key auto_increment,salary decimal(8,2))default charset=utf8;</code></p>\n<h3 id=\"时间\"><a class=\"markdownIt-Anchor\" href=\"#时间\">#</a> 时间</h3>\n<p>timestamp 和 datetime 相比：除了表示的范围更小外，所存储的方式也不同，是根据当前时区再进行转换，而 datetime 是直接存储。</p>\n<p>此外还有 date 和 time</p>\n<p>创建表： <code>create table L5(id int not null primary key auto_increment,dt datetime,tt timestamp)default charset=utf8;</code></p>\n<p>插入表： <code>insert into L5(dt,tt) values(\"2025-11-11 11:11:14\",\"2025-11-11 11:11:14\");</code></p>\n<h3 id=\"今日总结\"><a class=\"markdownIt-Anchor\" href=\"#今日总结\">#</a> 今日总结</h3>\n<p>修改表： <code>alter table L6 add amount decimal(10,2) default 0 not null;</code></p>\n<p>删除表： <code>alter table L6 drop aaa;</code></p>\n<p>插入记录： <code>insert into L6(name,password,gender,email,crime,amount) values(\"xiqin4\",\"dsasa\",0,\"7444545@qq.com\",\"2020-7-1 11:11:14\",100);</code></p>\n<p>更新记录： <code>update L6 set gender=1 where id&gt;3;</code></p>\n<p>查看： <code>select * from L6 where amount&gt;1000;</code></p>\n<p>更新： <code>update L6 set amount=amount+1000;</code></p>\n<p>删除： <code>delete from L6 where gender=1;</code></p>\n<p>创建表：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table L6(\n    id int not null primary key auto_increment,\n    name varchar(32) not null,\n    password varchar(64) not null,\n    gender char(2) check(gender in (0,1)),\n    email varchar(64),\n    crime datetime\n)default charset=utf8;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\">#</a> day2</h2>\n<h3 id=\"左右连表\"><a class=\"markdownIt-Anchor\" href=\"#左右连表\">#</a> 左右连表</h3>\n<p>以 info 作为主表，将 depart 进行左链接，根据 depart.id 进行： <code>select * from info left outer join depart on info.depart_id = depart.id;</code></p>\n<p>指定选中的数据进行展示： <code>select info.id,info.name,info.email,depart.title from info left outer join depart on info.depart_id = depart.id;</code></p>\n<p>将 left 改成 right 就是右链接： <code>select info.id,info.name,info.email,depart.title from info right outer join depart on info.depart_id = depart.id;</code></p>\n<p>从表 right outer join 主表 on <a href=\"http://xn--tiq313l.x=%E4%BB%8E%E8%A1%A8.id\">主表.x = 从表.id</a></p>\n<p>当主表中存在从表中没有的信息，则会产生区别；</p>\n<p>简写 outer 可以省略</p>\n<p>内链接：两张表进行链接，没有分主从，根据条件进行匹配：select * from info inner join depart on info.depart_id = <a href=\"http://depart.id\">depart.id</a>;</p>\n<h3 id=\"指定列映射\"><a class=\"markdownIt-Anchor\" href=\"#指定列映射\">#</a> 指定列（映射）</h3>\n<p>帮 name 写别名 NM，并新增一列 123： <code>select id,name as NM,123 from info ;</code></p>\n<p>条件语句： <code>select id,name,case when age&lt;18 then \"少年\" when age&lt;30 then \"青年\" else \"老年\" end v6 from info;</code></p>\n<h3 id=\"用户授权管理\"><a class=\"markdownIt-Anchor\" href=\"#用户授权管理\">#</a> 用户授权管理</h3>\n<p><strong>用户</strong></p>\n<ul>\n<li>查看用户信息： <code>select user,authentication_string,host from mysql.user;</code></li>\n<li>查看用户和权限信息： <code>desc mysql.user;</code></li>\n<li>新建用户： <code>create user '用户名'@'连接者的IP地址' identified by '密码'</code>  。PS：'' 号可加可不加</li>\n<li><code>create user xiqin@127.0.0.1 identified by '159123zxc'</code>  。解析：127.0.0.%：% 意味可以匹配任何值；地址为 % 意味所有地址都可以</li>\n<li>删除用户： <code>drop user xiqin@127.0.0.1;</code></li>\n<li>修改用户： <code>rename user 'xiqin'@'127.0.0.1' to 'huangyuqin'@'localhost';</code></li>\n<li>修改密码： <code>set password for 'huangyuqin'@'localhost'=Password('123123');</code></li>\n</ul>\n<p><strong>授权</strong></p>\n<ul>\n<li>grant 权限 on 数据库。表 to ‘用户’@‘IP 地址’;</li>\n<li>给用户 huangyuqin 用有数据库 day26db 中 info 表的查找和插入权限： <code>grant select,insert on day26db.info to 'huangyuqin'@'localhost';</code></li>\n<li>给用户 huangyuqin 拥有数据库的所有权限： <code>grant all privileges on *.* to 'huangyuqin'@'localhost';</code></li>\n<li>此时还没有真正生效，输入： <code>flush privileges;</code>  。将数据读入内存，从而立即生效。</li>\n<li>选择不同的用户进行登录： <code>\"C:\\Program Files\\mysql-5.7.31-winx64\\bin\\mysql.exe\" -h 127.0.0.1 -P 3306 -u huangyuqin -p</code></li>\n<li>查看授权： <code>show grants for 'huangyuqin'@'localhost';</code></li>\n<li>取消授权： <code>revoke INSERT on day26db.info from 'huangyuqin'@'localhost';</code></li>\n<li>需要在管理员权限下使用</li>\n</ul>\n<h3 id=\"通配符\"><a class=\"markdownIt-Anchor\" href=\"#通配符\">#</a> 通配符</h3>\n<p>通配符主要用于模糊查找：</p>\n<p>% 号表示 n 个字符，可以为 0 个： <code>select * from info where name like \"%明%\";</code> _号表示一个字符： <code>select * from info where name like \"_明%\";</code></p>\n<p>注意：数据少时可以使用，数据量大时不要使用，因为效率很低。</p>\n<h3 id=\"上下连表和取部分\"><a class=\"markdownIt-Anchor\" href=\"#上下连表和取部分\">#</a> 上下连表和取部分</h3>\n<p><code>select id,title from depart union select id,name from info;</code></p>\n<p>列数需相同，会自动去重。union all 则不去重</p>\n<p>获取前五条数据：select * from info limit 5;</p>\n<p>从位置 2 开始，向后获取前 5 条数据： <code>select * from info limit 3 offset 2;</code></p>\n<p>可以用于分页显示</p>\n<h3 id=\"排序和分组\"><a class=\"markdownIt-Anchor\" href=\"#排序和分组\">#</a> 排序和分组</h3>\n<p>desc 倒序排列，顺序排列，通常是得到结果再进行排序</p>\n<p>优先按照 age 从小到大，age 相等则 id 从大到小： <code>select * from info order by age asc,id desc;</code></p>\n<p>将 age 相同的进行分组，遇到需要取舍的时候，选择 ID 更大的，同理还可以替换成 max (id),min (id),count (id),sum (id),avg (id)：select age,count (1) from info group by age;</p>\n<p>对已经分组的数组，取其中 2 个以上的分组： <code>select depart_id,count(id) from info group by depart_id having count(id)&gt;2;</code></p>\n<h3 id=\"表关系\"><a class=\"markdownIt-Anchor\" href=\"#表关系\">#</a> 表关系</h3>\n<p>约束 depart_id 和 depart 中的 id，用于初始化的时候： <code>constraint fk_info_depart foreign key (depart_id) reference depart(id);</code></p>\n<p>表结构已创建，额外增加外键： <code>alter table info add constraint fk_info_depart foreign key info(depart_id) references depart(id);</code></p>\n<p>删除外键： <code>alter table info drop foreign key fk_info_depart;</code></p>\n<h3 id=\"sql语句优先级\"><a class=\"markdownIt-Anchor\" href=\"#sql语句优先级\">#</a> SQL 语句优先级</h3>\n<p>优先级从高到低：join-&gt;on-&gt;where-&gt;group by-&gt;having-&gt;order by-&gt;limit</p>\n<p>例子： <code>select age,count(id) from info where id&gt;2 group by age having count(id)&gt;1 order by age desc limit 1;</code></p>\n<h2 id=\"day3\"><a class=\"markdownIt-Anchor\" href=\"#day3\">#</a> day3</h2>\n<h3 id=\"表的数据的导入和导出\"><a class=\"markdownIt-Anchor\" href=\"#表的数据的导入和导出\">#</a> 表的数据的导入和导出</h3>\n<p>先判断是否存在，再进行删除： <code>drop database if exist day27db;</code></p>\n<p>导入文件：注意斜杠： <code>source /Users/86136/Desktop/数据库/第三天/day27db.sql;</code></p>\n<p>只能导入数据表，不能插入数据，不知道是什么问题，可能是主键导致的问题，暂时先不处理</p>\n<p>查询姓李的老师个数： <code>select * from teacher where tname like '李%';</code></p>\n<p>查询男生和女生的人数： <code>select gender,count(1) from student group by gender;</code></p>\n<p>查询 “三年二班” 的所有学生： <code>select * from student left join class on student.class_id = class.cid where class.caption='三年二班';</code></p>\n<p>查询每个班级的班级名称、班级人数： <code>select class.caption,count(1) from student left join class on student.class_id=class.cid group by class.caption;</code></p>\n<p>查询平均成绩大于 60 的所有学生的学号、平均成绩、姓名： <code>select student_id,avg(num) from score group by student_id having avg(num)&gt;60;</code></p>\n<p>查询成绩小于 60 分的同学学号、姓名、成绩、课程名称：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select student.sid,student.sname,score.num,course.cname from score \nleft join student on score.student_id=student.sid \nleft join course on score.course_id=course.cid \nwhere num&lt;60;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询各科成绩的总分、最高分、最低分、平均分，显示课程 ID、课程名称、总分、最高分、最低分：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select course_id,course.cname,sum(num),max(num),min(num),avg(num) from score \nleft join course on score.course_id=course.cid \ngroup by course_id \norder by avg(num) desc;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询各科成绩的平均分和及格率，显示：课程 ID、课程名称、平均分、及格率：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select course_id,course.cname,avg(num),count(1) as total,\nsum(case when score.num &gt; 60 then 1 else 0 end) as jige from score \nleft join course on score.course_id =course.cid \ngroup by course_id;\n\nselect course_id,course.cname,avg(num),\nsum(case when score.num &gt; 60 then 1 else 0 end)/count(1)*100 as prescent from score \nleft join course on score.course_id =course.cid \ngroup by course_id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>三个表依次连在一起：查询 “三年二班” 每个学生的学号、姓名、总成绩、平均成绩：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select student_id,sname,sum(num),avg(num) from score \nleft join student on score.student_id=student.sid \nleft join class on class.cid=student.class_id \nwhere class.caption='三年二班' \ngroup by student_id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询学过 “波多” 老师课的同学的学号，姓名：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select student.sid,student.sname from score \nleft join student on score.student_id=student.sid \nleft join course on score.course_id=course.cid \nleft join teacher on course.teacher_id=teacher.tid \nwhere teacher.tname='波多';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询没学过’波多’老师课的同学的学号，姓名（应该是选择先查询选过的同学的 ID，再进行排除，而不是直接使用！=）：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select * from student \nwhere sid not in(select student.sid from score \nleft join student on score.student_id=student.sid \nleft join course on score.course_id=course.cid \nleft join teacher on course.teacher_id=teacher.tid \nwhere teacher.tname='波多');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询选修‘苍空’老师所授课程的学生中，成绩最高的学生姓名及其成绩（考虑并列）不考虑并列只需使用到 order by 和 limit：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select student.sid,student.sname from score \nleft join student on score.student_id =student.sid \nleft join course on score.course_id=course.cid \nleft join teacher on course.teacher_id=teacher.tid \nwhere teacher.tname='苍空' \nand score.num=(select max(num) from score \nleft join course on score.course_id=course.cid \nleft join teacher on course.teacher_id=teacher.tid \nwhere teacher.tname='苍空');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询选修了所有课程的学生的学号，姓名：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select student.sid,student.sname from score \nleft join student on score.student_id=student.sid \ngroup by student_id having count(1)=(select count(1) from course);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>查询选修了 “生物” 和 “物理” 课程的所有学生学号，姓名：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select student.sid,student.sname from score \nleft join course on score.course_id=course.cid \nleft join student on score.student_id=student.sid \nwhere course.cname in ('生物','物理') \ngroup by student_id having count(1)=2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询至少有一门课与学号为 1 的学生所选的课程相同的其他学生学号和姓名：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select student.sid,student.sname from score \nleft join course on score.course_id=course.cid \nleft join student on score.student_id=student.sid \nwhere score.course_id in (select course_id from score where student_id=1) and score.student_id!=1 \ngroup by student_id having count(1)&gt;1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询 “生物” 比 “物理” 成绩高的所有学生的学号：PS：这里好像有点问题，存在没有该课成绩的情况，应该先选出同时有生物和物理成绩的同学</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select student_id,max(case cname when \"生物\" then num else -1 end) as sw,\nmax(case cname when \"物理\" then num else -1 end) as wl from score \nleft join course on score.course_id=course.cid \nwhere cname in (\"生物\",\"物理\") \ngroup by student_id having sw&gt;wl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将一张表中的数据插入到另一张表中：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into sc select * from score;\ninsert into sc (student_id,course_id,num) \nselect sid,2,80 from student \nwhere sid not in (select student_id from score where course_id=2);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"day4\"><a class=\"markdownIt-Anchor\" href=\"#day4\">#</a> day4</h2>\n<h3 id=\"执行计划\"><a class=\"markdownIt-Anchor\" href=\"#执行计划\">#</a> 执行计划</h3>\n<p>MySQL 中提供了执行计划，让你能够预判 SQL 的执行（只能给到一定的参考，不一定完全能预判准确）。</p>\n<p>explain 关键字</p>\n<p>主要看输出结果中的 type,all 表示进行了全表扫描，而 ref 则是通过索引进行查找</p>\n<p>性能从低到高排序：all &lt; index &lt; range &lt; index_merge &lt; ref_or_null &lt; ref &lt; eq_ref &lt; system/const</p>\n<h3 id=\"无法命中索引的情况\"><a class=\"markdownIt-Anchor\" href=\"#无法命中索引的情况\">#</a> 无法命中索引的情况</h3>\n<p>类型不一致：例如数据库中是字符串类型，却传入数字进行查找；主键比较特殊，即使类型不一致也不影响</p>\n<p>使用了不等于，特殊的主键 or，当 or 条件要未建立的列时失效，但当后面有 and 有建立索引的列时比较生效</p>\n<p>排序，当根据索引排序时候，选择的映射如果不是索引，则不走索引。特殊的主键 like 进行模糊匹配，只有在通配符在最后面才有效</p>\n<p>联合索引要满足最左前缀</p>\n<p>使用函数，例如 reverse（）, 放在后面才可以，例如</p>\n<ul>\n<li>未命中： <code>select * from big where reverse(name) = \"wupeiqi\";</code></li>\n<li>命中： <code>select * from big where name = reverse(\"wupeiqi\");</code></li>\n</ul>\n<h3 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h3>\n<p>使用索引是为了加速查找，为什么可以加速查找是因为索引是按照 B + 树的方式进行存储的</p>\n<p>引擎的不同会对索引的产生区别：myisam 是数据和索引结构分开存储；innodb 是数据和主键索引结构存储在一起</p>\n<p>建表时可以进行指定 engine=myisam</p>\n<p>查看数据表引擎类型： <code>show create table class;</code></p>\n<p>innodb 是默认索引，使用更为方便</p>\n<p>常见索引</p>\n<ol>\n<li>主键索引：加速查找、不能为空不能重复。</li>\n<li>唯一索引：加速查找，不能重复，可以为空，但只能一个为空，不然会视为重复。</li>\n<li>普通索引：加速查找。都可以进行联合索引</li>\n<li>联合索引的意思是多列连接起来作为一个键</li>\n</ol>\n<p>主键索引</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">primary key关键字\ncreate table 表名(\n    id int not null auto_increment,\n    name varchar(32) not null,\n    primary key(列1,列2)          -- 如果有多列，称为联合主键（不常用且myisam引擎支持）\n);\n新增主键索引：alter table 表名 add primary key(列名);\n删除主键索引：alter table 表名 drop primary key;\n自增列一定要是键，即索引，索引删除时可能会报错，此时改为使用alter table 表 change id id int not null;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>唯一索引：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">unique关键字\ncreate table 表名(\n    id int not null auto_increment,\n    name varchar(32) not null,\n    unique (列1,列2)               -- 如果有多列，称为联合唯一索引。\n);\n新建create unique index 索引名 on 表名(列名);\n删除drop unique index 索引名 on 表名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>普通索引：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">index\ncreate table 表名(\n    id int not null auto_increment primary key,\n    name varchar(32) not null,\n    email varchar(64) not null,\n    index ix_email (name,email)     -- 如果有多列，称为联合索引。\n);\n新增create index 索引名 on 表名(列名);\n删除drop index 索引名 on 表名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"视图\"><a class=\"markdownIt-Anchor\" href=\"#视图\">#</a> 视图</h3>\n<p>视图其实是一个虚拟表（非真实存在），其本质是【根据 SQL 语句获取动态的数据集，并为其命名】，用户使用时只需使用【名称】即可获取结果集，并可以将其当作表来使用，类似使用一个 temp 变量方便使用。</p>\n<p>创建视图： <code>create view v1 as select id,name from d1 where id&gt;1;</code>  。然后可以当作一张表进行使用</p>\n<p>修改视图： <code>alter view v1 as SQL语句</code></p>\n<p>基于视图只能查询，针对视图不能执行 增加、修改、删除。 如果源表发生变化，视图表也会发生变化。</p>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h3>\n<p>字符串拼接： <code>select concat('alex','sb');</code></p>\n<p>休眠 1 秒： <code>select sleep(1);</code></p>\n<p>自定义函数：先将‘;’转换为美元符号，放在遇到；就自动结束了</p>\n<p>执行函数： <code>select f1(11,22);</code>  。 <code>select f1(11,id),name from d1;</code></p>\n<p>删除函数： <code>drop function f1;</code></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">delimiter $$\ncreate function f1(\n    i1 int,\n    i2 int)\nreturns int\nBEGIN\n    declare num int;\n    declare maxId int;\n    select max(id) from big into maxId;\n    set num = i1 + i2 + maxId;\n    return(num);\nEND $$\ndelimiter ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"存储过程\"><a class=\"markdownIt-Anchor\" href=\"#存储过程\">#</a> 存储过程</h3>\n<p>事务，成功都成功，失败都失败。</p>\n<p>存储过程，是一个存储在 MySQL 中的 SQL 语句集合，当主动去调用存储过程时，其中内部的 SQL 语句会按照逻辑执行。</p>\n<p>rollback 进行回滚</p>\n<p>创建存储过程</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">delimiter $$\ncreate procedure p1()\nBEGIN\n    select * from d1;\nEND $$\ndelimiter ;\n执行存储过程：call p1();\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"触发器\"><a class=\"markdownIt-Anchor\" href=\"#触发器\">#</a> 触发器</h3>\n<p>对某个表进行【增 / 删 / 改】操作的前后如果希望触发某个特定的行为时，可以使用触发器。</p>\n<p>NEW 表示新数据，可以在里面直接进行使用。同理，old 表示原来的数据。</p>\n<p>创建触发器</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create trigger\n例句：\nCREATE TRIGGER tri_before_insert_tb1 BEFORE INSERT ON tb1 FOR EACH ROW\nBEGIN\n    ...\nEND<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"day5\"><a class=\"markdownIt-Anchor\" href=\"#day5\">#</a> day5</h2>\n<h3 id=\"锁\"><a class=\"markdownIt-Anchor\" href=\"#锁\">#</a> 锁</h3>\n<p>MySQL 中自带了锁的功能，可以帮助我们实现开发过程中遇到的同时处理数据的情况。</p>\n<p>MYISAM 支持表锁，不支持行锁；InnoDB 引擎支持行锁和表锁。</p>\n<p>在 innodb 引擎中，update、insert、delete 的行为内部都会先申请锁（排它锁），申请到之后才执行相关操作，最后再释放锁。</p>\n<p>select 默认不加锁，需要配合事务 + 特殊语法进行加锁</p>\n<p>对于数据库中的锁，从锁的范围来讲有：</p>\n<ul>\n<li>表级锁，即 A 操作表时，其他人对整个表都不能操作，等待 A 操作完之后，才能继续。</li>\n<li>行级锁，即 A 操作表时，其他人对指定的行数据不能操作，其他行可以操作，等待 A 操作完之后，才能继续。</li>\n<li>for update 排他锁：<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">begin; \n    select * from L1 where name=\"武沛齐\" for update;    -- name列不是索引（表锁）\ncommit;\nselect * from L1 where id=1 for update;              -- id列是索引（行锁）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>lock in share mode 共享锁，其他可读但不可写<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">begin; \n    select * from L1 where name=\"武沛齐\" lock in share mode;    -- 假设name列不是索引（表锁）\ncommit;\n使数据按字典格式cursor = conn.cursor(pymysql.cursors.DictCursor)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<p>四大特性：原子性、一致性、隔离性、持久性。</p>\n<p>开启事务：begin; 或者 start transaction;</p>\n<p>提交事务：commit;</p>\n<p>回滚：rollback;</p>\n",
            "tags": [
                "数据库",
                "MySQL"
            ]
        }
    ]
}