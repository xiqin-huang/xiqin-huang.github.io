<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Hexo • Posts by &#34;java&#34; category</title>
    <link href="http://example.com" />
    <updated>2023-10-12T10:49:32.902Z</updated>
    <category term="游记" />
    <category term="散文" />
    <category term="java" />
    <category term="书籍" />
    <category term="java基础" />
    <category term="java学习路线" />
    <category term="科幻" />
    <category term="小说" />
    <category term="历史政治" />
    <category term="人物传记" />
    <category term="阅读" />
    <category term="余华" />
    <category term="名言警句" />
    <category term="心理学" />
    <category term="历史" />
    <category term="政治" />
    <category term="明朝" />
    <category term="科技人文" />
    <category term="杂文" />
    <category term="人生感悟" />
    <category term="经济学" />
    <category term="中国" />
    <category term="科技" />
    <category term="心理" />
    <category term="人际交往" />
    <category term="Excel" />
    <category term="office" />
    <category term="日常办公" />
    <category term="鲁迅" />
    <category term="Premiere" />
    <category term="视频剪辑" />
    <category term="电影" />
    <category term="动漫" />
    <category term="短剧" />
    <category term="电视剧" />
    <category term="电子书" />
    <category term="计算机基础" />
    <category term="云开发" />
    <category term="微信小程序" />
    <category term="数据库" />
    <category term="MySQL" />
    <category term="跨考" />
    <category term="考研" />
    <category term="计算机" />
    <category term="Python" />
    <category term="编程" />
    <category term="算法" />
    <category term="月报" />
    <entry>
        <id>http://example.com/2023/10/12/java/Linux-%E9%9F%A9%E9%A1%BA%E5%B9%B3/Linux-%E9%9F%A9%E9%A1%BA%E5%B9%B3/</id>
        <title>Linux-韩顺平</title>
        <link rel="alternate" href="http://example.com/2023/10/12/java/Linux-%E9%9F%A9%E9%A1%BA%E5%B9%B3/Linux-%E9%9F%A9%E9%A1%BA%E5%B9%B3/"/>
        <content type="html">&lt;h1 id=&#34;基础篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基础篇&#34;&gt;#&lt;/a&gt; 基础篇&lt;/h1&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;F:%5Cblog%5Cmyblog%5Csource%5C_posts%5Cjava%5CLinux-%E9%9F%A9%E9%A1%BA%E5%B9%B3%5C186662223856814ec6f2295c8a23c346.png&#34;
                      alt=&#34;截图&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;Linux 分区一般分为：boot 分区、交换分区和根分区。&lt;/p&gt;
&lt;p&gt;虚拟系统安装好后，它的本质就是文件。&lt;/p&gt;
&lt;p&gt;虚拟机克隆：如果你已经安装了一台 liux 操作系统，你还想再更多的，使用虚拟机克隆即可。方式 1，直接拷贝一份安装好的虚拟机文件。然后在 VM 上点击打开对应的 vmx 文件即可。方式 2，使用 vmware 的克隆操作，右键点击管理，后选择克隆即可。注意，克隆时，需要先关闭 linux 系统。&lt;/p&gt;
&lt;p&gt;虚拟机快照：如果你在使用虚拟机系统的时候，你想回到原先的某个状态，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常运行的状态，vmware 也提供了这样的功能，就叫快照管理。&lt;/p&gt;
&lt;p&gt;vmtools 安装后可以让我们在 Windows 下更好的管理 VM 虚拟机，可以设置 Windows 和 centos 的共享文件夹。在设置中开启共享文件夹后，可以在主文件夹 -&amp;gt; 其他位置 -&amp;gt;mnt-&amp;gt;hgfs 下找到该文件夹。&lt;/p&gt;
&lt;p&gt;Windows 和 centos 就可以共享文件了，但是在实际开发中，文件的上传下载是需要使用远程方式完成的。&lt;/p&gt;
&lt;p&gt;使用 tab 键可以实现自动补全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 Linux 世界里，一切皆文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三种网络连接模式：桥接模式：虚拟系统可以和外部系统通讯，但是容易导致 IP 冲突。NAT 模式：网络地址转换模式，虚拟系统可以和外部系统通讯，不造成 IP 冲突。主机模式：独立的系统，不与外部系统通讯。&lt;/p&gt;
&lt;p&gt;使用 ifconfig 查看虚拟机的 inet 地址，然后使用 xshell 进行远程连接。&lt;/p&gt;
&lt;h2 id=&#34;目录结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目录结构&#34;&gt;#&lt;/a&gt; 目录结构&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;/bin (usr/bin、/usr/local/bin) 是 Binary 的缩写，这个目录存放着最经常使用的命令。&lt;/li&gt;
&lt;li&gt;/sbin (/usr/sbin/usr/local/sbin) s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。&lt;/li&gt;
&lt;li&gt;/home 存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名。&lt;/li&gt;
&lt;li&gt;/root 该目录为系统管理员，也称作超级权限者的用户主目录。&lt;/li&gt;
&lt;li&gt;/Iib 系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所 有的应用程序都需要用到这些共享库。&lt;/li&gt;
&lt;li&gt;/lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。&lt;/li&gt;
&lt;li&gt;/etc 所有的系统管理所需要的配置文件和子目录，比如安装 mysq 数据库 my.conf&lt;/li&gt;
&lt;li&gt;/usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录。&lt;/li&gt;
&lt;li&gt;/boot 存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。&lt;/li&gt;
&lt;li&gt;/poc 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。不能轻易修改，否则会导致系统崩溃。&lt;/li&gt;
&lt;li&gt;/srv service 缩写，该目录存放一些服务启动之后需要提取的数据。&lt;/li&gt;
&lt;li&gt;/sys 这是 Iinux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs。&lt;/li&gt;
&lt;li&gt;/tmp 这个目录是用来存放一些临时文件的。&lt;/li&gt;
&lt;li&gt;/dev 类似于 windows 的设备管理器，把所有的硬件用文件的形式存储。&lt;/li&gt;
&lt;li&gt;/media linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。&lt;/li&gt;
&lt;li&gt;/mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在 /mnt/ 上，然后进入该目录就可以查看里的内容了。例如 d:/myshare。&lt;/li&gt;
&lt;li&gt;/opt 这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空。&lt;/li&gt;
&lt;li&gt;/usr/Iocal 这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。&lt;/li&gt;
&lt;li&gt;/var 这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。&lt;/li&gt;
&lt;li&gt;/selinux [security-enhanced linux] SELinux 是一种安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;linux实操篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux实操篇&#34;&gt;#&lt;/a&gt; Linux 实操篇&lt;/h1&gt;
&lt;h2 id=&#34;vi和vim&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vi和vim&#34;&gt;#&lt;/a&gt; vi 和 vim&lt;/h2&gt;
&lt;h3 id=&#34;vi和vim的三种模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vi和vim的三种模式&#34;&gt;#&lt;/a&gt; vi 和 vim 的三种模式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;正常模式：以 vim 打开一个档案就直接进入一般模式（这是默认的，模式）。在这个模式中，你可以使用方向按键来移动光标，使用删除字符或删除整行来处理档案内容，也可以使用复制、粘贴来处理文件数据。&lt;/li&gt;
&lt;li&gt;编辑模式：按下 i、I、o、O、a、A、r、R 等任何一个字母之后才会进入编辑模式，一般是按 i。&lt;/li&gt;
&lt;li&gt;命令行模式：输入 esc 后再输入：。在该模式下，可以提供相关指令完成读取、存盘、替换、离开 vim、显示行号等动作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;F:%5Cblog%5Cmyblog%5Csource%5C_posts%5Cjava%5CLinux-%E9%9F%A9%E9%A1%BA%E5%B9%B3%5C209330823b8a08dcde2343614bf23ba0.png&#34;
                      alt=&#34;无标题-2023-02-20-1711.png&#34;
                &gt;&lt;/p&gt;
&lt;h3 id=&#34;快捷键使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快捷键使用&#34;&gt;#&lt;/a&gt; 快捷键使用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;拷贝当前行 yy, 拷贝当前行向下的 5 行 5yy, 并粘贴（输入 P)。 注意不要使用小键盘的数字，否则会进入编辑模式。&lt;/li&gt;
&lt;li&gt;删除当前行 dd, 删除当前行向下的 5 行 5dd。&lt;/li&gt;
&lt;li&gt;在文件中查找某个单词 [命令行下输入 / 关键字，回车查找，输入 n 就是查找下一个]&lt;/li&gt;
&lt;li&gt;设置文件的行号，取消文件的行号。[命令行下:set nu 和:set nonu) 。&lt;/li&gt;
&lt;li&gt;编辑 /etc/profile 文件，在一般模式下使用快捷键到该文档的最末行 [G] 和最首行 [gg]。注意是区分大小写的。&lt;/li&gt;
&lt;li&gt;在一个文件中输入 &amp;quot;hello”, 然后又撤销这个动作 u。&lt;/li&gt;
&lt;li&gt;编辑 /etc/profile 文件，在一般模式下，并将光标移动到，输入 20，再输入 20 行 shift+g。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;关机-重启和用户登录注销&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关机-重启和用户登录注销&#34;&gt;#&lt;/a&gt; 关机、重启和用户登录注销&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;shutdown -h now&lt;/td&gt;
&lt;td&gt;立刻关机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shutdown -h 1&lt;/td&gt;
&lt;td&gt;1 分钟后关机，shutdown 默认结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shutdown -r now&lt;/td&gt;
&lt;td&gt;立即重启计算机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;halt&lt;/td&gt;
&lt;td&gt;关机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reboot&lt;/td&gt;
&lt;td&gt;重启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync&lt;/td&gt;
&lt;td&gt;把内存中的数据同步到磁盘&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。目前的 shutdown/reboot/halt 等命令均已经在关机前进行了 sync。&lt;/p&gt;
&lt;p&gt;登录时尽量少用 root 帐号登录，因为它是系统管理员，拥有最大的权限，避免操作失误。可以利用 普通用户登录，登录后再用”su - 用户名’命令来切换成系统管理员身份.。&lt;/p&gt;
&lt;p&gt;在提示符下输入 logout 即可注销用户，logout 注销指令在图形运行级别无效，在运行级别 3 下有效。&lt;/p&gt;
&lt;h2 id=&#34;用户管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户管理&#34;&gt;#&lt;/a&gt; 用户管理&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;useradd milan&lt;/td&gt;
&lt;td&gt;添加用户，默认该用户的家目录在 /home/milan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;useradd -d 指定目录 新用户名&lt;/td&gt;
&lt;td&gt;给新创建的用户指定家目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;passwd 用户名&lt;/td&gt;
&lt;td&gt;修改用户的密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwd&lt;/td&gt;
&lt;td&gt;显示当前用户所在目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;userdel 用户名&lt;/td&gt;
&lt;td&gt;删除用户，但保留用户主目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;userdel -r 用户名&lt;/td&gt;
&lt;td&gt;删除用户及其主目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id 用户名&lt;/td&gt;
&lt;td&gt;查询用户信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;su - jack&lt;/td&gt;
&lt;td&gt;切换到 jack 用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;who am i&lt;/td&gt;
&lt;td&gt;查询第一次登录的用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;whoami&lt;/td&gt;
&lt;td&gt;显示当前操作的用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用 su 切换用户时，从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。当需要返回到原来用户时，使用 exit/logout: 指令。&lt;/p&gt;
&lt;p&gt;在新建用户时，如果没有为其指定组，会默认创建一个与用户名同名的组，并进行绑定。&lt;/p&gt;
&lt;h3 id=&#34;用户和组相关文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户和组相关文件&#34;&gt;#&lt;/a&gt; 用户和组相关文件&lt;/h3&gt;
&lt;p&gt;/etc/passwd 文件：用户 (user) 的配置文件，记录用户的各种信息。每行的含义：用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录 Shell。&lt;/p&gt;
&lt;p&gt;/etc/shadow 文件：口令的配置文件。每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志。&lt;/p&gt;
&lt;p&gt;/etc/group 文件：组 (group) 的配置文件，记录 Linux 包含的组的信息。每行的含义：组名：口令：组标识号：组内用户列表。&lt;/p&gt;
&lt;h2 id=&#34;实用指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实用指令&#34;&gt;#&lt;/a&gt; 实用指令&lt;/h2&gt;
&lt;h3 id=&#34;文件目录类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件目录类&#34;&gt;#&lt;/a&gt; 文件目录类&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;init [0123456]&lt;/td&gt;
&lt;td&gt;切换不同的运行级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;systemctl get-default&lt;/td&gt;
&lt;td&gt;查看当前运行级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;systemctl set-default [multi-user.target,graphical.target]&lt;/td&gt;
&lt;td&gt;前者类似运行级别 3，后者类似运行级别 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;man [命令或配置文件]&lt;/td&gt;
&lt;td&gt;功能描述，获得帮助信息，使用空格键可以往下翻&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;help&lt;/td&gt;
&lt;td&gt;获得 shell 内置命令的帮助信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwd&lt;/td&gt;
&lt;td&gt;显示当前工作目录的绝对路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ls [选项] [目录或文件]&lt;/td&gt;
&lt;td&gt;-a：显示当前目录的所有文件和目录，包括隐藏的。-l：以列表的方式显示信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cd ~&lt;/td&gt;
&lt;td&gt;回到自己的家目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cd …&lt;/td&gt;
&lt;td&gt;回到当前目录的上一级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdir 目录名&lt;/td&gt;
&lt;td&gt;创建目录，-p 创建多级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rmdir 目录名&lt;/td&gt;
&lt;td&gt;删除空目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rm 目录名&lt;/td&gt;
&lt;td&gt;移除文件或目录，-r：递归删除整个文件夹，-f：强制删除不提示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;touch 文件名称&lt;/td&gt;
&lt;td&gt;创建空文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cp 要复制的文件名或文件夹 目录名&lt;/td&gt;
&lt;td&gt;拷贝文件到指定目录，-r：递归复制整个文件夹，\cp 是强制覆盖不提示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mv oldName newName&lt;/td&gt;
&lt;td&gt;重命名文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mv /temp/movefile /targetFolder&lt;/td&gt;
&lt;td&gt;移动文件与目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cat 文件名&lt;/td&gt;
&lt;td&gt;查看文件内容，-n：显示行号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo 输出内容&lt;/td&gt;
&lt;td&gt;输出内容到控制台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;head -n 5 文件名&lt;/td&gt;
&lt;td&gt;查看文件开头 5 行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tail 文件名&lt;/td&gt;
&lt;td&gt;输出文件尾部的内容默认显示前 10 行；-n：指定行数；-f：实时追踪该文档的所有更新。使用 - f 时可以使用 ctrl+C 退出浏览。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ln -s 原文件或目录 软链接名&lt;/td&gt;
&lt;td&gt;给原文件创建一个软链接，相当于快捷方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;history&lt;/td&gt;
&lt;td&gt;查看历史命令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;基本介绍运行级别说明：0: 关机；1: 单用户，可以用来找回丢失密码； 2: 多用户状态没有网络服务；3: 多用户状态有网络服务；4：系统未使用保留给用户；5：图形界面 6: 系统重启。常用运行级别是 3 和 5，也可以指定默认运行级别。&lt;/p&gt;
&lt;p&gt;在 Linux 中，隐藏文件是以 &amp;quot;.&amp;quot; 开头。&lt;/p&gt;
&lt;p&gt;cat 只能浏览文件，而不能修改文件，为了浏览方便，通常加上管道命令 | more。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;输出重定向和&amp;gt;&amp;gt;追加指令&lt;/code&gt; ，重定向是改变默认的输出位置。&lt;/p&gt;
&lt;h4 id=&#34;more指令交互&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#more指令交互&#34;&gt;#&lt;/a&gt; more 指令交互&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;空白键 (space)&lt;/td&gt;
&lt;td&gt;向下翻一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;向下翻一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;立即离开 more，不再显示该文件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+F&lt;/td&gt;
&lt;td&gt;向下翻动一屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+B&lt;/td&gt;
&lt;td&gt;返回上一屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;输出当前行的行号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:f&lt;/td&gt;
&lt;td&gt;输出文件名和当前行的行号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;less指令交互&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#less指令交互&#34;&gt;#&lt;/a&gt; less 指令交互&lt;/h4&gt;
&lt;p&gt;less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。Iess 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;空白键&lt;/td&gt;
&lt;td&gt;向下翻动一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pagedown&lt;/td&gt;
&lt;td&gt;向下翻动一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pageup&lt;/td&gt;
&lt;td&gt;向上翻动一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ 字符串&lt;/td&gt;
&lt;td&gt;搜寻子串；n：向下查找；N：向上查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;? 字符串&lt;/td&gt;
&lt;td&gt;搜寻子串；n：向上查找；N：向下查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;离开 less 程序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;时间日期类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#时间日期类&#34;&gt;#&lt;/a&gt; 时间日期类&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;date&lt;/td&gt;
&lt;td&gt;显示当前日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;date -s 字符串时间&lt;/td&gt;
&lt;td&gt;设置系统时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cal&lt;/td&gt;
&lt;td&gt;查看日历&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;搜索查找类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#搜索查找类&#34;&gt;#&lt;/a&gt; 搜索查找类&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;find 搜索范围 选项&lt;/td&gt;
&lt;td&gt;从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。有 name、user 和 size 三种查找选项。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;locate 搜索文件&lt;/td&gt;
&lt;td&gt;快速定位文件路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;td&gt;可以查看指令的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grep 选项 查找内容 源文件&lt;/td&gt;
&lt;td&gt;过滤查找。-n：显示匹配行及行号；-i：忽略字母大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locatel 数据库。由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管道符号 “|”，表示将前一个指令的处理结果输出传递给后面的指令处理。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;压缩和解压缩类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#压缩和解压缩类&#34;&gt;#&lt;/a&gt; 压缩和解压缩类&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gzip 文件名&lt;/td&gt;
&lt;td&gt;压缩文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gunzip 文件名.gz&lt;/td&gt;
&lt;td&gt;解压文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zip&lt;/td&gt;
&lt;td&gt;压缩文件或文件夹。-r：递归压缩，即压缩目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;td&gt;解压文件或文件夹。-d：指定解压后文件的存放目录 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tar 选项 文件名.tar.gz 打包的内容&lt;/td&gt;
&lt;td&gt;将文件夹打包。-c：产生.tar 打包文件；-v：显示详细信息；-f：指定压缩后的文件名；-z：打包同时压缩；-x：解包 tar 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;组管理和权限管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组管理和权限管理&#34;&gt;#&lt;/a&gt; 组管理和权限管理&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ls -ahl&lt;/td&gt;
&lt;td&gt;查看文件的所有者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chown 用户名 文件名&lt;/td&gt;
&lt;td&gt;修改文件所有者，-R：如果是目录，则使其下所有子文件或目录递归生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chgrp 组名 文件名&lt;/td&gt;
&lt;td&gt;修改文件所在的组，-R：如果是目录，则使其下所有子文件或目录递归生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;groupadd 组名&lt;/td&gt;
&lt;td&gt;新增组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;groupdel 组名&lt;/td&gt;
&lt;td&gt;删除组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;useradd -g 用户组 用户名&lt;/td&gt;
&lt;td&gt;增加用户的时候直接加上组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;usermod -g 用户组 用户名&lt;/td&gt;
&lt;td&gt;修改用户的组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chmod u=rwx,g=rx,o=x 文件或目录名&lt;/td&gt;
&lt;td&gt;给文件或目录的所有者读写执行的权限，给所在组读执行权限，给其他组执行权限。+ 增强权限，- 减少权限，= 赋予权限。u 所有者，g 所在组，o 其他组，a 全部用户。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chmod 751 文件或目录名&lt;/td&gt;
&lt;td&gt;通过数字变更权限，r=4,w=2,x=1，相加得到数字，u=7=4+2+1=rwx,g=5=4+1=rx,o=1=x。因此相当于 chmod u=rwx,g=rx,o=x 文件或目录名。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 linux 中的每个用户必须属于一个组，不能独立于组外。在 Linux 中每个文件有所有者、所在组、其它组的概念。&lt;/p&gt;
&lt;p&gt;除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组。&lt;/p&gt;
&lt;h4 id=&#34;权限基本介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权限基本介绍&#34;&gt;#&lt;/a&gt; 权限基本介绍&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;第 0 位确定文件类型 (d,-,I,c,b)：I 是链接，相当于 windows 的快捷方式；- 是普通文件；d 是目录，相当于 windows 的文件夹；c 是字符设备：文件，鼠标，键盘；b 是块设备，比如硬盘。&lt;/li&gt;
&lt;li&gt;第 1-3 位确定所有者（该文件的所有者）拥有该文件的权限。&lt;/li&gt;
&lt;li&gt;第 4-6 位确定所属组（同用户组的）拥有该文件的权限。&lt;/li&gt;
&lt;li&gt;第 7-9 位确定其他用户拥有该文件的权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;rwx 作用到文件：[r] 代表可读 (read): 可以读取，查看。[w] 代表可写 (write)：可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件。[x] 代表可执行 (execute): 可以被执行.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rwx 作用到目录：[r] 代表可读 (read): 可以读取，Is 查看目录内容。[w] 代表可写 (write)：可以修改，对目录内创建 + 删除 + 重命名目录。[x] 代表可执行 (execute): 可以进入该目录。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;权限更新会有延时性，系统记录的是你刚开始登录的所在组，需要更新或者重新登录来更新自己的组。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;任务调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#任务调度&#34;&gt;#&lt;/a&gt; 任务调度&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;crontab&lt;/td&gt;
&lt;td&gt;-e：编辑定时任务；-l：查询任务；-r：删除所有任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*/1 * * * * ls -l /etc/ &amp;gt; /tmp/to.txt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;每小时的每分钟执行一次后面的指令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;at 选项 时间&lt;/td&gt;
&lt;td&gt;一次性定时任务，输入 ctrl+d 结束 at 命令的输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;atrm 编号&lt;/td&gt;
&lt;td&gt;删除编号的 at 任务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;任务调度是指系统在某个时间执行的特定的指令或程序。&lt;/p&gt;
&lt;p&gt;at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行。默认情况下，atd 守护进程每 60 秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。 at 命令是一次性定时计划任务，执完一个任务后不再执行此任务了。在使用 at 命令的时候，一定要保证 atd 程的启动，可以使用相关指令 &lt;code&gt;ps -ef | grep atd&lt;/code&gt;  来查看。&lt;/p&gt;
&lt;h3 id=&#34;crontab&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#crontab&#34;&gt;#&lt;/a&gt; crontab&lt;/h3&gt;
&lt;h4 id=&#34;5个占位符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5个占位符&#34;&gt;#&lt;/a&gt; 5 个占位符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一个 *&lt;/td&gt;
&lt;td&gt;一小时当中的第几分钟&lt;/td&gt;
&lt;td&gt;0-59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第二个 *&lt;/td&gt;
&lt;td&gt;一天中的第几小时&lt;/td&gt;
&lt;td&gt;0-23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第三个 *&lt;/td&gt;
&lt;td&gt;一个月当中的第几天&lt;/td&gt;
&lt;td&gt;1-31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第四个 *&lt;/td&gt;
&lt;td&gt;一年当中的第几月&lt;/td&gt;
&lt;td&gt;1-12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第五个 *&lt;/td&gt;
&lt;td&gt;一周当中的星期几&lt;/td&gt;
&lt;td&gt;0-7（0 和 7 都代表星期日）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;特殊符号&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#特殊符号&#34;&gt;#&lt;/a&gt; 特殊符号&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特殊符号&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;代表任何时间。比如第一个 “*” 就代表一小时中每分钟都执行一次的意思。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;td&gt;代表不连续的时间。比如 “ &lt;code&gt;0 8,12,16 * * *&lt;/code&gt;  命令”，就代表在每天的 8 点 0 分，12 点 0 分，16 点 0 分都执行一次命令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;代表连续的时间范围。比如 “ &lt;code&gt;0 5 * * 1-6&lt;/code&gt;  命令”，代表在周一到周六的凌晨 5 点 0 分执行命令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*/n&lt;/td&gt;
&lt;td&gt;代表每隔多久执行一次。比如 “ &lt;code&gt;*/10 * * * *&lt;/code&gt;  命令”，代表每隔 10 分钟就执行一遍命令。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;at命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#at命令&#34;&gt;#&lt;/a&gt; at 命令&lt;/h3&gt;
&lt;h4 id=&#34;at命令选项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#at命令选项&#34;&gt;#&lt;/a&gt; at 命令选项&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-m&lt;/td&gt;
&lt;td&gt;当指定的任务被完成后，将给用户发送邮件，即使没有标准输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-I&lt;/td&gt;
&lt;td&gt;atq 的别名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;atrm 的别名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;显示任务将被执行的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;打印任务的内容到标准输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-V&lt;/td&gt;
&lt;td&gt;显示版本信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-q &amp;lt;队列&amp;gt;&lt;/td&gt;
&lt;td&gt;使用指定的队列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-f &amp;lt;文件&amp;gt;&lt;/td&gt;
&lt;td&gt;从指定文件读入任务而不是从标准输入读入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-t &amp;lt;时间参数&amp;gt;&lt;/td&gt;
&lt;td&gt;以时间参数的形式提交要运行的任务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;at时间定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#at时间定义&#34;&gt;#&lt;/a&gt; at 时间定义&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;接受在当天的 hh:mm (小时：分钟) 式的时间指定。假如该时间已过去，那么就放在第二天执行。例如： 04:00。&lt;/li&gt;
&lt;li&gt;使用 midnight (深夜)，noon (中午)，teatime (饮茶时间，一般是下午 4 点) 等比较模糊的词语来指定时间。&lt;/li&gt;
&lt;li&gt;采用 12 小时计时制，即在时间后面加上 AM (上午) 或 PM (下午) 来说明是上午还是下午。例如：12pm。&lt;/li&gt;
&lt;li&gt;指定命令执行的具体日期，指定格式为 month day (月 日) 或 mm/dd/yy (月 / 日 / 年) 或 dd.mm.yy（日。月. 年)，指定的日期必须跟在指定时间的后面。例如：04:00 2021-03-1。&lt;/li&gt;
&lt;li&gt;使用相对计时法。指定格式为：now+count time-units,now 就是当前时间，time-units 是时间单位，这里能够是 minutes (分钟)、hours (小时)、days (天)、weeks (星期)。count 是时间的数量，几天，几小时。例如：now+5 minutes。&lt;/li&gt;
&lt;li&gt;直接使用 today (今天)、tomorrow (明天) 来指定完成命令的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;磁盘分区与挂载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#磁盘分区与挂载&#34;&gt;#&lt;/a&gt; 磁盘分区与挂载&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lsblk&lt;/td&gt;
&lt;td&gt;查看磁盘分区情况，-f 可以查看更详细的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fdisk /dev/sdb&lt;/td&gt;
&lt;td&gt;对 sdb 硬盘进行分区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkfs -t 分区类型 /dev/sdb1&lt;/td&gt;
&lt;td&gt;格式化 sdb1 磁盘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mount 磁盘名 文件夹名&lt;/td&gt;
&lt;td&gt;将磁盘挂载到文件夹上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;umount 磁盘名或文件夹名&lt;/td&gt;
&lt;td&gt;取消挂载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;df -h&lt;/td&gt;
&lt;td&gt;查询系统整体磁盘使用情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;du -h 目录名&lt;/td&gt;
&lt;td&gt;查询指定目录的磁盘占用情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tree 目录名&lt;/td&gt;
&lt;td&gt;以树状显示目录结构，可能需要使用 yum install tree 安装该指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;增加硬盘的步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增加硬盘的步骤&#34;&gt;#&lt;/a&gt; 增加硬盘的步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;虚拟机添加硬盘：在【虚拟机】菜单中，选择【设置】，然后设备列表里添加硬盘，然后一路【下一步】，中间只有选择磁盘大小的地方需要修改，直到完成。然后重启系统（才能识别）！&lt;/li&gt;
&lt;li&gt;分区：开始分区后输入 n，新增分区，然后选择 p，分区类型为主分区。两次回车默认剩余全部空间。最后输入 w 写入分区并退出，若不保存退出输入 q。&lt;/li&gt;
&lt;li&gt;格式化。&lt;/li&gt;
&lt;li&gt;挂载：用命令行挂载是临时的，重启后会失效。永久挂载通过修改 /etc/fstab 文件实现挂载，添加完成后执行 mount -a 立即生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;网络配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络配置&#34;&gt;#&lt;/a&gt; 网络配置&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ifconfig&lt;/td&gt;
&lt;td&gt;查看 Linux 的网络配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ipconfig&lt;/td&gt;
&lt;td&gt;查看 Windows 的网络配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ping 目的主机&lt;/td&gt;
&lt;td&gt;测试当前服务器是否可以连接目的主机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service network restart&lt;/td&gt;
&lt;td&gt;重启网络服务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;指定 IP 地址：直接修改配置文件来指定 IP, 并可以连接到外网。编辑 vim /etc/sysconfig/network-scripts/ifcfg-ens33。修改后重启网络服务或重启系统生效。&lt;/p&gt;
&lt;p&gt;通过 vim /etc/hostname 修改主机名，修改后重启生效。&lt;/p&gt;
&lt;p&gt;主机名与 hosts 映射。Windows 端：在 C:\Windows\System32\drivers\etc\hosts 文件指定。Linux 端：在 /etc/hosts 文件指定。&lt;/p&gt;
&lt;h2 id=&#34;进程管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程管理&#34;&gt;#&lt;/a&gt; 进程管理&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ps&lt;/td&gt;
&lt;td&gt;查看目前系统中，有哪些正在执行，以及执行情况。-a：显示当前终端的所有进程信息；-u：以用户的格式显示进程信息；-x：显示后台程序运行的参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kill 选项 进程号&lt;/td&gt;
&lt;td&gt;通过进程号终止进程。-9 表示强制进程立即停止。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;killall 进程名称&lt;/td&gt;
&lt;td&gt;通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pstree 选项&lt;/td&gt;
&lt;td&gt;查看进程树。-p：显示进程的 PID；-u：显示进程的所属用户。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service 服务名 选项&lt;/td&gt;
&lt;td&gt;管理服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup&lt;/td&gt;
&lt;td&gt;查看所有系统服务，带 * 的会自启动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig&lt;/td&gt;
&lt;td&gt;给服务的各个运行级别设置自启动或关闭，需要重启后生效。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;systemctl 选项 服务名&lt;/td&gt;
&lt;td&gt;管理服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;firewall-cmd --permanent --add-port = 端口号 / 协议&lt;/td&gt;
&lt;td&gt;打开端口，改为–remove=port 则是关闭端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;firewall-cmd --reload&lt;/td&gt;
&lt;td&gt;重新载入后才能生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;firewall-cmd --permanent --query-port = 端口号 / 协议&lt;/td&gt;
&lt;td&gt;查询端口是否开放&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;top 选项&lt;/td&gt;
&lt;td&gt;用于动态更新正在执行的进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netstat 选项&lt;/td&gt;
&lt;td&gt;查看系统网络情况。-an：按一定顺序排列输出；-p：显示哪个进程在调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ping 对方 ip&lt;/td&gt;
&lt;td&gt;网络检测工具&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ps 指令依次显示进程执行用户、进程号、占用 CPU 的百分比、占用虚拟内存的百分比、占用物理内存的百分比、终端信息、当前运行状态、开始时间、占用的 CPU 时间和执行该进程的指令。&lt;/p&gt;
&lt;p&gt;PPID 是父进程 ID。&lt;/p&gt;
&lt;p&gt;服务 (service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如 (mysqld,sshd 防火墙等)，因此我们又称为守护进程，是 Linux 中非常重要的知识点。&lt;/p&gt;
&lt;p&gt;systemctl 指令关闭或者启用防火墙后，立即生效。但这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。如果希望设置某个服务自启动或关闭永久生效，要使用 systemctl 的 enable 和 disable 选项。&lt;/p&gt;
&lt;p&gt;service 管理的指令可以在 /etc/init.d 查看。&lt;/p&gt;
&lt;p&gt;systemctl 指令管理的服务在 /usr/Iib/systemd/system 查看。&lt;/p&gt;
&lt;p&gt;使用 dism /Online/Enable-Feature /FeatureName:TelnetClient 指令在 Windows 安装 Telnet 指令。&lt;/p&gt;
&lt;h2 id=&#34;rpm和yum&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rpm和yum&#34;&gt;#&lt;/a&gt; RPM 和 YUM&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rpm -qa&lt;/td&gt;
&lt;td&gt;查询已安装的 RPM 列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rpm -q firefox&lt;/td&gt;
&lt;td&gt;查询软件是否安装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yum list&lt;/td&gt;
&lt;td&gt;查询可以安装的软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yum install 包名&lt;/td&gt;
&lt;td&gt;按照指定的 yum 包&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;rpm 用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有.RPM 扩展名的文件。RPM 是 RedHat Package Manager (RedHats 软件包管理工具) 的缩写，类似 windows 的 setup.exe，这一文件格式名称虽然打上了 RedHat 的标志，但理念是通用的。&lt;/p&gt;
&lt;p&gt;可以在光盘的 package 文件夹中找需要按照的 rpm 包。&lt;/p&gt;
&lt;p&gt;yum 是一个 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。&lt;/p&gt;
&lt;h1 id=&#34;提高篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#提高篇&#34;&gt;#&lt;/a&gt; 提高篇&lt;/h1&gt;
&lt;h2 id=&#34;java&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; java&lt;/h2&gt;
&lt;p&gt;安装 jdk 要注意写入环境变量，并在写入后更新文件。&lt;/p&gt;
&lt;p&gt;安装 Tomcat 要注意打开防火墙的端口。&lt;/p&gt;
&lt;p&gt;安装 idea 要注意在图像界面启动.sh 文件，因为安装时需要图形界面。&lt;/p&gt;
&lt;p&gt;安装 MySQL 时，centos7.6 自带的类 mysql 数据库是 mariadb，会跟 mysql 冲突，要先删除。&lt;/p&gt;
&lt;h2 id=&#34;shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#shell&#34;&gt;#&lt;/a&gt; shell&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;显示当前 shell 中的所有变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量 = 值&lt;/td&gt;
&lt;td&gt;定义变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unset 变量&lt;/td&gt;
&lt;td&gt;撤销变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readonly 变量&lt;/td&gt;
&lt;td&gt;声明静态变量，不能 unset&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;export 变量名 = 变量值&lt;/td&gt;
&lt;td&gt;将 shell 变量输出为环境变量 / 全局变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;source 配置文件&lt;/td&gt;
&lt;td&gt;刷新配置文件使其生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo $ 变量名&lt;/td&gt;
&lt;td&gt;输出变量的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:&amp;lt;&amp;lt;! 内容！&lt;/td&gt;
&lt;td&gt;多行注释，注释符号需要分行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$$&lt;/td&gt;
&lt;td&gt;当前进程的进程号 (PID)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$!&lt;/td&gt;
&lt;td&gt;后台运行的最后一个进程的进程号 (PID)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$?&lt;/td&gt;
&lt;td&gt;最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0 则证明上一个命令执行不正确。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$((运算符))&lt;/code&gt;  或 &lt;code&gt;$[运算式]&lt;/code&gt;  或 expr 运算式&lt;/td&gt;
&lt;td&gt;算术运算，expr 运算符间要有空格且乘法需要 / 转义符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[ condition ]&lt;/td&gt;
&lt;td&gt;条件判断，condition 前后有空格，非空返回 true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;read 选项 参数&lt;/td&gt;
&lt;td&gt;读取用户的输入。-p 设置提示信息；-t 设置等待时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;basename pathname suffix&lt;/td&gt;
&lt;td&gt;返回完整路径最后的 / 的部分，常用于获取文件名，suffix 选择是否去掉该后缀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dirname&lt;/td&gt;
&lt;td&gt;返回完整路径最后的 / 的前面的部分，常用于获取路径部分。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序。用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。&lt;/p&gt;
&lt;p&gt;脚本需要以 #!/bin/bash 开头，还需要有可执行权限。&lt;/p&gt;
&lt;p&gt;Linux Shellr 中的变量分为，系统变量和用户自定义变量。系统变量： &lt;code&gt;$HOME、$PWD、$SHELL、$USER&lt;/code&gt;  等等。&lt;/p&gt;
&lt;h3 id=&#34;定义变量的规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义变量的规则&#34;&gt;#&lt;/a&gt; 定义变量的规则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;变量名称可以由字母、数字和下划线组成，但是不能以数字开头。5A=200 这样是错误的。&lt;/li&gt;
&lt;li&gt;等号两侧不能有空格变量。&lt;/li&gt;
&lt;li&gt;名称一般习惯为大写。&lt;/li&gt;
&lt;li&gt;将命令的返回值赋给变量：A= &lt;code&gt;date&lt;/code&gt;  反引号，运行里面的命令，并把结果返回给变量 A。A=$(date) 等价于反引号。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;位置参数变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#位置参数变量&#34;&gt;#&lt;/a&gt; 位置参数变量&lt;/h3&gt;
&lt;p&gt;当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量。比如：./myshell.sh100 200，这个就是一个执行 shell 的命令行，可以在 myshell 脚本中获取到参数信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$n&lt;/td&gt;
&lt;td&gt;n 为数字， &lt;code&gt;$0&lt;/code&gt;  代表命令本身， &lt;code&gt;$1&lt;/code&gt; - &lt;code&gt;$9&lt;/code&gt;  代表第一到第九个参数，十以上的参数需要用大括号包含，如 &lt;code&gt;$&amp;#123;10&amp;#125;&lt;/code&gt; 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$*&lt;/td&gt;
&lt;td&gt;这个变量代表命令行中所有的参数，$* 把所有的参数看成一个整体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$@&lt;/td&gt;
&lt;td&gt;这个变量也代表命令行中所有的参数，不过 $@把每个参数区分对待。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$#&lt;/td&gt;
&lt;td&gt;这个变量代表命令行中所有参数的个数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;流程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制&#34;&gt;#&lt;/a&gt; 流程控制&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Sh&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; [ &lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt; -ge 60 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;及格了&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; [ &lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt; -lt 60 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;不及格&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;周一&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;周二&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;other&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;esac&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;$*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;num is &lt;span class=&#34;variable&#34;&gt;$i&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SUM=0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i=0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; [ &lt;span class=&#34;variable&#34;&gt;$i&lt;/span&gt; -le &lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SUM=$[&lt;span class=&#34;variable&#34;&gt;$SUM&lt;/span&gt;+&lt;span class=&#34;variable&#34;&gt;$i&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i=$[&lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt;+1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;自定义函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义函数&#34;&gt;#&lt;/a&gt; 自定义函数&lt;/h3&gt;
&lt;h2 id=&#34;ubuntu&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ubuntu&#34;&gt;#&lt;/a&gt; Ubuntu&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sudo apt-get update&lt;/td&gt;
&lt;td&gt;更新源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sudo apt-get install package&lt;/td&gt;
&lt;td&gt;安装包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sudo apt-get remove package&lt;/td&gt;
&lt;td&gt;删除包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sudo apt-cache show package&lt;/td&gt;
&lt;td&gt;获取包的相关信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sudo apt-get source package&lt;/td&gt;
&lt;td&gt;下载包的源代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ssh 用户名 @IP&lt;/td&gt;
&lt;td&gt;在 Linux 上远程连接其他 Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;apt 是 Advanced Packaging Tool 的简称，是一款安装包管理工具。在 Ubuntu 下，我们可以使用 apt 命令进行软件包的安装、删除、清理等，类似于 Windows 中的软件管理工具。在 /etc/apt/sources.list 文件中有服务器地址（美国 APT），由于网络问题，通常我们将其改为国内的镜像站。&lt;/p&gt;
&lt;p&gt;和 CentOS 不一样，Ubuntu 默认没有安装 SSHD 服务（使用 netstat 指令查看：apt install net-tools)，因此，我们不能进行远程登录。&lt;/p&gt;
&lt;h2 id=&#34;日志&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td&gt;系统定时任务相关的日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastlog&lt;/td&gt;
&lt;td&gt;系统中所有用户最后一次的登录时间的日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;message&lt;/td&gt;
&lt;td&gt;系统重要消息的日志。这个日志文件中会记录 Linux 系统的绝大多数重要信息。如果系统出现问题，首先要检查的应该就是这个日志文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;secure&lt;/td&gt;
&lt;td&gt;记录验证和授权方面的信息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh 的登录、su 的切换用户， sudo 的授权，甚至添加用户和修改用户密码都会记录在这个日志文件中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ulmp&lt;/td&gt;
&lt;td&gt;记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。这个文件不能用 vi 查看，而要使用 w、who、users 等命令查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;journalctl&lt;/td&gt;
&lt;td&gt;查看内存日志，重启清空&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;系统日志文件的保存位置是 /var/log/。&lt;/p&gt;
&lt;p&gt;在文件 /etc/rsyslog.conf 在可以查看日志的服务。&lt;/p&gt;
&lt;p&gt;由日志服务 rsyslog 记录的日志文件的格式包含以下 4 列：事件产生的时间；产生事件的服务器的主机名；产生事件的服务名或程序名和事件的具体信息。&lt;/p&gt;
&lt;p&gt;/etc/logrotate.conf 记录全局的日志轮替策略，当然也可以单独给某个日志文件指定策略。也可以把某个日志的轮替规则写到 /etc/logrotate.d 目录上。&lt;/p&gt;
&lt;h2 id=&#34;定制自己的linux系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定制自己的linux系统&#34;&gt;#&lt;/a&gt; 定制自己的 Linux 系统&lt;/h2&gt;
&lt;h3 id=&#34;linux启动流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux启动流程&#34;&gt;#&lt;/a&gt; Linux 启动流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Linux 要通过自检，检查硬件设备有没有故障。&lt;/li&gt;
&lt;li&gt;如果有多块启动盘的话，需要在 BIOS 中选择启动磁盘。&lt;/li&gt;
&lt;li&gt;启动 MBR 中的 bootloader 引导程序。&lt;/li&gt;
&lt;li&gt;加载内核文件。&lt;/li&gt;
&lt;li&gt;执行所有进程的父进程、老祖宗 systemd。&lt;/li&gt;
&lt;li&gt;欢迎界面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;源码阅读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#源码阅读&#34;&gt;#&lt;/a&gt; 源码阅读&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件夹&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boot&lt;/td&gt;
&lt;td&gt;存放与系统引导相关的代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fs&lt;/td&gt;
&lt;td&gt;存放 Linux 支持的文件系统代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;include&lt;/td&gt;
&lt;td&gt;存放 Linux 核心需要的头文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;init&lt;/td&gt;
&lt;td&gt;存放初始化相关的源码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kernel&lt;/td&gt;
&lt;td&gt;存放与内核相关的代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lib&lt;/td&gt;
&lt;td&gt;存放库代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mm&lt;/td&gt;
&lt;td&gt;内存管理的代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tools&lt;/td&gt;
&lt;td&gt;工具相关的代码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;内核升级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内核升级&#34;&gt;#&lt;/a&gt; 内核升级&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;uname -a&lt;/td&gt;
&lt;td&gt;查看当前的内核版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yum info kernel -q&lt;/td&gt;
&lt;td&gt;检测内核版本，显示可以升级的内核&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yum update kernel&lt;/td&gt;
&lt;td&gt;升级内核&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yum list kernel -q&lt;/td&gt;
&lt;td&gt;查看已经安装的内核&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;备份与恢复&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#备份与恢复&#34;&gt;#&lt;/a&gt; 备份与恢复&lt;/h2&gt;
&lt;p&gt;linux 的备份和恢复很简单，有两种方式： 1、把需要的文件 (或者分区) 用 TAR 打包就行，下次需要恢复的时候，再解压开覆盖即可。2、使用 dump 和 restore 命令。&lt;/p&gt;
&lt;p&gt;dump 指令在备份分区时，是可以支持增量备份的，如果备份文件或者目录，不再支持增量备份，即只能使用 0 级别备份。&lt;/p&gt;
&lt;h2 id=&#34;权限管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权限管理&#34;&gt;#&lt;/a&gt; 权限管理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;注意权限分离，比如：工作中，Liux 系统权限和数据库权限不要在同一个部门权限最小原则，即在满足使用的情况下最少优先。&lt;/li&gt;
&lt;li&gt;减少使用 root 用户，尽量用普通用户 + sudo 提权进行日常操作。&lt;/li&gt;
&lt;li&gt;重要的系统文件，比如 /etc/passwd，/etc/shadow etc/fstab，/etc/sudoers 等，日常建议使用 chattr（change attribute）锁定，需要操作时再打开。&lt;/li&gt;
&lt;li&gt;使用 SUID,SGID,Sticky 设置特殊权限。&lt;/li&gt;
&lt;li&gt;可以利用工具，比如 chkrootkit/rootkit hunter 检测 rootkit 脚本（rootkit 是入侵者使用工具，在不察觉的建立了入侵系统途径)。&lt;/li&gt;
&lt;li&gt;利用工具 Tripwire 检测文件系统完整性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;centos7启动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#centos7启动&#34;&gt;#&lt;/a&gt; CentOS7 启动&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;硬件引导启动&lt;/li&gt;
&lt;li&gt;GRUB2 启动引导&lt;/li&gt;
&lt;li&gt;内核引导&lt;/li&gt;
&lt;li&gt;systemd 初始化阶段&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="java学习路线" />
        <category term="计算机基础" />
        <updated>2023-10-12T10:49:32.902Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/12/java/%E9%9F%A9%E9%A1%BA%E5%B9%B3%20%E9%9B%B6%E5%9F%BA%E7%A1%8030%E5%A4%A9%E5%AD%A6%E4%BC%9AJava/</id>
        <title>零基础30天学会Java-韩顺平-98</title>
        <link rel="alternate" href="http://example.com/2023/10/12/java/%E9%9F%A9%E9%A1%BA%E5%B9%B3%20%E9%9B%B6%E5%9F%BA%E7%A1%8030%E5%A4%A9%E5%AD%A6%E4%BC%9AJava/"/>
        <content type="html">&lt;p&gt;&lt;a class=&#34;link&#34;   href=&#34;https://www.bilibili.com/video/BV1fh411y7R8?p=9&amp;amp;spm_id_from=pageDriver&#34; &gt;韩顺平 零基础 30 天学会 Java &lt;i class=&#34;fa-regular fa-arrow-up-right-from-square fa-sm&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;第一章-概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一章-概述&#34;&gt;#&lt;/a&gt; 第一章 概述&lt;/h1&gt;
&lt;p&gt;了解了该视频课程的大纲和 Java 的基本知识，Java1995 年推出，目前稳定维护的有 Java8 和 Java11 版本。&lt;/p&gt;
&lt;p&gt;JVM（Java 虚拟机）：JVM 包含于 JDK 中，Java 虚拟机机制屏蔽了底层运行平台的差别，实现了 “一次编译，到处运行 &amp;quot;&lt;/p&gt;
&lt;p&gt;JRE（Java 运行环境）：JRE=JVM+Java 的核心类库。&lt;/p&gt;
&lt;p&gt;JDK（Java 开发工具包）：JDK=JRE+Java 的开发工具&lt;/p&gt;
&lt;p&gt;在桌面图标里勾选此电脑就可以在桌面显示此电脑了&lt;/p&gt;
&lt;p&gt;dos 命令行快捷键：win+r&lt;/p&gt;
&lt;p&gt;在对应文件夹上地址上输入 cmd 可以直接在该目录下打开命令行&lt;/p&gt;
&lt;p&gt;在控制台，输入 tab 键，可以实现命令补全&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本机 Java8 的 JDK 安装位置：C:\Program Files\Java\jdk1.8.0_211\bin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码存放位置：E:\java 韩顺平 \ 练习代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;环境变量 path 的设置，增加 JAVA_HOME 环境变量，指向 JDK 的安装目录，编辑 path 环境变量，增加 % JAVA_HOME%\bin&lt;/p&gt;
&lt;p&gt;如果程序中含有中文的时候，使用命令行编译的时候，需要将 sublime 中的文件 -&amp;gt;Set File Encoding to-&amp;gt;GBK，再保存，才能够正确编译成 class 文件，而 GBK 是根据 cmd 设置的编码方式相关&lt;/p&gt;
&lt;p&gt;运行的时候不是输入 Hello.java，而是 Hello，因为它实际运行的是 Hello 这个主类。&lt;/p&gt;
&lt;p&gt;一个源文件中最多只能有一个 public 类，其他类的个数不限。每一个类都就会生成一个对应的 class 文件。也可以将 main 方法写在非 public 类中，然后指定运行非 public 类，这样入口方法就是非 public 的 main 方法。&lt;/p&gt;
&lt;p&gt;在学习新技术时我们要思考它有什么好处，能应用到什么方面。学习新技术时先关注知识点的基本语法和基本语句，暂时不需要考虑细节，然后完成一个基础项目，最后开始考虑研究技术的注意事项、使用细节、使用规范、如何优化。&lt;/p&gt;
&lt;p&gt;java 对单引号和双引号敏感，输出时是使用双引号的。&lt;/p&gt;
&lt;p&gt;找不到文件，可能是文件名写错了，也可能没有在当前目录下。&lt;br&gt;
最不好修改的是编译没有问题，但是业务逻辑错误，还有环境错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量有三个基本要素：类型 + 名称 + 值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序中的加号，当左右两边一方为字符串，则做拼接运算，运算顺序从左到右。&lt;/p&gt;
&lt;h2 id=&#34;java转义字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java转义字符&#34;&gt;#&lt;/a&gt; java 转义字符&lt;/h2&gt;
&lt;p&gt;换行与回车的区别，回车后会直接到当前行的首位，而不是换下一行，而且会用当前字符覆盖掉之前的字符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;一个制表位，实现对齐功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;&lt;/td&gt;
&lt;td&gt;一个 &amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#39;&lt;/td&gt;
&lt;td&gt;一个’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;一个回车&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注释&#34;&gt;#&lt;/a&gt; 注释&lt;/h2&gt;
&lt;p&gt;多行注释内不允许内嵌多行注释，因为第一开始与第二个的结束符号匹配，导致第一的结束符号报错&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//单行注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*多行注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;  多行注释*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//文档注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;java文件中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; 西芹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* &lt;span class=&#34;doctag&#34;&gt;@version&lt;/span&gt; 1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmd中：表示将结果存放在存放D盘的temp文件下，关键字根据上面的注释写，最后写文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;E:\java韩顺平\练习代码&amp;gt;javadoc -d d:\\temp -author -version Comment02.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;代码规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码规范&#34;&gt;#&lt;/a&gt; 代码规范&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类、方法的注释，要以 javadoc 的方式来写。&lt;/li&gt;
&lt;li&gt;非 Javadoc 的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题。&lt;/li&gt;
&lt;li&gt;源代码使用 utf-8 编码。&lt;/li&gt;
&lt;li&gt;行宽度不要超过 80 字符。&lt;/li&gt;
&lt;li&gt;代码编写有次行风格和行尾风格，推荐行尾风格。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dos命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dos命令&#34;&gt;#&lt;/a&gt; dos 命令&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dir&lt;/td&gt;
&lt;td&gt;查看当前目录有什么&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cd&lt;/td&gt;
&lt;td&gt;切换到其他文件夹，切换到其他盘，需要加上 / D。例如 E:\java 韩顺平 \ 练习代码 &amp;gt; cd /D c:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;md&lt;/td&gt;
&lt;td&gt;新建文件夹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rd&lt;/td&gt;
&lt;td&gt;删除文件夹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;到上级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;help&lt;/td&gt;
&lt;td&gt;查看命令的详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cd&lt;/td&gt;
&lt;td&gt;直接切换到根目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tree&lt;/td&gt;
&lt;td&gt;查看指定目录下的所有子级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cls&lt;/td&gt;
&lt;td&gt;清屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exit&lt;/td&gt;
&lt;td&gt;退出 DOS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第二章-变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二章-变量&#34;&gt;#&lt;/a&gt; 第二章 变量&lt;/h1&gt;
&lt;p&gt;java 的整型常量（具体值）&lt;strong&gt;默认为 int 型&lt;/strong&gt;，声明 long 型常量需后加‘l’或’L‘。例如   &lt;code&gt;long num = 50L&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;浮点数构成：浮点数 = 符号位 + 指数位 + 尾数位。&lt;/p&gt;
&lt;p&gt;java 的浮点型常量（具体值）&lt;strong&gt;默认为 double 型&lt;/strong&gt;，声明为 float 型常量需后加’f’或’F’。例如 &lt;code&gt;float num = 1.1F&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;浮点型常量有两种表现形式：1、十进制数形式  &lt;code&gt;double num = 5.12&lt;/code&gt; ;2、科学计数法形式  &lt;code&gt;double num = 2.12e2&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;** 当我们对运算结果是小数的进行相等判断时，要小心，因为可能会有精度误差，应该是以两个数的差值的绝对值在某个精度范围类判断。** 如果是直接查询得到的小数或者赋值是可以正常判断的。&lt;/p&gt;
&lt;p&gt;API（应用程序编程接口）是 java 提供的基本编程接口（java 提供的类还有相关的方法）。&lt;a class=&#34;link&#34;   href=&#34;https://www.matools.com/&#34; &gt;中文在线文档 &lt;i class=&#34;fa-regular fa-arrow-up-right-from-square fa-sm&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;字符类型可以直接存放一个数字，因为在 java 中 char 的本质是一个整数，例如  &lt;code&gt;char c4 = 97&lt;/code&gt;  ，但是会输出数字对应的 Unicode 字符。&lt;/p&gt;
&lt;p&gt;字符常量需要使用单引号括起来，例如  &lt;code&gt;char c1 = &#39;a&#39;&lt;/code&gt;  , 双引号代表字符串。java 中还运行使用转义字符’&#39; 将字符转变为特殊字符串常量，例如  &lt;code&gt;char c3 = &#39;\n&#39;&lt;/code&gt;  。char 类型是可以进行运算的，相当于一个整数，因为它都有对应的 Unicode 码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;布尔类型不可以使用 0 或非 0 的整数代替 false 和 true，这点和 C 语言不同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当 java 程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换。&lt;strong&gt;有多种类型的数据混合运算时，系统首先将所有数据转换成容量最大的数据类型，然后再进行计算。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;char-&amp;gt;int-&amp;gt;long-&amp;gt;float-&amp;gt;double;byte-&amp;gt;short-&amp;gt;int-&amp;gt;long-&amp;gt;float-&amp;gt;double。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（byte,short）和 char 不会自动转换，但是它们三者之间是可以进行运算的，在计算时首先转换为 int 类型，包括自身的运算，例如 byte 和 byte 运算结果也是 int。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;boolean 类型不参与自动转换。&lt;/p&gt;
&lt;p&gt;强制类型转换使用时用加上强制转换符 ()，例如  &lt;code&gt;int i = (int)1.9&lt;/code&gt;  。可能造成精度丢失，需要格外注意。强制转换符号只对最近的操作数有效，往往会使用小括号提升优先级，例如  &lt;code&gt;int x = (int)(10 * 3.5 + 6 * 1.9)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;基本数据类型转 String，使用加号和双引号即可，例如  &lt;code&gt;String s1 = n1 + &amp;quot;&amp;quot;&lt;/code&gt;  。String 转基本数据类型，使用基本数据类型的包装类调用方法 parseXX 方法即可，例如  &lt;code&gt;int num = Integer.parseInt(s5)&lt;/code&gt;  ，但是一定要确保能够转换成有效的数据。从 String 中取字符，指定需要获取的第几个元素，  &lt;code&gt;char c1 = s.charAt(0)&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;java数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java数据类型&#34;&gt;#&lt;/a&gt; java 数据类型&lt;/h2&gt;
&lt;p&gt;基本数据类型：1、数值型：整数类型：byte [1]、short [2]、int [4]、long [8]；浮点类型：float [4]、double [8]。2、字符型 char [2]。3、布尔型 boolean [1]。&lt;/p&gt;
&lt;p&gt;引用数据类型：类 (class)、接口 (inferface)、数组 ([])。&lt;/p&gt;
&lt;h2 id=&#34;字符编码表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符编码表&#34;&gt;#&lt;/a&gt; 字符编码表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编码表&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ASCII&lt;/td&gt;
&lt;td&gt;一个字节表示一个字符，一共有 128 个字符，上限为 256 个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unicode&lt;/td&gt;
&lt;td&gt;使用两个字节表示字符，汉字和字母统一占用 2 个字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UTF-8&lt;/td&gt;
&lt;td&gt;大小可变的 编码表，字母使用 1 个字节，汉字使用 3 个字节，可以使用 1-6 个字符表示一个符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gbk&lt;/td&gt;
&lt;td&gt;字母使用 1 个字节，汉字使用 2 个字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;big5 码&lt;/td&gt;
&lt;td&gt;存储繁体中文&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第三章-运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三章-运算符&#34;&gt;#&lt;/a&gt; 第三章 运算符&lt;/h1&gt;
&lt;p&gt;java 取余的本质，公式  &lt;code&gt;a % b = a - a / b *b&lt;/code&gt;  ，当 a 为小数时，公式转变为  &lt;code&gt;a % b = a - (int) a / b * b&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;和|是逻辑运算符，&amp;amp;&amp;amp;和||是短路运算符&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x=flase&lt;/code&gt;  的返回结果是 flase，同理  &lt;code&gt;x=true&lt;/code&gt;  的返回结果是 true。&lt;/p&gt;
&lt;p&gt;有小数参与运算，得到结果是近似值。&lt;/p&gt;
&lt;h2 id=&#34;算术运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#算术运算符&#34;&gt;#&lt;/a&gt; 算术运算符&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;正号；数字相加；字符串相加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;负号；数字相减；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;数字相乘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;数字相除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;取模（取余）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;先运算后取值；先取值后运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;先运算后取值；先取值再运算&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//算术运算符例题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i = i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//输出结果为1，因为规则使用临时变量,(1)temp=i;(2)i=i+1;(3)i=temp。所以结果为1。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i = ++i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//输出结果为2，因为规则使用临时变量,(1)i=i+1;(2)temp=i;(3)i=temp.所以结果为2。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//复合运算符进行逻辑转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt; b=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b+=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//等价于b=(byte)(b+2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b++;&lt;span class=&#34;comment&#34;&gt;//等价于b=(byte)(b+1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;标识符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标识符&#34;&gt;#&lt;/a&gt; 标识符&lt;/h2&gt;
&lt;h3 id=&#34;标识符命名规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标识符命名规则&#34;&gt;#&lt;/a&gt; 标识符命名规则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有 26 个字母，0-9，_和 $ 组成。&lt;/li&gt;
&lt;li&gt;数字不可以开头。&lt;/li&gt;
&lt;li&gt;不可以使用关键字和保留字，但能包含关键字和保留字。&lt;/li&gt;
&lt;li&gt;java 中严格区分大小写，长度无限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;标识符命名规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标识符命名规范&#34;&gt;#&lt;/a&gt; 标识符命名规范&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;包名：多单词组成时所有字母都小写：aaa.bbb.ccc，例如： &lt;code&gt;com.hsp.crm&lt;/code&gt;   。&lt;/li&gt;
&lt;li&gt;类名、接口名：多单词组成时，所有单词的首字母大写（大驼峰）：XxxYyyZzz，例如：  &lt;code&gt;TankShotGame&lt;/code&gt;  。&lt;/li&gt;
&lt;li&gt;变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始首字母大写（小驼峰）：xxxYyyZzz，例如： &lt;code&gt;tankShotGame&lt;/code&gt;  。&lt;/li&gt;
&lt;li&gt;常量名：所有字母都大写，多单词时每个单词用下划线连接：XXX_YYY_ZZZ，例如： &lt;code&gt;TAX_RATE&lt;/code&gt;  。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;接收键盘输入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接收键盘输入&#34;&gt;#&lt;/a&gt; 接收键盘输入&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//导入对应的包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.Scanner;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//创建Scanner对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Scanner&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;myscanner&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Scanner&lt;/span&gt;(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//调用方法，接收用户输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; myscanner.next()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;进制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进制&#34;&gt;#&lt;/a&gt; 进制&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;进制&lt;/th&gt;
&lt;th&gt;表示方式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;二进制&lt;/td&gt;
&lt;td&gt;以 0b 或 0B 开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;十进制&lt;/td&gt;
&lt;td&gt;正常形式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;八进制&lt;/td&gt;
&lt;td&gt;以数字 0 开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;十六进制&lt;/td&gt;
&lt;td&gt;以 0x 或 0X 开头，0-9 及 A (10)-F (15)，此处的 A-F 不区分大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;位运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#位运算&#34;&gt;#&lt;/a&gt; 位运算&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;取反&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;算术右移，低位溢出，符号位不变，用符号位补溢出的高位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;算术左移，符号位不变，低位补 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;逻辑右移，也称为无符号右移。运算规则是低位溢出，高位补 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;原码-反码-补码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原码-反码-补码&#34;&gt;#&lt;/a&gt; 原码、反码、补码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;二进制的最高位是符号位：0 代表正数，1 代表负数。&lt;/li&gt;
&lt;li&gt;正数的原码、反码、补码都一样。&lt;/li&gt;
&lt;li&gt;负数的反码 = 原码符号位不变，其他位取反。&lt;/li&gt;
&lt;li&gt;负数的补码 = 反码 + 1，负数的反码 = 补码 + 1。&lt;/li&gt;
&lt;li&gt;0 的反码，补码都是 0。&lt;/li&gt;
&lt;li&gt;java 没有无符号数，java 中的数都是有符号的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在计算机运行的时候，都是以补码的方式来运算的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当我们看运算结果的时候，要看他的原码。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;位运算解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#位运算解析&#34;&gt;#&lt;/a&gt; 位运算解析&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//1、先得到-2的原码，由于默认为int型，4个字节，32位，原码为10000000 00000000 00000000 00000010&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2、-2的反码：11111111 11111111 11111111 11111101&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//3、-2的补码：11111111 11111111 11111111 11111110&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//4、取反操作：00000000 00000000 00000000 00000001,运算后的补码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//5、运算后的原码就是00000000 00000000 00000000 00000001=&amp;gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(~-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//结果为1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//1、得到2的补码：00000000 00000000 00000000 00000010&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//~2操作:11111111 11111111 11111111 11111101，这是运算后的补码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//3、运算后的反码:11111111 11111111 11111111 11111100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//4、运算后的原码:10000000 00000000 00000000 00000011=&amp;gt;-3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(~&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//结果为-3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;第四章-控制结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四章-控制结构&#34;&gt;#&lt;/a&gt; 第四章 控制结构&lt;/h1&gt;
&lt;p&gt;三大流程控制语句：顺序控制、分支控制、循环控制。&lt;/p&gt;
&lt;p&gt;在 java 中，只要有值返回，就是一个表达式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;break 语句出现在多层嵌套的语句块中，可以通过标签指明要终止的是哪一层语句块。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串比较是否相同： &lt;code&gt;&amp;quot;林黛玉&amp;quot;.equals(name)&lt;/code&gt;  。尽量把具体对象写在前面以避免空指针。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;continue 语句用于结束本次循环，继续执行下一次循环。在多层嵌套的循环语句体中，可以通过标签指定要跳过哪一层循环，这个和前面的 break 语句类似。&lt;/p&gt;
&lt;p&gt;当 return 用在方法时，表示跳出方法，如果用在 main，表示退出程序。&lt;/p&gt;
&lt;h2 id=&#34;switch注意事项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch注意事项&#34;&gt;#&lt;/a&gt; Switch 注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;表达式数据类型，应和 case 后的常量类型一致，或者是可以自动转成可以相互比较的类型。&lt;/li&gt;
&lt;li&gt;Switch 表达式中的返回值必须是：byte,short,int,char,enum,String。&lt;/li&gt;
&lt;li&gt;case 子句中的值必须是常量或常量表达式，而不能是变量。&lt;/li&gt;
&lt;li&gt;default 子句是可选的，当没有匹配的 case 时，执行 default。&lt;/li&gt;
&lt;li&gt;Switch 穿透：case 中没有 break 语句，运行结束后直接执行下一个 case 的语句，不会进行判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;for使用细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for使用细节&#34;&gt;#&lt;/a&gt; for 使用细节&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;for (; 循环判断条件；) 中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略。&lt;/li&gt;
&lt;li&gt;循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编程思想&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编程思想&#34;&gt;#&lt;/a&gt; 编程思想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;化繁为简：将复杂的需求，拆解成简单的需求，逐步完成。&lt;/li&gt;
&lt;li&gt;先死后活：先考虑固定的值，然后转成灵活变化的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标签&#34;&gt;#&lt;/a&gt; 标签&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;label1 是标签，名字由程序员指定。&lt;/li&gt;
&lt;li&gt;break 后指定到哪个标签就退出到哪里。&lt;/li&gt;
&lt;li&gt;在实际的开发中，尽量不使用标签。因为会导致可读性变差。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//标签的例子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;label1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;j &amp;lt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;j++)&amp;#123;&lt;span class=&#34;comment&#34;&gt;//外层for循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;label2:  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(i == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt; label1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;i = &amp;quot;&lt;/span&gt;+i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;第五章-数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五章-数组&#34;&gt;#&lt;/a&gt; 第五章 数组&lt;/h1&gt;
&lt;p&gt;数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。&lt;/p&gt;
&lt;p&gt;二维数组指向多个一维数组，一维数组再指向具体的值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二维数组允许每列的元素个数不相同。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;数组操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组操作&#34;&gt;#&lt;/a&gt; 数组操作&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//新建数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] hens = &amp;#123;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8.8&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//先声明，再分配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[];&lt;span class=&#34;comment&#34;&gt;//也可以使用int[] a;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;span class=&#34;comment&#34;&gt;//此时才真正赋予存储空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//获取数组长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;len = hens.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//二维数组的新建与一维的类似&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[][] arr = &amp;#123;&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[][] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] y[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//动态初始化,列数不等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//创建二维数组，有3个一维数组，但是每个一维数组没有开空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[][] arr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; arr.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  arr[i] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;span class=&#34;comment&#34;&gt;//给每个一维数组开空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//获取行数和列数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;row = arr.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;col = arr[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//练习题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;strs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&amp;#125;&lt;span class=&#34;comment&#34;&gt;//正确&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;strs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&amp;#125;&lt;span class=&#34;comment&#34;&gt;//错误，不可以指定数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;数组细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组细节&#34;&gt;#&lt;/a&gt; 数组细节&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;数组创建后，如果没有赋值，有默认值。int、short、byte、long 的默认值为 0；float 和 double 的默认值为 0.0；char 的默认值为 \u0000；Boolean 为 false；String 为 null。&lt;/li&gt;
&lt;li&gt;数组中的元素可以是任何数据类型。包括基本数据类型和引用类型，但是不能混用。&lt;/li&gt;
&lt;li&gt;数组下标从 0 开始。&lt;/li&gt;
&lt;li&gt;数组属引用类型，数组型数据是对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;赋值方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#赋值方式&#34;&gt;#&lt;/a&gt; 赋值方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;基本数据类型赋值，赋值方式为值拷贝。&lt;/li&gt;
&lt;li&gt;数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数组在栈中存储一个指向堆的地址，堆中存储实际的值，数组赋值时，实际上是将栈中的地址进行传递，这也是为什么将数组成为引用类型。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二维数组内存示意图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二维数组内存示意图&#34;&gt;#&lt;/a&gt; 二维数组内存示意图&lt;/h2&gt;
&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/97b2904d6220cca5a9e0944106126e87.jpg&#34;
                      alt=&#34;二维数组内存示意图&#34; style=&#34;zoom:50%;&#34; 
                &gt;
&lt;h1 id=&#34;第六章-面向对象基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第六章-面向对象基础&#34;&gt;#&lt;/a&gt; 第六章 面向对象 (基础)&lt;/h1&gt;
&lt;p&gt;属性如果不赋值，有默认值，与数组相同。&lt;/p&gt;
&lt;p&gt;由于对象也是引用类型，所以赋值也是引用传递。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法不能嵌套定义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方法重载：java 中允许同一个类中，多个重名方法的存在，但要求形参列表不一致。&lt;/p&gt;
&lt;p&gt;可变参数：java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全局变量（属性）可以不赋值，直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值。我们说的局部变量一般是指在成员方法中定义的变量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;属性可以加修饰符，局部变量不可以加修饰符。&lt;/p&gt;
&lt;p&gt;可以使用 hashCode () 函数内存地址转换成的整数。例如  &lt;code&gt;this.hashCode()&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;使用 Double 包装类返回值，就可以返回 null 来提示错误信息。&lt;/p&gt;
&lt;h2 id=&#34;类的操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类的操作&#34;&gt;#&lt;/a&gt; 类的操作&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//声明类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Cat&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String color;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//新建方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;cal&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.printlin(&lt;span class=&#34;string&#34;&gt;&amp;quot;接收的信息：&amp;quot;&lt;/span&gt; + n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//实例化，创建对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//cat1是对象名(对象引用),new Cat()创建的对象空间(数据)才是真正的对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Cat&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cat1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Cat&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cat1.name = &lt;span class=&#34;string&#34;&gt;&amp;quot;小白&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cat1.cal(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//将cat1指针置空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cat1 = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;类与对象的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类与对象的区别&#34;&gt;#&lt;/a&gt; 类与对象的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;类是抽象的，概念的，代表一类事物，即它是数据类型。&lt;/li&gt;
&lt;li&gt;对象是具体的，实际的，代表一个具体事物，即是实例。&lt;/li&gt;
&lt;li&gt;类是对象的模板，对象是类的一个实体，对应一个实例。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;对象内存示意图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象内存示意图&#34;&gt;#&lt;/a&gt; 对象内存示意图&lt;/h2&gt;
&lt;p&gt;基本数据类型存储于堆中，引用类型存储于方法区中的常量池。&lt;/p&gt;
&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/5f4a10b99b9515c31caf316ec5e16bae.jpg&#34;
                      alt=&#34;对象内存示意图&#34; style=&#34;zoom:50%;&#34; 
                &gt;
&lt;h2 id=&#34;java内存的结构分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java内存的结构分析&#34;&gt;#&lt;/a&gt; java 内存的结构分析&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;栈：一般存放基本数据类型（局部变量）。&lt;/li&gt;
&lt;li&gt;堆：存放对象（Cat cat，数组等）。&lt;/li&gt;
&lt;li&gt;方法区：常量池（常量，比如字符串），类加载信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;java创建对象流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java创建对象流程&#34;&gt;#&lt;/a&gt; java 创建对象流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;先加载类信息（属性和方法信息，每个类只加载一次）。&lt;/li&gt;
&lt;li&gt;在堆中分配空间，进行默认初始化。&lt;/li&gt;
&lt;li&gt;把堆中地址赋给栈中的对象名，使得对象名指向对象。&lt;/li&gt;
&lt;li&gt;进行指定初始化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;方法调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法调用&#34;&gt;#&lt;/a&gt; 方法调用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;当程序执行到方法时，就会开辟一个独立的空间（栈空间）。&lt;/li&gt;
&lt;li&gt;当方法执行完毕，或者执行到 return 语句时，就会返回到调用方法的地方。&lt;/li&gt;
&lt;li&gt;返回后，继续执行方法后面的代码。&lt;/li&gt;
&lt;li&gt;当 main 方法 (栈) 执行完毕，整个程序退出。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;返回数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回数据&#34;&gt;#&lt;/a&gt; 返回数据&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一个方法最多一个返回值，使用数组可以传递多个结果。&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] returnarr()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] resArr = &amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; resArr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;返回类型可以为任意类型，包含基本数据类型或引用类型。&lt;/li&gt;
&lt;li&gt;如果方法要求有返回类型，则方法体中最后的执行语句必须为 return 值，而且要求返回值类型必须和 return 的值类型一致或兼容。&lt;/li&gt;
&lt;li&gt;如果方法返回类型为 void，则方法体中可以没有 return 或只写 return。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;成员方法传参机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#成员方法传参机制&#34;&gt;#&lt;/a&gt; 成员方法传参机制&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参。&lt;/li&gt;
&lt;li&gt;引用类型传递的是地址（地址也是值），可以通过形参影响实参。对象也是引用类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;递归使用规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归使用规则&#34;&gt;#&lt;/a&gt; 递归使用规则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。&lt;/li&gt;
&lt;li&gt;方法的局部变量是独立的，不会相互影响。&lt;/li&gt;
&lt;li&gt;如果方法中使用的是引用类型变量（比如数组，对象），就会共享该引用类型的数据。&lt;/li&gt;
&lt;li&gt;当方法执行完毕，或者遇到 return，就返回，遵守谁调用，就把结果返回给谁，同时方法执行完毕或者返回时，该方法执行完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;方法重载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法重载&#34;&gt;#&lt;/a&gt; 方法重载&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;方法名：必须相同&lt;/li&gt;
&lt;li&gt;形参列表：必须不同，形参类型或个数或顺序，至少有一个不同，参数名无要求&lt;/li&gt;
&lt;li&gt;返回类型：无要求&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;可变参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可变参数&#34;&gt;#&lt;/a&gt; 可变参数&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//可变函数声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HspMethod&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//计算多个数的和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//int...表示接受的是可变参数，类型是int，使用可变参数时，可以当作数组来使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;... nums)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i &amp;lt; nums.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      res += nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;可变参数细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可变参数细节&#34;&gt;#&lt;/a&gt; 可变参数细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可变参数的实参可为 0 到任意多个。&lt;/li&gt;
&lt;li&gt;可变参数的实参可以是数组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可变参数的本质就是数组。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数放在最后。&lt;/li&gt;
&lt;li&gt;一个形参列表只能出现一个可变参数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;构造器构造方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造器构造方法&#34;&gt;#&lt;/a&gt; 构造器 / 构造方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;主要作用是完成对新对象的初始化，并不是创建对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造器没有返回值，也不能写 void&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;方法名和类名要一致&lt;/li&gt;
&lt;li&gt;参数列表和成员方法一样的规则&lt;/li&gt;
&lt;li&gt;构造器的调用由系统完成，不能自行调用&lt;/li&gt;
&lt;li&gt;构造器也允许重载&lt;/li&gt;
&lt;li&gt;如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器，可以使用 javap 指令反编译查看。例如  &lt;code&gt;javap Dog.class&lt;/code&gt;  。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//构造器/构造方法声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Person&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//使用this指定当前对象，即当前调用构造器的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;this使用细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#this使用细节&#34;&gt;#&lt;/a&gt; this 使用细节&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;this 关键字可以用来访问本类的属性、方法、构造器&lt;/li&gt;
&lt;li&gt;this 用于区分当前类的属性和局部变量&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;smith&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//传统方式，输出局部变量smith&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;name=&amp;quot;&lt;/span&gt; + name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//this方式，输出类属性jack&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;name=&amp;quot;&lt;/span&gt; + &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;访问成员方法的语法：this. 方法名 (参数列表)&lt;/li&gt;
&lt;li&gt;访问构造器语法：this (参数列表)；&lt;strong&gt;注意只能在构造器中调用本类的另一个构造器，而且必须放置于第一条语句，因此只能用一个&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;this 不能在类定义的外部使用，只能在类定义的方法中使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;题目解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题目解析&#34;&gt;#&lt;/a&gt; 题目解析&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;count1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    count = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;count1=&amp;quot;&lt;/span&gt; + count);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;count2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;count2=&amp;quot;&lt;/span&gt; + count);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//Test类的main方法，任何一个类，都可以有自己的main方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String args[])&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//new Test()是匿名对象，只使用一次，因为没有对象名，使用后被销毁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;().count1();&lt;span class=&#34;comment&#34;&gt;//输出10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t1.count2();&lt;span class=&#34;comment&#34;&gt;//输出9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t1.count2();&lt;span class=&#34;comment&#34;&gt;//输出10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;第七章-面向对象中级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第七章-面向对象中级&#34;&gt;#&lt;/a&gt; 第七章 面向对象 (中级)&lt;/h1&gt;
&lt;p&gt;idea 编译后的文件会存放在 out 文件夹下，src 文件夹存放源码文件。&lt;/p&gt;
&lt;p&gt;文件 -&amp;gt; 设置 -&amp;gt; 编辑器 -&amp;gt; 代码模板：可以查看模板或者编辑模板。遇到一个问题是我没有 java 的模板。可以使用代码模板加快速度，例如使用  &lt;code&gt;sout&lt;/code&gt;  加缩进自动补全为打印。&lt;/p&gt;
&lt;p&gt;package 关键字，声明当前类所在的包，需要放在类的最上面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;包的本质实际上就是创建不同的文件夹来保存类文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当类重名的时候，默认使用引入的类，或者通过指定包名来指出使用的类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;包的命名只能包含数字、字母、下划线、小圆点，但不能用数字开头，不能是关键字或保留字。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继承声明： &lt;code&gt;class 子类 extends 父类&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;方法重写 (覆盖)：子类的方法和父类的方法的名称、返回类型和参数都一样，那么子类的该方法覆盖父类的对应方法。&lt;/p&gt;
&lt;p&gt;多态是指方法和对象具有多种形态，可以提高代码的复用性，利于代码维护。&lt;/p&gt;
&lt;p&gt;instanceof 比较操作符，用于判断对象的运行类型是否为某类型或某类型的子类型。例子： &lt;code&gt;cat instanceof Animal&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多态的方法首先看运行类型，属性首先看编译类型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多态数组：数组的定义类型为父类类型，里面保存的实际元素为子类类型。&lt;/p&gt;
&lt;p&gt;toString 方法默认返回类的全类名 (包名 + 类名)+@+ 十六进制哈希值 (由 hashCode 获取)。当直接输出一个对象时，toString 方法会被默认调用。&lt;/p&gt;
&lt;p&gt;当某个对象没有任何引用时，则 JVM 就认为这个对象是一个垃圾对象，会使用垃圾回收机制销毁该对象，在销毁该对象前，会先调用 finalize 方法。垃圾回收并不是即时的，有自己的一套算法，使用 System.gc () 主动调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在断点调试过程中是运行状态，是以对象的运行类型来执行的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置步进至源码：文件 -&amp;gt; 构建，执行，部署 -&amp;gt; 调试器 -&amp;gt; 步进 -&amp;gt; 取消勾选  &lt;code&gt;java.*&lt;/code&gt;  和  &lt;code&gt;javax*&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;建议一段代码完成一个小功能，尽量不要混在一起。&lt;/p&gt;
&lt;p&gt;数据校验时，可以采用找出不正确的金额条件，然后给出提示，就直接 break。&lt;/p&gt;
&lt;h2 id=&#34;idea快捷键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#idea快捷键&#34;&gt;#&lt;/a&gt; idea 快捷键&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+d&lt;/td&gt;
&lt;td&gt;删除当前行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+alt + 向下箭头&lt;/td&gt;
&lt;td&gt;复制当前行到下一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt+/&lt;/td&gt;
&lt;td&gt;代码补全&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+/&lt;/td&gt;
&lt;td&gt;第一次添加注释，第二次取消注释&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt+enter&lt;/td&gt;
&lt;td&gt;自动导入光标对应的 class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+alt+L&lt;/td&gt;
&lt;td&gt;自动格式化代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt+r&lt;/td&gt;
&lt;td&gt;运行代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt+insert&lt;/td&gt;
&lt;td&gt;新建构造器，get 和 set 方法等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+h&lt;/td&gt;
&lt;td&gt;查看类的继承关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+b&lt;/td&gt;
&lt;td&gt;快速定位到光标所在的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;声明类时在后面加上 var, 点击 enter&lt;/td&gt;
&lt;td&gt;自动分配变量名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F7&lt;/td&gt;
&lt;td&gt;断点调试跳入方法内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;td&gt;逐行执行代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F9&lt;/td&gt;
&lt;td&gt;继续，执行到下一个断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shift+F8&lt;/td&gt;
&lt;td&gt;跳出方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;包的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包的作用&#34;&gt;#&lt;/a&gt; 包的作用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;区分相同名字的类&lt;/li&gt;
&lt;li&gt;当类很多时，可以很好的管理类&lt;/li&gt;
&lt;li&gt;控制访问范围&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;访问修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问修饰符&#34;&gt;#&lt;/a&gt; 访问修饰符&lt;/h2&gt;
&lt;p&gt;java 提供四种访问修饰符，用于控制方法和属性的访问权限，也可以修饰类，但只能使用 public 和默认修饰符。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;访问修饰符&lt;/th&gt;
&lt;th&gt;访问级别&lt;/th&gt;
&lt;th&gt;同类&lt;/th&gt;
&lt;th&gt;同包&lt;/th&gt;
&lt;th&gt;子类&lt;/th&gt;
&lt;th&gt;不同包&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;公开&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protested&lt;/td&gt;
&lt;td&gt;受保护&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;可以&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;没有修饰符&lt;/td&gt;
&lt;td&gt;默认&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td colspan=&#34;3&#34;&gt;可以&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;私有&lt;/td&gt;
&lt;td colspan=&#34;4&#34;&gt;可以&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;封装的实现步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#封装的实现步骤&#34;&gt;#&lt;/a&gt; 封装的实现步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将属性进行私有化 private，使用户不能直接修改属性。&lt;/li&gt;
&lt;li&gt;提供一个公共的 set 方法，用于对属性进行判断并赋值。&lt;/li&gt;
&lt;li&gt;提供一个公共的 get 方法，用于获取属性的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;继承细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#继承细节&#34;&gt;#&lt;/a&gt; 继承细节&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;子类继承父类的所有属性和方法，非私有的属性可以直接访问，私有的需要通过父类的公共方法使用。&lt;/li&gt;
&lt;li&gt;java 所有类都是 Object 类的子类，Object 类是所有类的父类。&lt;/li&gt;
&lt;li&gt;子类必须调用父类的构造器，完成父类的初始化。父类构造器的调用不限于直接父类，将一直往上追溯到 Object 类。&lt;/li&gt;
&lt;li&gt;如果希望指定去调用父类的某个构造器，则显式 3 的调用一下：super (参数列表)。super 只能在构造器中使用，且必须放在构造器第一行。&lt;/li&gt;
&lt;li&gt;super () 和 this () 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器中，使用了 this () 方法，就不会默认调用 super () 方法。&lt;/li&gt;
&lt;li&gt;子类最多只能继承一个父类 (指直接继承)，那么如何继承多个？让父类去继承。&lt;/li&gt;
&lt;li&gt;子类往上寻找属性时，遇到一个私有属性不能访问，不会跳过再往上查找，而是直接报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//继承题目解析&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  A()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  A(String name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;a name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  B()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//由于有this()方法，所以没有默认调用super()方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//调用自身的构造方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  B(String name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//默认调用了super();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;b name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//B b = new B()的输出结果为a,b name,b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;方法重写细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法重写细节&#34;&gt;#&lt;/a&gt; 方法重写细节&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;子类的方法的参数、方法名称要和父类方法的参数，方法名称完全相同。&lt;/li&gt;
&lt;li&gt;子类方法的返回类型和父类方法的返回类型一样，或者是父类返回类型的子类，比如父类方法的返回类型是 object，子类方法的返回类型是 String。&lt;/li&gt;
&lt;li&gt;子类方法不能缩小父类的方法权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;对象的多态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象的多态&#34;&gt;#&lt;/a&gt; 对象的多态&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一个对象的编译类型和运行类型可以不一致。&lt;/li&gt;
&lt;li&gt;编译类型在定义对象时，就确定了，不能改变。&lt;/li&gt;
&lt;li&gt;运行类型是可以变化的。&lt;/li&gt;
&lt;li&gt;编译类型看定义时等号的左边，运行类型看等号的右边。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//animal编译类型是Animal，运行类型是Dog，相当于披着Animal皮的Dog&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;animal&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Dog&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//因为animal运行类型是Dog，使用执行Dog的cry方法，而不是Animal的cry方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;animal.cry();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//animal的运行类型变成了Cat，编译类型仍然是Animal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;animal = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Cat&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;多态的向上转型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多态的向上转型&#34;&gt;#&lt;/a&gt; 多态的向上转型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;多态的前提是两个对象 (类) 存在继承关系&lt;/li&gt;
&lt;li&gt;多态的向上转型的本质是父类的引用指向子类的对象&lt;/li&gt;
&lt;li&gt;多态的向上转型的特点是可以调用父类中的所有成员 (需遵守访问权限)，不能调用子类的特有成员，因为在编译阶段，能调用哪些成员是由编译类型决定的，最终运行效果看子类的具体实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译阶段只看编译类型，运行时只看具体的运行类型。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多态的向下转型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多态的向下转型&#34;&gt;#&lt;/a&gt; 多态的向下转型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;语法：子类类型 引用名 = （子类类型）父类引用&lt;/li&gt;
&lt;li&gt;只能强转父类的引用，不能强转父类的对象&lt;/li&gt;
&lt;li&gt;要求父类的引用必须指向当前目标类型的对象&lt;/li&gt;
&lt;li&gt;当向下转型后，可以调用子类类型中的所有成员&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//进行向下转型，此时cat的编译类型为Cat，运行类型也是Cat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//向下转型要求animal原来的引用指向的是Cat(第3个特点)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Cat&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (Cat) animal;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cat.catchMouse();&lt;span class=&#34;comment&#34;&gt;//此时可以调用Cat的特有方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;多态的属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多态的属性&#34;&gt;#&lt;/a&gt; 多态的属性&lt;/h3&gt;
&lt;p&gt;属性没有重写，属性的值看编译类型&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Base&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Base&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Sub&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(base.count);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//base的编译类型的Base,输出值为编译类型的10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;动态绑定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态绑定&#34;&gt;#&lt;/a&gt; 动态绑定&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;当调用对象方法时，该方法会和该对象的内存地址 / 运行类型绑定。&lt;/li&gt;
&lt;li&gt;当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//由于B类没有sum()，于是往上找，父类A有，执行A的sum()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; getI() + &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getI&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//getI()在B类有，执行B的getI()，将B类中的i返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getI&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;B&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(a.sum());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//输出结果为30，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;和equals的对比&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#和equals的对比&#34;&gt;#&lt;/a&gt; == 和 equals 的对比&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;== 是一个比较运算符，它既可以判断基本数据类型，也可以判断引用类型。判断基本数据类型是判断值是否相等；判断引用类型则是判断地址是否相等，即判断是否为同一个对象。&lt;/li&gt;
&lt;li&gt;equals 方法是 Object 类中的方法，只能判断引用类型。默认判断地址是否相同，子类中往往重写该方法，用于判断内容是否相等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hashcode方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hashcode方法&#34;&gt;#&lt;/a&gt; hashCode 方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;提高具有哈希结构的容器的效率&lt;/li&gt;
&lt;li&gt;两个引用，如果指向的是同一个对象，则哈希值一定一样；如果指向不同对象，则哈希值通常不一样&lt;/li&gt;
&lt;li&gt;哈希值主要是根据地址号，但不能完全将哈希值等价于地址&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;第八章-面向对象高级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第八章-面向对象高级&#34;&gt;#&lt;/a&gt; 第八章 面向对象 (高级)&lt;/h1&gt;
&lt;p&gt;类的单例 (单个实例) 模式：采用一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。&lt;/p&gt;
&lt;p&gt;当父类的某些方法需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类。&lt;/p&gt;
&lt;p&gt;接口就是给出一些没有实现的方法，封装在一起，到某个类要使用的时候，再根据具体情况将这些方法写出来，一种高层次的抽象。&lt;/p&gt;
&lt;h2 id=&#34;类静态变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类静态变量&#34;&gt;#&lt;/a&gt; 类 (静态) 变量&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;类变量 (静态变量) 会被该类的所有对象实例共享，而且在类加载的时候就生成了。例子： &lt;code&gt;public static int count;&lt;/code&gt;  。&lt;/li&gt;
&lt;li&gt;类变量是随着类的加载而创建的，所以即使没有创建对象实例也可以访问。&lt;/li&gt;
&lt;li&gt;类变量存放位置会由于 JDK 版本不同而产生差异。&lt;/li&gt;
&lt;li&gt;类变量可以通过类名。类变量名或者对象名。类变量名来访问，但是 java 设计者推荐使用类名。类变量名方式访问。&lt;/li&gt;
&lt;li&gt;类变量的生命周期是随着类的加载开始，随着类的消亡而销毁。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;类静态方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类静态方法&#34;&gt;#&lt;/a&gt; 类 (静态) 方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区。&lt;/li&gt;
&lt;li&gt;类方法不允许使用和对象有关的关键字，比如 this 和 super。&lt;/li&gt;
&lt;li&gt;当方法中不涉及任何和对象相关的成员时，则可以将该方法设计成静态方法，提高开发效率。&lt;/li&gt;
&lt;li&gt;当方法使用了 static 修饰符后，该方法就是静态方法，静态方法只能访问静态属性 / 变量和静态方法。普通方法既可以访问非静态成员，也可以访问静态成员。&lt;/li&gt;
&lt;li&gt;类变量可以通过类名。类方法名或者对象名。类方法名来访问，但是 java 设计者推荐使用类名。类方法名方式访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;main方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#main方法&#34;&gt;#&lt;/a&gt; main 方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;main 方法是由 Java 虚拟机调用的，处于不同的类，所以该方法的访问权限必须是 public。&lt;/li&gt;
&lt;li&gt;java 虚拟机在执行 main 方法时不需要创建对象，所以该方法的必须是 static。所以 main 方法本质上也是静态方法，遵守静态方法的规则。&lt;/li&gt;
&lt;li&gt;main 方法接收 String 类型的数组参数，该数组中保存执行 java 命令时传递给所运行的类的参数。String 数组是由命令行运行时传入的。idea 中可以点击编辑配置 -&amp;gt; 程序参数中填写。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;代码块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码块&#34;&gt;#&lt;/a&gt; 代码块&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;代码块又称为初始化块，属于类中的成员，类似于方法，将逻辑语句封装在方法体中。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是在加载类时或创建对象时隐式调用。&lt;/li&gt;
&lt;li&gt;修饰符可不写或写 static，使用 static 的为静态代码块，作用就是对类进行初始化，而且随着类的加载而执行，并且只会执行一次；否则为普通代码块，每创建一个对象就执行一次，如果只是使用类的静态成员，普通代码块并不会执行。静态代码块只能调用静态成员。&lt;/li&gt;
&lt;li&gt;相当于另外一种形式的构造器 (对构造器的补充机制)，可以做初始化的操作。如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性。&lt;/li&gt;
&lt;li&gt;代码块的执行顺序优先于构造器。构造器的最前面其实隐含了 super 方法和调用普通代码块。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;类的加载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类的加载&#34;&gt;#&lt;/a&gt; 类的加载&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建对象实例时 (new)&lt;/li&gt;
&lt;li&gt;创建子类对象实例，父类也会被加载&lt;/li&gt;
&lt;li&gt;使用类的静态成员时&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建对象的顺序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建对象的顺序&#34;&gt;#&lt;/a&gt; 创建对象的顺序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;调用静态代码块和静态属性初始化，两者的优先级相同，按照顺序执行。&lt;/li&gt;
&lt;li&gt;调用普通代码块和普通属性的初始化。&lt;/li&gt;
&lt;li&gt;调用构造方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;子类创建对象的顺序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#子类创建对象的顺序&#34;&gt;#&lt;/a&gt; 子类创建对象的顺序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;父类&lt;/strong&gt;的静态代码块和静态属性&lt;/li&gt;
&lt;li&gt;子类的静态代码块和静态属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;父类&lt;/strong&gt;的普通代码块和普通属性初始化&lt;/li&gt;
&lt;li&gt;父类的构造方法&lt;/li&gt;
&lt;li&gt;子类的普通代码块和普通属性初始化&lt;/li&gt;
&lt;li&gt;子类的构造方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;单例模式实现步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单例模式实现步骤&#34;&gt;#&lt;/a&gt; 单例模式实现步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;构造器私有化，防止用户直接进行创建。&lt;/li&gt;
&lt;li&gt;类的内部创建对象&lt;/li&gt;
&lt;li&gt;向外暴露一个静态的方法：getInstance&lt;/li&gt;
&lt;li&gt;代码实现&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//饿汉式：在没有使用前就提前创建好对象，可以在getInstance方法中判断是否已经创建对象，改造为懒汉式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;GirlFriend&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//类的内部创建对象,为了能够在静态方法中返回gf对象，需要将其修饰为static&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;GirlFriend&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;gf&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;GirlFriend&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;小红&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//构造器私有化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;GirlFriend&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//向外暴露一个静态的方法：getInstance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; GirlFriend &lt;span class=&#34;title function_&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; gf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;final关键字应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#final关键字应用&#34;&gt;#&lt;/a&gt; final 关键字应用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;final 可以修饰类、属性、方法和局部变量。&lt;/li&gt;
&lt;li&gt;当不希望类被继承，可以用 final 修饰。&lt;/li&gt;
&lt;li&gt;当不希望子类的某个方法被子类覆盖 / 重写时，可以用 final 关键字修饰。&lt;/li&gt;
&lt;li&gt;当不希望类的某个属性被修改，可以用 final 修饰。&lt;/li&gt;
&lt;li&gt;当不希望局部变量被修改，可以用 final 修饰。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;final细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#final细节&#34;&gt;#&lt;/a&gt; final 细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;final 修饰的属性又叫常量，一般用 XX_XX_XX 来命名&lt;/li&gt;
&lt;li&gt;final 修饰的属性在定义时必须赋初值，并且不能再进行修改，且只能在定义时、构造器和代码块中为其赋初值。&lt;/li&gt;
&lt;li&gt;如果该属性是静态的，则只能在定义时和静态代码块中赋初值。不能在构造器中赋初值，因为静态变量在类加载时创建，而构造器要在对象创建时才加载。&lt;/li&gt;
&lt;li&gt;如果一个类已经是 final 类了，就没有必要在将其方法修饰为 final 方法。&lt;/li&gt;
&lt;li&gt;final 不能修饰构造方法 (即构造器)。&lt;/li&gt;
&lt;li&gt;final 和 static 往往搭配使用，效率更高，不会导致类的加载，底层编译器做了优化处理。&lt;/li&gt;
&lt;li&gt;包装类 (Integer,Double,Float,Boolean 等都是 final)，String 也是 final 类。&lt;/li&gt;
&lt;li&gt;可以指定传入的形参为 final。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;抽象类细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象类细节&#34;&gt;#&lt;/a&gt; 抽象类细节&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;抽象类不能被实例化。&lt;/li&gt;
&lt;li&gt;抽象类不一定要包含 abstract 方法，还可以有实现的方法。&lt;/li&gt;
&lt;li&gt;当一个类中存在抽象方法时，需要将该类声明为 abstract 类。&lt;/li&gt;
&lt;li&gt;abstract 只能修饰类和方法，不能修饰属性和其他的。&lt;/li&gt;
&lt;li&gt;抽象类可以有任意成员，因为其本质还是一个类，比如：非抽象方法、构造器、静态方法等。&lt;/li&gt;
&lt;li&gt;抽象方法不可以有主体。&lt;/li&gt;
&lt;li&gt;如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为抽象类。所谓实现方法就是有方法体。&lt;/li&gt;
&lt;li&gt;抽象方法不能使用 private、final 和 static 来修饰，因为这些关键字都是和重写相违背的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接口&#34;&gt;#&lt;/a&gt; 接口&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 JDK7 之前，接口中所有方法都没有方法体，都是抽象方法。&lt;/li&gt;
&lt;li&gt;JDK8 后接口中可以有静态方法，默认方法，默认方法需要使用 default 关键字修饰，即接口中可以有方法的具体实现。&lt;/li&gt;
&lt;li&gt;多态传递，A 接口继承 B 接口，C 实现 A 接口，可以有 &lt;code&gt;B b = new c();&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;在接口中，抽象方法可以省略 abstract 关键字。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Myinterface01&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;myMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;默认方法&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;静态方法&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Myinterface01&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;接口细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接口细节&#34;&gt;#&lt;/a&gt; 接口细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;接口不能被实例化。&lt;/li&gt;
&lt;li&gt;接口中所有的方法都是 public 方法，接口中抽象方法可以不用 abstract 修饰。&lt;/li&gt;
&lt;li&gt;一个普通类实现接口，就必须将该接口的所有方法都实现。在 IJ 代码标黄处，使用 alt+enter 可以一键实现。&lt;/li&gt;
&lt;li&gt;抽象类实现接口，可以不用实现接口的方法。&lt;/li&gt;
&lt;li&gt;一个类可以同时多个接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口中的属性，只能是 final 的，而且是 public static final 修饰符。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;接口中属性的访问形式：接口名。属性名。&lt;/li&gt;
&lt;li&gt;接口不能继承其他的类，但是可以继承多个别的接口，使用 extends 关键字继承。&lt;/li&gt;
&lt;li&gt;接口的修饰符只能是 public 和默认，这点和类的修饰符是一样的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;接口与继承的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接口与继承的区别&#34;&gt;#&lt;/a&gt; 接口与继承的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当子类继承了父类，就自动的拥有了父类的功能，如果子类需要扩展功能，可以通过实现接口的方式拓展。可以理解实现接口是对 java 单继承方式的补充。&lt;/li&gt;
&lt;li&gt;继承的价值主要在于：解决代码的复用性和可维护性。接口的价值主要在于：设计好各种规范，让其他类去实现这些方法。&lt;/li&gt;
&lt;li&gt;接口比继承更加灵活，继承满足 is-a 的关系，而接口只需满足 like-a 的关系。&lt;/li&gt;
&lt;li&gt;接口在一定程度上实现代码解耦。使用接口规范性 + 动态绑定。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;接口练习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接口练习&#34;&gt;#&lt;/a&gt; 接口练习&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;B&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;pX&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(x);&lt;span class=&#34;comment&#34;&gt;//x不明确，访问接口使用A.x，父类使用super().x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;C&lt;/span&gt;().pX();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;内部类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内部类&#34;&gt;#&lt;/a&gt; 内部类&lt;/h2&gt;
&lt;p&gt;一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类，嵌套其他类的类称为外部类。&lt;/p&gt;
&lt;p&gt;内部类的最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系。&lt;/p&gt;
&lt;h3 id=&#34;内部类的划分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内部类的划分&#34;&gt;#&lt;/a&gt; 内部类的划分&lt;/h3&gt;
&lt;p&gt;定义在外部类局部位置上（通常方法内）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;局部内部类（有类名）&lt;/li&gt;
&lt;li&gt;匿名内部类（无类名，重点）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;定义在外部类的成员位置上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成员内部类（不使用 static 修饰）&lt;/li&gt;
&lt;li&gt;静态内部类（使用 static 修饰）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;局部内部类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#局部内部类&#34;&gt;#&lt;/a&gt; 局部内部类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可以直接访问外部类的所有成员，包括私有的。&lt;/li&gt;
&lt;li&gt;除了可以使用 final 修饰，不能添加访问修饰符。&lt;/li&gt;
&lt;li&gt;内部类可以继续被同一外部类的内部类所继承。&lt;/li&gt;
&lt;li&gt;作用域仅仅在定义它的方法或代码块中。&lt;/li&gt;
&lt;li&gt;外部类在方法中，可以创建内部类对象，然后调用方法即可。&lt;/li&gt;
&lt;li&gt;如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类.this. 成员）去访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Outer02&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;m2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Outer02 m2()&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//局部内部类是定义在外部类的局部位置，通常在方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Inner02&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//本质还是一个类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;//可以直接访问外部类的所有成员，包括私有的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;type&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;800&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//如果外部类和局部内部类的成员重名时，默认遵循就近原则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;n1=&amp;quot;&lt;/span&gt; + n1);&lt;span class=&#34;comment&#34;&gt;//输出800&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//如果想访问外部类的成员，则可以使用（外部类.this.成员）去访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;外部类的n1=&amp;quot;&lt;/span&gt; + Outer02.&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.n1);&lt;span class=&#34;comment&#34;&gt;//输出100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m2();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//外部类在方法中，可以创建内部类对象，然后调用方法即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Inner02&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;inner02&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Inner02&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inner02.f1();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;匿名内部类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#匿名内部类&#34;&gt;#&lt;/a&gt; 匿名内部类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;匿名内部类没有名字，底层有一个系统命名的名字，同时还是一个对象。&lt;/li&gt;
&lt;li&gt;tiger 的编译类型是 IA, 运行类型就是匿名内部类。&lt;/li&gt;
&lt;li&gt;底层分配的类名为外部类名 +$ 数字，可以使用 getClass () 查看。&lt;/li&gt;
&lt;li&gt;匿名内部类使用一次，就不能再使用，对象可以反复使用。&lt;/li&gt;
&lt;li&gt;我认为匿名内部类就是为了简便重写只需使用一次的类。&lt;/li&gt;
&lt;li&gt;匿名内部类可以当作实参直接传递，简介高效。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Outer04&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//外部类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//基于接口的匿名内部类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//以前想使用IA接口，是先写一个类实现该接口，并创建对象，如果只是使用一次，会很麻烦，此时使用匿名内部类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//tiger的编译类型是IA,运行类型就是匿名内部类Outer04$1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//底层分配的类名为外部类名+$次序，所以这个是Outer04$1，可以使用getClass()查看&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//jdk底层在创建匿名内部类后，马上就创建了实例，并且把地址返回给tiger。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;IA&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;tiger&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IA&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;meta&#34;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;cry&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;我是老虎&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tiger.cry();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//由于有对象的性质，也可以直接调用,效果与上面的一样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IA&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;meta&#34;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;cry&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;我是老虎&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;.cry();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//基于类的匿名内部类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//father编译类型是Father，运行类型是匿名内部类Outer04$2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//参数列表会传递给Father的构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Father&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;father&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Father&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;meta&#34;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;匿名内部重写了test方法&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    father.test();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//基于抽象类的匿名内部类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;animal&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Animal&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;meta&#34;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;eat东西&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IA&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;cry&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Father&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Father&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//测试方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Animal&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;成员内部类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#成员内部类&#34;&gt;#&lt;/a&gt; 成员内部类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;成员内部类是定义在外部类的成员位置，并且没有 static 修饰。&lt;/li&gt;
&lt;li&gt;可以添加任意访问修饰符，因为它的地位就是一个成员。&lt;/li&gt;
&lt;li&gt;外部其他类访问成员内部类。&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Outer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;outer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Outer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方法1，相当于将new Inner()当作是outer的成员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Outer.&lt;span class=&#34;type&#34;&gt;Inner&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; outer.&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Inner&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方法2，在外部类中编写一个方法，返回对象实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Outer.&lt;span class=&#34;type&#34;&gt;Inner&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; outer.getInner();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;静态内部类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态内部类&#34;&gt;#&lt;/a&gt; 静态内部类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;静态内部类是定义在外部类的成员位置，使用 static 进行修饰。&lt;/li&gt;
&lt;li&gt;可以访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员。&lt;/li&gt;
&lt;li&gt;外部其他类访问静态内部类&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方法1,因为静态内部类是可以通过类名直接访问的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Outer.&lt;span class=&#34;type&#34;&gt;Inner&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Outer&lt;/span&gt;.Inner();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方法2，在外部类中编写一个方法，返回对象实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Outer.&lt;span class=&#34;type&#34;&gt;Inner&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; outer.getInner();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;重名时访问外部类的成员，可以使用外部类名。成员。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;第九章-枚举和注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第九章-枚举和注解&#34;&gt;#&lt;/a&gt; 第九章 枚举和注解&lt;/h1&gt;
&lt;h2 id=&#34;枚举&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#枚举&#34;&gt;#&lt;/a&gt; 枚举&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;当我们使用 enum 关键字开发一个枚举类时，默认继承 Enum 类。&lt;/li&gt;
&lt;li&gt;如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略。&lt;/li&gt;
&lt;li&gt;枚举对象必须放在枚举类的行首。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;枚举函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#枚举函数&#34;&gt;#&lt;/a&gt; 枚举函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ordinal()&lt;/td&gt;
&lt;td&gt;输出该枚举对象的次序，从 0 开始编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;values()&lt;/td&gt;
&lt;td&gt;返回一个数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;valueof()&lt;/td&gt;
&lt;td&gt;将字符串转换为枚举对象，要求字符串为已有的枚举对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compareTo()&lt;/td&gt;
&lt;td&gt;对比两个枚举对象的编号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;枚举类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#枚举类&#34;&gt;#&lt;/a&gt; 枚举类&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Season&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//要求将定义常量对象写在最前面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  SPRING(&lt;span class=&#34;string&#34;&gt;&amp;quot;春天&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;温暖&amp;quot;&lt;/span&gt;),WINTER(&lt;span class=&#34;string&#34;&gt;&amp;quot;冬天&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;寒冷&amp;quot;&lt;/span&gt;),AUTUMN(&lt;span class=&#34;string&#34;&gt;&amp;quot;秋天&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;凉爽&amp;quot;&lt;/span&gt;),SUMMER(&lt;span class=&#34;string&#34;&gt;&amp;quot;夏天&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;炎热&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//下面写构造器和各种方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解&#34;&gt;#&lt;/a&gt; 注解&lt;/h2&gt;
&lt;p&gt;和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入到代码中的补充信息。&lt;/p&gt;
&lt;p&gt;override 表示重写指定的父类方法（从编译层面验证），如果父类没有该方法，则会报错。&lt;/p&gt;
&lt;p&gt;元注解是修饰注解的注解。&lt;/p&gt;
&lt;h3 id=&#34;常用注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用注解&#34;&gt;#&lt;/a&gt; 常用注解&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;注解&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@override&lt;/td&gt;
&lt;td&gt;限定某个方法，是重写父类方法，该注释只能用于方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Deprecated&lt;/td&gt;
&lt;td&gt;用于表示某个程序元素（类，方法，字段，包，参数等）已经过时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@SuppressWarnings&lt;/td&gt;
&lt;td&gt;抑制编译器警告&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;元注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元注解&#34;&gt;#&lt;/a&gt; 元注解&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;元注解&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Retention&lt;/td&gt;
&lt;td&gt;指定注解的作用范围，有 SOURCE、CLASS、RUNTINE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Target&lt;/td&gt;
&lt;td&gt;指定注解可以在哪些地方使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Document&lt;/td&gt;
&lt;td&gt;指定该注解是否会在 javadoc 体现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inherited&lt;/td&gt;
&lt;td&gt;子类会继承父类注解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第十章-异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十章-异常&#34;&gt;#&lt;/a&gt; 第十章 异常&lt;/h1&gt;
&lt;p&gt;java 语言中，将程序执行中发生的不正常现象称为 “异常”，开发中的语法错误和逻辑错误不是异常。&lt;/p&gt;
&lt;p&gt;异常分为两大类，运行时异常和编译时异常。&lt;/p&gt;
&lt;p&gt;编译时异常是必须处理的异常，是我们编写程序时需要避免的情况。&lt;/p&gt;
&lt;p&gt;自定义异常类名继承 Exception（编译异常）或 RuntimeException（运行异常）。&lt;/p&gt;
&lt;h2 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常处理&#34;&gt;#&lt;/a&gt; 异常处理&lt;/h2&gt;
&lt;p&gt;IJ 中将该代码选中，输入快捷键 ctrl+alt+t，选中 try-catch 可以设置异常处理。&lt;/p&gt;
&lt;p&gt;如果异常发生了，则异常后的代码不再执行，直接进入 catch 代码块。&lt;/p&gt;
&lt;p&gt;可以有多个 catch 异常，捕获不同的异常，但要求父类异常在后，子类异常在前，如发生异常，只会匹配一个 catch。&lt;/p&gt;
&lt;p&gt;可以使用 try-finally，即不对异常进行任何处理。&lt;/p&gt;
&lt;p&gt;子类重写的方法所抛出的异常类型要么额父类抛出的异常一致，要么为父类抛出异常类型的子类型。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//try-catch-finally异常处理方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; num1 / num2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(ArithmeticException e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//捕获不同的异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//程序捕获到异常后，将其封装成一个Exception对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//不管是否捕获到异常，始终执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//throws异常处理方式，返回给上一级函数处理，是系统默认的处理方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;f3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  f5();&lt;span class=&#34;comment&#34;&gt;//会被标红，因为f2抛出的是编译异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;f2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; FileNotFoundException&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//使用throws抛出异常，让调用f2方法的调用者(方法)处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;常见运行异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见运行异常&#34;&gt;#&lt;/a&gt; 常见运行异常&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NullPointerException&lt;/td&gt;
&lt;td&gt;空指针异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArithmeticException&lt;/td&gt;
&lt;td&gt;数学运算异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayIndexOutOfBoundException&lt;/td&gt;
&lt;td&gt;数组下标越界异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClassCastException&lt;/td&gt;
&lt;td&gt;类型转换异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NumberFormatException&lt;/td&gt;
&lt;td&gt;数字格式不正确异常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第十一章-常用类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十一章-常用类&#34;&gt;#&lt;/a&gt; 第十一章 常用类&lt;/h1&gt;
&lt;h2 id=&#34;包装类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包装类&#34;&gt;#&lt;/a&gt; 包装类&lt;/h2&gt;
&lt;p&gt;包装类是针对 8 种基本数据类型对应的引用类型。&lt;/p&gt;
&lt;p&gt;jdk5 以后实现了自动装箱和自动拆箱。&lt;/p&gt;
&lt;p&gt;三元运算符是一个整体，取最高精度。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//装箱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;integer1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Integer.valueOf(n1);&lt;span class=&#34;comment&#34;&gt;//手动装箱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;integer2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; n1;&lt;span class=&#34;comment&#34;&gt;//自动装箱，底层使用的仍是valueOf方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//拆箱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; integer1.intValue();&lt;span class=&#34;comment&#34;&gt;//手动拆箱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; integer2;&lt;span class=&#34;comment&#34;&gt;//自动拆箱，底层使用的仍是intValue方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;包装类与string转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包装类与string转换&#34;&gt;#&lt;/a&gt; 包装类与 String 转换&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//包装类转String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方式一，i本身没变化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; i + &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方式二,使用包装类的toString方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; i.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str3&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; String.valueOf(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//String转包装类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str4&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Integer.parseInt(str4);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i3&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Integer&lt;/span&gt;(str4);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;例题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例题&#34;&gt;#&lt;/a&gt; 例题&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;obj1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; ? &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Integer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Double&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(obj1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//输出结果为1.0，因为三元运算符为一个整体，最高为Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Integer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Integer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(i==j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//输出FALSE，i和j此时是对象，对象相等判断地址是否相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(m==n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//返回True，自动装箱底层是valueOf方法，在范围-128~127正确，这个数组是事先加载好的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(i==j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//返回True，只要有基本数据类型，判断的是值是否相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;string类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#string类&#34;&gt;#&lt;/a&gt; String 类&lt;/h2&gt;
&lt;p&gt;String 实现了 Serializable 接口，说明 String 可以串行化，即可以在网络中传输；Comparable 接口表示可以比较。&lt;/p&gt;
&lt;p&gt;字符串的字符使用 Unicode 编码，一个字符（不区分字母还是汉字）占两个字节。&lt;/p&gt;
&lt;p&gt;String 是 final 类，不能被其他的类继承。&lt;/p&gt;
&lt;p&gt;String 有属性 value [] 用于存放字符串内容，值得注意的是，该属性为 final，不可修改地址。&lt;/p&gt;
&lt;h3 id=&#34;两种创建方法的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#两种创建方法的区别&#34;&gt;#&lt;/a&gt; 两种创建方法的区别&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Srting s = &#39;hsp&#39;&lt;/code&gt; : 先从常量池查看是否有 “hsp” 数据空间，如果有则直接指向；如果没有则重新创建，然后指向，S 最终指向的是&lt;strong&gt;常量池&lt;/strong&gt;的空间地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;String s = new String(&amp;quot;hsp&amp;quot;)&lt;/code&gt; : 先在堆中创建空间，里面维护了 value 属性，指向常量池的 hsp 空间。如果常量池没有 “hsp”，重新创建，有则通过 value 指向。最终指向的是&lt;strong&gt;堆&lt;/strong&gt;中的空间地址。可以使用 intern 方法返回常量池的地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;String a = &amp;quot;hello&amp;quot;+&amp;quot;abc&amp;quot;;&lt;/code&gt;  只创建了一个对象，因为编译器会将其优化，先进行拼接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;String s = a + &amp;quot;hello&amp;quot;&lt;/code&gt;  底层会调用 StringBuilder，所以会指向&lt;strong&gt;堆&lt;/strong&gt;中的空间地址。&lt;/p&gt;
&lt;h3 id=&#34;string常用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#string常用方法&#34;&gt;#&lt;/a&gt; String 常用方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;equals&lt;/td&gt;
&lt;td&gt;区分大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equalsIgnoreCase&lt;/td&gt;
&lt;td&gt;忽略大小写判断内容是否相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;length&lt;/td&gt;
&lt;td&gt;字符的个数，字符串的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indexOf&lt;/td&gt;
&lt;td&gt;获取字符第一次出现的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastIndexOf&lt;/td&gt;
&lt;td&gt;获取字符最后一次出现的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;substring&lt;/td&gt;
&lt;td&gt;截取指定范围的子串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trim&lt;/td&gt;
&lt;td&gt;去前后空格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;charAt&lt;/td&gt;
&lt;td&gt;获取某索引出的字符，注意不能使用 str [index] 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;contact&lt;/td&gt;
&lt;td&gt;拼接字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;replace&lt;/td&gt;
&lt;td&gt;替换字符串，原字符串不变化，返回的结果才是替换的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;split&lt;/td&gt;
&lt;td&gt;分割字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;toCharArray&lt;/td&gt;
&lt;td&gt;转换为字符数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compareTo&lt;/td&gt;
&lt;td&gt;比较大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;format&lt;/td&gt;
&lt;td&gt;格式化字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;例题-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例题-2&#34;&gt;#&lt;/a&gt; 例题&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test1&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hsp&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;[] ch = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;j&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;v&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String str,&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; ch[])&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    str = &lt;span class=&#34;string&#34;&gt;&amp;quot;java&amp;quot;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//String类的更新实际上是更改地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;h&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Text1&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ex&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ex.change(ex.str,ex.ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  System.out.println(ex.str+&lt;span class=&#34;string&#34;&gt;&amp;quot;and&amp;quot;&lt;/span&gt;+ex.ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//输出hspandhava&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;stringbuffer-stringbuilder类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stringbuffer-stringbuilder类&#34;&gt;#&lt;/a&gt; StringBuffer、StringBuilder 类&lt;/h2&gt;
&lt;p&gt;StringBuffer 是一个容器，代表可变的字符序列，可以对字符串内容进行删减。&lt;/p&gt;
&lt;p&gt;String 保存的是字符串常量，里面的值不能更改，每次 String 类的实际上就是更改地址，效率较低；StringBuffer 值存放在堆中，每次更新实际上可以更新内容，不用每次更新地址。&lt;/p&gt;
&lt;p&gt;StringBuilder 一个可变的字符序列，提供与 StringBuffer 兼容的 API，但不保证同步，不是线程安全。其作为 StringBuffer 的一个简易替换，用于字符串缓冲区被单个线程使用，速度快于 StringBuffer。&lt;/p&gt;
&lt;h3 id=&#34;string与stringbuffer转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#string与stringbuffer转换&#34;&gt;#&lt;/a&gt; String 与 StringBuffer 转换&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//String转StringBuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hello tom&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;strB&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringBuffer&lt;/span&gt;(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//StringBuffer转String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; strB.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(strB);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;stringbuffer常用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stringbuffer常用方法&#34;&gt;#&lt;/a&gt; StringBuffer 常用方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;append&lt;/td&gt;
&lt;td&gt;在末尾追加字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete(start,end)&lt;/td&gt;
&lt;td&gt;删除区间内字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;replace(start,end,string)&lt;/td&gt;
&lt;td&gt;将 start 到 end 中的字符替换成 string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indexOf&lt;/td&gt;
&lt;td&gt;查找子串第一次出现的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;插入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;length&lt;/td&gt;
&lt;td&gt;获取长度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;例题-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例题-3&#34;&gt;#&lt;/a&gt; 例题&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sb&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringBuffer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sb.append(str);&lt;span class=&#34;comment&#34;&gt;//底层调用的是AbstractStringBuilder的appendNull，返回一个null字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(sb.length());&lt;span class=&#34;comment&#34;&gt;//输出4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(sb);&lt;span class=&#34;comment&#34;&gt;//输出null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sb1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringBuffer&lt;/span&gt;(str);&lt;span class=&#34;comment&#34;&gt;//底层super(str.length()+16),length方法抛出空指针异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;math类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#math类&#34;&gt;#&lt;/a&gt; Math 类&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abs&lt;/td&gt;
&lt;td&gt;绝对值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pow&lt;/td&gt;
&lt;td&gt;求幂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ceil&lt;/td&gt;
&lt;td&gt;向下取整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;floor&lt;/td&gt;
&lt;td&gt;向上取整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;round&lt;/td&gt;
&lt;td&gt;四舍五入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sqrt&lt;/td&gt;
&lt;td&gt;开平方&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;random&lt;/td&gt;
&lt;td&gt;返回 [0-1) 的随机数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;td&gt;最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;arrays类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arrays类&#34;&gt;#&lt;/a&gt; Arrays 类&lt;/h2&gt;
&lt;h3 id=&#34;常用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用方法&#34;&gt;#&lt;/a&gt; 常用方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;toString&lt;/td&gt;
&lt;td&gt;返回数组的字符串形式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sort&lt;/td&gt;
&lt;td&gt;排序，分为自然排序和定制排序，因为数组是引用类型，所以会影响到实参&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;binarySearch&lt;/td&gt;
&lt;td&gt;二分查找，要求已排序数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;copyOf&lt;/td&gt;
&lt;td&gt;拷贝 n 个元素到新数组中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fill&lt;/td&gt;
&lt;td&gt;数组填充，将原来的元素全部替换成新元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equals&lt;/td&gt;
&lt;td&gt;比较两个数组元素内容是否完全一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;asList&lt;/td&gt;
&lt;td&gt;将一组数据转换为 list&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;定制排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定制排序&#34;&gt;#&lt;/a&gt; 定制排序&lt;/h4&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//定制排序是通过传入一个接口Comparator实现定制排序规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Arrays.sort(arr,&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Comparator&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(object o1,object o2)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (Integer) o1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (Integer) o2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; i2 - i1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;system类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#system类&#34;&gt;#&lt;/a&gt; System 类&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;exit&lt;/td&gt;
&lt;td&gt;退出当前程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arraycopy&lt;/td&gt;
&lt;td&gt;复制数组元素，比较适合底层调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;currentTimeMillens&lt;/td&gt;
&lt;td&gt;返回当前时间距离 1970-1-1 的毫秒数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gc&lt;/td&gt;
&lt;td&gt;垃圾回收机制&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;biginteger和bigdecimal&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#biginteger和bigdecimal&#34;&gt;#&lt;/a&gt; BigInteger 和 BigDecimal&lt;/h2&gt;
&lt;p&gt;BigInteger 适合保存比较大的整型，BigDecimal 适合保存精度更高的浮点型。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//声明BigInteger&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;big1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BigInteger&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;57987978979879879&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;big2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BigInteger&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;989898989898899879&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//在对BigInteger进行加减乘除的时候，需要使用对应的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; big1.add(big2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; big1.substract(big2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;mul&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; big1.multiply(big2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; big1.divide(big2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//声明BigDecimal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigDecimal&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dec1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BigDecimal&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;489.5646545644454465&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigDecimal&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dec2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BigDecimal&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;8978978.564654564564544565&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//加减乘的方法与上面BigInteger相同，除法可能出现异常，结果可能无限循环小数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//在调用除法时，指定精度,ROUND_CEILING保留被除数原有的精度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; dec1.divide(dec2,BigDecimal.ROUND_CEILING);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;日期类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日期类&#34;&gt;#&lt;/a&gt; 日期类&lt;/h2&gt;
&lt;h3 id=&#34;第一代日期类date&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一代日期类date&#34;&gt;#&lt;/a&gt; 第一代日期类 Date&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;精确到毫秒，代表特定的瞬间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleDateFormat&lt;/td&gt;
&lt;td&gt;格式和解析日期的类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;d1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Date&lt;/span&gt;();&lt;span class=&#34;comment&#34;&gt;//获取日期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;SimpleDateFormat&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sdf&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SimpleDateFormat&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;yyyy年MM月dd日 hh:mm:ss E&amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//设定格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; sdf.format(d1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;1996年01月01日 10:20:30 星期一&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; sdf.parse(s);&lt;span class=&#34;comment&#34;&gt;//将格式化字符串转化为日期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;第二代日期类calendar&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二代日期类calendar&#34;&gt;#&lt;/a&gt; 第二代日期类 Calendar&lt;/h3&gt;
&lt;p&gt;Calender 是一个抽象类，并且构造器是 private，可以通过 getInstance () 来获取实例。&lt;/p&gt;
&lt;p&gt;存在的问题：可变性、偏移性、不可格式化、线程不安全、不能处理闰秒。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Calendar&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Calendar.getInstance();&lt;span class=&#34;comment&#34;&gt;//创建日历对象，不能使用new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//获取日历对象的字段，使用get方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;月：&amp;quot;&lt;/span&gt;+(c.get(Calendar.MONTH)+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;span class=&#34;comment&#34;&gt;//月份从0开始，所以需要加1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;第三代日期类localdatetime&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三代日期类localdatetime&#34;&gt;#&lt;/a&gt; 第三代日期类 LocalDateTime&lt;/h3&gt;
&lt;p&gt;LocalDate 只包含日期，LocalTime 只包含时间，LocalDateTime 日期和时间都包含。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ldt&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; LocalDateTime.now();&lt;span class=&#34;comment&#34;&gt;//创建对象，不能new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;月=&amp;quot;&lt;/span&gt; + ldt.getMonth());&lt;span class=&#34;comment&#34;&gt;//返回JULY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;月=&amp;quot;&lt;/span&gt; + ldt.getMonthValue());&lt;span class=&#34;comment&#34;&gt;//返回7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//使用DateTimeFormatter对象格式化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;DateTimeFormatter&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dtf&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; DateTimeFormatter.ofPattern(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;yyyy年MM月dd日 HH小时mm分钟ss秒&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; dft.format(ldt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Instant时间戳，与Date相互转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Instant&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Instant.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Date.from(now);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Instant&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;instant&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; date.toInstant();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//提供plus和minus方法对当前日期进行加减操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ldt1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ldt.plusDays(&lt;span class=&#34;number&#34;&gt;890&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//890天后的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ldt1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ldt.minusMinutes(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//8分钟前的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;练习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#练习&#34;&gt;#&lt;/a&gt; 练习&lt;/h2&gt;
&lt;p&gt;编程技巧：对函数进行验证时，先写出正确的情况，然后取反即可。&lt;/p&gt;
&lt;h1 id=&#34;第十二章-集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十二章-集合&#34;&gt;#&lt;/a&gt; 第十二章 集合&lt;/h1&gt;
&lt;p&gt;集合可以动态保存任意多个对象，使用比较方便，并提供了一系列方便操作对象的方法。&lt;/p&gt;
&lt;p&gt;集合主要分为单列集合 (Collection) 和双列集合 (Map, 一般以键值对形式存在)。&lt;/p&gt;
&lt;h2 id=&#34;collection接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#collection接口&#34;&gt;#&lt;/a&gt; Collection 接口&lt;/h2&gt;
&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/f59eb486d97f8445f82ac823e1181265.png&#34;
                      alt=&#34;Collection接口&#34; style=&#34;zoom:67%;&#34; 
                &gt;
&lt;h3 id=&#34;collection常用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#collection常用方法&#34;&gt;#&lt;/a&gt; Collection 常用方法&lt;/h3&gt;
&lt;p&gt;Collection 接口没有被实例化，以实现子类 ArrayList 来演示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;add&lt;/td&gt;
&lt;td&gt;增加元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remove&lt;/td&gt;
&lt;td&gt;删除元素，指定删除元素会返回布尔值，指定对象则返回被删除对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;contains&lt;/td&gt;
&lt;td&gt;查找元素是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;返回元素个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isEmpty&lt;/td&gt;
&lt;td&gt;判断是否为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clear&lt;/td&gt;
&lt;td&gt;清空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addAll&lt;/td&gt;
&lt;td&gt;添加多个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;containsAll&lt;/td&gt;
&lt;td&gt;查找多个元素是否都存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;removeAll&lt;/td&gt;
&lt;td&gt;删除多个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;迭代器的执行原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#迭代器的执行原理&#34;&gt;#&lt;/a&gt; 迭代器的执行原理&lt;/h3&gt;
&lt;p&gt;快捷键 itit 快速生成 while 循环，而且 ctrl+j 可以查看所有快捷键。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;iterator&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; col.iterator();&lt;span class=&#34;comment&#34;&gt;//获取迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(iterator.hasNext())&amp;#123;&lt;span class=&#34;comment&#34;&gt;//判断是否有下一元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; iterator.next();&lt;span class=&#34;comment&#34;&gt;//返回下一元素，类型为Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iterator = col.iterator();&lt;span class=&#34;comment&#34;&gt;//重置迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//增强for循环，简化版的iterator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Object book:col)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;book=&amp;quot;&lt;/span&gt; + book);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;list接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#list接口&#34;&gt;#&lt;/a&gt; List 接口&lt;/h3&gt;
&lt;p&gt;List 集合类中元素有序（即添加顺序和取出顺序一致），且可重复。&lt;/p&gt;
&lt;p&gt;List 集合中的每个元素都有其对应的顺序索引，支持索引，可以根据序号存取容器中的元素。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;add(int index,Object ele)&lt;/td&gt;
&lt;td&gt;在 index 位置插入 ele 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addAll(int index,Collection eles)&lt;/td&gt;
&lt;td&gt;从 index 位置开始将 eles 的元素添加进来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;获取指定位置的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indexOf&lt;/td&gt;
&lt;td&gt;返回元素在集合中首次出现的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastIndexOf&lt;/td&gt;
&lt;td&gt;返回元素在集合中最后出现的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remove&lt;/td&gt;
&lt;td&gt;删除指定位置的元素，并返回该元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set(int index,Object ele)&lt;/td&gt;
&lt;td&gt;设置指定位置的元素为 ele，相当于替换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subList(int from,int to)&lt;/td&gt;
&lt;td&gt;返回从 from 到 to 的子集合&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;arraylist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arraylist&#34;&gt;#&lt;/a&gt; ArrayList&lt;/h4&gt;
&lt;p&gt;ArrayList 可以放入 null，而且可以放多个。&lt;/p&gt;
&lt;p&gt;ArrayList 底层是由数组实现数据存储的，维护了一个 Object 类型的数组 elementData []。当创建 ArrayList 对象时，如果使用无参构造器，则 elementData&lt;strong&gt; 容量为 0&lt;/strong&gt;，第一次添加时则扩容 elementData 为&lt;strong&gt; 10&lt;/strong&gt;，如需要再次扩容，则扩容 elementData 为&lt;strong&gt; 1.5 倍&lt;/strong&gt;。如果使用的是指定大小的构造器，则初始扩容 elementData 为指定大小，如需要再次扩容，则扩容 elementData 为&lt;strong&gt; 1.5 倍&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;ArrayList 基本等同于 Vector，除了 ArrayList 是线程不安全的（执行效率高），在多线程情况下，建议使用 Vector。&lt;/p&gt;
&lt;p&gt;transient 关键字表示该属性不会被序列化。&lt;/p&gt;
&lt;h4 id=&#34;vector&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vector&#34;&gt;#&lt;/a&gt; Vector&lt;/h4&gt;
&lt;p&gt;Vector 底层也是一个对象数组，维护了一个 Object 类型的数组 elementData []。当创建 Vector 对象时，如果使用无参构造器，则调用有参构造器，设置&lt;strong&gt;容量为 10&lt;/strong&gt;，需要扩容，则扩容 elementData 为&lt;strong&gt; 2 倍&lt;/strong&gt;。如果使用的是指定大小的构造器，则初始扩容 elementData 为指定大小，如需要再次扩容，则扩容 elementData 为&lt;strong&gt; 2 倍&lt;/strong&gt;。不过扩容大小可以自行指定。&lt;/p&gt;
&lt;p&gt;与 ArrayList 不同的是，Vector 是线程同步的，即线程安全的，带有 synchronized 关键字。&lt;/p&gt;
&lt;h4 id=&#34;linkedlist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linkedlist&#34;&gt;#&lt;/a&gt; LinkedList&lt;/h4&gt;
&lt;p&gt;LinkedList 底层实现了双向链表和双端队列，可以添加任意元素，且元素可以重复或为 null，但线程不安全，没有实现同步。&lt;/p&gt;
&lt;h3 id=&#34;set接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set接口&#34;&gt;#&lt;/a&gt; Set 接口&lt;/h3&gt;
&lt;p&gt;Set 接口是无序的，即添加和取出的顺序不一致 (但是取出的顺序是固定的)，没有索引；不允许重复数据，使用最多只有一个 null。&lt;/p&gt;
&lt;p&gt;同 Collection 的迭代方式一样，因为 Set 接口是 Collection 接口的子接口，可以使用迭代器和增强 for，但是不能使用索引的方式来获取。&lt;/p&gt;
&lt;h4 id=&#34;hashset&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hashset&#34;&gt;#&lt;/a&gt; HashSet&lt;/h4&gt;
&lt;p&gt;HashSet 的底层其实是 HashMap，而 HashMap 的底层是数组 + 链表 + 红黑树，在数据量小的时候为哈希中的拉链法，数据量大时会转化为红黑树。&lt;/p&gt;
&lt;p&gt;在添加数据时，先得到 hash 值，然后会转化为索引值，找到索引位置后判断是否已有元素，没有则直接加入，有则逐个调用 equals 方法比较，如果相同则放弃添加，否则将其添加到最后。在 java8 中，如果一条链表的元素个数超过 TREEIFY-THRESHOLD (默认是 8)，而且数组大小大于等于 MIN-TREEIFY-CAPACITY (默认为 64)，就会进行红黑树化。&lt;/p&gt;
&lt;p&gt;第一次添加时，table 扩容到 16，临界值为容量 * 加载因子 0.75 为 12。到达临界值后，会扩容 2 倍到 32，因此新的临界值等于 32 乘以 0.75=24，以此类推。还有一种导致扩容的情况是单条链已经超越 TREEIFY-THRESHOLD (默认是 8)，每超越一次，触发一次扩容。该容量是指元素的个数，不是只计算在第一个位置上的。&lt;/p&gt;
&lt;p&gt;LinkedHashSet 是 HashSet 的子类，底层是 LinkedHashMap，维护了一个数组 + 双向链表。其使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。第一次添加时，直接将数组扩容到 16，数组类型是 &lt;code&gt;HashMap$Node&lt;/code&gt;  存放的结点类型是 &lt;code&gt;LinkedHashMap$Entry&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//HashSet不能添加相同的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Dog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Dog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;));&lt;span class=&#34;comment&#34;&gt;//是可以的，因为是两个不同的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hsp&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hsp&amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//是不可以的，因为按照String的equals方法判断，两者是相同的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//哈希计算公式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hash = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; ? &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:(h = key.hashcode())^(h&amp;gt;&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//相等判断,equals会根据key进行动态绑定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(k = e.key) == key || (key != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; key.equals(k))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h4 id=&#34;treeset&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#treeset&#34;&gt;#&lt;/a&gt; TreeSet&lt;/h4&gt;
&lt;p&gt;TreeSet 的底层是 TreeMap，可以进行排序，可以通过传入一个比较器 (匿名内部类) 来实现排序效果。构造器把传入的比较器对象赋给 TreeSet 底层的 TreeMap 的属性 this.comparator。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;TreeSet&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;treeset&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TreeSet&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Comparator&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(object o1,object o2)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ((String) o1).compareTo((String) o2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;不允许传入相同 (以 Comparator 为准) 的元素，如果设定比较长度，则长度一样的不能加入。&lt;/p&gt;
&lt;h2 id=&#34;mapjdk8&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mapjdk8&#34;&gt;#&lt;/a&gt; Map(JDK8)&lt;/h2&gt;
&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/01ad78be19da71cc384c01b6b8deeebb.png&#34;
                      alt=&#34;Map接口&#34; style=&#34;zoom:50%;&#34; 
                &gt;
&lt;p&gt;Map 用于具有映射关系的数据，key 和 value 可以是任何引用类型的数据，会封装到 HashMap$Node 对象中。key 不允许重复，但允许为 null，而 value 允许重复，这种情况相当于进行替换。&lt;/p&gt;
&lt;p&gt;常用 String 类作为 Map 的 key。key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value。&lt;/p&gt;
&lt;p&gt;HashMap 是 Map 接口使用频率最高的实现类，其没有实现同步，因此是线程不安全。&lt;/p&gt;
&lt;p&gt;HashTable 的键和值都不能为 null，而且是线程安全的。HashTable 的元素是 HashTable$Entry 类型的，使用 addEntry 方法添加元素。其初始容量为 11，扩容为 2 倍 + 1。&lt;/p&gt;
&lt;p&gt;Properties 还可以从 xxx.propertises 文件 (作为配置文件) 中加载数据到 Properties 类对象，并进行读取和修改&lt;/p&gt;
&lt;h3 id=&#34;map常用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map常用方法&#34;&gt;#&lt;/a&gt; Map 常用方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;put&lt;/td&gt;
&lt;td&gt;添加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remove&lt;/td&gt;
&lt;td&gt;根据键删除映射关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;根据键获取值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;获取元素个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isEmpty&lt;/td&gt;
&lt;td&gt;判断是否为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clear&lt;/td&gt;
&lt;td&gt;清除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;containsKey&lt;/td&gt;
&lt;td&gt;查找键是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keySet&lt;/td&gt;
&lt;td&gt;获取所有的键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;entrySet&lt;/td&gt;
&lt;td&gt;获取所有的关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;values&lt;/td&gt;
&lt;td&gt;获取所有的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;map遍历方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map遍历方式&#34;&gt;#&lt;/a&gt; Map 遍历方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;先取出所有的 key，通过 key 取出对应的 value。&lt;/li&gt;
&lt;li&gt;把所有 values 取出。&lt;/li&gt;
&lt;li&gt;通过 entrySet 方法获取，集合存放的数据的元素类型是 Entry，提供了 getKey 和 getValue 方法。&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; map.entrySet();&lt;span class=&#34;comment&#34;&gt;//转换成entry类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Object obj:set)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Map.&lt;span class=&#34;type&#34;&gt;Entry&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (Map.Entry) obj;&lt;span class=&#34;comment&#34;&gt;//向下转型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  System.out.println(entry.getKey() + &lt;span class=&#34;string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; +entry.getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;collections工具类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#collections工具类&#34;&gt;#&lt;/a&gt; Collections 工具类&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Collections的方法都是静态方法，传入参数即可调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collections.sort(list);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;reverse&lt;/td&gt;
&lt;td&gt;反转 List 中元素的顺序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shuffle&lt;/td&gt;
&lt;td&gt;对 List 中元素进行随机排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sort&lt;/td&gt;
&lt;td&gt;对 List 元素进行升序排序，可以自行指定排序接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swap&lt;/td&gt;
&lt;td&gt;交换 List 中两个元素的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;td&gt;返回集合中的最大元素，可以自行指定排序接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;返回集合中的最小元素，可以自行指定排序接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frequency&lt;/td&gt;
&lt;td&gt;返回集合中指定元素的出现次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;copy(List dest,List src)&lt;/td&gt;
&lt;td&gt;将一个 src 复制到 dest 中，需要 dest 的大小大于等于 src&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;replaceAll&lt;/td&gt;
&lt;td&gt;使用新值替换 List 中的所有值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;例题-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例题-4&#34;&gt;#&lt;/a&gt; 例题&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;TreeSet&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;treeset&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TreeSet&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//add方法，因为构造器没有传入Comparator接口的匿名内部类，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//所以底层会将尝试将Person转为Comparable类型，而Person没有实现，因此会报错，解决方法是实行Comparable接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;treeset.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Person&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//修改了hashcode为id和name绑定，equals是判断id和name是否相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;HashSet&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashSet&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1001&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;AA&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1002&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;BB&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.add(p1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.add(p2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p1.name = &lt;span class=&#34;string&#34;&gt;&amp;quot;CC&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.remove(p1);&lt;span class=&#34;comment&#34;&gt;//由于此时p1已被改变，哈希值改变，不能查找到原来位置，删除失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1001&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;AA&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//p1的name发生改变，但在内部存储的位置不变，和新加入的不相同，所以能成功加入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;第十三章-泛型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十三章-泛型&#34;&gt;#&lt;/a&gt; 第十三章 泛型&lt;/h1&gt;
&lt;p&gt;传统方法不能对加入到集合中的数据进行约束，而且遍历的时候，需要类型转换，如果集合中的数据量较大，对效率有影响。&lt;/p&gt;
&lt;p&gt;泛型又称参数化类型，是 JDK5 出现的新特性，解决数据类型的安全性问题，在类声明或实例化时只要指定需要的具体类型即可。&lt;/p&gt;
&lt;p&gt;泛型的作用是在类声明时通过一个标识表示类中某个属性的类型，或者某个方法的返回值类型，或者参数类型。&lt;/p&gt;
&lt;p&gt;JUnit 单元测试框架首先输入 &lt;code&gt;@Test&lt;/code&gt; ，然后在后面按 &lt;code&gt;alt+enter&lt;/code&gt; ，然后点击方法旁边的运行键即可。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ArrayList&amp;lt;Dog&amp;gt; arraylist = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Dog&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ArrayList&amp;lt;Dog&amp;gt; arraylist = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;span class=&#34;comment&#34;&gt;//简写形式，推荐使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Dog dog:arraylist)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//此时可以不再使用Object类，直接使用Dog，不用进行类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Person&lt;/span&gt;&amp;lt;T&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  T s;&lt;span class=&#34;comment&#34;&gt;//此时s的数据类型指定的泛型决定&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  T[] ts = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;T&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;];&lt;span class=&#34;comment&#34;&gt;//错误的，使用泛型的数组，不能初始化，因为数组在new不能确定T的类型，就无法在内存中开空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T s)&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//T可以是参数类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.s = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; T &lt;span class=&#34;title function_&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//E可以是返回类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;&amp;lt;M,R&amp;gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(M m,R r)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//泛型方法，调用方法声明的泛型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fly1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T t)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//不能称作泛型方法，只是使用了泛型，里面的泛型只能使用类声明的泛型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T t)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//静态方法不能使用泛型，因为静态是和类相关的，所以无法得知泛型的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IA&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IUsb&lt;/span&gt;&amp;lt;String,Double&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//在继承接口时指定泛型接口的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IUsb&lt;/span&gt;&amp;lt;U,R&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;泛型使用细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#泛型使用细节&#34;&gt;#&lt;/a&gt; 泛型使用细节&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;泛型只能是引用类型，不可以是基本数据类型。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();&lt;span class=&#34;comment&#34;&gt;//True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; list2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;();&lt;span class=&#34;comment&#34;&gt;//False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在给泛型指定具体类型后，可以传入该类型或其子类类型。&lt;/li&gt;
&lt;li&gt;如果没有指定泛型，则默认是 Object 类。&lt;/li&gt;
&lt;li&gt;使用泛型的数组，不能初始化，因为数组在 new 不能确定 T 的类型，就无法在内存中开空间。&lt;/li&gt;
&lt;li&gt;静态方法不能使用泛型，因为静态是和类相关的，所以无法得知泛型的类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;泛型的通配符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#泛型的通配符&#34;&gt;#&lt;/a&gt; 泛型的通配符&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//泛型不具备继承性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Object&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//&amp;lt;?&amp;gt;:支持任意泛型类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//&amp;lt;? extends A&amp;gt;:支持A类以及A类的子类，规定了泛型的上限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//&amp;lt;? super A&amp;gt;:支持A类以及A类的父类，不限于直接父类，规定了泛型的下限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;第十四章-坦克大战&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十四章-坦克大战&#34;&gt;#&lt;/a&gt; 第十四章 坦克大战&lt;/h1&gt;
&lt;p&gt;写并发程序，一定要考虑清楚，该线程什么时候结束。&lt;/p&gt;
&lt;p&gt;线程消亡了不代表它的对象会变为 null。&lt;/p&gt;
&lt;p&gt;主要实现了英雄坦克和敌人坦克的范围内移动和子弹的发射功能，还有子弹击中效果实现。&lt;/p&gt;
&lt;h2 id=&#34;绘图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绘图&#34;&gt;#&lt;/a&gt; 绘图&lt;/h2&gt;
&lt;p&gt;当组件第一次在屏幕显示的时候，程序会自动的调用 paint () 方法来绘制组件，还有在窗口最小化后在最大化；窗口的大小发生变化；repaint 函数被调用。&lt;/p&gt;
&lt;p&gt;画笔基础 JPanel 画笔类，主类继承 JFrame 画框类，这样才能画出图像。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DrawCircle&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;JFrame&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//JFrame相当于画框&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;MyPenal&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DrawCircle&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;DrawCircle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//初始化面板&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyPenal&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//将面板放入到画框中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.add(mp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//设置画框大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.setSize(&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&lt;span class=&#34;comment&#34;&gt;//点击关闭按钮后程序退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.setVisible(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//可以显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyPenal&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;JPanel&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;paint&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Graphics g)&lt;/span&gt; &amp;#123;&lt;span class=&#34;comment&#34;&gt;//绘图方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.paint(g);&lt;span class=&#34;comment&#34;&gt;//调用父类方法完成初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//此处画椭圆的x,y不是圆心的坐标，而是椭圆形成的长方形的左上角坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g.setColor(Color.BLUE);&lt;span class=&#34;comment&#34;&gt;//设置颜色为蓝色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g.drawOval(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//绘制图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Image&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(&lt;span class=&#34;string&#34;&gt;&amp;quot;/哈哈.jpg&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g.drawImage(image,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//绘制文字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g.setColor(Color.red);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g.setFont(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Font&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;宋体&amp;quot;&lt;/span&gt;,Font.BOLD,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g.drawString(&lt;span class=&#34;string&#34;&gt;&amp;quot;北京你好&amp;quot;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//此处的x,y位置为左下角&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;常用方法-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用方法-2&#34;&gt;#&lt;/a&gt; 常用方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;drawLine&lt;/td&gt;
&lt;td&gt;画直线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;drawRect&lt;/td&gt;
&lt;td&gt;画矩形边框&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;drawOval&lt;/td&gt;
&lt;td&gt;画椭圆边框&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fillRect&lt;/td&gt;
&lt;td&gt;填充矩形&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fillOval&lt;/td&gt;
&lt;td&gt;填充椭圆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;drawImage&lt;/td&gt;
&lt;td&gt;画图片，图片需要放在 out 文件夹下的 idea 文件夹下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;drawString&lt;/td&gt;
&lt;td&gt;画字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setFont&lt;/td&gt;
&lt;td&gt;设置画笔的字体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setColor&lt;/td&gt;
&lt;td&gt;设置画笔的颜色&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;事件处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件处理&#34;&gt;#&lt;/a&gt; 事件处理&lt;/h2&gt;
&lt;p&gt;java 事件处理是采用 “委派事件模型”，当事件发生时，产生事件的对象，会将此 “信息” 传递给 “事件的监听者” 处理。&lt;/p&gt;
&lt;p&gt;控制小球移动需要画笔实现 KeyListener 接口监听键盘的操作，以实现对小球的控制，同时需要在主函数中监听对应的画笔才能实现功能。&lt;/p&gt;
&lt;p&gt;使用 getKeyCode () 方法可以获取键盘输入，每当发生变化时需要调用 repaint 方法进行图像重绘。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BallMove&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;JFrame&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;MyPenal&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;BallMove&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ballMove&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BallMove&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;BallMove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyPenal&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.add(mp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.setSize(&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//窗口JFrame可以监听键盘事件，即可以监听面板发生的键盘事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.addKeyListener(mp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.setVisible(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//面板，可以画小球&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//KeyListener是一个监听器，可以监听键盘时间，可以点击显示上下文生成三个需要实现的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyPenal&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;JPanel&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;KeyListener&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//为了小球可以移动，把左上角坐标设置为变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;paint&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Graphics g)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.paint(g);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g.fillOval(x, y, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//监听有字符输出时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;keyTyped&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(KeyEvent e)&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//当某个键被按下时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;keyPressed&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(KeyEvent e)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//System.out.println((char) e.getKeyCode() + &amp;quot;被按下&amp;quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//根据用户按下的不同键，来处理小球的移动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (e.getKeyCode() == KeyEvent.VK_DOWN) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//向下的箭头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(e.getKeyCode()==KeyEvent.VK_UP)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(e.getKeyCode()==KeyEvent.VK_LEFT)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(e.getKeyCode()==KeyEvent.VK_RIGHT)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//让画笔重绘图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.repaint();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//当某个键被释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;keyReleased&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(KeyEvent e)&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;第十五章-线程基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十五章-线程基础&#34;&gt;#&lt;/a&gt; 第十五章 线程 (基础)&lt;/h1&gt;
&lt;p&gt;** 在 java 中使用线程有两种方法，一种是继承 Thread 类，重写 run 方法；另一种是实行 Runnable，重写 run 方法。** 从 java 的设计来看，两者本质上没有区别，但实现 Runnable 接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制。&lt;/p&gt;
&lt;p&gt;Thread 类实现了 Runnable 接口的 run 方法。&lt;/p&gt;
&lt;p&gt;在控制台中输入 jconsole 可以查看线程信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为啥调用的是 start 方法，而不是 run 方法，因为 run 方法就是一个普通的方法，没有真正的启动一个线程，只是像以前一样顺序执行。线程是通过底层的 start0 方法实现的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当线程完成任务后会自动退出，除此之外还可以通过使用变量来控制 run 方法停止线程，即通知方式。&lt;/p&gt;
&lt;p&gt;用户线程：也叫工作线程，当线程的任务执行完成或通知方式结束。&lt;/p&gt;
&lt;p&gt;守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束。最常见的守护线程是垃圾回收机制。&lt;/p&gt;
&lt;p&gt;可以在方法上加上 synchronized 关键字来实现同步。同步方法如果没有使用 static 修饰，默认锁对象为 this，如果方法使用 static 修饰，默认锁对象为当前类.class。&lt;/p&gt;
&lt;p&gt;在代码块上加锁：同步方法（非静态的）的锁可以是 this，也可以是其他对象（要求是同一个对象）；而同步方法（静态的）的锁是当前类本身。&lt;/p&gt;
&lt;p&gt;线程同步关键在于要求多个线程的锁的对象为同一个即可。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Thread01&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Cat&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Cat&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cat.start();&lt;span class=&#34;comment&#34;&gt;//启动线程，是start方法而不是run方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//如果是通过继承Runnable接口的方法，没有start方法，则要使用下面的方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;thread1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Thread&lt;/span&gt;(cat);&lt;span class=&#34;comment&#34;&gt;//设计模式中的代理模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;thread2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Thread&lt;/span&gt;(cat);&lt;span class=&#34;comment&#34;&gt;//多个线程共享一个资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        thread1.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        thread2.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cat.setDaemon(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//设置为守护线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Cat&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Thread&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;span class=&#34;comment&#34;&gt;//重写run方法，写上自己的业务逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;)&amp;#123;&lt;span class=&#34;comment&#34;&gt;//给该代码块加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (time &amp;lt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;我是西芹啊&amp;quot;&lt;/span&gt; + (++time));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//休眠1秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;常用方法-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用方法-3&#34;&gt;#&lt;/a&gt; 常用方法&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;setName&lt;/td&gt;
&lt;td&gt;设置线程名称，使其与参数 name 相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getName&lt;/td&gt;
&lt;td&gt;返回线程的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;使该线程开始执行，java 虚拟机底层调用该线程的 start0 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;run&lt;/td&gt;
&lt;td&gt;调用线程对象 run 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setPriority&lt;/td&gt;
&lt;td&gt;更改线程的优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getPriority&lt;/td&gt;
&lt;td&gt;获取线程的优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sleep&lt;/td&gt;
&lt;td&gt;指定线程休眠的毫秒数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;interrupt&lt;/td&gt;
&lt;td&gt;中断线程，一般用于中断正在休眠的线程，此时会进入 catch 方法中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;线程的礼让，让出 CPU 使其他线程执行，但礼让的时间不确定，所以也不一定礼让成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;join&lt;/td&gt;
&lt;td&gt;线程的插队，插队的线程一旦插队成功，则肯定让先执行完插入的线程所有的任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getState&lt;/td&gt;
&lt;td&gt;获取线程当前状态&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;线程的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#线程的生命周期&#34;&gt;#&lt;/a&gt; 线程的生命周期&lt;/h2&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/197a9592f2d9e99b7739720a71f36c13.png&#34;
                      alt=&#34;线程的生命周期&#34;
                &gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;生命周期&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NEW&lt;/td&gt;
&lt;td&gt;尚未启动的线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RUNNABLE&lt;/td&gt;
&lt;td&gt;在 java 虚拟机中执行的线程，可细分为 READY 和 RUNNING 两种状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BLOCKED&lt;/td&gt;
&lt;td&gt;被阻塞等待监视器锁定的线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WAITTING&lt;/td&gt;
&lt;td&gt;正在等待另一个线程执行特定动作的线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIMED_WAITING&lt;/td&gt;
&lt;td&gt;正在等待另一个线程执行动作达到指定等待时间的线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TERMINATED&lt;/td&gt;
&lt;td&gt;已退出的线程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;释放锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#释放锁&#34;&gt;#&lt;/a&gt; 释放锁&lt;/h2&gt;
&lt;h3 id=&#34;释放锁情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#释放锁情况&#34;&gt;#&lt;/a&gt; 释放锁情况&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当前线程的同步方法、同步代码块执行结束。&lt;/li&gt;
&lt;li&gt;当前线程在同步方法、同步代码块中遇到 break、return。&lt;/li&gt;
&lt;li&gt;当前线程在同步方法、同步代码块中出现了未处理的 Error 或 Exception，导致异常结束。&lt;/li&gt;
&lt;li&gt;当前线程在同步方法、同步代码块中执行了线程对象的 wait () 方法，当前线程释放，并释放锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;不释放锁情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不释放锁情况&#34;&gt;#&lt;/a&gt; 不释放锁情况&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;线程执行同步方法、同步代码块时，程序调用了 Thread.sleep ()、Thread.yield () 方法暂停当前线程的执行，不会释放锁。&lt;/li&gt;
&lt;li&gt;线程执行同步代码块时，其他线程调用了该线程的 suspend () 方法将该线程挂起，不会释放锁。但应尽量避免使用 suspend () 和 resume () 来控制线程。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;第十六章-io文件流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十六章-io文件流&#34;&gt;#&lt;/a&gt; 第十六章 IO 文件流&lt;/h1&gt;
&lt;p&gt;当文件读取完成后应将子资源释放，避免造成浪费。&lt;/p&gt;
&lt;h2 id=&#34;新建文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新建文件&#34;&gt;#&lt;/a&gt; 新建文件&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//第一种方式:new File(String pathname)根据路径创建一个File对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;filePath&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;e:\\news1.txt&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//这里的File对象，在java程序中只是一个对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;(filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//第二种方式:new File(File parent,String child)根据父目录文件+子路径创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;parentFile&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;e:\\&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;fileName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;news2.txt&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;(parentFile, fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//第三种方法:new File(String parent,String child)根据父目录+子路径创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;parentPath&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;e:\\&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;fileName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;news3.txt&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;File&lt;/span&gt;(parentPath, fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//只有执行了createNewFile方法才会真正的在磁盘中创建该文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;file.createNewFile();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;常用方法-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用方法-4&#34;&gt;#&lt;/a&gt; 常用方法&lt;/h2&gt;
&lt;p&gt;在 java 编程中，目录也被当作是一种文件。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;getName&lt;/td&gt;
&lt;td&gt;获取文件名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getAbsolutePath&lt;/td&gt;
&lt;td&gt;获取绝对路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getParent&lt;/td&gt;
&lt;td&gt;获取文件父级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;length&lt;/td&gt;
&lt;td&gt;文件大小，按字节统计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exists&lt;/td&gt;
&lt;td&gt;文件或目录是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isFile&lt;/td&gt;
&lt;td&gt;是不是一个文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isDirectory&lt;/td&gt;
&lt;td&gt;是不是一个目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdir&lt;/td&gt;
&lt;td&gt;创建一级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdirs&lt;/td&gt;
&lt;td&gt;创建多级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;删除空目录或文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;close&lt;/td&gt;
&lt;td&gt;关闭输入输出流&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;输入流和输出流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入流和输出流&#34;&gt;#&lt;/a&gt; 输入流和输出流&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;抽象基类&lt;/th&gt;
&lt;th&gt;字节流 (二进制文件)&lt;/th&gt;
&lt;th&gt;字符流 (文本文件)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;输入流&lt;/td&gt;
&lt;td&gt;InputStream&lt;/td&gt;
&lt;td&gt;Reader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输出流&lt;/td&gt;
&lt;td&gt;OutputStream&lt;/td&gt;
&lt;td&gt;Writer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;InputStream 常用子类：文件输入流 FileInputStream、缓冲字节输入流 BufferedInputStream、对象字节输入流 ObjectInputStream。&lt;/p&gt;
&lt;p&gt;可以使用 String 中的 getBytes () 方法将字符串转换为字符数组，使其可以使用 write 方法写入到文件中： &lt;code&gt;fileOutputStream.write(str.getBytes());&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;FileWriter 使用后，必须要关闭 (close) 或刷新 (flush)，否则写入不到指定的文件。&lt;/p&gt;
&lt;p&gt;比较特殊的是 read 方法返回的是 int 类型，所以要使用 int 变量接收后进行强转后输出。&lt;/p&gt;
&lt;h2 id=&#34;节点流和处理流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#节点流和处理流&#34;&gt;#&lt;/a&gt; 节点流和处理流&lt;/h2&gt;
&lt;p&gt;节点流可以从一个特定的数据源读取数据。处理流 (又称包装流) 是 “连接” 在已存在的流之上，为程序提供更为强大的读写功能。&lt;/p&gt;
&lt;p&gt;节点流是底层流 / 低级流，直接跟数据源连接。&lt;/p&gt;
&lt;p&gt;处理流包装节点流，使用了修饰器设计模式，不会与数据源直接相连，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出。&lt;/p&gt;
&lt;p&gt;处理流的功能主要体现在：性能的提高，以增加缓冲的方式提高输入输出的效率；操作的便捷，处理流提供了一系列便捷大方法来一次性输入输出大批量的数据，使用更加方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理流对节点流的包装使用的多态，处理流拥有自身管理的节点流的父类属性，通过动态绑定机制实现对不同节点流的统一处理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关闭处理流时只需关闭外层流即可，因为底层会自动的去关闭节点流。&lt;/p&gt;
&lt;p&gt;BufferedReader 和 BufferedWriter 都是按照字符串操作的处理流，不要去操作二进制文件，可能会导致文件损坏。&lt;/p&gt;
&lt;h3 id=&#34;序列化和反序列化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#序列化和反序列化&#34;&gt;#&lt;/a&gt; 序列化和反序列化&lt;/h3&gt;
&lt;p&gt;序列化是指在保存数据时，保存数据的值和数据类型；反序列化是指在恢复数据时，恢复数据的值和数据类型。&lt;/p&gt;
&lt;p&gt;需要让某个对象支持序列化机制，则必须让其类是可序列化的，因此该类必须实现如下接口之一：Serializable 和 Exterenalizable。而 ObjectOutputStream 和 ObjectInputStream 提供了对基本数据类型或对象类型的序列化和反序列化的方法。&lt;/p&gt;
&lt;p&gt;序列化后保存的文件格式，不是存文本，而是按照它的格式进行存储。&lt;/p&gt;
&lt;p&gt;对于自定义的类而言，通过 readObject 方法读取到的对象的编译类型是 Object 类，而运行类型是本身的类型。&lt;/p&gt;
&lt;p&gt;序列化中的类中建议添加 SerialVersionUID，这个是序列化的版本号，可以提高版本的兼容性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序列化对象时，默认将里面所有的对象进行序列化，除了 static 或 transient 修饰的成员，还有没有实现序列化接口的属性也是不会进行序列化的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;序列化具备可继承性，如果父类已经实现了序列化，则其所有子类也默认实现了序列化。&lt;/p&gt;
&lt;h3 id=&#34;默认输入输出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#默认输入输出&#34;&gt;#&lt;/a&gt; 默认输入输出&lt;/h3&gt;
&lt;p&gt;System.in 的编译类型是 InputStream，运行类型是 BufferInputStream，默认输入是键盘。&lt;/p&gt;
&lt;p&gt;System.out 的编译类型是 PrintStream，运行类型是 PrintStream，默认输出是显示器。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//切换输出位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.setOut(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PrintStream&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;e\\f1.txt&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello,world&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;转换流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转换流&#34;&gt;#&lt;/a&gt; 转换流&lt;/h3&gt;
&lt;p&gt;在默认情况下，我们读取文件是按照 UTF-8 编码。&lt;/p&gt;
&lt;p&gt;转换流有 InputStreamReader 和 OutputStreamWriter，可以实现将字节流转换为字符流，并为其指定编码类型 (比如 UTF-8、gbk、gb2312、ISO8859-1 等)。&lt;/p&gt;
&lt;p&gt;当处理纯文本数据时，如果使用字符流效率更高，并且可以有效解决中文问题，所以建议将字节流转换为字符流。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//首先将字节流转换为字符流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;InputStreamReader&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;isr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InputStreamReader&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileInputStream&lt;/span&gt;(file),&lt;span class=&#34;string&#34;&gt;&amp;quot;gbk&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//然后放入BufferedReader中提高读取效率，也可以将两步合成一步写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedReader&lt;/span&gt;(isr);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;properties类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#properties类&#34;&gt;#&lt;/a&gt; Properties 类&lt;/h2&gt;
&lt;p&gt;该类是专门用于读写配置文件的集合类，键值对不需要有空格，值不需要引号，默认类型是 String。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Properties&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;properties&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Properties&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;properties.load(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileReader&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;src\\mysql.properties&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;properties.list(System.out);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; properties.getProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;properties.setProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;charset&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;properties.store(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileOutputStream&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;src\\mysql2.properties&amp;quot;&lt;/span&gt;),&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;常用方法-5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用方法-5&#34;&gt;#&lt;/a&gt; 常用方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;load&lt;/td&gt;
&lt;td&gt;加载配置文件的键值对到 Properties 对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;将数据显示到指定设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getProperty(key)&lt;/td&gt;
&lt;td&gt;根据键获取值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setProperty(key,value)&lt;/td&gt;
&lt;td&gt;设置键值对到 Properties 对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;store&lt;/td&gt;
&lt;td&gt;将 Properties 中的键值对存储到配置文件，在 idea 中保存数据到配置文件，中文会存储为 Unicode 码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第十七章-网络通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十七章-网络通信&#34;&gt;#&lt;/a&gt; 第十七章 网络通信&lt;/h1&gt;
&lt;p&gt;IPV4 使用 32 位表示地址，IPV6 使用 128 位地址。&lt;/p&gt;
&lt;p&gt;端口范围为 0-65535，而 0-1024 已经被占用，例如 ssh 占用 22，ftp 占用 21，smtp 占用 25，http 占用 90，常用的网络程序端口号 Tomcat 是 8080，mysql 是 3306，Oracle 是 1521，SQLserver 是 1433。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通信的，这个端口是 TCP/IP 进行随机分配的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语言本身就是协议。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;inetaddress类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#inetaddress类&#34;&gt;#&lt;/a&gt; InetAddress 类&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;getLocalHost&lt;/td&gt;
&lt;td&gt;获取本机 InetAddress 对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getByName&lt;/td&gt;
&lt;td&gt;根据指定主机名 / 域名获取 ip 对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getHostName&lt;/td&gt;
&lt;td&gt;获取 InetAddress 对象的主机名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getHostAddress&lt;/td&gt;
&lt;td&gt;获取 InetAddress 对象的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;socket&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#socket&#34;&gt;#&lt;/a&gt; Socket&lt;/h2&gt;
&lt;p&gt;套接字 (Socket) 开发网络应用程序被广泛采用，以至于成为事实上的标准。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通信的两端都要有 Socket，是两台机器间通信的端点，网络通信其实就是 Socket 之间的通信。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Socket 允许程序把网络连接当成一个流，数据在两个 Socket 间通过 IO 传输。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//客户端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SocketTCP01Client&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//1.链接服务端(IP,端口)，连接本机9999端口，可以指定对应的IP地址，如果连接成功则返回socket对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Socket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Socket&lt;/span&gt;(InetAddress.getLocalHost(), &lt;span class=&#34;number&#34;&gt;9999&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//2.连接上后，生产socket，通过socket。getOutputStream()得到和socket对象关联的输出流对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;outputStream&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; socket.getOutputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//3.通过输出流，写入数据到数据通道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        outputStream.write(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello,server&amp;quot;&lt;/span&gt;.getBytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//设置结束标志,这样对方才能回复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//在字符流中可以使用writer.newLine()写入结束标记，但对方需要使用readLine()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.shutdownOutput();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//4.关闭流对象和socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        outputStream.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;客户端结束&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//服务端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SocketTCP01Server&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//1.在本机的9999端口监听，等待链接，要求本机没有其他服务在监听9999端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//这个ServerSocket可以通过accept()返回多个Socket对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ServerSocket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;serverSocket&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ServerSocket&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;9999&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//2.当没有客户端连接9999端口时，程序会阻塞，等待链接;如果有客户连接，则会返回Socket对象，程序继续&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Socket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; serverSocket.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//3.通过socket.getInputStream()读取客户端写入到数据通道的数据，显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; socket.getInputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//4.IO读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;[] buf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;byte&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;readLen&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ((readLen = inputStream.read(buf)) != -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(buf,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,readLen));&lt;span class=&#34;comment&#34;&gt;//根据读取到的实际长度，显示内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//5.关闭流和socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inputStream.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        serverSocket.close();&lt;span class=&#34;comment&#34;&gt;//关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;上传图片到客户端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上传图片到客户端&#34;&gt;#&lt;/a&gt; 上传图片到客户端&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//文件上传服务端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TCPFileUploadServer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//1.服务端在本机监听8888端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ServerSocket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;serverSocket&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ServerSocket&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;8888&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//2.等待连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Socket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; serverSocket.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//3.读取客户端发送的数据，通过socket得到一个输入流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;BufferedInputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;bis&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(socket.getInputStream());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;[] bytes = StreamUtils.streamToByteArray(bis);&lt;span class=&#34;comment&#34;&gt;//使用老韩的工具&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//4.将数组写入到指定的路径，就得到一个文件了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;destFilePath&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;src\\qie2.png&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;BufferedOutputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;bos&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedOutputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileOutputStream&lt;/span&gt;(destFilePath));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bos.write(bytes);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bos.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//5.向客户端回复“收到图片”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;writer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedWriter&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;OutputStreamWriter&lt;/span&gt;(socket.getOutputStream()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        writer.write(&lt;span class=&#34;string&#34;&gt;&amp;quot;收到图片&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        writer.flush();&lt;span class=&#34;comment&#34;&gt;//刷新内容到数据通道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.shutdownOutput();&lt;span class=&#34;comment&#34;&gt;//写入结束标志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//6.关闭其他资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        writer.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bis.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        serverSocket.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//文件上传的客户端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TCPFileUploadClient&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//1.客户端连接服务端8888，得到Socket对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Socket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Socket&lt;/span&gt;(InetAddress.getLocalHost(), &lt;span class=&#34;number&#34;&gt;8888&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//2.创建读取磁盘文件的输入流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;filePath&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;e:\\qie.png&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;BufferedInputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;bis&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileInputStream&lt;/span&gt;(filePath));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//调用老韩的文件实现转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;[] bytes = StreamUtils.streamToByteArray(bis);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//3.通过socket获取到输出流，将byte数据发送给服务端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;BufferedOutputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;bos&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedOutputStream&lt;/span&gt;(socket.getOutputStream());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bos.write(bytes);&lt;span class=&#34;comment&#34;&gt;//将文件的内容写入数据通道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bis.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.shutdownOutput();&lt;span class=&#34;comment&#34;&gt;//结束标记&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//4.接受服务端回复的消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; socket.getInputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//使用老韩工具，将接受到的数据转换为字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; StreamUtils.streamToString(inputStream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//5.关闭流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inputStream.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bos.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;netstat指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#netstat指令&#34;&gt;#&lt;/a&gt; netstat 指令&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;netstat -an&lt;/td&gt;
&lt;td&gt;可以查看当前主机网络情况，包括端口监听情况和网络连接情况。 netstat -an|more 可以分页显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netstat -an|more&lt;/td&gt;
&lt;td&gt;可以分页显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netstat -anb&lt;/td&gt;
&lt;td&gt;查看是哪个程序在使用该端口，需要管理员权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;udp网络编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#udp网络编程&#34;&gt;#&lt;/a&gt; UDP 网络编程&lt;/h2&gt;
&lt;p&gt;类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。&lt;/p&gt;
&lt;p&gt;UDP 数据报数据通过数据报套接字 DatagramSocket 发送和接收，系统不保证 UDP 数据报一定能安全送到目的地，也不能确定什么时候可以抵达。&lt;/p&gt;
&lt;p&gt;DatagramPacket 对象封装了 UDP 数据，在数据报中包含了发送端的 IP 地址和端口号已经接收端的 IP 地址和端口号。UDP 协议中每个数据报都给出了完整的地址信息，因此无需建立发送方和接收方的连接。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//UDP接收端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UDPReceiverA&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//1.创建一个DatagramSocket对象，准备在9999接收数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;DatagramSocket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;socket&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DatagramSocket&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;9999&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//2.构建一个DatagramPacket对象，准备接收数据,数据包最大64k&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;[] buf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;byte&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;DatagramPacket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;packet&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DatagramPacket&lt;/span&gt;(buf, buf.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//3.调用接收方法，准备接收数据，将数据填充到packet中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.receive(packet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//4.将packet进行拆包，取出数据并显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; packet.getLength();&lt;span class=&#34;comment&#34;&gt;//获取实际接收到的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;[] data = packet.getData();&lt;span class=&#34;comment&#34;&gt;//实际上的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(data, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//5.关闭资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//UDP发送端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UDPSenderB&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//1.创建DatagramSocket对象，准备在9998接收数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;DatagramSocket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DatagramSocket&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;9998&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//2.将需要发送的数据封装到DatagramPacket对象，使用ipconfig查询ip地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;[] data = &lt;span class=&#34;string&#34;&gt;&amp;quot;hello,明天吃火锅~&amp;quot;&lt;/span&gt;.getBytes();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;DatagramPacket&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;packet&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DatagramPacket&lt;/span&gt;(data, data.length, InetAddress.getByName(&lt;span class=&#34;string&#34;&gt;&amp;quot;192.168.116.1&amp;quot;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;9999&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.send(packet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//3.关闭资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socket.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;第十八章-反射&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十八章-反射&#34;&gt;#&lt;/a&gt; 第十八章 反射&lt;/h1&gt;
&lt;p&gt;反射可以通过外部文件设置，在不修改源码的基础上来控制程序，也符合设计模式的开闭原则。&lt;/p&gt;
&lt;p&gt;反射机制允许程序在执行期借助反射取得任何类的内部信息 (比如成员变量、构造器和成员方法等等)，并能操作对象的属性及方法。反射的应用广泛，在设计模式和框架底层都会用到。&lt;/p&gt;
&lt;p&gt;加载完类之后，在堆中就产生了一个 class 类型的对象 (一个类只有一个 Class 对象)，这个对象包含了类的完整结构信息。通过这个对象可以得到类的结构。这个 Class 对象就像是一面镜子，透过这个镜子可以看到类的结构，所以形象的将其称为：反射。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反射的优点是可以动态的创建和使用对象 (也是框架底层核心)，使用灵活，没有反射机制，框架技术就失去底层支撑。缺点是反射基本是解释执行，对执行速度有影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Method 和 Field、Constructor 对象都有 setAccessible () 方法，该方法作用是启动和禁止访问安全检查的开关，参数值为 true 表示反射的对象在使用时取消访问检查，提高反射的效率。&lt;/p&gt;
&lt;p&gt;静态加载在编译时加载相关的库，如果没有则报错，依赖性太强。动态加载在运行时加载需要的库，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性。&lt;/p&gt;
&lt;p&gt;** 类加载的时机：创建对象、子类被加载、调用类中的静态方法、通过反射。** 其中只有反射是动态加载，其余都是静态加载。&lt;/p&gt;
&lt;p&gt;在反射中，如果方法有返回值，统一返回 Object 类型，但运行类型和方法定义的返回类型一致。&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/bc8de307116765133225103e6b99267a.png&#34;
                      alt=&#34;反射机制&#34;
                &gt;&lt;/p&gt;
&lt;h2 id=&#34;反射的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反射的使用&#34;&gt;#&lt;/a&gt; 反射的使用&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//从配置文件中读取到类cat和需要被调用的方法methodName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//1.加载类，返回class类型的对象cls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cls&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Class.forName(classfullpath);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2.通过cls得到加载的类Cat的对象实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; cls.newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//3.通过cls得到你加载的Cat的methodName对应的方法&amp;quot;hi&amp;quot;的方法对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//在反射中，可以把方法视为对象（万物皆对象）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; cls.getMethod(methodName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//4.通过method1调用方法，即通过方法对象来实现调用方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;method1.invoke(o);&lt;span class=&#34;comment&#34;&gt;//反射机制：方法.invoke(对象)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nameField&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; cls.getField(&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(nameField.get(o));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;创建实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建实例&#34;&gt;#&lt;/a&gt; 创建实例&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//获取User类的Class对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;userclass&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Class.forName(&lt;span class=&#34;string&#34;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//调用无参构造器创建实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; userClass.newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//调用有参public构造器创建实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Constructor&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;constructor&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; userClass.getConstructor(String.class);&lt;span class=&#34;comment&#34;&gt;//获取构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;hsp&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; constructor.newInstance(&lt;span class=&#34;string&#34;&gt;&amp;quot;hsp&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//调用非public构造器创建实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Constructor&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;constructor&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; userClass.getDeclaredConstructor(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;.class,String.class);&lt;span class=&#34;comment&#34;&gt;//获取构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;constructor.setAccessible(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//暴破，强行访问非public的构造方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;hsp&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; constructor.newInstance(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;hsp&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;反射的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反射的作用&#34;&gt;#&lt;/a&gt; 反射的作用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在运行时判断任意一个对象所属的类&lt;/li&gt;
&lt;li&gt;在运行时构造任意一个类的对象&lt;/li&gt;
&lt;li&gt;在运行时得到任意一个类所具有的成员变量和方法&lt;/li&gt;
&lt;li&gt;在运行时调用任意一个对象的成员变量和方法&lt;/li&gt;
&lt;li&gt;生成动态代理&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;反射的主要类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反射的主要类&#34;&gt;#&lt;/a&gt; 反射的主要类&lt;/h2&gt;
&lt;p&gt;这些类在 java.lang.reflection&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;java.lang.Class&lt;/td&gt;
&lt;td&gt;代表一个类，Class 对象表示某个类加载后在堆中的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java,lang.reflect.Method&lt;/td&gt;
&lt;td&gt;代表类的方法，Method 对象表示某个类的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java.lang.reflect.Field&lt;/td&gt;
&lt;td&gt;代表类的成员变量，获取公有的成员变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java.lang.reflect.Constructor&lt;/td&gt;
&lt;td&gt;代表类的构造方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;class类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#class类&#34;&gt;#&lt;/a&gt; Class 类&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Class 也是类，因此也继承 Object 类&lt;/li&gt;
&lt;li&gt;Class 类对象不是 new 出来的，而是系统创建的&lt;/li&gt;
&lt;li&gt;对于某个类的 Class 对象，在内存中只有一份，因为类只加载一次&lt;/li&gt;
&lt;li&gt;每个类的实例都会知道自己是由哪个 Class 实例所生成&lt;/li&gt;
&lt;li&gt;通过 Class 对象可以完整地得到一个类的完整结构&lt;/li&gt;
&lt;li&gt;Class 对象是存放在堆的&lt;/li&gt;
&lt;li&gt;类的字节码二进制数据是放在方法区的，有的地方称为类的元数据 (包括方法代码、变量名、方法名、访问权限等)。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;类加载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类加载&#34;&gt;#&lt;/a&gt; 类加载&lt;/h2&gt;
&lt;p&gt;加载阶段：JVM 在该阶段的主要目的是将字节码从不同的数据源 (可能是 class 文件，也可能是 jar 包，甚至是网络) 转化为二进制字节流加载到内存中，并生成一个代表该类的 java.lang.Class 对象。&lt;/p&gt;
&lt;p&gt;连接阶段 - 验证：目的是确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证包括文件格式验证、元数据验证、字符码验证和符号引用验证。&lt;/p&gt;
&lt;p&gt;连接阶段 - 准备：JVM 会在该阶段对静态变量分配内存并默认初始化 (对应数据类型的默认初始化值)。这些变量所使用的内存将在方法区中进行分配。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//n1是实例变量，不是静态变量，因此在准备阶段不会分配内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//n2是静态变量，分配内存并初始化为默认值0，而不是20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//n3是static final是常量，和静态变量不一样，直接赋值为30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n3&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;连接阶段 - 解析：虚拟机将常量池内的符号引用替换为直接引用的过程。&lt;/p&gt;
&lt;p&gt;初始化：到初始化阶段才真正开始执行类中定义的 java 程序代码，此阶段是执行 &lt;code&gt;&amp;lt;clinit&amp;gt;()&lt;/code&gt;  方法的过程。该方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有静态变量的赋值语句和静态代码块中的语句，并进行合并。&lt;/p&gt;
&lt;p&gt;虚拟机会保证一个类的 &lt;code&gt;&amp;lt;clinit()&amp;gt;&lt;/code&gt;  方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行该方法，其他线程都需要阻塞等待，直到活动线程执行该方法完毕。&lt;/p&gt;
&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/80ec4d8b21e1f9775fbc5bc6f0f628a8.png&#34;
                      alt=&#34;连接 Linking&#34;  
                &gt;
&lt;h1 id=&#34;第十九章-mysql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十九章-mysql&#34;&gt;#&lt;/a&gt; 第十九章 MySQL&lt;/h1&gt;
&lt;p&gt;数据库表的一行成为一条记录，在 java 程序中，一行记录往往使用对象表示。&lt;/p&gt;
&lt;p&gt;在创建数据库，表的时候，为了规避关键字，可以使用反引号解决。&lt;/p&gt;
&lt;p&gt;delete 语句不能删除某一列的数据，可以使用 update 设为 null 或者‘’。&lt;/p&gt;
&lt;p&gt;select 语句可以通过指定 distinct 参数来选择是否显示重复的数据。&lt;/p&gt;
&lt;p&gt;count (*) 返回满足条件的记录的行数；count (‘列名’) 也会返回满足条件的记录的某列有多少个，但是会排除为 null。&lt;/p&gt;
&lt;p&gt;like 模糊查找，% 表示多个任意字符，_表示单个任意字符。&lt;/p&gt;
&lt;p&gt;为了给某个 SQL 语句进行效率测试，我们需要海量数据时，可以使用该方法为表创建海量数据。&lt;/p&gt;
&lt;p&gt;union all 将两个查询结果合并，不会去重；union 合并时会进行去重。&lt;/p&gt;
&lt;p&gt;可以使用 auto_increment 实现自增长，填入数据时只需填入 null，数据会自行增长，如果填入值，则以该值为准。自增长的机制是选取当前的最大值进行加一。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;insert into my_tab01 select * from my_tab01 # 自我复制&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 将my_tab01表的结构(列)复制到my_tab02中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;create table my_tab02 like my_tab01;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 修改自增长的起始值为100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alter table t25 auto_increment = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select empno,ename name,sal salary from emp;# 正确，可以省略as&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 错误，Annual Salary中间有空格，编译器无法明白，改为&amp;quot;Annual Salary&amp;quot;，或者中间加上下划线&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select ename,sal*12 Annual Salary from emp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#索引&#34;&gt;#&lt;/a&gt; 索引&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;索引是最物美价廉的东西，不用加内存，不用改程序，不用调 SQL，查询速度就可能提高百倍千倍。但是会影响更新，删除和插入的效率，因为要更新搜索二叉树。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引的类型：主键索引 (primary key)，唯一索引 (unique)，普通索引 (index)，全文索引 (fulltext)，但一般不使用全文索引，而是使用全文搜索 Solr 和 ElasticSearch。&lt;/p&gt;
&lt;p&gt;较频繁的作为查询条件字段应该创建索引，唯一性太差的和更新非常频繁字段不适合单独创建索引。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 在emp表的empno列创建索引&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;create index empno_index on emp(empno)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alter table emp add index empno_index(empno)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 查询表是否有索引&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show index from t25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 删除索引&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;drop index empno_index on t25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;数据库备份&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库备份&#34;&gt;#&lt;/a&gt; 数据库备份&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#备份数据库，将数据库保存到指定目录:mysqldump -u 用户名 -p -B 数据库1 数据库2 &amp;gt; 文件名.sql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mysqldump -u root -p -B hsp_db02 hsp_db03 &amp;gt; d:\\bak.sql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#备份数据库中指定的表:mysqldump -u 用户名 -p 数据库 表1 表2 &amp;gt; 文件名.sql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mysqldump -u root -p hsp num1 num2 &amp;gt; d:\\bak.sql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#恢复数据库，需要先进入MySQL命令行，输入mysql -u root -p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;source d:\\bak.sql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#由于备份的数据库中含有所有操作，所有可以全部执行一遍来进行恢复&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;数据类型列类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型列类型&#34;&gt;#&lt;/a&gt; 数据类型 (列类型)&lt;/h2&gt;
&lt;p&gt;数据默认是有符号的，添加 unsigned 关键字变为无符号。&lt;/p&gt;
&lt;p&gt;Decimal [M,D]，M 是小数位的总数，D 是小数点后面的位数。M 的最大值是 65，默认值是 10；D 的最大值为 30，默认值是 0。&lt;/p&gt;
&lt;p&gt;timestamp 时间戳可以指定 on update current_timestamp，这样每次更新时都会自动更新为当前时间。&lt;/p&gt;
&lt;p&gt;字符和日期型数据应包含在单引号中。&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/81bf2d9b3a518e97ccb968574b30080f.png&#34;
                      alt=&#34;MySQL数据类型&#34;
                &gt;&lt;/p&gt;
&lt;h2 id=&#34;char与varchar&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#char与varchar&#34;&gt;#&lt;/a&gt; char 与 varchar&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;char 最多可存储 255 个字符，varchar 最大可存储 65532 个字节，注意是字节，因此能最多能存储的字符取决于编码方式。但填入的参数都是指定字符数。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;char 是定长，会固定占用声明的空间；varchar 是变长，存储实际占用的空间，但会使用一定长度的字节存储长度。&lt;/li&gt;
&lt;li&gt;char 的查询速度大于 varchar。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常用函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用函数&#34;&gt;#&lt;/a&gt; 常用函数&lt;/h2&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串&#34;&gt;#&lt;/a&gt; 字符串&lt;/h3&gt;
&lt;p&gt;dual 是亚元表，系统表，可以作为一个测试表使用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;charset&lt;/td&gt;
&lt;td&gt;获取字符串所属字符集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;concat&lt;/td&gt;
&lt;td&gt;连接字符串，将多个列拼接成一列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;instr(string,substring)&lt;/td&gt;
&lt;td&gt;返回 substring 在 string 出现的位置，没有则返回 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ucase&lt;/td&gt;
&lt;td&gt;转换为大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lcase&lt;/td&gt;
&lt;td&gt;转换为小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;left(string,length)&lt;/td&gt;
&lt;td&gt;从字符串的左边起取 length 个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;right(string,length)&lt;/td&gt;
&lt;td&gt;从字符串的右边起取 length 个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;length&lt;/td&gt;
&lt;td&gt;获取字符串长度 (字节)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;replace(str,search,replace)&lt;/td&gt;
&lt;td&gt;将 str 列中的 search 替换成 replace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strcmp&lt;/td&gt;
&lt;td&gt;比较两个字符串大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;substring(str,position,[,length])&lt;/td&gt;
&lt;td&gt;截取字符串，从 position 开始取 length 个字符，从 1 开始计数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ltrim,rtrim,trim&lt;/td&gt;
&lt;td&gt;去除前端或后端空格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;数学&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数学&#34;&gt;#&lt;/a&gt; 数学&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abs&lt;/td&gt;
&lt;td&gt;返回绝对值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bin&lt;/td&gt;
&lt;td&gt;十进制转二进制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;celling&lt;/td&gt;
&lt;td&gt;向上取整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conv&lt;/td&gt;
&lt;td&gt;进制转换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;floor&lt;/td&gt;
&lt;td&gt;向下取整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;format&lt;/td&gt;
&lt;td&gt;保留小数位数，四舍五入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hex&lt;/td&gt;
&lt;td&gt;转十六进制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;least&lt;/td&gt;
&lt;td&gt;求最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mod&lt;/td&gt;
&lt;td&gt;求余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rand&lt;/td&gt;
&lt;td&gt;返回随机数，范围为 [0,1]，可以填入 seed，生产对应的随机数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;时间日期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#时间日期&#34;&gt;#&lt;/a&gt; 时间日期&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;current_date&lt;/td&gt;
&lt;td&gt;当前日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;current_time&lt;/td&gt;
&lt;td&gt;当前时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;current_timestamp&lt;/td&gt;
&lt;td&gt;当前时间戳&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;date&lt;/td&gt;
&lt;td&gt;返回 datetime 的日期部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;date_add(date,interval d_value d_type)&lt;/td&gt;
&lt;td&gt;在 date 中加上日期或时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;date_sub(date,interval d_value d_type)&lt;/td&gt;
&lt;td&gt;在 date 上减去日期或时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datediff&lt;/td&gt;
&lt;td&gt;两个时间差，结果返回天数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timediff&lt;/td&gt;
&lt;td&gt;两个时间差，返回多少小时多少分钟多少秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;now&lt;/td&gt;
&lt;td&gt;当前时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;year|month&lt;/td&gt;
&lt;td&gt;date(date)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;from_unixtime&lt;/td&gt;
&lt;td&gt;可以将 unix_timestamp 转换为指定格式的日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unix_timestamp&lt;/td&gt;
&lt;td&gt;返回从 1970-1-1 到现在的秒数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;last_day&lt;/td&gt;
&lt;td&gt;返回填入日期该月的最后一天&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;date_add 和 date_sub 中的 interval 后面可以是 year,month,day,hour,second,minute&lt;/p&gt;
&lt;h3 id=&#34;加密函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加密函数&#34;&gt;#&lt;/a&gt; 加密函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;查询登录到 mysql 的有哪些用户，已经登录的 IP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;database&lt;/td&gt;
&lt;td&gt;查询当前的数据库名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;md5&lt;/td&gt;
&lt;td&gt;为字符串算出一个 MD5 的 32 位字符串，进行加密&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;加密函数，MySQL 数据库的用户密码函数使用该函数进行加密&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;流程控制函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制函数&#34;&gt;#&lt;/a&gt; 流程控制函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;if(expr1,expr2,expr3)&lt;/td&gt;
&lt;td&gt;然后 expr1 为 true，则返回 expr2，否则返回 expr3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ifnull(expr1,expr2)&lt;/td&gt;
&lt;td&gt;如果 expr1 不为空，则返回 expr1，否则返回 expr2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;when a then b when c then d else e&lt;/td&gt;
&lt;td&gt;多分支选择&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询&#34;&gt;#&lt;/a&gt; 查询&lt;/h2&gt;
&lt;p&gt;在默认情况下，当两张表查询时，规则是从第一张表中取出一行和第二张表的每一行进行组合，返回结果。因此一共返回的记录数为两张表的行数之积，称为笛卡尔集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自连接是指在同一张表的连接查询，将同一张表看做两张表，此时需要为该表起别名才能进行操作。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select * from emp worker,emp boss; #分别取别名为worker和boss&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 多列子查询，查询和Allen的deptno和job完全一样的员工&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select * from emp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;where (deptno,job)=(select deptno,job from emp where ename=&amp;#x27;allen&amp;#x27;) and ename!=&amp;#x27;allen&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;子查询是指嵌入到其他 SQL 语句中的 select 语句，也叫嵌套查询。子查询还可以当做临时表使用。&lt;/p&gt;
&lt;h2 id=&#34;约束&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#约束&#34;&gt;#&lt;/a&gt; 约束&lt;/h2&gt;
&lt;p&gt;约束用于确保数据库的数据满足特定的商业规则，在 MySQL 中，约束包括：not null,unique,primary key,foreign key 和 check 五种。&lt;/p&gt;
&lt;p&gt;如果没有指定 not null，则 unique 字段可以有多个 null。&lt;/p&gt;
&lt;p&gt;外键 (foreign key) 用于定义主表和从表的之间的关系：主表约束要定义在从表上，主表则必须具有主键约束或者 unique 约束，要求外键列数据必须在主键列存在或者是为 null。&lt;/p&gt;
&lt;p&gt;表的类型必须是 InnoDB，这样的表才支持外键。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;primary key(id,name)#复合主键&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#指定外键关系&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foreign key (class_id) references my_class(id)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;check 用于强制行数据必须满足的条件。Oracle 和 SQL server 均支持 check，但是 MySQL5.7 目前还不支持 check，只做语法校验，但不会生效。在 MySQL 中实现 check 的功能，一般是在程序中控制或者通过触发器完成。&lt;/p&gt;
&lt;h2 id=&#34;事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h2&gt;
&lt;p&gt;当执行回退事务时，通过指定保存点可以回退到指定的点。&lt;/p&gt;
&lt;p&gt;提交事务后会确认事务的变化，结束事务，删除保存点，释放锁，数据生效。当使用 commit 语句结束事务后，其他会话将可以查看到事务变化后的新数据。&lt;/p&gt;
&lt;p&gt;如果不开启事务，在默认情况下，操作是自动提交的，不能回滚。&lt;/p&gt;
&lt;p&gt;InnoDB 存储引擎支持事务，MyISAM 不支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务的特性：原子性、一致性、隔离性和持久性。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 开始事务，也可以写set autocommit=off&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;start transaction&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 设置保存点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;savepoint a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;savepoint b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 回退到a保存点,此时就无法再回退到b点，只写rollback的话直接回退到事务开始的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rollback to a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 提交操作，此时不可以回退&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;commit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;事务隔离&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务隔离&#34;&gt;#&lt;/a&gt; 事务隔离&lt;/h3&gt;
&lt;p&gt;多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。如果不考虑隔离性，可能会导致：脏读、不可重复读、幻读。&lt;/p&gt;
&lt;p&gt;脏读：当一个事务读取到另一个事务&lt;strong&gt;尚未提交&lt;/strong&gt;的修改时，产生脏读。&lt;/p&gt;
&lt;p&gt;不可重复读：同一查询在同一事务中多次进行，由于其他提交事务所做的&lt;strong&gt;修改或删除&lt;/strong&gt;，每次返回不同的结果集，产生不可重复读。&lt;/p&gt;
&lt;p&gt;幻读：同一查询在同一事务中多次出现，由于其他提交事务所做的&lt;strong&gt;插入&lt;/strong&gt;操作，每次返回不同的结果集，产生幻读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我希望看到的数据是我连接到数据库时的数据，而不可重复读和幻读影响了我能看到的数据，不同事务之间正常来说应该不会互相影响。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 查看当前MySQL的隔离级别&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select @@tx_isolation;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 查看系统当前隔离级别&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select @@global.tx_isolation&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 设置控制台的隔离级别&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set session transaction isolation level read uncommitted&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 设置系统的隔离级别&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set global transaction isolation level read uncommitted&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h4 id=&#34;隔离级别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#隔离级别&#34;&gt;#&lt;/a&gt; 隔离级别&lt;/h4&gt;
&lt;p&gt;MySQL 默认的隔离级别是 repeated read，一般情况下，没有特殊要求就没有必要修改。若要修改，可以在 my.ini 文件中写入 transaction-isolation = 想要的隔离级别&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MySQL 隔离级别&lt;/th&gt;
&lt;th&gt;脏读&lt;/th&gt;
&lt;th&gt;不可重复读&lt;/th&gt;
&lt;th&gt;幻读&lt;/th&gt;
&lt;th&gt;加锁读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;读未提交 (Read uncommitted)&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;不加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;读已提交 (Read committed)&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;不加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可重复读 (Repeatable read)&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;不加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可串行化 (Serializable)&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;√表示可能出现，× 表示不会出现；加锁后需要其他事务均已提交才能运行。&lt;/p&gt;
&lt;h2 id=&#34;存储引擎&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储引擎&#34;&gt;#&lt;/a&gt; 存储引擎&lt;/h2&gt;
&lt;p&gt;MySQL 的表类型由存储引擎决定，主要包括 Myisam、innoDB、Memory 等。&lt;/p&gt;
&lt;p&gt;MySQL 数据表主要支持六种类型，分别是：CSV、Memory、Archive、Mge_Myisam、Myisam 和 InnoDB，这六种又分为两类，一类为事务安全型，例如 InnoDB；其余为非事务安全型，例如 MyISAM 和 Memory。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 查看所有的存储引擎&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show engines&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 修改存储引擎&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alter table &amp;#x27;tb01&amp;#x27; engine = innodb;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;常用引擎比较&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用引擎比较&#34;&gt;#&lt;/a&gt; 常用引擎比较&lt;/h3&gt;
&lt;p&gt;Myisam 不支持事务也不支持外键，但其访问速度快，对事务完整性没有要求。&lt;/p&gt;
&lt;p&gt;InnoDB 提供了具有提交、回滚和崩溃恢复能力的事物安全。但是比起 Myisam，InnoDB 写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。&lt;/p&gt;
&lt;p&gt;Memory 使用存储在内存中的内容来创建表。每个 Memory 表只实际对应一个磁盘文件，Memory 类型的表访问非常快，因为它的数据是放在内存的，而且默认使用 hash 索引，但是一旦 MySQL 服务关闭，表中的数据就会丢失掉，表的结构还在。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;Myisam&lt;/th&gt;
&lt;th&gt;InnoDB&lt;/th&gt;
&lt;th&gt;Memory&lt;/th&gt;
&lt;th&gt;Archive&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;批量插入的速度&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;高，内存级别&lt;/td&gt;
&lt;td&gt;非常高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&#34;2&#34;&gt;事务安全&lt;/td&gt;
&lt;td colspan=&#34;3&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全文索引&lt;/td&gt;
&lt;td colspan=&#34;4&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;锁机制&lt;/td&gt;
&lt;td&gt;表级&lt;/td&gt;
&lt;td&gt;行锁&lt;/td&gt;
&lt;td&gt;表锁&lt;/td&gt;
&lt;td&gt;行锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储限制&lt;/td&gt;
&lt;td&gt;没有&lt;/td&gt;
&lt;td&gt;64TB&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;没有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B 树索引&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&#34;2&#34;&gt;哈希索引&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&#34;2&#34;&gt;集群索引&lt;/td&gt;
&lt;td colspan=&#34;3&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&#34;2&#34;&gt;数据缓存&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;索引缓存&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据可压缩&lt;/td&gt;
&lt;td colspan=&#34;3&#34;&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空间使用&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;高&lt;/td&gt;
&lt;td&gt;非常低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存使用&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&#34;2&#34;&gt;支持外键&lt;/td&gt;
&lt;td colspan=&#34;3&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#视图&#34;&gt;#&lt;/a&gt; 视图&lt;/h2&gt;
&lt;p&gt;视图是一个虚拟表，其内容由查询定义，其数据来自于对应的真实表 (基表)。创建视图后到数据库去看，对应视图只有一个视图结构文件，而没有数据文件。&lt;/p&gt;
&lt;p&gt;视图的数据变化会影响到基表，基表的数据变化也会影响视图。&lt;/p&gt;
&lt;p&gt;视图中仍可以生成视图。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 创建视图emp_view01，只能查询emp表的empno、ename、job和deptno信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;create view emp_view as select empno,ename,job,deptno from emp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 查看视图&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select empno,job from emp_view&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 查看创建视图的指令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show create view emp_view01&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 删除视图&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;drop view emp_view01&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;第二十章-jdbc和连接池&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二十章-jdbc和连接池&#34;&gt;#&lt;/a&gt; 第二十章 jdbc 和连接池&lt;/h1&gt;
&lt;p&gt;jdbc 为访问不同的数据库提供了统一的接口，为使用者屏蔽了细节问题。java 程序员使用 jdbc，可以连接任何提供了 jdbc 驱动程序的数据库系统，从而完成对数据库的各种操作。&lt;/p&gt;
&lt;p&gt;jdbc 的 API 是一系列的接口，它统一和规范了应用程序和数据库的连接、执行 SQL 语句，并得到返回结果等各类操作，相关类和接口在 java.sql 和 javax.sql 包中。&lt;/p&gt;
&lt;p&gt;jdbc 程序编写步骤：注册驱动，加载 Driver 类；获取连接，得到 Connection；执行增删改查，发生 SQL 给数据库执行；释放资源，关闭相关连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mysql 的连接本质上是 socket 连接。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jdbc 连接 MySQL 时，如果要使用批处理功能，需要在 URL 中加参数 &lt;code&gt;?rewriteBatchedStatements=true&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;批处理往往和 PreparedStatement 一起搭配使用，既可以减少编译次数，又减少运行次数，效率大大提高。&lt;/p&gt;
&lt;p&gt;遇到异常时，可以使用 &lt;code&gt;throw new RuntimeException(e);&lt;/code&gt;  将其转换为运行异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新建 Propertises 文件时选择文件类型为 Text 即可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BasicDao 是专门和数据库交互的，即完成对数据库的 crud 操作。在 BasicDao 的基础上，实现一张表对应一个 Dao，更好的完成功能，比如 Customer 表 - Customer.java 类 - CustomerDao.java。&lt;/p&gt;
&lt;p&gt;声明使用可变参数可以使用省略号，例如 &lt;code&gt;Object... parameters&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;idea 注释中的作者和版本信息都会对程序运行有影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进行多表查询时，增加来自另一张表的属性需要和原来表的属性名保持一致，因为底层会通过列名来调用 set 方法进行赋值，或者在 SQL 语句中通过取别名的方法解决。&lt;/p&gt;
&lt;h2 id=&#34;preparedstatement&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#preparedstatement&#34;&gt;#&lt;/a&gt; PreparedStatement&lt;/h2&gt;
&lt;p&gt;使用 PreparedStatement 进行预处理可以解决 Statement 的 SQL 注入问题。PreparedStatement 不再使用加号拼接 SQL 语句，而是使用占位符和 set 方法，有效解决了 SQL 注入问题。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;select name from class where name = ? and pwd = ?&amp;quot;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//？作为占位符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;preparedStatement&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; connection.preparedStatement(sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;preparedStatement.setString(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,admin_name);&lt;span class=&#34;comment&#34;&gt;//给第一个？号处填入值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//由于前面已经填了，此处不需要再填入sql&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;ResultSet&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;resultSet&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; preparedStatement.executeQuery();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;resultset&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#resultset&#34;&gt;#&lt;/a&gt; ResultSet&lt;/h2&gt;
&lt;p&gt;ResultSet 表示数据库结果集的数据表，通常通过执行查询数据库的语句生成。ResultSet 对象保存一个光标指向其当前的数据行，光标在最初位于第一行之前，next 方法可以将光标移动到下一行，当对象没有更多行时会返回 false，因此可以使用 while 循环进行遍历。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;select * from class&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//执行SQL语句，返回单个的ResultSet对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;ResultSet&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;resultSet&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; statement.executeQuery(sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (resultSet.next()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; resultSet.getInt(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//获取第一列的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; resultSet.getNString(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;id是&amp;quot;&lt;/span&gt; + id + &lt;span class=&#34;string&#34;&gt;&amp;quot;;班级是&amp;quot;&lt;/span&gt; + name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//4.关闭连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;resultSet.close();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;jdbc操作数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jdbc操作数据库&#34;&gt;#&lt;/a&gt; jdbc 操作数据库&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//首先将jar文件加入到项目中，并右键选择“添加到库”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//1.注册驱动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Driver&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;driver&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Driver&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2.得到连接，表示通过jdbc的方式连接mysql，localhost表示主机，可以使用ip地址，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//3306是监听的端口，day27db是连接的数据库，高版本的mysql包需要写上?serverTimezone=UTC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//mysql的连接本质上是socket连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;jdbc:mysql://localhost:3306/day27db?serverTimezone=UTC&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//将用户名和密码放入到Properties对象中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Properties&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;properties&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Properties&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//user和password是规定好的，后面的值根据实际情况填写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;properties.setProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;properties.setProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;hsp&amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;connect&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; driver.connect(url, properties);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//3.执行SQL语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;insert into class values(null,&amp;#x27;数学&amp;#x27;)&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//用于执行静态SQL语句并返回其生成的结果的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Statement&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;statement&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; connect.createStatement();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; statement.executeUpdate(sql);&lt;span class=&#34;comment&#34;&gt;//如果是dml语句，返回影响的行数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(row &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;quot;成功&amp;quot;&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;quot;失败&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//4.关闭连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;statement.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;connect.close();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;连接方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接方式&#34;&gt;#&lt;/a&gt; 连接方式&lt;/h2&gt;
&lt;p&gt;MySQL 驱动在 5.1.6 之后可以无需 &lt;code&gt;Class.forName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;)&lt;/code&gt; 。从 jdk1.5 以后使用了 jdbc4，不需要显式调用该方法注册驱动，而是自动调用驱动 jar 包下 META-INF\services\java.sql.Driver 文本中的类名去注册。&lt;/p&gt;
&lt;p&gt;本质上只有两种连接方式：静态加载和动态加载。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方式1，创建Driver对象，静态加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Driver&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;driver&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Driver&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方式2，使用反射加载Driver类，动态加载，更加灵活，减少依赖性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Class&amp;lt;?&amp;gt; aClass = Class.forName(&lt;span class=&#34;string&#34;&gt;&amp;quot;com.mysql.jdbc.Driver&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Driver&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;driver&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (Driver)aClass.newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方式3，使用DriverManager替代Driver进行统一管理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//先获取Driver对象，然后传入URL，用户名和密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DriverManager.registerDriver(driver);&lt;span class=&#34;comment&#34;&gt;//注册Driver驱动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; DriverManage.getConnection(url,user,password);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方式4，如果使用了Class.forName方法则会自动完成注册驱动，可以省略registerDriver的步骤，这是最推荐使用的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//方式5则是在方式4上进行改进，使用配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Properties&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;properties&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Properties&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;properties.load(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;src\\mysql.propertises&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; properties.getProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; properties.getProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; properties.getProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;driver&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; properties.getProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Class.forName(driver);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; DriverManager.getConnection(url, user, password);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;常用api&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用api&#34;&gt;#&lt;/a&gt; 常用 API&lt;/h2&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/11606/ff73ede308799b2baad8f194c544c270.png&#34;
                      alt=&#34;常用API&#34;
                &gt;&lt;/p&gt;
&lt;h2 id=&#34;数据库连接池&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库连接池&#34;&gt;#&lt;/a&gt; 数据库连接池&lt;/h2&gt;
&lt;p&gt;传统的 jdbc 数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证 IP 地址，用户名和密码。需要数据库连接的时候，就向数据库要求一个，频繁的进行数据库连接操作将占用很多的系统资源，容易造成服务器崩溃。&lt;/p&gt;
&lt;p&gt;每一次数据库连接，使用完后都得断开，如果程序出现异常而未能关闭，将导致数据库内存泄露，最终导致重启数据库。为解决传统开发中的数据库连接问题，可以采用 数据库连接池技术。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库连接池预先在缓冲区放入一定数量的连接，当需要建立数据库连接时，只需从 “缓冲池” 中取出一个，使用完毕后放回去。连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;常见连接池&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见连接池&#34;&gt;#&lt;/a&gt; 常见连接池&lt;/h3&gt;
&lt;p&gt;jdbc 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口由第三方提供实现。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;连接池&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C3P0&lt;/td&gt;
&lt;td&gt;速度相对较慢，稳定性不错，hibernate 和 spring 使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DBCP&lt;/td&gt;
&lt;td&gt;速度相对 C3P0 较快，但不稳定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxool&lt;/td&gt;
&lt;td&gt;有监控连接池状态的功能，稳定性较 C3P0 差一点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BoneCP&lt;/td&gt;
&lt;td&gt;速度快&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Druid (德鲁伊)&lt;/td&gt;
&lt;td&gt;来自阿里，集上面的优点于一身&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;连接池使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接池使用&#34;&gt;#&lt;/a&gt; 连接池使用&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//将c3p0提供的c3o0.config.xml拷贝到src目录下，该文件指定了数据库和连接池的相关参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;ComboPooledDataSource&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;comboPooledDataSource&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ComboPooledDataSource&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hsp_edu&amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//填入数据源名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; comboPooledDataSource.getConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;connection.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//1.加入Druid的jar包和配置文件druid.properties，将该文件拷贝到项目的src目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2.创建Properties对象，读取配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Properties&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;properties&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Properties&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;properties.load(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;src\\druid.properties&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//3.创建一个指定参数的数据库连接池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;DataSource&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dataSource&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; DruidDataSourceFactory.createDataSource(properties);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; dataSource.getConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;connection.close();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;dbutils&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dbutils&#34;&gt;#&lt;/a&gt; DBUtils&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关闭 connection 后，resultSet 结果集无法使用，而且 resultSet 不利于数据的管理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;commons-dbutils 是 Apache 组织提供的一个开源 JDBC 工具类库，它是对 JDBC 的封装，使用 dbutils 能极大简化 jdbc 编程的工作量。&lt;/p&gt;
&lt;p&gt;QueryRunner 类：封装了 SQL 的执行，是线程安全的。可以实现增、删、改、查、批处理。&lt;/p&gt;
&lt;p&gt;ResultSetHandler 接口：用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。&lt;/p&gt;
&lt;p&gt;一定要给 java 类一个无参构造器，可能反射会需要。&lt;/p&gt;
&lt;p&gt;int,double 等在 java 中都使用包装类，因为 mysql 中所有类型都可能是 null，而只有 java 是引用类型才有 null 值。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//DBUtils使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; JDBCUtilsByDruid.getConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;QueryRunner&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;queryRunner&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;QueryRunner&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;select * from course where cid &amp;gt;= ?&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//new BeanListHandler&amp;lt;&amp;gt;(Actor.class):将resultSet-&amp;gt;Actor对象-&amp;gt;封装到ArrayList，底层会使用反射机制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//参数1是填入到SQL中的问号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//底层得到的resultSet和PreparedStatement会在query方法中关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; List&amp;lt;Actor&amp;gt; list = queryRunner.query(connection, sql, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BeanListHandler&lt;/span&gt;&amp;lt;&amp;gt;(Actor.class), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Actor actor : list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(actor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;JDBCUtilsByDruid.close(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;,connection);&lt;span class=&#34;comment&#34;&gt;//释放资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;常用函数-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用函数-2&#34;&gt;#&lt;/a&gt; 常用函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ArrayHandler&lt;/td&gt;
&lt;td&gt;将结果集中的第一行数据转成对象数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayListHandler&lt;/td&gt;
&lt;td&gt;将结果集中的每一行数据都转成一个数组，再存放到 List 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BeanHandler&lt;/td&gt;
&lt;td&gt;将结果集中的第一行数据封装到一个对应的 javaBean 实例中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BeanListHandler&lt;/td&gt;
&lt;td&gt;将结果集中的每一行都封装到一个对应的 javaBean 实例中，存放到 List 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ColumnListHandler&lt;/td&gt;
&lt;td&gt;将结果集中某一列的数据存放到 List 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyedHandler(name)&lt;/td&gt;
&lt;td&gt;将结果集中每行的数据都封装到 Map 里，再把这些 map 存到另一个 Map 里，其 key 为指定的 key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MapHandler&lt;/td&gt;
&lt;td&gt;将结果集中第一行的数据都封装到 Map 里，key 是列名，value 是对应的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MapListHandler&lt;/td&gt;
&lt;td&gt;将结果集中每行的数据都封装到 Map 里，然后存放到 List&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ScalarHandler&lt;/td&gt;
&lt;td&gt;返回单行单列，一个 object 对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第二十一章-正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二十一章-正则表达式&#34;&gt;#&lt;/a&gt; 第二十一章 正则表达式&lt;/h1&gt;
&lt;p&gt;** 在 java 的正则表达式中，两个 &lt;code&gt;\\&lt;/code&gt;  代表其他语言中的一个 \。** 而需要用到转义字符的有： &lt;code&gt;.*()$/\?[]^&amp;#123;&amp;#125;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正则表达式可以使用括号进行分组，group (0) 表示匹配到的字符串，group (n) 表示返回对应的分组。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;java 匹配默认贪婪匹配，即尽可能多的匹配。&lt;/p&gt;
&lt;p&gt;分组的内容被捕获后，可以在这个括号后被使用，从而写出比较实用的匹配模式，这个被称作反向引用。这种引用可以在正则表达式内部，也可以是外部，内部反向引用使用 \\ 分组号，外部引用使用 $ 分组号。&lt;/p&gt;
&lt;p&gt;字符串配合正则表达式使用 replaceAll、matches 和 split 方法可以提高效率。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//先创建一个Pattern对象，模式对象，可以理解为就是一个正则表达式对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Pattern&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Pattern.compile(&lt;span class=&#34;string&#34;&gt;&amp;quot;[a-zA-Z+]&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//创建一个匹配器对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Matcher&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;matcher&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; pattern.matcher(content);&lt;span class=&#34;comment&#34;&gt;//content是需要匹配的文本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//开始循环匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(matcher.find())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//匹配内容和文本会放在matcher.group()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;找到&amp;quot;&lt;/span&gt; + matcher.group(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//捕获命名分组，(?&amp;lt;name&amp;gt;pattern)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Pattern&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Pattern.compile(&lt;span class=&#34;string&#34;&gt;&amp;quot;?(&amp;lt;name1&amp;gt;\\d\\d)(?&amp;lt;name2&amp;gt;\\d\\d)&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;matcher.group(&lt;span class=&#34;string&#34;&gt;&amp;quot;name1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//应用实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;regStr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;^[\u0391-\uffe5]+$&amp;quot;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//匹配汉字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;matches&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Pattern.matches(regStr,content);&lt;span class=&#34;comment&#34;&gt;//调用静态方法进行整体匹配，而不是其中一部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//匹配五个连续相同的数字，相当于&amp;quot;(//d)//1//1///1//1&amp;quot;，意思是后面的元素与第一分组的内容相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;regStr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;(\\d)\\1&amp;#123;4&amp;#125;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//匹配四位长度的回文数字,意思是先与第2分组相同，再与第1分组相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;regStr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;(\\d)(\\d)\\2\\1&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;content = matcher.replaceAll(&lt;span class=&#34;string&#34;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//反向引用使用第1分组的内容进行替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;字符串匹配符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串匹配符&#34;&gt;#&lt;/a&gt; 字符串匹配符&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34;   href=&#34;https://www.runoob.com/java/java-regular-expressions.html&#34; &gt;菜鸟教程字符串匹配符 &lt;i class=&#34;fa-regular fa-arrow-up-right-from-square fa-sm&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;匹配输入&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配处 \n 以外的任意字符&lt;/td&gt;
&lt;td&gt;a…b&lt;/td&gt;
&lt;td&gt;以 a 开头，b 结尾，中间包括两个任意字符为 4 的字符串&lt;/td&gt;
&lt;td&gt;aaab,a35b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;td&gt;可接收的字符列表，特殊符号将按照本身进行匹配&lt;/td&gt;
&lt;td&gt;[efg?.]&lt;/td&gt;
&lt;td&gt;e,f,g,? 和。中的任意一个字符&lt;/td&gt;
&lt;td&gt;.,?,e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^]&lt;/td&gt;
&lt;td&gt;不接收的字符列表&lt;/td&gt;
&lt;td&gt;[^efg]&lt;/td&gt;
&lt;td&gt;除 e,f,g 的任意一个字符&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;连字符&lt;/td&gt;
&lt;td&gt;A-Z&lt;/td&gt;
&lt;td&gt;任意大写字母&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;选择匹配符，匹配’|&#39; 之前或之后的表达式&lt;/td&gt;
&lt;td&gt;ab|cd&lt;/td&gt;
&lt;td&gt;ab 或 cd&lt;/td&gt;
&lt;td&gt;ab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;指定字符重复 0 次或 n 次&lt;/td&gt;
&lt;td&gt;(abc)*&lt;/td&gt;
&lt;td&gt;仅包含任意个 abc 的字符串，等效于 \w*&lt;/td&gt;
&lt;td&gt;abcabc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;指定字符重复 1 次或 n 次&lt;/td&gt;
&lt;td&gt;m+(abc)*&lt;/td&gt;
&lt;td&gt;以至少一个 m 开头，后接任意个 abc 的字符串&lt;/td&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;指定字符重复 0 次或 1 次，当此字符紧随其他限定符 (*,+,?,{n},{n,},{n,m}) 之后，则表示采用非贪婪匹配&lt;/td&gt;
&lt;td&gt;m+abc？&lt;/td&gt;
&lt;td&gt;以至少一个 m 开头，后接 ab 或 abc 的字符串&lt;/td&gt;
&lt;td&gt;mab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;指定起始字符&lt;/td&gt;
&lt;td&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;+[a-z]*&lt;/td&gt;
&lt;td&gt;以至少一个数字开头，后接任意个小写字母的字符串&lt;/td&gt;
&lt;td&gt;123dsd，而 a123dsd 就不能匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;指定结束字符&lt;/td&gt;
&lt;td&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;\-[a-z]+$&lt;/td&gt;
&lt;td&gt;以 1 个数字开头后接连字符‘-’，并以至少一个小写字母结尾的字符串&lt;/td&gt;
&lt;td&gt;1-a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td n=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;接收 n 个字符&lt;/td&gt;
&lt;td&gt;&lt;span 3=&#34;&#34;&gt;abcd&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;由 abcd 中字母组成的任意长度为 3 的字符串&lt;/td&gt;
&lt;td&gt;abc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td n,=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;指定至少 n 个匹配&lt;/td&gt;
&lt;td&gt;&lt;span 3,=&#34;&#34;&gt;abcd&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;由 abcd 中字母组成的任意长度不小于 3 的字符串&lt;/td&gt;
&lt;td&gt;abaaaaa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td n,m=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;指定至少 n 个但不多于 m 个匹配&lt;/td&gt;
&lt;td&gt;&lt;span 3,5=&#34;&#34;&gt;abcd&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;由 abcd 中字母组成的任意长度不小于 3，不大于 5 的字符串&lt;/td&gt;
&lt;td&gt;aaaa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\d&lt;/td&gt;
&lt;td&gt;匹配单个数字字符，相当于 [0-9]&lt;/td&gt;
&lt;td&gt;\\d{3}(\\d)?&lt;/td&gt;
&lt;td&gt;包含 3 个或 4 个数字的字符串&lt;/td&gt;
&lt;td&gt;123，7895&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\D&lt;/td&gt;
&lt;td&gt;匹配单个非数字字符，相当于 [^0-9]&lt;/td&gt;
&lt;td&gt;\\D(\\d)*&lt;/td&gt;
&lt;td&gt;以单个非数字字符开头，后接任意个数字字符&lt;/td&gt;
&lt;td&gt;a，A345&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\w&lt;/td&gt;
&lt;td&gt;匹配单个数字、大小写字母字符，相当于 [0-9a-zA-Z]&lt;/td&gt;
&lt;td 4=&#34;&#34;&gt;\\d{3}\\w&lt;/td&gt;
&lt;td&gt;以 3 个数字字符开头的长度为 7 的数字字母字符串&lt;/td&gt;
&lt;td&gt;234abcd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\W&lt;/td&gt;
&lt;td&gt;匹配单个非数字、大小写字母字符，相当于 [^0-9a-zA-Z]&lt;/td&gt;
&lt;td 2=&#34;&#34;&gt;\\W+\\d&lt;/td&gt;
&lt;td&gt;以至少一个非数字字母字符开头，2 个数字字符结尾的字符串&lt;/td&gt;
&lt;td&gt;#29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\s&lt;/td&gt;
&lt;td&gt;匹配任意空白字符 (空格、制表符等)&lt;/td&gt;
&lt;td&gt;\\s&lt;/td&gt;
&lt;td&gt;任意空白字符&lt;/td&gt;
&lt;td&gt;一个空格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\S&lt;/td&gt;
&lt;td&gt;匹配任意非空白字符&lt;/td&gt;
&lt;td&gt;\\S&lt;/td&gt;
&lt;td&gt;任意非空白字符&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\b&lt;/td&gt;
&lt;td&gt;匹配目标字符串的边界&lt;/td&gt;
&lt;td&gt;han\\b&lt;/td&gt;
&lt;td&gt;字符串的边界指的是子串之间有空格，或者是目标字符串的结束位置&lt;/td&gt;
&lt;td&gt;hanshun&lt;strong&gt;han&lt;/strong&gt; nn &lt;strong&gt;han&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\B&lt;/td&gt;
&lt;td&gt;匹配目标字符串的非边界&lt;/td&gt;
&lt;td&gt;han\\B&lt;/td&gt;
&lt;td&gt;与 \\b 的含义相反，匹配北边界的 han&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;han&lt;/strong&gt;shunhan nnhan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;大小写区分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#大小写区分&#34;&gt;#&lt;/a&gt; 大小写区分&lt;/h3&gt;
&lt;p&gt;java 正则表达式默认区分字母大小写，如何实现不区分大小写。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(?i) abc 表示都不区分大小写&lt;/li&gt;
&lt;li&gt;a (?i) abc 表示 bc 不区分大小写&lt;/li&gt;
&lt;li&gt;a ((?i) b) c 表示只有 b 不区分大小写&lt;/li&gt;
&lt;li&gt;Pattern pat = Pattern.compile(regEx,Pattern.CASE_INSENSITIVE);&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;非捕获分组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非捕获分组&#34;&gt;#&lt;/a&gt; 非捕获分组&lt;/h2&gt;
&lt;p&gt;非捕获分组的意思是只是进行了匹配，并没有获取该分组子表达式的值，即不能通过 group (n) 等获取该分组的值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;构造形式&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(?:pattern)&lt;/td&gt;
&lt;td&gt;匹配 pattern 但不捕获该匹配式的子表达式，不存储供以后使用的匹配。该形式对于用 &amp;quot;or&amp;quot; 字符 (|) 组合模式部件的情况很有用，例如” 韩顺平 (?: 学习&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?=pattern)&lt;/td&gt;
&lt;td&gt;&amp;quot;Windows(?=95|98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?!pattern)&lt;/td&gt;
&lt;td&gt;和第二个模式取反，该模式不匹配括号内的字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;matcher类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#matcher类&#34;&gt;#&lt;/a&gt; Matcher 类&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;matches&lt;/td&gt;
&lt;td&gt;整体匹配，返回一个布尔值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;返回匹配的开始索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;end&lt;/td&gt;
&lt;td&gt;返回匹配的结束索引，对应位置的后一位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;replaceAll(oldStr)&lt;/td&gt;
&lt;td&gt;返回一个替换后的结果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;常用正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用正则表达式&#34;&gt;#&lt;/a&gt; 常用正则表达式&lt;/h2&gt;
&lt;h3 id=&#34;校验数字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#校验数字&#34;&gt;#&lt;/a&gt; 校验数字&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; 数字：^[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]*$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; n位的数字：^\d&amp;#123;n&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; 至少n位的数字：^\d&amp;#123;n,&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; m-n位的数字：^\d&amp;#123;m,n&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; 零和非零开头的数字：^(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;|[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]*)$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; 非零开头的最多带两位小数的数字：^([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]*)+(.[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;)?$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; 带&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;位小数的正数或负数：^(\-)?\d+(\.\d&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;)?$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt; 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; 有两位小数的正实数：^[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]+(.[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&amp;#123;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;)?$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; 有&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;位小数的正实数：^[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]+(.[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;)?$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt; 非零的正整数：^[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]\d*$ 或 ^([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]*)&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;$ 或 ^\+?[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]*$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; 非零的负整数：^\-[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;][]&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;*$ 或 ^-[1-9]\d*$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;13 非负整数：^\d+$ 或 ^[1-9]\d*|0$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;校验字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#校验字符&#34;&gt;#&lt;/a&gt; 校验字符&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; 汉字：^[\u4e00-\u9fa5]&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; 英文和数字：^[A-Za-z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]+$ 或 ^[A-Za-z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&amp;#123;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; 长度为&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;的所有字符：^.&amp;#123;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; 由&lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;个英文字母组成的字符串：^[A-Za-z]+$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; 由&lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;个大写英文字母组成的字符串：^[A-Z]+$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; 由&lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;个小写英文字母组成的字符串：^[a-z]+$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; 由数字和&lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;个英文字母组成的字符串：^[A-Za-z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]+$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt; 由数字、&lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&amp;#123;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&amp;#123;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt; 可以输入含有^%&amp;amp;&lt;span class=&#34;string&#34;&gt;&amp;#x27;,;=?$\&amp;quot;等字符：[^%&amp;amp;&amp;#x27;&lt;/span&gt;,;=?$\x22]+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; 禁止输入含有~的字符：[^~\x22]+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;特殊需求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#特殊需求&#34;&gt;#&lt;/a&gt; 特殊需求&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; 域名：[a-zA-Z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;][-a-zA-Z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;62&lt;/span&gt;&amp;#125;(/.[a-zA-Z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;][-a-zA-Z0-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;62&lt;/span&gt;&amp;#125;)+/.?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; InternetURL：[a-zA-z]+:&lt;span class=&#34;comment&#34;&gt;//[^\s]* 或 ^https://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;amp;=]*)?$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; 手机号码：^(&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]|&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;]|&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]|&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;])\d&amp;#123;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&amp;#125;$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; 电话号码(&lt;span class=&#34;string&#34;&gt;&amp;quot;XXX-XXXXXXX&amp;quot;&lt;/span&gt;、&lt;span class=&#34;string&#34;&gt;&amp;quot;XXXX-XXXXXXXX&amp;quot;&lt;/span&gt;、&lt;span class=&#34;string&#34;&gt;&amp;quot;XXX-XXXXXXX&amp;quot;&lt;/span&gt;、&lt;span class=&#34;string&#34;&gt;&amp;quot;XXX-XXXXXXXX&amp;quot;&lt;/span&gt;、&lt;span class=&#34;string&#34;&gt;&amp;quot;XXXXXXX&amp;quot;&lt;/span&gt;和&lt;span class=&#34;string&#34;&gt;&amp;quot;XXXXXXXX)：^(\(\d&amp;#123;3,4&amp;#125;-)|\d&amp;#123;3.4&amp;#125;-)?\d&amp;#123;7,8&amp;#125;$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;6 国内电话号码(0511-4405222、021-87888822)：\d&amp;#123;3&amp;#125;-\d&amp;#123;8&amp;#125;|\d&amp;#123;4&amp;#125;-\d&amp;#123;7&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;7 身份证号：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;		15或18位身份证：^\d&amp;#123;15&amp;#125;|\d&amp;#123;18&amp;#125;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;		15位身份证：^[1-9]\d&amp;#123;7&amp;#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&amp;#123;3&amp;#125;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;		18位身份证：^[1-9]\d&amp;#123;5&amp;#125;[1-9]\d&amp;#123;3&amp;#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&amp;#123;4&amp;#125;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;8 短身份证号码(数字、字母x结尾)：^([0-9])&amp;#123;7,18&amp;#125;(x|X)?$ 或 ^\d&amp;#123;8,18&amp;#125;|[0-9x]&amp;#123;8,18&amp;#125;|[0-9X]&amp;#123;8,18&amp;#125;?$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&amp;#123;4,15&amp;#125;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&amp;#123;5,17&amp;#125;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&amp;#123;8,10&amp;#125;$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;12 日期格式：^\d&amp;#123;4&amp;#125;-\d&amp;#123;1,2&amp;#125;-\d&amp;#123;1,2&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;15 钱的输入格式：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;16 1.有四种钱的表示形式我们可以接受:&amp;quot;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;10000.00&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot; 和 &amp;quot;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;000.00&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;, 和没有 &amp;quot;&lt;/span&gt;分&lt;span class=&#34;string&#34;&gt;&amp;quot; 的 &amp;quot;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot; 和 &amp;quot;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;000&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;：^[1-9][0-9]*$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&amp;quot;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;20 5.必须说明的是,小数点后面至少应该有1位数,所以&amp;quot;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;10.&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;是不通过的,但是 &amp;quot;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot; 和 &amp;quot;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;10.2&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot; 是通过的：^[0-9]+(.[0-9]&amp;#123;2&amp;#125;)?$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&amp;#123;1,2&amp;#125;)?$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&amp;#123;1,3&amp;#125;(,[0-9]&amp;#123;3&amp;#125;)*(.[0-9]&amp;#123;1,2&amp;#125;)?$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&amp;#123;1,3&amp;#125;(,[0-9]&amp;#123;3&amp;#125;)*)(.[0-9]&amp;#123;1,2&amp;#125;)?$ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;24 备注：这就是最终结果了,别忘了&amp;quot;&lt;/span&gt;+&lt;span class=&#34;string&#34;&gt;&amp;quot;可以用&amp;quot;&lt;/span&gt;*&lt;span class=&#34;string&#34;&gt;&amp;quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;26 中文字符的正则表达式：[\u4e00-\u9fa5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;27 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;28 空白行的正则表达式：\n\s*\r (可以用来删除空白行)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;29 HTML标记的正则表达式：&amp;lt;(\S*?)[^&amp;gt;]*&amp;gt;.*?|&amp;lt;.*? /&amp;gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;30 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;31 腾讯QQ号：[1-9][0-9]&amp;#123;4,&amp;#125; (腾讯QQ号从10000开始)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;32 中国邮政编码：[1-9]\d&amp;#123;5&amp;#125;(?!\d) (中国邮政编码为6位数字)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;33 IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;hr class=&#34;footnotes-sep&#34;&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;0-9 &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;0-9 &lt;a href=&#34;#fnref2&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <category term="java" />
        <category term="java基础" />
        <category term="java学习路线" />
        <updated>2023-10-12T10:49:32.884Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/12/java/java8%E6%96%B0%E7%89%B9%E6%80%A7-%E5%B0%9A%E7%A1%85%E8%B0%B7-92/</id>
        <title>java8新特性-尚硅谷-92</title>
        <link rel="alternate" href="http://example.com/2023/10/12/java/java8%E6%96%B0%E7%89%B9%E6%80%A7-%E5%B0%9A%E7%A1%85%E8%B0%B7-92/"/>
        <content type="html">&lt;p&gt;&lt;a class=&#34;link&#34;   href=&#34;https://www.bilibili.com/video/BV1Kb411W75N?p=666&amp;amp;vd_source=636bdfc4ce8c201bed8740cf77c11dda&#34; &gt;尚硅谷 Java 入门视频教程 &lt;i class=&#34;fa-regular fa-arrow-up-right-from-square fa-sm&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;新特性简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新特性简介&#34;&gt;#&lt;/a&gt; 新特性简介&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;速度更快，便于并行&lt;/li&gt;
&lt;li&gt;代码更少，增加了新的语法：Lambda 表达式&lt;/li&gt;
&lt;li&gt;强大的 Stream API&lt;/li&gt;
&lt;li&gt;最大化的减少空指针异常：Optional&lt;/li&gt;
&lt;li&gt;Nashorn 引擎，允许在 JVM 上运行 JS 应用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;lambda表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lambda表达式&#34;&gt;#&lt;/a&gt; Lambda 表达式&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Lambda 表达式的本质：与其他语言的 lambda 表达式不同，java 中的 lambda 表达式不是匿名函数，而是作为函数式接口的实例。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;(o1,02) -&amp;gt; Interger.compare(o1,o2)&lt;/code&gt;  为例， &lt;code&gt;-&amp;gt;&lt;/code&gt;  是 Lambda 操作符或箭头操作符，左边是形参列表，其实就是接口中的抽象方法的形参列表，右边是 lambda 体，其实就是重写的抽象方法的方法体。&lt;/p&gt;
&lt;p&gt;以前使用匿名实现类表示的现在都可以用 lambda 表达式做。&lt;/p&gt;
&lt;h2 id=&#34;语法格式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法格式&#34;&gt;#&lt;/a&gt; 语法格式&lt;/h2&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//1.无参，无返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;r2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; () -&amp;gt; System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello,world&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2.Lambda需要一个参数，但是没有返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Consumer&amp;lt;String&amp;gt; con = (String s) -&amp;gt; &amp;#123;System.out.println(s);&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//3.数据类型可以省略，因为可由编译器推断得出，称为“类型推断”,只有一个参数时可以省略小括号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Consumer&amp;lt;String&amp;gt; con = s -&amp;gt; &amp;#123;System.out.println(s);&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//4.表达式需要两个或以上的参数，多条执行语句，并且可以有返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Comparator&amp;lt;Integer&amp;gt; com = (o1,o2) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;========&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o1.compareTo(o2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//5.当lambda题只有一条语句时，return和大括号都可以省略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Comparator&amp;lt;Integer&amp;gt; com = (o1,o2) -&amp;gt; o1.compareTo(o2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;函数式接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数式接口&#34;&gt;#&lt;/a&gt; 函数式接口&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以在一个接口上使用 &lt;code&gt;@FunctionalInterface&lt;/code&gt;  注解，这样可以检测它是否为函数式接口。&lt;/p&gt;
&lt;p&gt;在 java.util.function 包下定义了 java8 丰富的函数式接口。&lt;/p&gt;
&lt;p&gt;java 不仅可以支持 OOP (面向对象编程)，还可以支持 OOF (面向函数编程)。&lt;/p&gt;
&lt;h2 id=&#34;核心函数式接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#核心函数式接口&#34;&gt;#&lt;/a&gt; 核心函数式接口&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;接口&lt;/th&gt;
&lt;th&gt;参数类型&lt;/th&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Consumer&lt;T&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;对类型为 T 的对象应用操作&lt;/td&gt;
&lt;td&gt;void accept(T t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Supplier&lt;T&gt;&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;返回类型为 T 的对象&lt;/td&gt;
&lt;td&gt;T get()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Function&amp;lt;T,R&amp;gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;对类型为 T 的对象应用操作，并返回结果为 R 的对象&lt;/td&gt;
&lt;td&gt;R apply(T t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Predicate&lt;T&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;确定类型为 T 的对象是否满足某种约束，并返回 boolean 值&lt;/td&gt;
&lt;td&gt;boolean test(T t)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;方法引用和构造器引用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法引用和构造器引用&#34;&gt;#&lt;/a&gt; 方法引用和构造器引用&lt;/h2&gt;
&lt;p&gt;当要传递给 lambda 体的操作，已经有实现的方法了，可以使用方法引用。方法引用就是 lambda 表达式，通过方法的名字来指向一个方法，可以认为是 lambda 表达式的一个语法糖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的要求是实现接口的抽象对象方法的参数列表和返回值类，必须与方法引用的方法的参数列表和返回值类型一致。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用格式： &lt;code&gt;类或对象 :: 方法名&lt;/code&gt; 。具体有三种情况，对象调用非静态方法，类调用静态方法，类调用非静态方法。&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Consumer中的void accept(T t)和PrintStream中的void println(T t)的参数列表和返回值类型一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Consumer&amp;lt;String&amp;gt; con1 = s -&amp;gt; System.out.println(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;con1.accept(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello,world&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//使用方法引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;PrintStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; System.out;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Consumer&amp;lt;String&amp;gt; con2 = ps::println;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;con2.accept(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello,beijing&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//类::实例方法,Comparator中的int compare(T o1,T o2)和String中的int o1.compareTo(o2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//前者比后者多一个参数，实际上是使用该参数调用实例方法，因为类是无法调用实例方法的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Comparator&amp;lt;String&amp;gt; com = (o1,o2) -&amp;gt; o1.compareTo(o2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Comparator&amp;lt;String&amp;gt; com2 = String :: compareTo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//构造器引用与方法引用类似&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Supplier&amp;lt;Employee&amp;gt; sup = () -&amp;gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Employee&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Supplier&amp;lt;Employee&amp;gt; sup1 = Employee::&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;stream-api&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-api&#34;&gt;#&lt;/a&gt; Stream API&lt;/h1&gt;
&lt;p&gt;Stream API 把真正的函数式编程风格引入到 java 中。使用 Stream API 可以对集合数据进行操作，可以执行非常复杂的查找、过滤和映射数据等操作，这操作类似 SQL 执行的数据库查询。&lt;/p&gt;
&lt;p&gt;现在数据库源有 MongDB，Redis 等，而这些 NoSQL 的数据就需要 java 层面去处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stream 自身不存储元素。Stream 不会改变源对象，相反，他们会返回一个持有结果的新 Stream。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stream 操作是延迟执行的，只有在执行终止操作，才执行中间操作链，并产生结果。执行终止操作后流不能再复用，若想继续操作需要重新创建新的 Stream。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Optional&lt;T&gt;类是一个容器类，可以保存类型 T 的值，代表这个值存在，或者仅仅保存 null，表示这个值不存在。是 java8 中用于解决空指针异常引入的类。&lt;/p&gt;
&lt;h2 id=&#34;创建stream流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建stream流&#34;&gt;#&lt;/a&gt; 创建 Stream 流&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;集合可以通过 stream () 方法返回一个顺序流，通过 parallelStream () 方法返回一个并行流。&lt;/li&gt;
&lt;li&gt;数组可以通过 stream () 方法返回一个流。&lt;/li&gt;
&lt;li&gt;通过 Stream 的 of () 方法，在方法内填入多个参数形成容器。&lt;/li&gt;
&lt;li&gt;使用 iterate () 迭代方法和 generate () 生成方法创建无限流，主要用于生成数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Java&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Employee&amp;gt; employees = EmployeeData.getEmployees();&lt;span class=&#34;comment&#34;&gt;//获取一个集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//default Stream&amp;lt;E&amp;gt; stream():返回一个顺序流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;Employee&amp;gt; stream = employees.stream();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//填入参数形成容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//迭代方法，初始值为0，每次迭代加2，limit()限制输出个数，并在forEach()中指定输出位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream.iterate(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,t -&amp;gt; t+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;).limit(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream.generate(Math::random).limit(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)forEach(System.out::println);&lt;span class=&#34;comment&#34;&gt;//生成10个随机数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;中间操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#中间操作&#34;&gt;#&lt;/a&gt; 中间操作&lt;/h2&gt;
&lt;h3 id=&#34;筛选与切片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#筛选与切片&#34;&gt;#&lt;/a&gt; 筛选与切片&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fliter(Predicate p)&lt;/td&gt;
&lt;td&gt;接收 Lambda，从流中排除某些元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;distinct()&lt;/td&gt;
&lt;td&gt;筛选，通过流所生成元素的 hashCode () 和 equals () 去除重复元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;limit(long maxSize)&lt;/td&gt;
&lt;td&gt;截断流，使其元素不超过给定数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip(long n)&lt;/td&gt;
&lt;td&gt;跳过元素，返回一个忽略前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;映射与排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#映射与排序&#34;&gt;#&lt;/a&gt; 映射与排序&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;map(Function f)&lt;/td&gt;
&lt;td&gt;接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mapToDouble(ToDoubleFunction f)&lt;/td&gt;
&lt;td&gt;接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个 DoubleStream。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mapToint(TointFunction f)&lt;/td&gt;
&lt;td&gt;接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个 IntStream。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mapToLong(ToLongFunction f)&lt;/td&gt;
&lt;td&gt;接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个 LongStream。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flatMap(Function f)&lt;/td&gt;
&lt;td&gt;接收一个函数作为参数，将流中的每个值都转换成一个流，然后把所有流连接成一个流。例如将字符串数组的每个元素拆成字符，再组合成一个字符数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sorted(Comparator com)&lt;/td&gt;
&lt;td&gt;产生一个新流，如果没有传入比较器，则按自然顺序排序，否则按照比较器顺序排序。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;终止&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终止&#34;&gt;#&lt;/a&gt; 终止&lt;/h3&gt;
&lt;p&gt;map 和 reduce 的连接通常被称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。&lt;/p&gt;
&lt;p&gt;Collect 接口中方法的实现决定了如果对流执行收集的操作，如收集到 List，Set 和 Map。另外 Collects 实用类提供了很多静态方法，可以方便地创建常见收集器实例。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;allMatch(Predicate p)&lt;/td&gt;
&lt;td&gt;检查是否匹配所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;anyMatch(Predicate p)&lt;/td&gt;
&lt;td&gt;检查是否至少匹配一个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;noneMatch(Predicate p)&lt;/td&gt;
&lt;td&gt;检查是否没有匹配所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;findFirst()&lt;/td&gt;
&lt;td&gt;返回第一个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;findAny()&lt;/td&gt;
&lt;td&gt;返回当前流中所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;count()&lt;/td&gt;
&lt;td&gt;返回流中元素的总个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max(Comparator c)&lt;/td&gt;
&lt;td&gt;返回流中元素的最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min(Comparator c)&lt;/td&gt;
&lt;td&gt;返回流中的最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forEach(Consumer c)&lt;/td&gt;
&lt;td&gt;内部迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reduce(T iden,BinaryOperator b)&lt;/td&gt;
&lt;td&gt;可以将流中元素反复结合起来，得到一个值，返回 T。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reduce(BinaryOperator b)&lt;/td&gt;
&lt;td&gt;可以将流中元素反复结合起来，得到一个值，返回 Optional&lt;T&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;collect(Collector c)&lt;/td&gt;
&lt;td&gt;将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
        <category term="java" />
        <category term="java基础" />
        <category term="java学习路线" />
        <updated>2023-10-12T10:49:32.881Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/10/12/java/HeadFirst%20Java-Kathy%20Sierra/</id>
        <title>HeadFirst Java-Kathy Sierra-90</title>
        <link rel="alternate" href="http://example.com/2023/10/12/java/HeadFirst%20Java-Kathy%20Sierra/"/>
        <content type="html">&lt;ol&gt;
&lt;li&gt;当某个对象被 java 虚拟机察觉不会被使用到，该对象就会被标记成可回收的。如果内存开始不足，垃圾收集器就会启动来清理垃圾、回收空间，让空间能够再次被利用。&lt;/li&gt;
&lt;li&gt;任何变量只要加上 public、static 和 final，基本上都会变成全局变量取用的常数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事实上没有对象变量这样的东西存在，只要引用到对象的变量，对象引用变量保存的是存取对象的方式。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数组是个对象，不管里面放的是不是 primitive 主数据类型。&lt;/li&gt;
&lt;li&gt;java 是通过值传递的，也就是通过拷贝传递，方法无法改变调用方所传入的参数。&lt;/li&gt;
&lt;li&gt;在创建一个类之前我们需要写出下面三种东西：伪码、测试码、真实码。&lt;/li&gt;
&lt;li&gt;标准版的扩展都以 javax 作为包名称的开头。&lt;/li&gt;
&lt;li&gt;import 和 C 的 include 并不相同，运用 import 只是帮你省下每个类前面的包名称而已。程序不会英文用来 import 而变大或变慢。&lt;/li&gt;
&lt;li&gt;抽象类的产生源于有些类不应该被初始化，比如动物类应该是什么？&lt;/li&gt;
&lt;li&gt;任何从 &lt;code&gt;ArrayList&amp;lt;Object&amp;gt;&lt;/code&gt;  取出的东西都会被当作 Object 类型的引用而不管它原来是什么。而且编译器是根据引用类型来判断哪些方法可以调用，而不是根据 Object 实际的类型。&lt;/li&gt;
&lt;li&gt;多重继承会产生 “致命方块 &amp;quot; 问题，即两个及以上的直接父类拥有相同的方法，子类不知道应该调用哪个方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口解决致命方块的方法很简单：把全部方法设为抽象的，如此一来，子类就得实现这个此方法，因此 java 虚拟机在执行期间就不会搞不清楚要用哪一个继承版本。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 java 中，程序员会在乎内存中的两个区域：对象的生存空间堆 (heap) 和方法调用及变量的生存空间 (stack)。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不管对象是否声明或创建，如果局部变量是个对该对象的引用，只有变量本身会放在栈上，对象本身只会存在于堆上。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;实例变量声明在类中方法之外的地方，局部变量声明在方法或方法的参数上。&lt;/li&gt;
&lt;li&gt;构造函数在执行的时候，第一件事是去执行它的父类的构造函数，这会连锁反应到 Object 这个类为止。因为如果我们没有调用 super ()，编译器会帮我们加上 super () 的调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基本数据类型有默认值，而包装类则没有默认值。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;编译器不会注意 RuntimeException 类型的异常，它所关心的是称为检查异常的异常。&lt;/li&gt;
&lt;li&gt;内部类可以使用外部所有的方法和变量，就算是私有的也一样可以使用。&lt;/li&gt;
&lt;li&gt;如果某实例变量不能或不应该被实例化的，因为有些变量要在执行期当场创建才有意义。这个时候需要把它标记为 transient (瞬时) 的，transient 的引用变量会以 null 返回，而不管存储当时它的值是什么。恢复时会被赋值为 null 的对象引用或基本数据类型的默认值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个不可序列化的父类，其子类可以是可序列化的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;解序列化时新的对象会被配置到堆上，但构造函数不会执行，不然会抹去对象的状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;静态变量不会被序列化，因为所有对象都是共享同一份静态变量值。当对象还原时，静态变量会恢复成类中原本的样子，而不是存储时的样子。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将 FileWriter 链接到 BufferedWriter 可以提升效率，因为 BufferedWriter 可以暂存一堆数据，然后到满的时候再实际写入键盘，这样可以减少对磁盘的操作。&lt;/li&gt;
&lt;li&gt;File 对象代表文件的路径，而不是文件本身。&lt;/li&gt;
&lt;li&gt;对象的状态并非只能用序列化来存储，也可以使用 transient 修饰存储。&lt;/li&gt;
&lt;li&gt;java 的好处就在于大部分的输入 / 输出工作并不在乎链接串流的上游实际是什么。也就是说可以使用 BufferedReader 而不管是来自串流来自文件或 socket。&lt;/li&gt;
&lt;li&gt;调度器在不同的 java 虚拟机上有不同的做法，就算是同一个程序在同一台机器上运行也会有不同的遭遇。&lt;/li&gt;
&lt;li&gt;对泛型来说，extends 这个关键词代表 &amp;quot;是一个…&amp;quot;，且适用于类和接口。&lt;/li&gt;
&lt;li&gt;hashcode 是用来缩小寻找成本的，但最后还是要用 equals () 才能认定是否真的找到了相同的项目。如果两个对象有相同的 hashcode 值，它们不一定是相等的。但若两个对象相等，则 hashcode 值一定要相等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数组的类型是运行时检查的，但集合的类型检查只会发生在编译期间。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;JAR 就是 JavaARchive，这种文件是个 pkzip 格式的文件，它能让你的一组类文件包装起来，所以交付时只需一个 JAR 文件。&lt;/li&gt;
&lt;li&gt;JWS (Java Web Start) 程序由两个部分组成：可执行的 JAR 文件和.jnlp 文件。.jhlp 文件是用来描述 JWS 应用程序的 XML 文件，它有 target 指定 JAR 的名称和位置，以及带有 main () 的类名称。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="java" />
        <category term="书籍" />
        <category term="java基础" />
        <category term="java学习路线" />
        <updated>2023-10-12T10:49:32.879Z</updated>
    </entry>
</feed>
