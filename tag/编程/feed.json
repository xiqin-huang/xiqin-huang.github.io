{
    "version": "https://jsonfeed.org/version/1",
    "title": "西芹的小站 • All posts by \"编程\" tag",
    "description": "",
    "home_page_url": "https://xiqin-huang.github.io",
    "items": [
        {
            "id": "https://xiqin-huang.github.io/2023/10/12/bian-cheng/lan-qiao-bei-guo-sai-ti-mu/",
            "url": "https://xiqin-huang.github.io/2023/10/12/bian-cheng/lan-qiao-bei-guo-sai-ti-mu/",
            "title": "蓝桥杯国赛题目",
            "date_published": "2023-10-12T10:49:32.922Z",
            "content_html": "<p><a href=\"https://blog.csdn.net/weixin_43919497/article/details/110011722?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162261625316780264075413%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=162261625316780264075413&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-110011722.pc_search_result_before_js&amp;utm_term=%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AFpython%E7%BB%84%E5%9B%BD%E8%B5%9B%E7%AD%94%E6%A1%88&amp;spm=1018.2226.3001.4187\">CSDN 题解</a></p>\n<ol>\n<li>美丽的 2<br>\n 遍历即可，然后使用 str 和 count 函数就可以查找数字是否含有 2</li>\n<li>合数个数<br>\n使用埃氏算法，就可以找到所有合数，然后使用 count 计算个数即可<br>\n使用埃氏算法要小心一点，它是用于判断 n 以内的素数的，所以要注意是否需要加一。</li>\n<li>阶乘约数<br>\n使用唯一分解定理：<br>\n一个大于 1 的正整数 N，如果它的标准分解式为 N=p1a1+p2a2+…+pnan，那么它的正因数为（a1+1)(a2+1)…(an+1),<br>\n 其中 pi 为素数（1 不为素数）<br>\n我们首先将 2 到 100 中含有的素数找出来，然后存储在字典中，设置值为 1，然后由于 100 的阶乘太大了，我们从 2 开始到 100，分别用素数去尝试是否能够整除，可以的话就将字典对应的值加一，然后遍历字典的值，乘起来就是答案了。</li>\n<li>本质上升序列<br>\n我们使用动态规划求解该题，后面开始遍历<br>\n我们先将字符串翻转，使用 nums 记录以该字母开头的所有组合，然后我们遍历数组，如果是‘z’的话，将 nums [-1]=1，否则我们 nums [idx]=sum (nums [idx+1:]+1, 意思就是与该字母后面的所有有效的字母开头进行组合，加一是因为自己一个也可以作为一个序列。<br>\n最后我们 sum（nums）即得答案</li>\n<li>玩具蛇<br>\n使用深度优先遍历，设定 dfs 函数和 VIS 矩阵判断该点是否被访问过。如果被访问过就直接返回，没有则先判断长度是否已经足够，是的话直接计数器加一，返回，否则将该位置的访问位置置为 1，然后再向四个位置进行深度优先访问，全部完成后再将 VIS 矩阵对应位置置为 0（这一步很关键）。而且要注意在 Python 的子函数中加入 global 关键字修饰 ans 和 VIS 矩阵 global ans,vis; 然后遍历每个起点位置进行深度遍历即可。</li>\n<li>天干地支<br>\n使用数组存储天干和地支，推出第 0 个元素是什么后，然后天干使用与 10 取余，地支与 12 取余即可，然后使用该索引即可</li>\n<li>重复字符串<br>\n无法重复的情况只有一种：当字符串长度无法被 K 整除时。此时我们返回 - 1，其他情况我们直接根据 K 将其分组，然后在对应位置的统计元素个数，然后将其他不相同的元素改为出现次数最多的元素。使用这种贪心算法，我们就可以得到答案了。但是要注意 k=1 的时候直接将元素个数减去出现最多的元素出现个数即可。</li>\n<li>答疑<br>\n看上去很麻烦，但其实，只要存储（离开 - 进入，发信息 - 进入）两个信息，然后使用贪心算法即可。</li>\n<li>补给<br>\n不会</li>\n<li>蓝跳跳<br>\n不会</li>\n</ol>\n",
            "tags": [
                "Python",
                "编程",
                "算法"
            ]
        },
        {
            "id": "https://xiqin-huang.github.io/2023/10/12/bian-cheng/suan-fa-chang-yong-ji-qiao/",
            "url": "https://xiqin-huang.github.io/2023/10/12/bian-cheng/suan-fa-chang-yong-ji-qiao/",
            "title": "算法常用技巧",
            "date_published": "2023-10-12T10:49:32.918Z",
            "content_html": "<h1 id=\"数学\"><a class=\"markdownIt-Anchor\" href=\"#数学\">#</a> 数学</h1>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">等差数列求和：Sn=(a1+an)*n/2;Sn=n*a1+d*(n-1)*n/2\n等比数列求和：Sn=a1*(1-qn)/(1-q);Sn=(a1-an*q)/(1-q)\n组合数学：A(n,m)=(n!)/(n-m)!;C(n,m)=A(n,m)/m!=(n!)/((n-m)!*m!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>唯一分解定理</strong></p>\n<p>一个大于 1 的正整数 N，如果它的标准分解式为 N=p1a1+p2a2+…+pnan，那么它的正因数为（a1+1)(a2+1)…(an+1),<br>\n 其中 pi 为素数（1 不为素数）</p>\n<p><strong>斐波那契数公式</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    sqrt5 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token operator\">**</span><span class=\"token number\">0.5</span>\n    fibN <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> sqrt5<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> n <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> sqrt5<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> n\n<span class=\"token keyword\">return</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>fibN <span class=\"token operator\">/</span> sqrt5<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"做题小技巧\"><a class=\"markdownIt-Anchor\" href=\"#做题小技巧\">#</a> 做题小技巧</h1>\n<p>综合利用哈希表和前缀和可以解决连续子数组的问题。</p>\n<p>有时候通过将问题的值进行变换，可以将问题转化为一个我们已知的问题或较为简单的问题，例如将 0 替换成 - 1，这样就可以使用通过前缀和的知识点来解决子数组中有相同 0 和 1 的问题。</p>\n<p>子函数内使用 global 全局函数关键字</p>\n<p><strong>遍历的小技巧</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> w <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">)</span>：i表示索引，w为实际从server中取出来的值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"常用函数\"><a class=\"markdownIt-Anchor\" href=\"#常用函数\">#</a> 常用函数</h1>\n<h2 id=\"集合\"><a class=\"markdownIt-Anchor\" href=\"#集合\">#</a> 集合</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set1=set()</td>\n<td>创建集合</td>\n</tr>\n<tr>\n<td>set1.add(6)</td>\n<td>增加元素</td>\n</tr>\n<tr>\n<td>set1.remove(5)</td>\n<td>删除元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>find(sub)</td>\n<td>检测 sub 是否存在于字符串中，有则返回索引值，无则返回 - 1</td>\n</tr>\n<tr>\n<td>count(sub)</td>\n<td>判断 sub 在字符串中出现的次数</td>\n</tr>\n<tr>\n<td>isalnum()</td>\n<td>如果字符串至少有一个字符并且所有的字符都是字母或数字则返回 True，否则返回 False。</td>\n</tr>\n<tr>\n<td>isalpha()</td>\n<td>如果字符串至少有一个字符而且所有字符都是字母则返回 True，否则返回 false</td>\n</tr>\n<tr>\n<td>isdigit()</td>\n<td>如果字符串只包含数字则返回 True，否则返回 false</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>以字符串为分隔符，插入到 sub 中所有的字符之间 n=“”.join (n)</td>\n</tr>\n<tr>\n<td>replace(old,new[,count])</td>\n<td>把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次</td>\n</tr>\n<tr>\n<td>split(sep=None,maxsplit=-1)</td>\n<td>分隔字符串，默认按照空格作为分隔符切片字符串</td>\n</tr>\n<tr>\n<td>splitlines()</td>\n<td>按照 “\\n” 分隔，返回一个包含各行作为元素的列表</td>\n</tr>\n<tr>\n<td>strip([chars])</td>\n<td>删除字符串前边和后边的所有空格，chars 参数可以定制删除的字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>copy.deepcopy()</td>\n<td>深复制，真正的新建一个数组进行赋值，而不是传引用。使用前需要 import copy。</td>\n</tr>\n<tr>\n<td>clear()</td>\n<td>清空列表中的元素，留下一个空列表。</td>\n</tr>\n<tr>\n<td>append()</td>\n<td>向列表添加元素</td>\n</tr>\n<tr>\n<td>extend()</td>\n<td>使用一个列表来拓展一个列表</td>\n</tr>\n<tr>\n<td>remove（sub）</td>\n<td>删除 sub 元素</td>\n</tr>\n<tr>\n<td>insert（num,index）</td>\n<td>在 index 处插入一个 num</td>\n</tr>\n<tr>\n<td>pop（index）</td>\n<td>弹出 index 处元素</td>\n</tr>\n<tr>\n<td>count（）</td>\n<td>计算出现次数</td>\n</tr>\n<tr>\n<td>index（）</td>\n<td>返回元素位置</td>\n</tr>\n<tr>\n<td>reverse（）</td>\n<td>翻转列表</td>\n</tr>\n<tr>\n<td>sort（）</td>\n<td>排序</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"math库\"><a class=\"markdownIt-Anchor\" href=\"#math库\">#</a> Math 库</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>math.pow(x, y)</td>\n<td>返回 x 的 y 次方</td>\n</tr>\n<tr>\n<td>math.ceil(x)</td>\n<td>返回不小于 x 的整数</td>\n</tr>\n<tr>\n<td>math.fabs(x)</td>\n<td>返回 x 的绝对值</td>\n</tr>\n<tr>\n<td>math.floor(x)</td>\n<td>返回不大于 x 的整数</td>\n</tr>\n<tr>\n<td>math.fsum([x, y, …])</td>\n<td>返回无损精度的和</td>\n</tr>\n<tr>\n<td>math.sqrt(x)</td>\n<td>返回 x 的平方根</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\">#</a> 其他</h1>\n<h2 id=\"datatime\"><a class=\"markdownIt-Anchor\" href=\"#datatime\">#</a> datatime</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">date<span class=\"token punctuation\">.</span>isocalendar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">#返回结果是三元组(年号，第几周，第几天)</span>\ndate<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%j\"</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">#计算输入的日期是一年中的第几天</span>\nend<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>year<span class=\"token operator\">=</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span>month<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndela<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> start<span class=\"token punctuation\">.</span>day<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> start<span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#月初或周一</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"优先队列\"><a class=\"markdownIt-Anchor\" href=\"#优先队列\">#</a> 优先队列</h2>\n<p>优先队列是按照递增进行排列的，弹出的数据是最小的元素，如果想让其递减的排列，可以在前面乘一个 - 1.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq     <span class=\"token operator\">%</span>导入库函数\nheapq<span class=\"token punctuation\">.</span>heapify<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>     <span class=\"token operator\">%</span>将数组转化为优先队列\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>     <span class=\"token operator\">%</span>往优先队列中插入元素\nnum<span class=\"token operator\">=</span>heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>     <span class=\"token operator\">%</span>从优先队列中取出元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"类的声明\"><a class=\"markdownIt-Anchor\" href=\"#类的声明\">#</a> 类的声明</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Potato</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#声明类名</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#声明构造方法，self用于在类中传递各种属性</span>\n          self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n    <span class=\"token keyword\">def</span> <span class=\"token function\">kick</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫%s。\"</span><span class=\"token operator\">%</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Python",
                "编程",
                "算法"
            ]
        }
    ]
}